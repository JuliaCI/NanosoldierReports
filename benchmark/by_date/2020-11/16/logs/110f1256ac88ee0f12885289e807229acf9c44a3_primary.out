cset: moving following pidspec: 19535
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.950206476 seconds)
loading group "shootout"... done (took 1.191067154 seconds)
loading group "string"... done (took 0.684008453 seconds)
loading group "linalg"... done (took 8.672682417 seconds)
loading group "parallel"... done (took 0.169469748 seconds)
loading group "find"... done (took 2.888547012 seconds)
loading group "tuple"... done (took 2.08581874 seconds)
loading group "union"... done (took 15.468746284 seconds)
loading group "dates"... done (took 1.488980746 seconds)
loading group "micro"... done (took 0.222082273 seconds)
loading group "simd"... done (took 4.840346143 seconds)
loading group "io"... done (took 1.083407125 seconds)
loading group "random"... done (took 9.660157174 seconds)
loading group "problem"... done (took 1.53145709 seconds)
loading group "array"... done (took 25.390095343 seconds)
loading group "misc"... done (took 1.89344739 seconds)
loading group "scalar"... done (took 43.556451031 seconds)
loading group "sort"... done (took 3.307384879 seconds)
loading group "sparse"... done (took 12.772413172 seconds)
loading group "collection"... done (took 18.486513603 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.534045359 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.126629234 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.130458045 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124398236 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184145248 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122371475 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129554057 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085119861 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.847691437 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.136892523 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115613069 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.436249606 seconds)
done (took 5.382026098 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.168921036 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092874379 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083412333 seconds)
  done (took 1.358388235 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071782359 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06129531 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067054552 seconds)
  done (took 1.382353478 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065121342 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134177146 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066479309 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066548847 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.069773148 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066055275 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067020234 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067501447 seconds)
  done (took 1.723818175 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07157921 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067907331 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067062518 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068856376 seconds)
  done (took 1.461675058 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065094409 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122610422 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066267116 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065573409 seconds)
  done (took 1.502750261 seconds)
done (took 8.862871427 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138946191 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.824312735 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.754885602 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.125549849 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.251304305 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.448421253 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123147515 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182701008 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088790651 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075142404 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121230718 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078241058 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.448946531 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.402998562 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072628325 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.168168757 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.651173475 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087053158 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.13178797 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.474275733 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073908048 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087915328 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084851433 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071564578 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.347782573 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154051194 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.672155399 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099651332 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070409028 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096167394 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.07083246 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078310529 seconds)
  done (took 10.775459552 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09279938 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.089883852 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069462128 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125254706 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095773477 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071737177 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076973288 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068988497 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091181447 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126227074 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092299796 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.100627777 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068422012 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070390521 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.081231992 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.199197157 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080199312 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081366361 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068788106 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082218184 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107853121 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.08059676 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080086606 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080187711 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132280322 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173145123 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096919735 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098294918 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068544184 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080599026 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.12001793 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.127642829 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067281437 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066287228 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121933974 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097237886 seconds)
  done (took 4.667927194 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.893180833 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095672218 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082943325 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074236206 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10561249 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113498121 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120819466 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122108191 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099801663 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068355434 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.150938941 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.645174093 seconds)
    (12/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.097470749 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.163551178 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070786121 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119673939 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065741237 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.357942677 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.057040625 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069689682 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067835911 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070393447 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069505444 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111679397 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066676312 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174442038 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.580345127 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070095441 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068919787 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096551341 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06842583 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138963118 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091872508 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069767328 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.547414507 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065471993 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063915485 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.08868271 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091617603 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.175877662 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068210298 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078977245 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066670252 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108994229 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079706051 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.49284318 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071532603 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.566577657 seconds)
    (48/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.086792055 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229063623 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074957878 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074651619 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.103195818 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06562044 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069005892 seconds)
    (55/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06597767 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.862045882 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125389504 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067889895 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276537418 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069993966 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069924638 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070642727 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101848265 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068913424 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07019886 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075620681 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100727153 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.797200641 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089241321 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098300645 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068213939 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.400954676 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073803143 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069018249 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069254344 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083643197 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110711396 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066246189 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066663278 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107218112 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089459538 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08905346 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069849723 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066714965 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06617051 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321350664 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.164355875 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066457825 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067736664 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.479166932 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063675321 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065697431 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067467061 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.08899291 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066227103 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063111375 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064047964 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097624004 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066177729 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.451193908 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067999165 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.463373397 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071386852 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10819647 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121517476 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070143811 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.097336685 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068493866 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067182954 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075153211 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067440513 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065918028 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070828008 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067188571 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067942311 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070400552 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06987493 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069126494 seconds)
  done (took 22.595285454 seconds)
done (took 40.118914374 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312359741 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080336019 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080969493 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080851145 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080678953 seconds)
  done (took 1.869760002 seconds)
done (took 3.194535941 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132233047 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075527234 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064518589 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.102401912 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.07005951 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.10380881 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.11046703 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106941698 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070604416 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070196167 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070370426 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104758895 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107743573 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070615716 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.10063716 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.105931525 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.071191363 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068516357 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070478613 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069972787 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070185356 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066264302 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.07034156 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070175516 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101235748 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070445061 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065945379 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101239154 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070342759 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100733684 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.07082386 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070494652 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070435417 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.104230565 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.07075194 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101519277 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066127021 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070311488 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.07095991 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070370459 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070400333 seconds)
  done (took 4.648544755 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071586429 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081925646 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085431453 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063276071 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07366681 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083834468 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063851854 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083622222 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089711191 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08400374 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084507685 seconds)
  done (took 2.144556732 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07043532 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083820749 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089023433 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063425728 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074694211 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084727341 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06364118 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084458813 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087550882 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085470099 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085227712 seconds)
  done (took 2.134158208 seconds)
done (took 10.179924518 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.09648143 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065553609 seconds)
  done (took 1.408493713 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223236474 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.62352972 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.279783759 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093002519 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072071542 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086789243 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201465687 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067027828 seconds)
  done (took 8.079066274 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.101238669 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069140335 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.07413409 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071546004 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070057953 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071190205 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06941614 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069479948 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069809495 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069846933 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069598277 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069983292 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071579923 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071208129 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069997749 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069324537 seconds)
  done (took 2.519914875 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10509705 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070236762 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101124297 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063519754 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074014229 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064585187 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.074241044 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075019352 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072065524 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072870425 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074316586 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072765443 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072743393 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073359948 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074968284 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074434227 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074724519 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072516597 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074220367 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075037042 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.07403953 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075030561 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075586331 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072606143 seconds)
  done (took 3.187413775 seconds)
done (took 16.458424818 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174942496 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076238375 seconds)
  done (took 1.507192306 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067787691 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068409392 seconds)
  done (took 1.408926412 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072867119 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060849701 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079272095 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072419384 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06329851 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062422951 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079101631 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063107455 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062497769 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063047827 seconds)
  done (took 1.951679846 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062669756 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06870599 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067343156 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065111556 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068519646 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063850178 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066676417 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064515336 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070674734 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063634638 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067929889 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085436418 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067351328 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086369784 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067050106 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.067874101 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069728655 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066961826 seconds)
  done (took 2.514442827 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062841815 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063431851 seconds)
  done (took 1.408495738 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066023632 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063786364 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065357994 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065585794 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063680753 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062569023 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063502818 seconds)
  done (took 1.720903055 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.41862009 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121854945 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.343969731 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070361155 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078626184 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259506479 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064789169 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070075285 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069782644 seconds)
  done (took 2.813758203 seconds)
done (took 14.610258292 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08186304 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180851546 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087325074 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.406499486 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091294763 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068907819 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11422965 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177598161 seconds)
done (took 2.5078634 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.213898702 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.24144086 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.394750784 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125562087 seconds)
  done (took 3.048142419 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336564445 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078172022 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076987812 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068720128 seconds)
  done (took 1.854610687 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064981165 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071750056 seconds)
  done (took 1.426901527 seconds)
done (took 7.84031818 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072198058 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061769796 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.096484893 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.063489622 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06449542 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.063575676 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062892509 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.073130995 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064161988 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062606535 seconds)
    (11/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063243178 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.065782111 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.065791296 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065915852 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065917794 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064206357 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064271366 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.065073401 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065753935 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066016384 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06544186 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06479956 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063194882 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064138044 seconds)
  done (took 2.908885181 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079887267 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065612655 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066475611 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066511193 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068102666 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068551377 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06821576 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067462133 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068805462 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066721805 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068454048 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069081107 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066788277 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068839716 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066703079 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06894303 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068442311 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0668217 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066733007 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069340129 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068382357 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067240748 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069165085 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068337439 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068995217 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06876464 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067305137 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06847076 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069004009 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068584669 seconds)
  done (took 3.350658661 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066348497 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060492141 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061932719 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070459205 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060788639 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061853858 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062056225 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061078126 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062028097 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063353987 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.06201291 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061669334 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062664039 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061420031 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061881004 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061907332 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066161304 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080897919 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061279058 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061893272 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065788668 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.06193261 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.06189825 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06168494 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062433225 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062053793 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061227034 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061846197 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060553344 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061091605 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060125834 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064110188 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065592703 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061074536 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071018178 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066753282 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062028424 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065630843 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063258694 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061526192 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061499594 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061756586 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061819379 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.06159343 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072172813 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062207799 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062987832 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062824434 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062122703 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061934652 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061457047 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063646562 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069833883 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063354098 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061465306 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062523146 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061647472 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061918925 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061941724 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061508809 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061133599 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065396397 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063656755 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062324326 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081286612 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06326992 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071899723 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061466003 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062517927 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065287897 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.06198775 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079063702 seconds)
  done (took 5.894259107 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072335564 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072095941 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.080135015 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071347792 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066213988 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062730264 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066698717 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063269564 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072458369 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067164284 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062755198 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066449525 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07246263 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06747403 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063741693 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.0723074 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067105779 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06614602 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063255851 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06723216 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064403782 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067086139 seconds)
  done (took 2.816320007 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136663645 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066421169 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105784241 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074387588 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068463987 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074815031 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066129952 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065799365 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066297709 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067059678 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068085713 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068105237 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070401654 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068287415 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068470382 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067998469 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068417586 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068019146 seconds)
  done (took 2.646214618 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076602706 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066282611 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089572486 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06623125 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067830876 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067556549 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071450311 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072032587 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067148287 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067676035 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071610677 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067143284 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067181129 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067511344 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066780029 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067353997 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066763454 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067573887 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072011692 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071256349 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071454722 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071538823 seconds)
  done (took 2.851968187 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076626293 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064885196 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080676005 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067629121 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061887837 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062087441 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067569512 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066598179 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.06726039 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066447982 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066729651 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061715102 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067982494 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067005663 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068530779 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066962759 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066366906 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06725682 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066145314 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062030694 seconds)
  done (took 2.655358305 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086341005 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063287877 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063396127 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082345786 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063365178 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063067499 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082134146 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062658141 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062747541 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084444803 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063286892 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06331377 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082235451 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083548641 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064461778 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084514952 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084204446 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084184159 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064549134 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06470074 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086303285 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065268667 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084299987 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064796204 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06488387 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064675383 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064894429 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084218117 seconds)
  done (took 3.346173805 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064596807 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064324616 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065120871 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.06542585 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064967746 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065528986 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065528023 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066096755 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065635174 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065302351 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06546599 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065139635 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068270119 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065097639 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065313039 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065198247 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065457015 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065656194 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065735607 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066213699 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065411205 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065474196 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065018898 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066286942 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065981975 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065461807 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065198377 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065500588 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064909028 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065125265 seconds)
  done (took 3.28247556 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073325946 seconds)
    (2/2) benchmarking "in"...
    done (took 0.07106669 seconds)
  done (took 1.463468491 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062528828 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077148864 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060136343 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073214808 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070748785 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065551383 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070716804 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070346515 seconds)
  done (took 1.863580326 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066648696 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090895708 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064377716 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064108956 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066689791 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.135312537 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076029568 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075000678 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077579211 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066059641 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064508545 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076486015 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06314202 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076612188 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064963446 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072468463 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070557844 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080765106 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076531885 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062317108 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076621026 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064248399 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062539256 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064697174 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063446318 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070862032 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079069892 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075763412 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072021564 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06169598 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082646609 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062745962 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063326095 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072797866 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067290869 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062680597 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09994424 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063767367 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068097074 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062325707 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075391797 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083672993 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076898694 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080819752 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064485245 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065035339 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062075747 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064454953 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065931847 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072565506 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.0626903 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069820512 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062553983 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064371022 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073171308 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062959274 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067914611 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072374573 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076364273 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073155554 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072000223 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078718083 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071609373 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070820607 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063549927 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082505958 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063999834 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075876075 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077915274 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063686716 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076213045 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062006061 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061635902 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062052587 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096499653 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06348493 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063334912 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06258259 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062081388 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063822541 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071745158 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067503287 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069693758 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066154599 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078421378 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071807069 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062480564 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.06891035 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080021066 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065680546 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062466615 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078897468 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065992411 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06118767 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080273683 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071622979 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063595955 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062698513 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064927063 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075300349 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062829367 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060743276 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070546619 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063532921 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064453567 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066214603 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070195526 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061762422 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071595628 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066403628 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063583708 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060676458 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066523685 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062569888 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059619632 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070264782 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059837632 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073574233 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065533321 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07374747 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074340687 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07018629 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075714573 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059806965 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059196065 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077732646 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070978282 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.19941546 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080125708 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062271312 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072706891 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064118183 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063165609 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071465134 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060478707 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06343477 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061416248 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066637343 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062981907 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063384274 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066982756 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069537855 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073402666 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062518232 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070181328 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061730443 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076584715 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071577247 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06558491 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064712918 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062912896 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073738487 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068771579 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072267949 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062162659 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063193485 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062807898 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073050153 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072541203 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064543739 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070032708 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066850263 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062857418 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063217112 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063877492 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066068963 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066068877 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063450989 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070562496 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071877858 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076847781 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06963738 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071932868 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061517421 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062033101 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064579758 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062122492 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066558035 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071799019 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078003957 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074894364 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084231317 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.062753436 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072305694 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064071884 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079492711 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076397929 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063676013 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067218951 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061421334 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064388429 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072129865 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074317357 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076775737 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07712096 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067675144 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06695781 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061861176 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077205624 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063062133 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071328245 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071824971 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067165964 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062536828 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064040524 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072233844 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067167982 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062367442 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07842373 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068851259 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062185678 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077440069 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062627059 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073417873 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062256488 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066254841 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067542339 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064961076 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071069584 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075815716 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059848477 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062342876 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076671316 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06243216 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063938636 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070686217 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077469065 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065704275 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068500656 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071467265 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070059587 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065335947 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070177239 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061870812 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070257049 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063349405 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.071968252 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060584005 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077757352 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059682338 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075180987 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060281125 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070774767 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060758659 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069656133 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061138196 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076750923 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06120932 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060870308 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072731442 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060533943 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.07072044 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060987541 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066280918 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067888918 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071121098 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063106757 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070352867 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.201862945 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071450475 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067325115 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071023847 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073209271 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067656179 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063249449 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071696326 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074525113 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.0714904 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064232486 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.06433367 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063154727 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072569956 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064125515 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064513332 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07129961 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067288403 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069291703 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06420826 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064738284 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064037475 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071415103 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072154523 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081022023 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071566315 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070432068 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071770376 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061998198 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078514023 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062559064 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072847162 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06171682 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068865452 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071937701 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062517831 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08216625 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063975925 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070703564 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075382286 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071538644 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066483241 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.082542758 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066351327 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07093842 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071343104 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067483644 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069605586 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064696741 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071160794 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072590846 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074028896 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064011953 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07068609 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071727007 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064251686 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070984723 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064946124 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07178495 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064274045 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062025334 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066833855 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074740165 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067663869 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067648493 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063205662 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061433775 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063547376 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070021305 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067521355 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.07200068 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078264824 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061671296 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064111633 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062436347 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06632832 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080908712 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07260013 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.07097166 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067580002 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061942842 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064897433 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.064793766 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06318423 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066337732 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062046331 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062137525 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073271205 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064661632 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066671513 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063225666 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064054847 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072340458 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067554194 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063545691 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068996693 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062042702 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067315044 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062062818 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063755449 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067004084 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061606796 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06552527 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073111179 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078890874 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068810657 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071252831 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063602996 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069996265 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078482787 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069199151 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063764141 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071560775 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061315246 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080568127 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071394442 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070540928 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07176017 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063128827 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.07859352 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06603179 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071575106 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07716358 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063150812 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068310317 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060917476 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07677828 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065887971 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061548804 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069661578 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069670157 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067682512 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073045264 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.207583484 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070353086 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067868908 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065901339 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065185828 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063926632 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072024569 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079262125 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064584184 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067471688 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070642865 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071961997 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.0668362 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075633902 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070975315 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063911257 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064602663 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066028496 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063782913 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07472279 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063704069 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067957785 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066844891 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062298045 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06921715 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079784412 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072167124 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072850217 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061983263 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061497135 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080262416 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066126928 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066415838 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070944428 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072977112 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075729292 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07197507 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080759029 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063255713 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068801716 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075149208 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064026792 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06269003 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066282078 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064891527 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072077453 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072541431 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.0708084 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064719382 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069346915 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076932202 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064020402 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067331554 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067374265 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.0634215 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073337056 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070111088 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071887573 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062329308 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060675512 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064360678 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072152691 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070385141 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071804637 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063796288 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069692682 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076422269 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070206027 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066770233 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062493919 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066351045 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07193971 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067406397 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062748617 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067538626 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066306383 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069834239 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072693499 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067376813 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062572781 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079980897 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071114804 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072267568 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064681185 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064794639 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063337749 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062206886 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074215611 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062421056 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064527222 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067226005 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064299577 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080504087 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071835704 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078758605 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064076714 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067323981 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062588156 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072289408 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067402293 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063014097 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073049065 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061496289 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077943494 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074745877 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067786185 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061824345 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.087284478 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070286038 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077351712 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072254514 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.07120826 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066021553 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07219408 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064078954 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073646047 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061756193 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061054846 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072607164 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069511675 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074471459 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061604452 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071632279 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063559221 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069894046 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069569559 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063294986 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062860636 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063404862 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070709559 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065568208 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.07014871 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.209393112 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079077532 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063530631 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073422611 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072676947 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074660033 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076533245 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075236874 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071122703 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064551498 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070305164 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070484366 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063890351 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067506179 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066331999 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084285136 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065046352 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064418133 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07696681 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069453507 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.06274541 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069818041 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067748202 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073823808 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064535691 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073023148 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067117941 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063572467 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067154884 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067176732 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061695867 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062140185 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06202564 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072636159 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067196155 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063245506 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081620556 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064381823 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071703871 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074351435 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069057991 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065025099 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061593688 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06356984 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075799224 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078372132 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065962343 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07119911 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064123057 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072301584 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061917379 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071406546 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070974365 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071477525 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062465917 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062986273 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.0777991 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077902007 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065593814 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070351937 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070185433 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062823288 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082357528 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070173581 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064221378 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073827218 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065203886 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062477315 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06219399 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064452347 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074651597 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062225884 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065671618 seconds)
  done (took 42.876694483 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099138715 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06356056 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062300779 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062397824 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073534275 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063551894 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062444521 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063229002 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063514823 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065358717 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06223836 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064894715 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073701381 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076046312 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072815163 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066142798 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062594935 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063496251 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062598831 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063574632 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073334882 seconds)
  done (took 2.857604408 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064818896 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065245479 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065919282 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066923217 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065667624 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062608485 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067136204 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06264495 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067104943 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063673446 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067428002 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062762761 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063151076 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063240643 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063339316 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064397069 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067314935 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066450593 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062634005 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066817771 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064076393 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066349565 seconds)
  done (took 2.841782129 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062638731 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062878007 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071575964 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061508994 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061886102 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066095584 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062027296 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066181118 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066291873 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066825181 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070871909 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063240659 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061625732 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067998838 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061606695 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063538591 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104999738 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062573313 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061586909 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060101358 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063441877 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070432409 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060987961 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061711129 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066109819 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065608442 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061772015 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065098754 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062840589 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06624156 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063378555 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061598127 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.07098882 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071174362 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066616365 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.06625949 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064364991 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062862532 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062012669 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062185937 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.07068407 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.06426025 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062825204 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063705282 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071742449 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062195137 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062045738 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071785764 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061771457 seconds)
  done (took 4.62730018 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071833076 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114807985 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068427494 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096205309 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075571994 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069001629 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068452156 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096569675 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063316721 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064487325 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076562547 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076841987 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065622956 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066837874 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068356156 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063419744 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064603002 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063059633 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066084358 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063040312 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066135634 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067320602 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073014581 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073476061 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064298063 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062721366 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063390435 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065052104 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073801703 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066698597 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065061779 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06570038 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074243131 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068199992 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063533014 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063430391 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074296305 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063762554 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063398159 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061963561 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065574393 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064863271 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068295718 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074517867 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063784059 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068171215 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063882669 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06184109 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073687475 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063205788 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067248368 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074802265 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064590422 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063683964 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065084744 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073943805 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063653696 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062254102 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063546264 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073548627 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061912393 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06429711 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076252063 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063205692 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066689312 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075022853 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068358979 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064917194 seconds)
  done (took 6.241389748 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070315353 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095343107 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072374116 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072357014 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072144617 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072152919 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071233125 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071239824 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071038454 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071606802 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072841583 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.113058328 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067973956 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076467767 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071804464 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07192839 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071221782 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071071631 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071333154 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071075534 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071441045 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071715293 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071052833 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.0715831 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073275771 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069383975 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071926233 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072788686 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074461068 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073173794 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075884377 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07356411 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073442012 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073825256 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.075664108 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073768328 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063664896 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073242809 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073555547 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073173391 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.0698643 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073938489 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073221258 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069140338 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07242508 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07188212 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073484591 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.075797205 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080804309 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074253072 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072734527 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073745971 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073186341 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07346348 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074483374 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079960805 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072553582 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071395281 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071504741 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071774116 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071533211 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078670415 seconds)
  done (took 6.020225845 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074301336 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06714751 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079916773 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060844396 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061849968 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072305579 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062384924 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062334479 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069015434 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069877191 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071046781 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071666746 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07462175 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070776215 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071558422 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073952708 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072041587 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072018832 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.07010172 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071986734 seconds)
  done (took 2.843774105 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076384925 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079324297 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067180418 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070345497 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066889669 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070029008 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065451333 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06708389 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068420362 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068764007 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07313705 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073472732 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068518129 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071546773 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073436468 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071841156 seconds)
  done (took 2.56504157 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06505119 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069193208 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067485351 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.06213565 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064339727 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061844714 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.0625243 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061240886 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064840408 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076725524 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063633822 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066237836 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.063968593 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062563612 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06297497 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064481619 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064478201 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061824671 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062348749 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066168123 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070219922 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062725685 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064196627 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061950093 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064098625 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070364507 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063023044 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064079474 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061889689 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064863703 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064330317 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068945098 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064177474 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062659652 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06140006 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.06218187 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062805009 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064856229 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065225163 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062822532 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.06063159 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066927164 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062221292 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062855754 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06354989 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064627144 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063518862 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067676932 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062403692 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064260923 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063196544 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065721172 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063725364 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.07093393 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06565901 seconds)
  done (took 4.983151937 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077729345 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065889314 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060711367 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.0611392 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066859249 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066556133 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067295814 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066122616 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066758428 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061390241 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068526894 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067492697 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068389453 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067792852 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068136517 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067967762 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062320261 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068322502 seconds)
  done (took 2.649142821 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067582363 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061545566 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065608659 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.0638408 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064301711 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062641146 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06255852 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06380277 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064373445 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064798232 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064388403 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06403736 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063913813 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064415037 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063084162 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064500818 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063673118 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062545675 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062981468 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060896399 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061098952 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060795595 seconds)
  done (took 2.83709222 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088166012 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085450508 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127646502 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080255426 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089258811 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073685211 seconds)
  done (took 1.984201217 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095561976 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106625224 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067143507 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067475758 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075802943 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070842755 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070094003 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070785852 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076030459 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074744037 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070784088 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076221597 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076294247 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07267037 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076506223 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077807498 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070751237 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070761944 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067650706 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078849006 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070891136 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076743307 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071184196 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070754367 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070691802 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072463415 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079434949 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075286897 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071291415 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077005098 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078917032 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070713265 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076741019 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075229033 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067480387 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074260804 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069151006 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076775974 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074840657 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070893978 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065812075 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074717548 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074548986 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070612956 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077412543 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069346862 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070707343 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069612492 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069697966 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079115992 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074612263 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071002812 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074522475 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077419939 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0771569 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079128586 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073045342 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071074608 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074810439 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073030728 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071248882 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074792722 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071742592 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07309634 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076942659 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070985047 seconds)
  done (took 6.339511684 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101108246 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066694758 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069525423 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073235089 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070776744 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069340244 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069416834 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06906995 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06943558 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066896626 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104851707 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069983115 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071281764 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071261494 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069673002 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069191095 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072299051 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07147999 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067008097 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078881221 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069034801 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070972405 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071402275 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071102528 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073350583 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076768391 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069048544 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069419493 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069460665 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069322385 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071283392 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069809331 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070883767 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066268183 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071290858 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06934149 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069601197 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070844837 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069459795 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074485776 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071246767 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077664103 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069684084 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069159465 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073264312 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069029978 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069519951 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066890147 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069380007 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067069403 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073451786 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073712184 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073053784 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071057498 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070031338 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06959752 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069560091 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069758988 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069537715 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077422578 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070893863 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069540099 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079419441 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069762202 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069313458 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071057647 seconds)
  done (took 6.202881581 seconds)
done (took 130.23960511 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.218402233 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189434076 seconds)
  done (took 1.834068833 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074957379 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166328111 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075224426 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074974253 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108642335 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108390861 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076126491 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072266581 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074667736 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072280008 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138809168 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076457312 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072436706 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073826082 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073869017 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072885119 seconds)
  done (took 2.858731896 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108333615 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184607497 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08208176 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070070223 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114958163 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07713239 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072548803 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075416433 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076671172 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070413827 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106449921 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081111051 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074169696 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077217387 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072285824 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073599419 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07508726 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076559335 seconds)
  done (took 3.021702881 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098359034 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086882978 seconds)
  done (took 1.643129914 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155826291 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.104937758 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144809453 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329587359 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.129714743 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.12605073 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.129778988 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125382207 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11234891 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121675579 seconds)
  done (took 2.933236238 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106302048 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105216991 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308962596 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105095166 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083307206 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077777654 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076279098 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080721251 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077532274 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078422786 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124898934 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077208604 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074120249 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.126747974 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.10008941 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10606116 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071387172 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07805767 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080332935 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.07121329 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076040718 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079775423 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177557562 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078613572 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099600455 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075055888 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077757762 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074483225 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074815019 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078212903 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078954395 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099646509 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078198769 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08266378 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07684265 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096852132 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072003108 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098852301 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074195807 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072456011 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077368198 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081072123 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074086072 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.080508632 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077270784 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078798869 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080360938 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070495881 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075534599 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074214965 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072833394 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.07678739 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076388608 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.0780516 seconds)
  done (took 6.272478422 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107313667 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106356428 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070068498 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.112565013 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.107498945 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070164563 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105068549 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100060833 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108545261 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06961231 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069535566 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06934603 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076177482 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079110312 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115688564 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.107699216 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071585332 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069954855 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107245263 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107491386 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069436626 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101567847 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.102598871 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106113568 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068441253 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069872275 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068406018 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.06940042 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074196541 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074365074 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068875296 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074988856 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081232189 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075629413 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068428611 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06872415 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068652693 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076039015 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076356003 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076102432 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074585052 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067858684 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068748009 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069173545 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069474015 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068431681 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075036739 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075602927 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074838124 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068999747 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069271671 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068135411 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07001678 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.0752489 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074481266 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077743773 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078115206 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071129432 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071249924 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072702922 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079306435 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079226296 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07765612 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070413538 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076406074 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068759557 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077560185 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080671757 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069310712 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069692139 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069252102 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069421693 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069358941 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074370599 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074818628 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069800789 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068969455 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06830546 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076577023 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074917079 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068923125 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074057941 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068227606 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068900345 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069217498 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069368591 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073986657 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075582788 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06933325 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068532464 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068849732 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068534883 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068526896 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073731621 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074338958 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074509073 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073915732 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069155531 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073871608 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07366437 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0684522 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073296345 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067865354 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06795899 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06780692 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072708314 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072175279 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074741758 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067556051 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067090533 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073046315 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214301203 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070394352 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075921013 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078665516 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076371494 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069291665 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078287039 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069421566 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076957131 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069366446 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076886216 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069374663 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075452445 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069559879 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069254121 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068904166 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074802498 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06951765 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069345914 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069753995 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069483438 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075737731 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078156709 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070100678 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074732307 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074835357 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070003332 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074795441 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068931649 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07661754 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06931288 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069143013 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068580542 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078008309 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069243779 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068814568 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069337831 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077350649 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069253798 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076690132 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074976979 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069159254 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079187335 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07743483 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074730572 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077663102 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071806677 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069831938 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068942804 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069975585 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074197498 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075752375 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071918545 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069334485 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074486957 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.076706549 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068527982 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074860851 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074931194 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074726971 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069382974 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069510112 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078051033 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.299288396 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074760904 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.07474062 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075541765 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068840999 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074272655 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074459658 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068745565 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080628173 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068836794 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07952606 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075365324 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074775607 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075509217 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.0763775 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077348574 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077568918 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078872657 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068959525 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068776692 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.074586355 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06855445 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068876672 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.076727723 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070844098 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071916987 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083100572 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069378452 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076876961 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068897178 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075531504 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068707195 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069307617 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080136433 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068664264 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069171519 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074462876 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068627505 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.073881537 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07660379 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07373839 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067910952 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068369409 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074439595 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074664741 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068227008 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068052619 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068250324 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072627714 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072295249 seconds)
  done (took 18.561923181 seconds)
done (took 38.595621347 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171470922 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116534561 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.206832382 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199433417 seconds)
  done (took 2.257907295 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100785914 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06555158 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081131846 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090627778 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065325965 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076172508 seconds)
  done (took 1.984217587 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201697362 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174100325 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240773853 seconds)
  done (took 2.109915749 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366803201 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.14845398 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216051585 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.502744822 seconds)
  done (took 2.830938146 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.109584694 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.10069598 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077166978 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111437394 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085331148 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062819432 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133442781 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069969197 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099881385 seconds)
  done (took 2.4100951 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129246013 seconds)
done (took 13.25610128 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.238620278 seconds)
    (2/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.119547592 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.175600887 seconds)
    (4/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.218925547 seconds)
    (5/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.285890037 seconds)
    (6/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.270178934 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.122949008 seconds)
    (8/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.221769281 seconds)
    (9/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.243804692 seconds)
    (10/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.107822346 seconds)
    (11/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.081567783 seconds)
    (12/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076878766 seconds)
    (13/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.107378812 seconds)
    (14/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076999636 seconds)
    (15/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.209593101 seconds)
    (16/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.24832207 seconds)
    (17/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.172330447 seconds)
    (18/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.093715099 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.091053246 seconds)
    (20/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.195366548 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078838003 seconds)
    (22/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.238831918 seconds)
    (23/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074142819 seconds)
    (24/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.179308387 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080763305 seconds)
    (26/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.086314066 seconds)
    (27/341) benchmarking ("sort", Float32, false)...
    done (took 0.138044203 seconds)
    (28/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.142301748 seconds)
    (29/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.215676656 seconds)
    (30/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081356807 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076504777 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.144186331 seconds)
    (33/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.077225784 seconds)
    (34/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.182442012 seconds)
    (35/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.2369354 seconds)
    (36/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.236529108 seconds)
    (37/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076819969 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073136164 seconds)
    (39/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.0676037 seconds)
    (40/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.156502064 seconds)
    (41/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072085899 seconds)
    (42/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07803555 seconds)
    (43/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085963745 seconds)
    (44/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.160208966 seconds)
    (45/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.181849263 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.091319239 seconds)
    (47/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065904676 seconds)
    (48/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.167091849 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.076301401 seconds)
    (50/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.073886282 seconds)
    (51/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191943011 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086055428 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.087854687 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.09104686 seconds)
    (55/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170549059 seconds)
    (56/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.07831043 seconds)
    (57/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.144793953 seconds)
    (58/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.16502836 seconds)
    (59/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067895426 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081676115 seconds)
    (61/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.189204572 seconds)
    (62/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.200081986 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151202991 seconds)
    (64/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.225527477 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067151919 seconds)
    (66/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074872947 seconds)
    (67/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.13502883 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067305932 seconds)
    (69/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.143282764 seconds)
    (70/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.1427941 seconds)
    (71/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.236333909 seconds)
    (72/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173641838 seconds)
    (73/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.232446143 seconds)
    (74/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.076842085 seconds)
    (75/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.226069847 seconds)
    (76/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.147273218 seconds)
    (77/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.069973974 seconds)
    (78/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066551066 seconds)
    (79/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071083069 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133571726 seconds)
    (81/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087017477 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074433453 seconds)
    (83/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066073649 seconds)
    (84/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066420723 seconds)
    (85/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068786774 seconds)
    (86/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.158262057 seconds)
    (87/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073571985 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092659591 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074970308 seconds)
    (90/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.07923222 seconds)
    (91/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.201780632 seconds)
    (92/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066375724 seconds)
    (93/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077631804 seconds)
    (94/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066483091 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.082063144 seconds)
    (96/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.15258264 seconds)
    (97/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125426715 seconds)
    (98/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066104547 seconds)
    (99/341) benchmarking ("sort", Int8, false)...
    done (took 0.152422453 seconds)
    (100/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.141061599 seconds)
    (101/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079726637 seconds)
    (102/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06832845 seconds)
    (103/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083945111 seconds)
    (104/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.147843407 seconds)
    (105/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066595488 seconds)
    (106/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.06779224 seconds)
    (107/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085073437 seconds)
    (108/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067097884 seconds)
    (109/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066668379 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.092054065 seconds)
    (111/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.147703497 seconds)
    (112/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.182724441 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076367973 seconds)
    (114/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.08603811 seconds)
    (115/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.068379629 seconds)
    (116/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.157577695 seconds)
    (117/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.202601383 seconds)
    (118/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.087040305 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096701589 seconds)
    (120/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.165451731 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066040994 seconds)
    (122/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074270696 seconds)
    (123/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.195671689 seconds)
    (124/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134155823 seconds)
    (125/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.068250657 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.094418228 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077797637 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070029844 seconds)
    (129/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.140232089 seconds)
    (130/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.067742137 seconds)
    (131/341) benchmarking ("sort", BigInt, false)...
    done (took 0.26603654 seconds)
    (132/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070562307 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151380161 seconds)
    (134/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079166295 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074814448 seconds)
    (136/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069454495 seconds)
    (137/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065839654 seconds)
    (138/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067003726 seconds)
    (139/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.201133042 seconds)
    (140/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.143815515 seconds)
    (141/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.07577949 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073928262 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065793867 seconds)
    (144/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075454682 seconds)
    (145/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069639918 seconds)
    (146/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075694738 seconds)
    (147/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.081675758 seconds)
    (148/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.161545513 seconds)
    (149/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06632727 seconds)
    (150/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.076967761 seconds)
    (151/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.08149563 seconds)
    (152/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073193198 seconds)
    (153/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085577888 seconds)
    (154/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068178939 seconds)
    (155/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075760785 seconds)
    (156/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.219506818 seconds)
    (157/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.068637966 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 0.148106917 seconds)
    (159/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069094959 seconds)
    (160/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067910921 seconds)
    (161/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067128271 seconds)
    (162/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.065787774 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147648957 seconds)
    (164/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.195533138 seconds)
    (165/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.067281847 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072133454 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074875113 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065215176 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 0.067126375 seconds)
    (170/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074894417 seconds)
    (171/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078874233 seconds)
    (172/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065921209 seconds)
    (173/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.08040114 seconds)
    (174/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073950075 seconds)
    (175/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.187141478 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068595151 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085544753 seconds)
    (178/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066297977 seconds)
    (179/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073000404 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153604259 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.288574132 seconds)
    (182/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.068301089 seconds)
    (183/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076117237 seconds)
    (184/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.067383397 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154332116 seconds)
    (186/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.088922882 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066193463 seconds)
    (188/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.158163931 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084323837 seconds)
    (190/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067092279 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066516506 seconds)
    (192/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164995348 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14673612 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076404004 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152566894 seconds)
    (196/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066844919 seconds)
    (197/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066603904 seconds)
    (198/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065084835 seconds)
    (199/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066795972 seconds)
    (200/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089171297 seconds)
    (201/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066407523 seconds)
    (202/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066200966 seconds)
    (203/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.06581821 seconds)
    (204/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066395263 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066528552 seconds)
    (206/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067131029 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147273992 seconds)
    (208/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.085986465 seconds)
    (209/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066784723 seconds)
    (210/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066831671 seconds)
    (211/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065839836 seconds)
    (212/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.1414447 seconds)
    (213/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07393802 seconds)
    (214/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069153241 seconds)
    (215/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066015394 seconds)
    (216/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.198398464 seconds)
    (217/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.07947167 seconds)
    (218/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070085468 seconds)
    (219/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073708493 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064976483 seconds)
    (221/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074558909 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091072597 seconds)
    (223/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177774326 seconds)
    (224/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075280457 seconds)
    (225/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.171633787 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074083963 seconds)
    (227/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087286873 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073873172 seconds)
    (229/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.170877552 seconds)
    (230/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067094712 seconds)
    (231/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067218004 seconds)
    (232/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066792921 seconds)
    (233/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.084106379 seconds)
    (234/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190528599 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127933207 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068659341 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065852084 seconds)
    (238/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073519057 seconds)
    (239/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.131127215 seconds)
    (240/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.078241105 seconds)
    (241/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.096464731 seconds)
    (242/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.075990321 seconds)
    (243/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069046044 seconds)
    (244/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.137870962 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080031244 seconds)
    (246/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076248352 seconds)
    (247/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068270211 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090029028 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073297681 seconds)
    (250/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066919854 seconds)
    (251/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066410995 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089570056 seconds)
    (253/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070118517 seconds)
    (254/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066170078 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.09168213 seconds)
    (256/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073547471 seconds)
    (257/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071579453 seconds)
    (258/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072964848 seconds)
    (259/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066657004 seconds)
    (260/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.0664497 seconds)
    (261/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073507676 seconds)
    (262/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065862976 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06500241 seconds)
    (264/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.065445387 seconds)
    (265/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066546263 seconds)
    (266/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066398708 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.116057987 seconds)
    (268/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152391414 seconds)
    (269/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068720159 seconds)
    (270/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065134587 seconds)
    (271/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.06804497 seconds)
    (272/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07422698 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116101066 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.064944061 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065246875 seconds)
    (276/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090771116 seconds)
    (277/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065957607 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064238342 seconds)
    (279/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066345482 seconds)
    (280/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.064780222 seconds)
    (281/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073013351 seconds)
    (282/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065669929 seconds)
    (283/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073686108 seconds)
    (284/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065995687 seconds)
    (285/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065061015 seconds)
    (286/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066451728 seconds)
    (287/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066179681 seconds)
    (288/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072636538 seconds)
    (289/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064262237 seconds)
    (290/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065785721 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148646042 seconds)
    (292/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065595688 seconds)
    (293/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066346947 seconds)
    (294/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067866298 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.065587689 seconds)
    (296/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065261923 seconds)
    (297/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072731896 seconds)
    (298/341) benchmarking ("sort", Float64, false)...
    done (took 0.135788918 seconds)
    (299/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067433321 seconds)
    (300/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09236396 seconds)
    (301/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.067833372 seconds)
    (302/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065741749 seconds)
    (303/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078960375 seconds)
    (304/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065750799 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.137446789 seconds)
    (306/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063849511 seconds)
    (307/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.06492013 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.295329501 seconds)
    (309/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073488948 seconds)
    (310/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.071919654 seconds)
    (311/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.068931006 seconds)
    (312/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067797039 seconds)
    (313/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09730358 seconds)
    (314/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.083485851 seconds)
    (315/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.069160271 seconds)
    (316/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067806681 seconds)
    (317/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067876847 seconds)
    (318/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.068560228 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078980898 seconds)
    (320/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067457486 seconds)
    (321/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.071059515 seconds)
    (322/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068318805 seconds)
    (323/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068213026 seconds)
    (324/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072809599 seconds)
    (325/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070701915 seconds)
    (326/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082302844 seconds)
    (327/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070844999 seconds)
    (328/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06634197 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066208284 seconds)
    (330/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065502241 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085346328 seconds)
    (332/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143681463 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131029499 seconds)
    (334/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06667985 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066247232 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115853127 seconds)
    (337/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069302123 seconds)
    (338/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066291281 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091377563 seconds)
    (340/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066894234 seconds)
    (341/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070299273 seconds)
  done (took 36.88945267 seconds)
done (took 38.405693924 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092028902 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079639979 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077498624 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075074049 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078128572 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076589051 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077825565 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076518223 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077396116 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076930072 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076980736 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065060115 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073297724 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.08051997 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074815396 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081590952 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078678826 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081068354 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066632553 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080272915 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092436858 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081083612 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074322062 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079860013 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065941797 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075238479 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089181013 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086429233 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072137947 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075385736 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073252531 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080944371 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073836349 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072493592 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.077444301 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071655767 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074873112 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072663317 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.088830911 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.07182089 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066439911 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078127778 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073022324 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074217662 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074524246 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077338276 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071205281 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.078627479 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06531737 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076642597 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088129089 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070769766 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073185655 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074493241 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071255293 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075320481 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072536458 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077316738 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.070783022 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076693908 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076672313 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07388067 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065342506 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074082869 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073048731 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073701363 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064625798 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070718327 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06546988 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065987099 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.064917215 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07415989 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072180416 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071230183 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065067823 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065640287 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065310658 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077747717 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071595662 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075104391 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065973496 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071120357 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070315617 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065880141 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070734782 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077143613 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064838438 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066035619 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064599749 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080088108 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072184751 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065895232 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077239759 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07045168 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071196349 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066023916 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064918985 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071007333 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073843509 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065992621 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065045484 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070747078 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070617611 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074724065 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065950469 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07018471 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070876523 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065110361 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07400122 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073067475 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074100661 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078389277 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074284954 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077575873 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065743419 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064831035 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075366786 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066103796 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070613758 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074039771 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.07101753 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073970703 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066112086 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065288917 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070518422 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072369991 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.0655983 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065775857 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.06583262 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075467494 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072432184 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064438469 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06482579 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073359817 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.073918341 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064316963 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064160484 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073902992 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06530579 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070828692 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070552923 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073906007 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064544904 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06500034 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.210487738 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067004432 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066222627 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071723204 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071127678 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066601847 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07503643 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072131691 seconds)
done (took 12.783492861 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069417392 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105420146 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.072975378 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082027129 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.07789337 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067485614 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069872392 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082790482 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069797785 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.088013268 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094599256 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089843622 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09589994 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.067389582 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068479127 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069367143 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066815066 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075542553 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081023478 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088961224 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.093992444 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066004928 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075067988 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083102773 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.076736436 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082428622 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067745855 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067314143 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069403769 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.120484076 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091323629 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066095359 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067633919 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.079864281 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080115636 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073188892 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06674362 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070076986 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067672335 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068412768 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070239787 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.085067931 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072071168 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07022557 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067923381 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.067856612 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067147228 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.069290638 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079535352 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.06965415 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.073868982 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.07798594 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068177504 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066899827 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064933956 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070159243 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066389733 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067366682 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066952583 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066802111 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.066913798 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068800218 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067249668 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067014284 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070236408 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.068814007 seconds)
  done (took 6.512173052 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.085062409 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092117881 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081063717 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081854974 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066134217 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.066939431 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066814784 seconds)
  done (took 2.162420508 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069634501 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075681151 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078767911 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078723529 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.08853164 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076433241 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067512797 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098039924 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.065865987 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075276273 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082609796 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079939656 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069904501 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.07926435 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067118598 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078223813 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067141639 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074094804 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074116037 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079923994 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07080333 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096401799 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079953563 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067139904 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080354868 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074226274 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069241442 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067103326 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067197396 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066904016 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067068884 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089045768 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.075802828 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081776071 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069357795 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067906987 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.073559372 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06972987 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.07321066 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078207765 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071216068 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066784013 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067158327 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.066562461 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068088804 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070961236 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.067520286 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066442413 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066300192 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073665923 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065612675 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073144997 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.068897924 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072068258 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071175325 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071091511 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073621744 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06706324 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074259177 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072514366 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066780069 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07910331 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078247809 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.07037784 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078329727 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074860499 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073023289 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070512482 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066371978 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066126199 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066871795 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077750492 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.07015534 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069033015 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.067544741 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071149022 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070601527 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081666018 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081866152 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.07968028 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069236515 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066694443 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070871316 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081506375 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071852028 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06679583 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067932724 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066207701 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071640513 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066628847 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071310242 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066982252 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073625354 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069446495 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068933328 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074269629 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.066873364 seconds)
  done (took 8.667457898 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071780527 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071249023 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068258647 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068085141 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068262677 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.067781777 seconds)
  done (took 2.076524496 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09381639 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069797126 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080211741 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070005858 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090971432 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.076119254 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.076317734 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07107745 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.085555817 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080249941 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.076151016 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07822996 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075182933 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071339994 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.075889897 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.07006959 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073846281 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07026079 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077134291 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069382812 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080021484 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068784891 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071690546 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079082225 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070488236 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06781317 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06810949 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077500103 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076497326 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068666882 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.068285027 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069941646 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075165511 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068465597 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073352057 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075385021 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066766077 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072111605 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069164149 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.06989759 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075341991 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068627319 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069506737 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072517592 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068787828 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075920494 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07245206 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070540707 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073515257 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071994161 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072522955 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067849235 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070347197 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072276566 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075516944 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068780161 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.072707973 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073144612 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069001451 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075643291 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067110933 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069789748 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068571731 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069820131 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072008339 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072215328 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075545703 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068917934 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069127474 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067260595 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072696061 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067074498 seconds)
  done (took 6.862210218 seconds)
done (took 27.895058209 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.550413777 seconds)
  done (took 2.147443935 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.585486433 seconds)
  done (took 2.224579398 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.298857487 seconds)
  done (took 9.935251565 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.306823988 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.328553009 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736637217 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.131822076 seconds)
  done (took 3.181742618 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.758439158 seconds)
  done (took 2.408140621 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230869381 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.217449932 seconds)
  done (took 2.111009621 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.337442789 seconds)
  done (took 1.976454056 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.170424642 seconds)
  done (took 2.805085741 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.231747697 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159439014 seconds)
  done (took 2.040009514 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.544878945 seconds)
  done (took 2.189408503 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.260041567 seconds)
  done (took 5.907356348 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237719161 seconds)
  done (took 1.923309324 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23312782 seconds)
  done (took 1.890210627 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.040231708 seconds)
  done (took 3.686356484 seconds)
done (took 46.073380421 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086696779 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087628091 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086509447 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081802669 seconds)
  done (took 1.964157575 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077300013 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072663385 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076323509 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07639717 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.074697774 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.075241266 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075500349 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072834485 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074280614 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073056058 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071586961 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073022529 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075499282 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07286523 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075322549 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076716341 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07386356 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072453727 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075561556 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072342657 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075592355 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072670609 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.070605795 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072287167 seconds)
  done (took 3.427301785 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081219229 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07527576 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077311967 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073543224 seconds)
  done (took 1.9667975 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.079819269 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.079210159 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088546174 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.092059403 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077783681 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079825524 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.086947685 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.087920525 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068076402 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090493242 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.070922346 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.069265323 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069385622 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089115239 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.086163505 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065318778 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065922457 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078254987 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076837011 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079847349 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070552811 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067636239 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078013598 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078538135 seconds)
  done (took 3.534203418 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082594506 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067277908 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079374807 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091698255 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092588935 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066094685 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079113164 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093032496 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128331523 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066752736 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.074002816 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067996123 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108393141 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068479615 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.083825977 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.111415302 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11467182 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.071713024 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101717455 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068052891 seconds)
  done (took 3.384292832 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078877776 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.069567155 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.070649945 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.065922983 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.07686386 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.072860267 seconds)
  done (took 2.100763437 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070799633 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068048484 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067427024 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071835408 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069872975 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067854186 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067696292 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.068321075 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068198298 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068408495 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068625933 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.069614966 seconds)
  done (took 2.483202699 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157447459 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.068921813 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070474229 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066227041 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071820447 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.066850883 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081267854 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068444001 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084707346 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066908444 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.06709403 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069245219 seconds)
  done (took 2.600043406 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10190749 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10076802 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144921505 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11673844 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116354279 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096446025 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11886562 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094875383 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159005718 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135970184 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115983999 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094044034 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087208049 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069861921 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099849703 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10216642 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135453271 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072960459 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112719758 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.163461441 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11508145 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112194109 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121994033 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116444793 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080918224 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121853424 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093956788 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102250738 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123813947 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109393502 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118925308 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097956157 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072215691 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071294766 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148759816 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101737266 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106636778 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093149127 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099734381 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087588703 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107229005 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069073487 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087453181 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.105690719 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084325971 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116183096 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08822232 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102922383 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081246686 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130697462 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106284265 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099141345 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08517879 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103504388 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129681908 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094702804 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109928346 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105893079 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081937129 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116256367 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099438475 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.250796367 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095184162 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082107656 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161017351 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090325581 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113044355 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114446901 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.082791533 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090021896 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102939023 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131232593 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107113977 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.106903231 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114042986 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095067013 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110049249 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092071373 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128619597 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093113318 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072934409 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104719447 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.127983394 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085250448 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100344866 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130200171 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092361681 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078508239 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092260935 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118009818 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081086116 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096045348 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070115925 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.097370952 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106833837 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096986942 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11186139 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107114478 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07886633 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124666124 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10854569 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072860498 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117516741 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099168836 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1520901 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095753987 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076201231 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09969494 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093541084 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.147257614 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085112307 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081953769 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098550918 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14049994 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094165072 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.168761898 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096168531 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128483845 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097007142 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087288941 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074886719 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088993969 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101289897 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105702958 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100624725 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087697906 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.076509691 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085820805 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094118541 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.249196669 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082125087 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114956182 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102095082 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075642268 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088475768 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076979762 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125251065 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078429029 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111064215 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12430208 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079224685 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104555246 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098065376 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107500799 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098226191 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107341955 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140196854 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.115866032 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079656448 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.083679465 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108229526 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141196033 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113584904 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085805884 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076819432 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099317328 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11081111 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097448082 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106889034 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100169207 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108512385 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097315501 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140219212 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117736841 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090899522 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095572065 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096451994 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123176389 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076931268 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154903827 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094036237 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117873865 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085226038 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141236577 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114265487 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089958594 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084697103 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09535098 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10483959 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105399922 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143009051 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095814646 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072966566 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093686409 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131429723 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077219811 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099737585 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090529118 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093915602 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117417163 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.083100118 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08098936 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069275197 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100306473 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133991884 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.06924068 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.273055911 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.115064871 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105063387 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105182812 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070329838 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099867582 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137760777 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10574874 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140323098 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117712062 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100686533 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118305751 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.099361771 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105842678 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08007531 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125475006 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.133694039 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096234097 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090532057 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133763862 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117539686 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134376197 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.096265913 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115498873 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105362914 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101507133 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103945417 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101035559 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14392624 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120402703 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124772581 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086327024 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105721062 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109380497 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135729152 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08323088 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116992447 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.075263951 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111717529 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077682855 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10745565 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079483344 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112076721 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081260988 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101306227 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070208561 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074478734 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141774714 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112055251 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089186556 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086731721 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136736915 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130552875 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08092224 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101673423 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103855555 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100260073 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099862676 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107527852 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.084842732 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093582713 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.270815742 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080020773 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082654025 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.099532716 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094662685 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107393784 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085131994 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075258626 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136710439 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104091039 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094729178 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077991815 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095118079 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121453094 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08979226 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087595416 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10500772 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103956341 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140129703 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090739452 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098440806 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.117426861 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081185861 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092499139 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.069605754 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085426262 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076370815 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109030204 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076783061 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109315487 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069062659 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13113576 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08742743 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092723773 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102849201 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097818045 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128522503 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092841285 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130927442 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090319962 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101987745 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108116693 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094399547 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080224073 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103820887 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096309578 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109649407 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095970405 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105994931 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10999259 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094005064 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.141793207 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089835468 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120899779 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10553873 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10747548 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104219789 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117178702 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137036128 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11221723 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111883964 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075391117 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083699433 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104236364 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099196268 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144466139 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100870261 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071768298 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08550127 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089589091 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.252662061 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105485564 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084142865 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146178724 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090201568 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089962296 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117292975 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.093569796 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100610211 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079080905 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09846896 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104161783 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096611817 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095813822 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10822401 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116791508 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113181991 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.132247123 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099546234 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093113564 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122331682 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113792659 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11137178 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086143519 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086496077 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123712914 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102468354 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128541015 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100418 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094910204 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102405823 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09075504 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100268873 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097299633 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.109524635 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081344776 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076659931 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069127242 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072727856 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11788371 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108855692 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09939261 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098773709 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073024147 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103817781 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099972542 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072248084 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087810673 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094650619 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0994165 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.083728327 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092900434 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114565882 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091380754 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10380311 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099861189 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129698712 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.103098154 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091615146 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144386638 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127927785 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088672738 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093084076 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071884045 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079182717 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101091047 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143202506 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116105034 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076623898 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.241633889 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.07864255 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089259344 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072969287 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088669692 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089879464 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103704471 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093080218 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112995272 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104112421 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076273412 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103428138 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100749556 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094808931 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099828958 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104586719 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10518939 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.123798969 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101187497 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097790409 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076738985 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080975291 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076408976 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080504895 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102265545 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078145399 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076572918 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12926573 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091735127 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104817989 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109914273 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084859519 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07586466 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133075129 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.06986175 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133837135 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071958423 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082972221 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081343493 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079518789 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094255405 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105228304 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097418774 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1137567 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105852488 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10510119 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110593159 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155723054 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071776595 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144136187 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076468253 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07611552 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076912145 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111326127 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090120668 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107381665 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140855692 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09048391 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093382632 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077935628 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128793928 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099144006 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103714724 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083025398 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079903205 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128338168 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080229048 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072070254 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087022615 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110235733 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072299914 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102807468 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.245235611 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081344765 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113611078 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631149891 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090908541 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07626666 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08917785 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14230806 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129252125 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084181449 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109175223 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.122835491 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090130608 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08424988 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107372593 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.180798827 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074256981 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0947314 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104140303 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098674928 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09278995 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.091871905 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087285023 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093115588 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086235896 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080507194 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107139388 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088283249 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092373518 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097661457 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083743103 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08123055 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131723361 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104722666 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083227979 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089807635 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10112097 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088265131 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091681752 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069798074 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114459839 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091514995 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101571326 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092063643 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107784401 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120097996 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089380364 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112568961 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089359776 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109128908 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085030096 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078805786 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102128478 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.078854367 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078306851 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117367826 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.084948642 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.092996309 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105248422 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095976795 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113678909 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118598073 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110754977 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097779492 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078803574 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085768291 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.087767417 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075520174 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077828603 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074000756 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076260423 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.268558733 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087220216 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085391627 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11546357 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0827931 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103687286 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100668242 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10982015 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085047075 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104543506 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112721465 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093881684 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106668412 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103521904 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132202714 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148691271 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102812179 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126940301 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137004667 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080429052 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07877615 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071554208 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11860845 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080485787 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.081752982 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081528871 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133908463 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083461068 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096174965 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231811626 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084121659 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085283101 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099187575 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07083217 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085561972 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110984431 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087437584 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081468333 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099344495 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084214226 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118374673 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111918813 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089989644 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083418516 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08170744 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094480016 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104186569 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.127971152 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089799246 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075495172 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106870687 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103777098 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123492579 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07367125 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081713788 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128987224 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092058496 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104215711 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080614817 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120917245 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133330709 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09068917 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133712451 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0716532 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08407717 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089824737 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.125320456 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074754782 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088248671 seconds)
  done (took 64.845792451 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.153132891 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142774257 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.085120483 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.097784625 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187219319 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197737085 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.119823144 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.096681341 seconds)
  done (took 2.921088351 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071759566 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.08474963 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.08190967 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.209820113 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.110889825 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068021793 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073158686 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082258673 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.06828678 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067431248 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101975737 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067763648 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068606726 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366422655 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066893643 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072016879 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067981557 seconds)
  done (took 3.519721951 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.329430619 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.387242074 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.222302266 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.614095394 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.136905991 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.484403543 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.076680519 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083805827 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.624373448 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372936298 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.130718561 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.08786999 seconds)
  done (took 18.353778592 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.079604555 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.081493777 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.080254494 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077713186 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077411377 seconds)
  done (took 2.217304401 seconds)
done (took 114.988407564 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08648999 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.175409706 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.070482293 seconds)
  done (took 2.08744736 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08586827 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083149604 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083950122 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080933165 seconds)
  done (took 2.140763604 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077874645 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079702307 seconds)
  done (took 1.956309918 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225565108 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178168045 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094024676 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085902187 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082627785 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.083383831 seconds)
  done (took 2.06185838 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075464252 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073910413 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074900775 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075565897 seconds)
  done (took 2.096892511 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071106175 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.069476184 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.06978688 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071319963 seconds)
  done (took 2.066193676 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089601742 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087046207 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116319593 seconds)
  done (took 2.084751036 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087160917 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085204724 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080242049 seconds)
  done (took 2.054478194 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.113602748 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098677987 seconds)
  done (took 2.007841534 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08373306 seconds)
  done (took 1.885267868 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093812286 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.101146059 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.145208802 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.111495572 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145612722 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.130700955 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080381577 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.081366857 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076480901 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.075045862 seconds)
  done (took 2.840444097 seconds)
done (took 25.669416364 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082936868 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.36522926 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36003011 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087447308 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672501175 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357602951 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.984123909 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091095244 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099502797 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068949254 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085339634 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649006513 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.971190367 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.322722087 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.960241798 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.324978039 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651835724 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069130162 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068014244 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06875166 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.968224461 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067800753 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068598038 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068684677 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650058184 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.373941372 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069423278 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.320703042 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068441951 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071168998 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356998991 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069483788 seconds)
  done (took 16.263798488 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.074147821 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124523768 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072995303 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084872082 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071018683 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070158221 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07162134 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069414919 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110382421 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069408278 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085849317 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068584619 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072110456 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069791089 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087987682 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068495352 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070846062 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069668367 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069333583 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071840552 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086675982 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068190445 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069074753 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069533998 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068799083 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081829865 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069779908 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068498163 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069166605 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071021149 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072038131 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069612081 seconds)
  done (took 4.236339926 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125204053 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128393483 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073830855 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.10874964 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118356735 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070719631 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150914903 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091870853 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113803531 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06935518 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086128719 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068665393 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104176188 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071896638 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089393829 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068996461 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071180422 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069395114 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069484357 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069097156 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087537864 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068829859 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069346269 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069528888 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069333228 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083605245 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06961855 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069072395 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069164933 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070867317 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07288845 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070526599 seconds)
  done (took 4.511112104 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.073461513 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073136224 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080425032 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081339032 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067297203 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069198464 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070477061 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066972688 seconds)
  done (took 2.399733921 seconds)
done (took 29.229036733 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082995705 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070524924 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072257632 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.08821495 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074183914 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07102367 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065386784 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075008905 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071978868 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071574406 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073724203 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067579155 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070530666 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065416398 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072553609 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066419425 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072913566 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.070345068 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071318093 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072220056 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068446319 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071921564 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07536809 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071322657 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071283788 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070934239 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075444725 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072655369 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.0668678 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069741801 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069546738 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.080883013 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072909193 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073409016 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067022879 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066699117 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07079221 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068824358 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072690819 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075343256 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068810876 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076013047 seconds)
  done (took 4.800910045 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.09164102 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094676576 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.08728759 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082412808 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107273662 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082171869 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090861382 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.079965256 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078469013 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090388294 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073977231 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079157521 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081157081 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075797375 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078541005 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075118372 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080404686 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073962095 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079184699 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078809039 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091017777 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.0724763 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079588363 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.07999403 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074092512 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080116714 seconds)
  done (took 3.964853865 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076469543 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.09041301 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.092783207 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142231499 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110165252 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084025495 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082305792 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.09780336 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101624455 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068823831 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072419962 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09476916 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096809694 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075591008 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106336779 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086713333 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080639339 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069945464 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07479318 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103489492 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091264146 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08727932 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10094381 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088419765 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067962152 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077339244 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075060942 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083573754 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076111099 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080485606 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072205332 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071855313 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068914923 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081140123 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.072848996 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.066251434 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092953556 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080644098 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083741665 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106767488 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078995797 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069745329 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099428335 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136075258 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.070574836 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.073853509 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074696475 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.083673217 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.072174421 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.10234595 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.089272843 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068647724 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087111159 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069964771 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06971941 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084354424 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069812654 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070206073 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080488317 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07462562 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088872302 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073353458 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088782372 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068133824 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079368772 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.069532626 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069885355 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066886012 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104285048 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07518925 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12027833 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.06989329 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066605009 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080442116 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.082733807 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07754436 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069558427 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088165378 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079903257 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071636685 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079896514 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070653766 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072053098 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103511925 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067055482 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066212257 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065950228 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070604723 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070978711 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068632004 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081429814 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067122828 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071645131 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083576939 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067831768 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068757289 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071331887 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06947638 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067343402 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078748899 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07171674 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069837595 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080804062 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069674181 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071272028 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083470583 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077577828 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067984582 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069244281 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070472966 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.0702124 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072260931 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071879712 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070176445 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07513531 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075471485 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073679778 seconds)
  done (took 11.178244625 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.16661302 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.157853974 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.072142446 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.153025356 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079551346 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.075401416 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.15269101 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090446466 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071343219 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070903937 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068065543 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096797823 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091867598 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.103180488 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073229181 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069200962 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094010144 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101835014 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152018617 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147286982 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094535898 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.079660609 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073494736 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073011167 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07263184 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079954842 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090007875 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07881883 seconds)
  done (took 4.598585828 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078984506 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085714925 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074853906 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093785566 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086692839 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069602847 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071080076 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070330632 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08830324 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078381253 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.071235705 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075575643 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074313732 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.072098787 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071275869 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077911518 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077117986 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.070354119 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07459942 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07596294 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081901016 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096743488 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07423334 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068566584 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071165883 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06888957 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075030337 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078224202 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068992273 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098281737 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068352799 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075274554 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084581778 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071351639 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070296039 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069992451 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.068880071 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068731258 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069139901 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06684988 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067404093 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073810692 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068043678 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.07494665 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08264741 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075980223 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069913289 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071078008 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071279527 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067838585 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072144336 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072208169 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071792122 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076749729 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072659914 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.071539657 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070803764 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098543348 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075068153 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068220254 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.06771388 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067614927 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070278793 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076567108 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084993622 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070319651 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067451346 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069076907 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074016299 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082900464 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068566453 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073851832 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066120789 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069157927 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070707314 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071593451 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069907065 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066820813 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068476721 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068967004 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069079777 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068654303 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068336908 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071827248 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066547551 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067084877 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069482052 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069999987 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075332102 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067840298 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071869975 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069824027 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067893988 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071468033 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07375102 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071543567 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08835911 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076910479 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069483198 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067147682 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083431808 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070625305 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068058042 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074642038 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072661274 seconds)
  done (took 9.584530723 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094336776 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072125968 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.088507042 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095157274 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078987452 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074184995 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083298749 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070161243 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08468766 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067755449 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07773086 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067162993 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082107987 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077523851 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07028329 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079188879 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070909115 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088912256 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083381312 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067311613 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078174374 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081053371 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080738116 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086236679 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086126479 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087199173 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080614059 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071720913 seconds)
  done (took 4.098349962 seconds)
done (took 40.032476869 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.888807402 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.071479448 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.892956624 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.096379323 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.004772288 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.022142519 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.024013218 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.896383992 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.031386305 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.926742682 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.222372999 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.341642647 seconds)
done (took 68.306744168 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.9634121 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.0470275 seconds)
    (2/2) benchmarking "String"...
    done (took 2.116906727 seconds)
  done (took 5.988229545 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.4945809 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.898712761 seconds)
    (3/3) benchmarking "different"...
    done (took 1.949244902 seconds)
  done (took 8.168425712 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.986162945 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.926465652 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.155743752 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.899616909 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.895584249 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.28973959 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.720323008 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.362014184 seconds)
  done (took 32.079010704 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.170414733 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.15176737 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.641718294 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.652935414 seconds)
  done (took 16.496010462 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.502643648 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.160525044 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.161777076 seconds)
    (4/4) benchmarking "different"...
    done (took 2.157522944 seconds)
  done (took 10.871385704 seconds)
done (took 85.48245535 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.898881419 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.948180519 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.91175181 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.04972063 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.9063878 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.925846939 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.908590548 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.941700725 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.897882044 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.900047178 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.317422582 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.896657079 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.894705746 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.934738913 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.895640327 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.900721906 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.350469846 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.911600045 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.941914169 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.546814916 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.35223236 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.899603043 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.902078834 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.12805668 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.034133973 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.910593969 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.923608795 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.897987905 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.588580936 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.914100259 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.900325259 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.898225374 seconds)
  done (took 208.053507619 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.901773804 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.698084538 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.777278682 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.904091797 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 3.932631058 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.092184684 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.052634582 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.284780347 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.899168726 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.920921208 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.035823203 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.899259436 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.061126541 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.938204625 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.879824563 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.994688285 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.050309321 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.094980917 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.897463446 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.089880082 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.928022235 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.865053149 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.824229882 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.987525546 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.907290335 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.949860475 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.909268295 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.913310189 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.086518253 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.993122434 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.924933641 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.919149813 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.085353365 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.763094629 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.916103578 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.913601289 seconds)
  done (took 173.122000435 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.076284208 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.911466989 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.963746869 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.035203493 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.641777012 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.633367577 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.900059228 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.900338521 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.901309809 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.909948351 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.901932018 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.969956036 seconds)
    (12/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.898635392 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.545062967 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.905277897 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.890964001 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.903359996 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.903434516 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.231180761 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.904769437 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.902660388 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.903909018 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.968652872 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.273655168 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.037081085 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.902116168 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.914806292 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.038856082 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.910237652 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.907116904 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.038731147 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.903598225 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.980169051 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.034831729 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.914840973 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.983518486 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.90759725 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.384800549 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.899050889 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.902766771 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.905115615 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.966772295 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.899943251 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.012167206 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.989118063 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.901054583 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.917105231 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.983173381 seconds)
    (48/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.903393405 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.590019001 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.900686095 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.907879592 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.902882055 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.903736817 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.905651563 seconds)
    (55/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.905181025 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.904666255 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.905279176 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.930467439 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.505994253 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.902663265 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.904952319 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.905008018 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.907509797 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.907628959 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.91193843 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.94041657 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.707618865 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.328220029 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.291744509 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.716927661 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.903999982 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.625982073 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.9599541 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.906801359 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.988815041 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.902404996 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.90518209 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.904228325 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.905721266 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.993984429 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.978885839 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.903376284 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.039873186 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.90562037 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.905171416 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.161536767 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.393799018 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.905477905 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.920765379 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.962878996 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.906672363 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.90622866 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.913969341 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.985988816 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.903710263 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.904669206 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.907121965 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.996970238 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.90777964 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.016460531 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.124627384 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.973331499 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.146565573 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.125481891 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.906226476 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.906933812 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.921424871 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.908518655 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.906607376 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.917320675 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.908351409 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.907291835 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.909137248 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.907737432 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.909979835 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.909547822 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.920745219 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.903887072 seconds)
  done (took 423.114599747 seconds)
done (took 808.252085937 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.549435779 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.867700221 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.530610035 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.559239676 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.533652049 seconds)
  done (took 14.876950862 seconds)
done (took 16.712688953 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.940566019 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.925377783 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.915526833 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.973677236 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.931816584 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.921114469 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.955052201 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.954971975 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.940996719 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.92073571 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.960301345 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.924720585 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.939890516 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.943972033 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.987764683 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.944624081 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.926754561 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.917735181 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.965109215 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.92418033 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.925580262 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.924684313 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.921010399 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.961158129 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.991966518 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.932528094 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.921365156 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.958324924 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.933856716 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.958846145 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.978849756 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.944201522 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.95664941 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.988531118 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.970848164 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.992869414 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.932539691 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.980958799 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.928076331 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.996482994 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.967483124 seconds)
  done (took 81.717712088 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.920902493 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.059604858 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.131334242 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.951335627 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.919310972 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.135216408 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.9706387 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.052060068 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.050968361 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.140124645 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.164870218 seconds)
  done (took 24.339750897 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.91952093 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.056106461 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.138078494 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.954932968 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.92126793 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.136105632 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.983201776 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.047854547 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.054651667 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.160294622 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.145481512 seconds)
  done (took 24.367098464 seconds)
done (took 132.261177872 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.296178515 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.944388187 seconds)
  done (took 6.080590951 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.915875659 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.930859351 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.069694589 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.915342985 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.916913775 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.91712089 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.914757694 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.915870743 seconds)
  done (took 17.33394029 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.914973164 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.914278831 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.915696014 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.914427867 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.912082786 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.916144983 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.9131385 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.915353852 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.916249125 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.915204861 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.915746839 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.917083902 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.916956006 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.916472492 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.917604194 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.915331273 seconds)
  done (took 32.488231062 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.916017459 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.91553046 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.917477731 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.915626089 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.916262578 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.916730837 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.918710454 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.916329082 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.916443704 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.915724568 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.915673807 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.917535798 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.916334221 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.915738087 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.914489311 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.916425172 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.916257795 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.917098746 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.917507398 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.916900768 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.915642033 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.887367461 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.921229439 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.918113524 seconds)
  done (took 47.812012675 seconds)
done (took 105.566746156 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.139077819 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.522154303 seconds)
  done (took 8.500974875 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.922694558 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.918490409 seconds)
  done (took 5.742882774 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.918832426 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.919416456 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.919582863 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.918228689 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.918451908 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.920487597 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.920315348 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.919144355 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.917811373 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.920726741 seconds)
  done (took 21.03494521 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.920169948 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.919171123 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.921887436 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.918816567 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.920194651 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.920130793 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.919729506 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.919244075 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.91865781 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.919634675 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.920098334 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.91936281 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.919409346 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.919678093 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.917680085 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.91813924 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.917454221 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.91679116 seconds)
  done (took 36.388503818 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.917693496 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.918120692 seconds)
  done (took 5.676023148 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.917569263 seconds)
    (2/7) benchmarking "second"...
    done (took 1.917555703 seconds)
    (3/7) benchmarking "month"...
    done (took 1.916383826 seconds)
    (4/7) benchmarking "year"...
    done (took 1.91742313 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.91767378 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.917771472 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.91799788 seconds)
  done (took 15.262730309 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.918264929 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.073403425 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.1243647 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.511263779 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.919417309 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.919497185 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.791758884 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.920659774 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.921921263 seconds)
  done (took 20.94134184 seconds)
done (took 115.390926973 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.770569074 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.915294422 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.130898689 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.022403953 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.930083611 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.212873916 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.932436742 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.459393817 seconds)
done (took 43.217589184 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.99171959 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.915518799 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.943121598 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.945774932 seconds)
  done (took 22.647510574 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.918619384 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.242347883 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.938243361 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.837912895 seconds)
  done (took 22.797216451 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.297706315 seconds)
    (2/2) benchmarking "read"...
    done (took 2.29025528 seconds)
  done (took 6.436804259 seconds)
done (took 60.718510605 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.919464135 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.917610795 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.918959049 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.918646732 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.919383711 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.919126421 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.919334339 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.919109009 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.919384807 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.918594001 seconds)
    (11/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.919053769 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.920247768 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.920521737 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.921600886 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.919687211 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.920301775 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.920032834 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.919915629 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.918107995 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.920163321 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.919093451 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.919724191 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.920609475 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.921386289 seconds)
  done (took 47.913496934 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.920220579 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.920515864 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.920499398 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.92141637 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.919427974 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.921231485 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.921349574 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.919862505 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.919691096 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.92325201 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.920272154 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.922097723 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.919632039 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.920622214 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.921488859 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.92126306 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.920847996 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.921119228 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.920482432 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.92342321 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.921220024 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.920771352 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.921398242 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.919997308 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.922093122 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.921223097 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.921142063 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.920757097 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.921910722 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.922067541 seconds)
  done (took 59.475919726 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.922171781 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.921442177 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.921796059 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.923258979 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.922091748 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.921393892 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.921585181 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.922319526 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.922152294 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.923448154 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.922846581 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.922186652 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.919258423 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.92297753 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.922734853 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.922208208 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.922005918 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.922530094 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.9222088 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.924063748 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.921680133 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.92344353 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.923210911 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.923513094 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.925461877 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.923097103 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.924011235 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.924036761 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.922263429 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.923670448 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.925553498 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.923949743 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.922777093 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.924253512 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.923592197 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.926484557 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.923632995 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.923443991 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.923905781 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.92453816 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.925313453 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.922973748 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.924917152 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.923836239 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.92421637 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.925802459 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.923220344 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.923987034 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.924102431 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.922323599 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.92655121 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.926412125 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.924495082 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.925169779 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.925377869 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.926231711 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.926402409 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.926302705 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.923501473 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.925110906 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.924810438 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.924214659 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.924038981 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.925439103 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.925248654 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.924532795 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.925594354 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.923951684 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.925358548 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.924190652 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.926220638 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.926058542 seconds)
  done (took 140.366027282 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.927243875 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.925068574 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.924190686 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.929026992 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.92492897 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.926104298 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.92692807 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.926838452 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.926997103 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.927085028 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.926350835 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.926093483 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.926331085 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.927535314 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.926180181 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.928754099 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.926702331 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.926226234 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.927461125 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.928880083 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.926553014 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.927710367 seconds)
  done (took 44.239844666 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.926238077 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.929615408 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.926137733 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.926897689 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.928187092 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.927357582 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.929960526 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.927667746 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.92597191 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.927313397 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.92536874 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.927614979 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.928918525 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.927795076 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.928247793 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.928269908 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.929216266 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.929552499 seconds)
  done (took 36.551394556 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.930010874 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.928527444 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.928132381 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.92953176 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.92690782 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.928546997 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.928200149 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.927474179 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.931111855 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.929040148 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.927929868 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.927937428 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.929795153 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.930236539 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.928535667 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.928243126 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.930865301 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.928244443 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.929240804 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.932000572 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.930994859 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.929578914 seconds)
  done (took 44.294052706 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.93131124 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.932098202 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.931252888 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.93038115 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.931721512 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.929871129 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.930781994 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.929167155 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.929925431 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.929725816 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.931358833 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.932938926 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.932212577 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.930742663 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.929552061 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.931063296 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.931236476 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.929484992 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.931043111 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.931579873 seconds)
  done (took 40.472313803 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.931221421 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.932368315 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.931269383 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.932044243 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.929460502 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.932917753 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.933399772 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.932772289 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.933128579 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.932286151 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.93388073 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.931497506 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.933914944 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.93267164 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.931890908 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.931722468 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.932065531 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.933694587 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.933798366 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.933388513 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.93329822 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.934703483 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.933400594 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.936136309 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.932968974 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.935490064 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.933738307 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.934834625 seconds)
  done (took 55.979186093 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.931498415 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.93273989 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.932931155 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.934430055 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.933806225 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.93432605 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.934198479 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.935199137 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.934396958 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.933106894 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.931629232 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.933204462 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.933420228 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.937190623 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.933156754 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.933359159 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.934744027 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.935047715 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.935916814 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.934927068 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.933242469 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.933875785 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.934664986 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.93529069 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.93596099 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.936074907 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.936084163 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.935055923 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.934569786 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.93603148 seconds)
  done (took 59.889821562 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.95586129 seconds)
    (2/2) benchmarking "in"...
    done (took 1.9549416 seconds)
  done (took 5.770682336 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.936328195 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.934166358 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.935217231 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.936936868 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.936868311 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.934244448 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.936043792 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.936564491 seconds)
  done (took 17.346379079 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.936598556 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.940457937 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.935602103 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.936471151 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.937469906 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.945370113 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.937969962 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.936377513 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.937941113 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.938247272 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.941076039 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.943736575 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.945850889 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.941203086 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.939373715 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.937670817 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.938293434 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.938052548 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.938005181 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.935655794 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.940018469 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.936736972 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.937290234 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.938423079 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.936344864 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.940136135 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.946897826 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.939733898 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.936959221 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.93683147 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.943871271 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.933969972 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.936767742 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.938950673 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.93759382 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.938305194 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.945447396 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.93973172 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.938792154 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.936630131 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.941197838 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.940890842 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.94157717 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.945470274 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.939081605 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.93740586 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.937552335 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.938159375 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.937450974 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.942000853 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.948672235 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.940020432 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.938463885 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.938899772 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.942147415 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.938816577 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.937277097 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.941069784 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.945537962 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.94459778 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.942633827 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.960159087 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.948788525 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.939449215 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.939006381 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.948895598 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.965890089 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.940601054 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.940347459 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.938922422 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.948239653 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.938812154 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.924379695 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.93798677 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.954764001 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.948551728 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.939329635 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.939904296 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.941212218 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.937773532 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.940960966 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.938350674 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.939342791 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.938242295 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.951588314 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.962858987 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.938651893 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.939157492 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.941536183 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.940929919 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.943574933 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.941339332 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.938624093 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.938626825 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.94159642 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.9418484 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.937960781 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.939091335 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.93840692 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.949852601 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.936439377 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.937055105 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.942015028 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.945487527 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.940514898 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.940255595 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.93964232 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.939184472 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.947101691 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.940110951 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.939573194 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.938359991 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.939185542 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.944730069 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.938962158 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.941891882 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.948056139 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.946389949 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.940204489 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.943156898 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.944230858 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.941784227 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.949422796 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.965268871 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.939079266 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.945052444 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.944018535 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.918232915 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.943601335 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.939897913 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.945141025 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.938031519 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.937946619 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.941106959 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.94007565 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.941789012 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.939040277 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.940159731 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.939091525 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.940579401 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.943503838 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.941585762 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.943457838 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.940431982 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.944124755 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.942601385 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.944350767 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.948385108 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.941675095 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.944358057 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.945265065 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.942109968 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.944620106 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.944525894 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.942222932 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.941462795 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.944277761 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.943242403 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.942794602 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.942412241 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.941908889 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.944952085 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.947728484 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.941729898 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.942640776 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.944164528 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.943517429 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.94204442 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.944140259 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.944325135 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.943910008 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.9437677 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.945650688 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.941981118 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.941289958 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.929586345 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.94297528 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.943027253 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.946396139 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.952911875 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.947065397 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.954174971 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.943679214 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.950647215 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.945502709 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.945433692 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.944918991 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.943915435 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.944210188 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.943419046 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.943172654 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.946690652 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.966410348 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.954464793 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.945580266 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.947167043 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.9507743 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.95004629 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.949569286 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.946205632 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.944792149 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.948171617 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.944994112 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.9453413 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.945152055 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.95047433 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.945734157 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.94551566 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.949077946 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.946321398 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.944790907 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.947166437 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.945229533 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.948428458 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.946481639 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.944960875 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.946497603 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.946268586 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.954758501 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.949134579 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.946375121 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.946551754 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.947341432 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.948285174 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.946962042 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.945477441 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.949432467 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.946388855 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.947084319 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.954794156 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.947282423 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.946817919 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.94618545 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.9467835 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.948574288 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.946400094 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.951202508 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.95616815 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.949406276 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.945599239 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.952956337 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.946512321 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.949247803 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.947057068 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.948151573 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.948042285 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.947957949 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.947907033 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.947268069 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.954793026 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.947672966 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.949089951 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.946212266 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.950830689 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.947695497 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.950780183 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.949381643 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.950558925 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.957428505 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.953566835 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.949084694 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.951457239 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.949072405 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.949263436 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.953577975 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.949590003 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.962046878 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.959023865 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.935261582 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.948851091 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.947993982 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.951616489 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.949271843 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.91521739 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.956449706 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.950362107 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.950116449 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.954026643 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.950143842 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.949446556 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.955024364 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.950892907 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.951977948 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.95055847 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.950832641 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.949681271 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.950127534 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.950843015 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.94967783 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.951047186 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.952821446 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.949003244 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.950758684 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.948959544 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.959157802 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.950293129 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.951279695 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.957396214 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.951031206 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.95069542 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.95015862 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.949672736 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.951882022 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.950519358 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.950207276 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.953342615 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.950485867 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.954207674 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.962761151 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.954936265 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.958976783 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.953678307 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.963068654 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.950709486 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.950466633 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.952251948 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.954772173 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.960561651 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.950556479 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.950165761 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.959536881 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.95384017 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.952599875 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.955673565 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.95274016 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.953446998 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.953058193 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.954654023 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.958166239 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.957790205 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.952602324 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.953525576 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.954047052 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.954692836 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.956068968 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.954389558 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.953998497 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.955717782 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.952934655 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.953414817 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.953876409 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.954449848 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.954093923 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.953613165 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.953652916 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.96355561 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.954219087 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.955522719 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.959703143 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.954877747 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.962722679 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.953484646 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.953782931 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.956204708 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.955321747 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.95738033 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.954526567 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.95515435 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.955566653 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.954942574 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.955312061 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.969434596 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.962250767 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.959029237 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.95926951 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.955512283 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.956228228 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.965505935 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.981384808 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.955670036 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.959424993 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.961561072 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.964224943 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.958431893 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.96218573 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.959205934 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.967575498 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.957053469 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.957027003 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.958625509 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.968705841 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.956479552 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.956258289 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.95676756 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.960417948 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.957926019 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.95645921 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.958831806 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.960179218 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.957922936 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.968393663 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.956909847 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.958278627 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.957705969 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.956447886 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.95734061 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.955751509 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.958044531 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.959746911 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.957018742 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.958155703 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.959160577 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.962577975 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.95739989 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.960468771 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.96849487 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.95797114 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.958644364 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.959888249 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.959175278 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.960412145 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.958976414 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.957811849 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.96186469 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.958027291 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.958508552 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.96182974 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.967328754 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.960583878 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.959318942 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.957026984 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.962472542 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.958346894 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.959207028 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.960976518 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.968415655 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.963401206 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.970894701 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.972000298 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.960703828 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.961026284 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.966754198 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.969573233 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.958571726 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.959158806 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.960715775 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.96118636 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.961187795 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.959201314 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.960385825 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.95939142 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.965202729 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.960547611 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.960488738 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.959459807 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.958821293 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.964583708 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.960587735 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.964497219 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.960260453 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.958983181 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.959441679 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.961752616 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.961688877 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.963510294 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.96028221 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.960390504 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.962292411 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.961855445 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.965964179 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.961265702 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.96219087 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.963788834 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.960764321 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.960016635 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.961662537 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.960101311 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.960243341 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.96428956 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.969491273 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.962722335 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.962727413 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.964122721 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.965090539 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.962528966 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.960820738 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.962002629 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.961689082 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.970042229 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.961800069 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.962510491 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.962844286 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.962951965 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.967676945 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.965612998 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.967707388 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.9636304 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.962098049 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.961158082 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.966248702 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.972678123 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.966274328 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.966964927 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.970805108 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.966133975 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.963579883 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.963487416 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.961247703 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.963892594 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.96434001 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.966626927 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.964717834 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.965448826 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.961756607 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.965530046 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.964998784 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.963711044 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.963055446 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.964087752 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.968847275 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.974714169 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.973540647 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.963816711 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.965766816 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.965291521 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.966153848 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.977123813 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.964487296 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.963618039 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.966191248 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.965549117 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.965635755 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.973244369 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.975693523 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.968778786 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.966598544 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.96967784 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.984080204 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.966790456 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.974880116 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.998305428 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.965632855 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.965592888 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.966245053 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.966860835 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.965222272 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.968666642 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.965895308 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.973320097 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.965712485 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.96652214 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.974741832 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.964992035 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.965063198 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.965075652 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.966387098 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.971013944 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.966030496 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.972753426 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.964202113 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.965437699 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.964068441 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.965912889 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.963767302 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.965099171 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.964452239 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.967384792 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.963793 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.964675629 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.973927332 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.963689575 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.966517227 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.450002243 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.979401546 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.966784067 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.963220076 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.964436725 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.969910238 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.969438786 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.964907458 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.968152795 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.974674356 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.968035161 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.972656929 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.967268643 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.965301368 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.967073281 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.964816443 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.966917877 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.97920224 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.978409046 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.967753395 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.967438092 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.973197156 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.967960202 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.97236124 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.973082071 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.966010148 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.968604411 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.968096469 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.968023194 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.966762677 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.966928621 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.973158209 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.976838792 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.970422571 seconds)
  done (took 1166.631439355 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.967059864 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.966800344 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.967355092 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.968567226 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.967866545 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.966712769 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.968110797 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.967858268 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.969092987 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.968588138 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.968697953 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.968603734 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.968330669 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.967468742 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.967131672 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.968500853 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.969219641 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.955158598 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.967942046 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.969286752 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.968935275 seconds)
  done (took 43.207651446 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.967199172 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.969696051 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.968227883 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.969767286 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.968972821 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.968434134 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.967821336 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.969207911 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.970030803 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.968734906 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.968888581 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.969887287 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.968615763 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.968789396 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.969420859 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.968909349 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.968894534 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.968955646 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.968681595 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.971158105 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.969840253 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.970357328 seconds)
  done (took 45.211802958 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.972354399 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.970491798 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.970351884 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.96933816 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.968723556 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.971090712 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.970051699 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.973250549 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.970454369 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.974131035 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.98055119 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.979329599 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.971048705 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.974266931 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.971752322 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.957404246 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.116456042 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.972221523 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.973042059 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.970816389 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.971653131 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.978502102 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.971530566 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.970593964 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.970713615 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.971976187 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.971882291 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.972480922 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.971509804 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.970348045 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.977270911 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.972050177 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.973041772 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.97487638 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.972498076 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.97559683 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.97776576 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.973450529 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.973104976 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.970808168 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.982238442 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.998145927 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.950234249 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.973310759 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.979411064 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.973478767 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.973673184 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.975139438 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.980742285 seconds)
  done (took 98.717483656 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.973235714 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.972452658 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.973505298 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.972734764 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.973338299 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.972794478 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.972662828 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.974109473 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.973515712 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.97426936 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.974970281 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.974835213 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.975568861 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.976985368 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.974734481 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.974900497 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.975054422 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.974490638 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.974412187 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.977379199 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.975987988 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.975291661 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.975655002 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.976765846 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.975731271 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.977643206 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.975439211 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.97759516 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.977250125 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.977302719 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.977304056 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.976694408 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.9761553 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.975738232 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.977998888 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.977335629 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.976929568 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.975707076 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.976797537 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.97756192 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.97800302 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.977967112 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.977788063 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.94617444 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.974737209 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.975793785 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.975405578 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.975158948 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.977306979 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.975286065 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.97783327 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.975717679 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.976220346 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.976123866 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.976871545 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.976390973 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.975294804 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.976152175 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.977807721 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.976006735 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.976955857 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.976342742 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.979172403 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.975931204 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.975987083 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.978801426 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.975055916 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.97574403 seconds)
  done (took 136.22790131 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.977051422 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.976551609 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.977363205 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.977471263 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.976862778 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.979492163 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.977979055 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.978551488 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.976444835 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.978823814 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.977762964 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.97708517 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.977914456 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.977447719 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.978420305 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.963789481 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.976742566 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.977964913 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.976745005 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.979171919 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.976973726 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.978603417 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.979229703 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.976778897 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.97956172 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.979627125 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.97922019 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.978513601 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.978066291 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.980093118 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.978317089 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.978888778 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.978423072 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.978463688 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.978864032 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.977131978 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.981444114 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.979591954 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.979875868 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.974123556 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.970538472 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.980882716 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.979975717 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.980489301 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.978628322 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.978781407 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.978816597 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.981275043 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.980302897 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.981127258 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.979281177 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.98054942 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.978934617 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.979836955 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.980582863 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.9815695 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.980242004 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.981291237 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.98122467 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.979925829 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.979744 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.980495449 seconds)
  done (took 124.565552182 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979090293 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.981884349 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.98001463 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.980542542 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.980977542 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.981282829 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980594146 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.980994614 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.982206318 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.981964675 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980565371 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.981790299 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981443959 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981235025 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.981987369 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981555985 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.982614463 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.982377348 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981786715 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.983066444 seconds)
  done (took 41.529030736 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.981029276 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.981392682 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.982650001 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.982439351 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.983383435 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.981595556 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.981430018 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983333256 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.9816737 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982231087 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.982537569 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.983684373 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980325253 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.982651842 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.982501269 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.982598595 seconds)
  done (took 33.619749215 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.983797997 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.984438263 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.984426421 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.983513025 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.983141443 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.982705016 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.983075944 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.982280053 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.983544938 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.984973327 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.981651895 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.983168797 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.982642609 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.98512047 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.984146815 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.984173856 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.984402276 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.984712038 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.984186664 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.984057773 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.983670736 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.983205791 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.984175976 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.983825658 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.982667343 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.984654895 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.984168106 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.982727486 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.98507675 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.984553986 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.983937557 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.984751585 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.984667241 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.985394182 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.985842998 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.984406304 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.985516645 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.985025563 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.986345172 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.984891531 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.986008032 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.986176818 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.98464933 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.984083964 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.987111702 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.98627288 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.985092019 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.986685667 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.985382519 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.985902568 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.986334633 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.984610884 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.984156247 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.985914569 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.986811433 seconds)
  done (took 111.0538121 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985714641 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.98474702 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.987070111 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.986173403 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.985712872 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.985865054 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.985108541 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.986425342 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.986496974 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.98648588 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.970083527 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.985610007 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.98491417 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.985893314 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.985502514 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.986463603 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.985213563 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.988406547 seconds)
  done (took 37.6393883 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.98579801 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.98680027 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.986393111 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.986558732 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.988045579 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.988031331 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.988736875 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.986456834 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966741643 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.986744483 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988880769 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.988287499 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986588093 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.987960308 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.988417247 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987656015 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.988192173 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.987172991 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.988044329 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.988200807 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.98747754 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.989232737 seconds)
  done (took 45.614049104 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.988095795 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.988556968 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.003109261 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.014493361 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.012204024 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.029505366 seconds)
  done (took 13.944973401 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.990904887 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.988661316 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.989708155 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.989709366 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.989660325 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.989833172 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.988806502 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.989956798 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.990415854 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.989936524 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.991596961 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.991648534 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.990413424 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.990868566 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.991258639 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.991609775 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99111237 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992631174 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990961632 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.990605779 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.991045749 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.991893461 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.992100644 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992569461 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.992516801 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.991722482 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992444418 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99189595 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.993329134 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.992263586 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.993766513 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.992416231 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.991763733 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99160393 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.992461481 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.992455803 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993712371 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992032841 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.993878459 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.992314583 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.992304821 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.993272208 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.990949464 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993609386 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.992738405 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.994182631 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.993318116 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99328732 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.994610823 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992398446 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99358251 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992623521 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.993352578 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.994936122 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.993272362 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.993710002 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.993411518 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.994348577 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994077776 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.992486036 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993938197 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99454436 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.994111636 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.993051803 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995033294 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996500734 seconds)
  done (took 133.404473228 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.994795789 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.994938656 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.992730305 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992441078 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.992926295 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99511594 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.995066248 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99384213 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994228044 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.994156863 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995019103 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.993910026 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.99411588 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.994030852 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.994160556 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.994791086 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.992217112 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.996442535 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.994946593 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.994718619 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995612408 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995253469 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995260173 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996190484 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.995928852 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.996948599 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997117533 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995420246 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.993577787 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995175016 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995749555 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.994363739 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998916788 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.987397907 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971285858 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996539426 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.995295599 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.99512275 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995623307 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995820654 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996505644 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.997343978 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.996851144 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996904818 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.995815028 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.997365399 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996016244 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996260683 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995952402 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998221082 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.998529562 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996665776 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998029185 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996777195 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995838652 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997527901 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99696331 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.99613084 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99595212 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997779759 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996716564 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.996453671 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.997427324 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996779063 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999530957 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998056011 seconds)
  done (took 133.606421951 seconds)
done (took 2719.123517352 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.005347031 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.056220518 seconds)
  done (took 15.98030544 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.156510211 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 6.996162946 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.177841008 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.111089681 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.998666582 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.999500404 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.994857333 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.996102014 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.087274374 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.996031259 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.014294392 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.994219054 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.996565234 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.996302039 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.995877464 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.99601017 seconds)
  done (took 54.429539411 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.002269067 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.001594529 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.000934742 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.996479344 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.011702239 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.073814817 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.018973662 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.001215939 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.013737338 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.02953415 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.015556008 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.005203534 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.010389276 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.003377507 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.089539829 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.046073861 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.058290146 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.073810008 seconds)
  done (took 38.369341198 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.081242181 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.002339073 seconds)
  done (took 11.009076821 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.023606105 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.025355304 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.993339801 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.010540872 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.024728276 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.001784808 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.01655865 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.014854436 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.013379204 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.027435887 seconds)
  done (took 72.097108525 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.001334565 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.003355343 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.30994797 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.00743025 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.008636969 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.028673343 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.999406352 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.032460785 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.999857545 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.998458985 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.00749842 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.315320457 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.013099131 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.999184598 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.420898711 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.011429551 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.005191764 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.032395787 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.034843154 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.002588944 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.005688063 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.004975222 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.161636471 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.704668154 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.999711891 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.005877052 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.006749936 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.997846768 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.997702649 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.000397284 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.00220694 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.998637272 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.00530978 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.005855257 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.005708258 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.003513614 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.498933014 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.021664972 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.997545904 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.097004647 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.046566734 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.005822981 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.787140662 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.000383116 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.998909815 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.01078973 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.66353794 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.094457226 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.999954414 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.186760454 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.344593371 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.014862515 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.158117052 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.212017898 seconds)
  done (took 140.199098558 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.999639341 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.23402531 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.153146962 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.998294439 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.254429755 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.20941672 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.000483193 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.046382745 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.001987623 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.201347105 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.252624935 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.101319653 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.998049301 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.995823995 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.995692436 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.995062459 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.143753635 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.066402598 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.000796093 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.997110899 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.023154618 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.20212829 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.122310702 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.000656851 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.023781813 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.205053651 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.121102848 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.101927439 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.776805188 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.999052622 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.061441254 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.998744168 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.000893677 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.998189719 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.15247243 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.074828845 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.082382319 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.000424555 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.99862556 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.99857596 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.674971042 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.199918422 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.093741764 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.123036077 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.247199892 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.212421055 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.61073204 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.997771594 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.622676309 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.164823177 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.2046585 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.212972675 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.116434513 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.001510877 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.283381347 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.997726988 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.99941542 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.219879352 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.215972889 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.09753121 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.002161241 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.000066854 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.997125196 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.240352315 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.002339376 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.08973333 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.00203969 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.998889253 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.092317865 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.086834672 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.227741797 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.220569615 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.029045271 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.321218059 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.495120372 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.205258645 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.064328443 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.220051081 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.001692676 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.99900698 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.080328165 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.837878331 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.25370585 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.244550228 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.199540222 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.028562614 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.649494488 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.001836824 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.190035029 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.190443714 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.231648063 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.244721079 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.235633616 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.35119481 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.001866251 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.002077233 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.308458697 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.116235374 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.004207017 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.353434524 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.22780585 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.529087023 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.028607718 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.287074696 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.129982869 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.003391076 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.652565784 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.004462453 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.207441677 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.041709259 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.004049171 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.005773193 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.19160401 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.907664046 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.002009176 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.702424924 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.062325993 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.004473051 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.207076747 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.005122744 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.245806592 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.005277559 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.236320373 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.633566186 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.033698212 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.177155037 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.25011588 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.627578865 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.29764373 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.245523148 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.115668843 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.226610314 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.79929208 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.004409576 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.265396125 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.004945015 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.003934479 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.172757149 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.005255371 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.147694857 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.006688133 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.268909666 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.022841133 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.232272337 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.009564586 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.244000197 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.035998469 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.054251926 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.007329577 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.129690848 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.007348201 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.83966925 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.163600073 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.006545075 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.002797824 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.607356656 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.005128642 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.157848637 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.229928137 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.024737347 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.073895082 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.569760715 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.000895501 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.08632429 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.02689101 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.275906026 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.00467556 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.253172742 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.98537162 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.478385348 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.004914012 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.241120861 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.189639737 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.008674586 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.004727425 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.846575308 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.005351574 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.005918025 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.162242731 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.42410784 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.927567454 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.204266563 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.00724948 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.133667665 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.010368389 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.083925587 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.3507621 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.004809087 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.017126986 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.015385386 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.018487644 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.016247176 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.227125924 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.043599553 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.451030131 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.152126878 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.274421205 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.320030515 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.21702119 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.057124103 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.02040184 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.240881503 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.018390069 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.078840469 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.018668623 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.036520424 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.250587393 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.021000758 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.223204054 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.253947691 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.905519616 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.06461346 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.019358586 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.018085401 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.943973294 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.162506839 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.104696966 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.020128418 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.019578817 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.133222146 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.138342041 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.201807328 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.846962244 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.166720094 seconds)
  done (took 930.486498986 seconds)
done (took 1264.492326613 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.020291615 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.019344708 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.021272039 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.01823185 seconds)
  done (took 30.021157538 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.021191051 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.021346269 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.020935617 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.020450854 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.019902785 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.022523947 seconds)
  done (took 14.070264964 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.005222741 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.020297274 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.02128225 seconds)
  done (took 22.990405918 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.446703174 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.425905349 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.096138699 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.166389827 seconds)
  done (took 11.077571276 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.027127384 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.022382039 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.022466258 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.023057459 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.023334541 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.022024864 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.024667792 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.025218912 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.002043877 seconds)
  done (took 20.144701338 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.164666317 seconds)
done (took 104.412806416 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.048165255 seconds)
    (2/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.041363551 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.156419662 seconds)
    (4/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.166372891 seconds)
    (5/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.326538476 seconds)
    (6/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.260277756 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.885414753 seconds)
    (8/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.023109816 seconds)
    (9/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.444438844 seconds)
    (10/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.030942893 seconds)
    (11/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.02022357 seconds)
    (12/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.090825552 seconds)
    (13/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.648757075 seconds)
    (14/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.045709124 seconds)
    (15/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.022313231 seconds)
    (16/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.789602371 seconds)
    (17/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.107270822 seconds)
    (18/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.022913236 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 3.905997521 seconds)
    (20/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.345481455 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.042192805 seconds)
    (22/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.337034717 seconds)
    (23/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.163431542 seconds)
    (24/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.380876221 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.039117915 seconds)
    (26/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.381908564 seconds)
    (27/341) benchmarking ("sort", Float32, false)...
    done (took 5.707004101 seconds)
    (28/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.108547596 seconds)
    (29/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.225551128 seconds)
    (30/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.566365996 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.050458737 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.122328887 seconds)
    (33/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.10501644 seconds)
    (34/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.221010233 seconds)
    (35/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.028511759 seconds)
    (36/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 8.688243217 seconds)
    (37/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 3.464742012 seconds)
    (38/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.251208072 seconds)
    (39/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.145233032 seconds)
    (40/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.759942371 seconds)
    (41/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.177164311 seconds)
    (42/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.025340466 seconds)
    (43/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.515845789 seconds)
    (44/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.138580719 seconds)
    (45/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.303251467 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.412391816 seconds)
    (47/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.407573148 seconds)
    (48/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.032181961 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.163589995 seconds)
    (50/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.106552911 seconds)
    (51/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.023900056 seconds)
    (52/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.935969557 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.351067517 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.349227279 seconds)
    (55/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.93973564 seconds)
    (56/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.690239973 seconds)
    (57/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.110623863 seconds)
    (58/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.138903721 seconds)
    (59/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.359392641 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.276232939 seconds)
    (61/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.24231521 seconds)
    (62/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.240555765 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.03422443 seconds)
    (64/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.318085247 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.028175435 seconds)
    (66/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 9.616922013 seconds)
    (67/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.196929094 seconds)
    (68/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.61488032 seconds)
    (69/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.271231013 seconds)
    (70/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.520449011 seconds)
    (71/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.026822733 seconds)
    (72/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.041080414 seconds)
    (73/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.420455204 seconds)
    (74/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.038664249 seconds)
    (75/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.028526165 seconds)
    (76/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.316365549 seconds)
    (77/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.969252719 seconds)
    (78/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.123353521 seconds)
    (79/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.178302387 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.158227041 seconds)
    (81/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.89310935 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.052344061 seconds)
    (83/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.215389252 seconds)
    (84/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.030120676 seconds)
    (85/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.430790844 seconds)
    (86/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.031017123 seconds)
    (87/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.292501107 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.377894578 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.04716819 seconds)
    (90/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.190807725 seconds)
    (91/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.801832763 seconds)
    (92/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.029644046 seconds)
    (93/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.983677354 seconds)
    (94/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.651056265 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.366732802 seconds)
    (96/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.042588279 seconds)
    (97/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.037327556 seconds)
    (98/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.385300006 seconds)
    (99/341) benchmarking ("sort", Int8, false)...
    done (took 4.953034651 seconds)
    (100/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.137348269 seconds)
    (101/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.031986616 seconds)
    (102/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.196101742 seconds)
    (103/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.993659904 seconds)
    (104/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.036810864 seconds)
    (105/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.231937177 seconds)
    (106/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.038947123 seconds)
    (107/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.440596175 seconds)
    (108/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.794416025 seconds)
    (109/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.450696842 seconds)
    (110/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.036190488 seconds)
    (111/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.499592396 seconds)
    (112/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.195720176 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.050169293 seconds)
    (114/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.134413126 seconds)
    (115/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.315141792 seconds)
    (116/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.023322629 seconds)
    (117/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.455843631 seconds)
    (118/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.670179683 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.025203486 seconds)
    (120/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.183157483 seconds)
    (121/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.353225112 seconds)
    (122/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.048606264 seconds)
    (123/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.881964317 seconds)
    (124/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.145359582 seconds)
    (125/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.239434509 seconds)
    (126/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.631756976 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.343616127 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.309102964 seconds)
    (129/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.13631837 seconds)
    (130/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.997169367 seconds)
    (131/341) benchmarking ("sort", BigInt, false)...
    done (took 7.037451629 seconds)
    (132/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.294780442 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.038649214 seconds)
    (134/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.511979472 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.059327383 seconds)
    (136/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.095242041 seconds)
    (137/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.136386311 seconds)
    (138/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.035232196 seconds)
    (139/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.370501059 seconds)
    (140/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.158539145 seconds)
    (141/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.817773048 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.241718995 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.431597581 seconds)
    (144/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.056943689 seconds)
    (145/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.095868771 seconds)
    (146/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.285901511 seconds)
    (147/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.173428693 seconds)
    (148/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.328051891 seconds)
    (149/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.150971215 seconds)
    (150/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.791545292 seconds)
    (151/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.155990833 seconds)
    (152/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.334917725 seconds)
    (153/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.947832064 seconds)
    (154/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.319268107 seconds)
    (155/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.341712322 seconds)
    (156/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.353759349 seconds)
    (157/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.255822983 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 2.252152827 seconds)
    (159/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.308894013 seconds)
    (160/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.034904168 seconds)
    (161/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.509522046 seconds)
    (162/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.167196685 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.059862858 seconds)
    (164/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.388375382 seconds)
    (165/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.042520201 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.066309777 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.051173903 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.428634014 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 5.709431961 seconds)
    (170/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.052728859 seconds)
    (171/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.510074487 seconds)
    (172/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.264496846 seconds)
    (173/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.320789472 seconds)
    (174/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.0407028 seconds)
    (175/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.035888391 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 8.342421958 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.1479572 seconds)
    (178/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.078883325 seconds)
    (179/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.147447872 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.803628989 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.923939608 seconds)
    (182/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.157252172 seconds)
    (183/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.131048058 seconds)
    (184/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.320164521 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.063435826 seconds)
    (186/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.203070183 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.24759897 seconds)
    (188/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.63086129 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.200990264 seconds)
    (190/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.132232813 seconds)
    (191/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.341792291 seconds)
    (192/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.152077862 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.038337187 seconds)
    (194/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.057597379 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.037213908 seconds)
    (196/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.222917934 seconds)
    (197/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.241756049 seconds)
    (198/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.1964061 seconds)
    (199/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.145464774 seconds)
    (200/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.057211337 seconds)
    (201/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.359934593 seconds)
    (202/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.386999439 seconds)
    (203/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.247606951 seconds)
    (204/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.206235286 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.330547637 seconds)
    (206/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.264588747 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.041310858 seconds)
    (208/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.254293042 seconds)
    (209/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.460136454 seconds)
    (210/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.241588267 seconds)
    (211/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.216844689 seconds)
    (212/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.499817687 seconds)
    (213/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.056693801 seconds)
    (214/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.099110977 seconds)
    (215/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.122839126 seconds)
    (216/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.410661344 seconds)
    (217/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.042611311 seconds)
    (218/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.250948952 seconds)
    (219/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.274368214 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.057399138 seconds)
    (221/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.144708226 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.695362208 seconds)
    (223/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.050135369 seconds)
    (224/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.04390932 seconds)
    (225/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.502171904 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.186976301 seconds)
    (227/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.201738977 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.05595272 seconds)
    (229/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.037873578 seconds)
    (230/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.441420401 seconds)
    (231/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.349285174 seconds)
    (232/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.588004268 seconds)
    (233/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.240781588 seconds)
    (234/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.047428672 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.246408213 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.383703956 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.309772025 seconds)
    (238/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.055863156 seconds)
    (239/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.162097582 seconds)
    (240/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.168116282 seconds)
    (241/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.243619723 seconds)
    (242/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.27814367 seconds)
    (243/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.037759711 seconds)
    (244/341) benchmarking ("sort", BigFloat, false)...
    done (took 8.580981778 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.795687242 seconds)
    (246/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.338333022 seconds)
    (247/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.041652852 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 4.680450149 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.068415762 seconds)
    (250/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.092159557 seconds)
    (251/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.30243799 seconds)
    (252/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.932372309 seconds)
    (253/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.137146487 seconds)
    (254/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.180406266 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.813233416 seconds)
    (256/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.07056894 seconds)
    (257/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.118099438 seconds)
    (258/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.04728637 seconds)
    (259/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.260400486 seconds)
    (260/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.351352898 seconds)
    (261/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.230680698 seconds)
    (262/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.151077712 seconds)
    (263/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.118386636 seconds)
    (264/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.178394033 seconds)
    (265/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.47550989 seconds)
    (266/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.812633196 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.162531756 seconds)
    (268/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.040887532 seconds)
    (269/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.739753618 seconds)
    (270/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.198255886 seconds)
    (271/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.937005856 seconds)
    (272/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.066460374 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.171955618 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.12111411 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.155422081 seconds)
    (276/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.057937324 seconds)
    (277/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.044141907 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.120973665 seconds)
    (279/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.364836969 seconds)
    (280/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.160085937 seconds)
    (281/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.061808127 seconds)
    (282/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.341702469 seconds)
    (283/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.169072932 seconds)
    (284/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.462572005 seconds)
    (285/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.291325241 seconds)
    (286/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.285244642 seconds)
    (287/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.496216587 seconds)
    (288/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.061457447 seconds)
    (289/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.121879835 seconds)
    (290/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.896326965 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.158055868 seconds)
    (292/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.754523129 seconds)
    (293/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.19096859 seconds)
    (294/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.226493765 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.393063395 seconds)
    (296/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.436614242 seconds)
    (297/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.133402444 seconds)
    (298/341) benchmarking ("sort", Float64, false)...
    done (took 5.744296454 seconds)
    (299/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.178564597 seconds)
    (300/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.104760807 seconds)
    (301/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.073041645 seconds)
    (302/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.21092104 seconds)
    (303/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.875466753 seconds)
    (304/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.322694303 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.169054839 seconds)
    (306/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.122334982 seconds)
    (307/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.736996565 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.046305388 seconds)
    (309/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.256531704 seconds)
    (310/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.50556865 seconds)
    (311/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.072272204 seconds)
    (312/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.442647832 seconds)
    (313/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.044094412 seconds)
    (314/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.925451456 seconds)
    (315/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.462162356 seconds)
    (316/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.297470289 seconds)
    (317/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.202411628 seconds)
    (318/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.480199222 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.940545596 seconds)
    (320/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.458047374 seconds)
    (321/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.284368767 seconds)
    (322/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.093266794 seconds)
    (323/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.152347088 seconds)
    (324/341) benchmarking ("perf_sum", Int8, true)...
    done (took 3.803273176 seconds)
    (325/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.123726839 seconds)
    (326/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.535356191 seconds)
    (327/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.061029547 seconds)
    (328/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.246945442 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.390860206 seconds)
    (330/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.263374026 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.983340128 seconds)
    (332/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.257594151 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.184002496 seconds)
    (334/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.360154263 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.310726229 seconds)
    (336/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.1799371 seconds)
    (337/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.106625311 seconds)
    (338/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.136157039 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.677835114 seconds)
    (340/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.274146988 seconds)
    (341/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.335529714 seconds)
  done (took 1150.338507791 seconds)
done (took 1152.380053337 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.068632948 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.049559963 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.566073127 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.060053175 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.047756074 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.0515645 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.578189029 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.07857541 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.064254717 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.580704348 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.057759832 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.047392324 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.064390396 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.084006363 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.060725842 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.063694735 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.053795713 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.073683967 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.083650275 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.053009705 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.100393247 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.055159235 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.040296466 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.077198108 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.048788256 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.065610511 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.071424969 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.103987275 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.10175875 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.05237413 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.0562647 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.417401255 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.104932523 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.053773487 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.061626204 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.065540634 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.058385216 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.065538194 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.066283969 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.064669179 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.049973805 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.061504553 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.054226602 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.05364414 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.051620335 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.050167217 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.052592051 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.177112172 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.06385339 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.400490058 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.120061589 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.070305114 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.101465972 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.053356724 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.053079754 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.055488376 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.101762215 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.056453112 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.057847683 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.400403952 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.151315562 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.064046583 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.398477136 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.119583317 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.061338471 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.061807947 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.051329437 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.070266837 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.418339042 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.627914324 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.083454526 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.071510914 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.055609406 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.055914853 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.05724016 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.57511425 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.069456204 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.6482228 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.080989786 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.063725832 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.060820917 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.056789627 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.056043249 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.072280341 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.069340996 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.059837259 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.062814501 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.059288697 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.069711259 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.423368726 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.10337659 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.573003634 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.067186377 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.074919637 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.075136556 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.654021079 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.08806201 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.07421129 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.059203081 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.423620269 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.103457758 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.079331403 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.058782825 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.069345847 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.172485213 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.076346886 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.077147902 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.055568232 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.079078465 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.064405751 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.054112025 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.069367314 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.076836732 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.057353192 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.073047651 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.057010555 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.066629889 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.061901327 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.075129665 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.067395017 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.066662151 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.069207091 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.056145259 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.109270941 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.077330038 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.070647083 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.173631126 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.062763243 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.182213665 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.073755201 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.068422818 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.057207751 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.406547523 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.113790261 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.082534529 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.066041931 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.081787789 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.079259296 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.076316022 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.061792215 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.072959588 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.06195663 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.10924402 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.059795996 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.084557023 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.110470361 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.075875983 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.066831467 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.077910604 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.09721318 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.08211375 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.065123725 seconds)
done (took 324.04592793 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.106350961 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.056203383 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.139424123 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.060582659 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.127693659 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.119095326 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.058568517 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.062934233 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.060319137 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.449846328 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.060623273 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.065158396 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.058513834 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.05969658 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.110126311 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.062292747 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.060735378 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.293957942 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.061453311 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.12068222 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.060564925 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.06358039 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.060044327 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.451603845 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.05961019 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.059312932 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.118747964 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.060829751 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.300916286 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.060756703 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.060162045 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.30242888 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.120559949 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.073610253 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.068828068 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.069405142 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.135161812 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.069024254 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.111217472 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.108274105 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.141204871 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.093172033 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.058260169 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.062817457 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.063783176 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.060862366 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.062147751 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.092632887 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.064158443 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.067226856 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.296926406 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.06806855 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.073666633 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.061935002 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.06206932 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.07446507 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.062893907 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.064767772 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.122436229 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.062774456 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.108717447 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.452522003 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.454948844 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.063497684 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.062609931 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.062783283 seconds)
  done (took 196.511403689 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.12888976 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.135044262 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.131998942 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.066871631 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.111541119 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.128742655 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.066845081 seconds)
  done (took 16.750747686 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.06921104 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.062237305 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.086200927 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.086502133 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.063461096 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.203965208 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.07380745 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.069146942 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.089168982 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.065435725 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.400518503 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.087220547 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.071192669 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.059324708 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.074080345 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.090013448 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.067483901 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.065978332 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.161429292 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.140651326 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.069157931 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.071604157 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.092627823 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.07660655 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.06654188 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.066073629 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.064279833 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.069923624 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.065983946 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.065297765 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.06430335 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.076770049 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.06594043 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.061926256 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.063833108 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.066412789 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.064370728 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.06519069 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.06119069 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.064777982 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.064193898 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.062074062 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.065076496 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.06297032 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.061088847 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.087942983 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.066085953 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.063675554 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.064901881 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.064858715 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.092906429 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.065377682 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.063115442 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.070207223 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.105778533 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.071434219 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.064439659 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.065580867 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.063070662 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.066394314 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.067119721 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.142440085 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.087742295 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.06648706 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.085736083 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.102171152 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.065725597 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.068264103 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.06794562 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.087675003 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.065890605 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.087127617 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.06675849 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.17209745 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.067144862 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.212673162 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.089018513 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.070707715 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.067545621 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.065754632 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.072480381 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.066185407 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.067588387 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.073367347 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.07224832 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.066070733 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.067771212 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.06654668 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.07178946 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.066487011 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.114115068 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.065480195 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.0660055 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.164168678 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.066528179 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.165413833 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.091026013 seconds)
  done (took 224.055505775 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.071745102 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.06905354 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.081056318 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.071020422 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.068702468 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.07201151 seconds)
  done (took 14.417224733 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.070091501 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.07188624 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.067934255 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.067852013 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.06968965 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.068565463 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.069534744 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.070244998 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.072954512 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.070193057 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.070247071 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.070573691 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.069468791 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.069832197 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.069693079 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.069195039 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.068496162 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.069563579 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.070169194 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.068607229 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.272225561 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.069329554 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.069174506 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.073282833 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.075131642 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.069084718 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.077197377 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.071399317 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.068223564 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.077169673 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.076355983 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.072591569 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.073883942 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.077195002 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.074783437 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.074661855 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.073361075 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.071001064 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.070451851 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.071794679 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.070061672 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.070427256 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.068489966 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.071166308 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.073200626 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.079450049 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.075295809 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.079571653 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.071808723 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.071375745 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.072042785 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.070674719 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.070612488 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.07216717 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.076295893 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.077634299 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.076087135 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.070207711 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.071269044 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.07536575 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.077179989 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.073485707 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.072830151 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.075743591 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.079126182 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.072159992 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.076683113 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.079202819 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.073058694 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.072312704 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.073584025 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.072832448 seconds)
  done (took 152.403083094 seconds)
done (took 606.118900558 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.12269731 seconds)
  done (took 9.11327195 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.249746907 seconds)
  done (took 9.335595795 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.786820835 seconds)
  done (took 12.781884735 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.083953024 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.106472563 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.109339408 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.076998683 seconds)
  done (took 30.38414656 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.301320529 seconds)
  done (took 9.29390621 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.08732117 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.069273132 seconds)
  done (took 16.213316929 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.106166174 seconds)
  done (took 9.097638934 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.554624917 seconds)
  done (took 9.573530432 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.099619568 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.094129444 seconds)
  done (took 16.203181231 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.074758577 seconds)
  done (took 9.067229433 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.866528936 seconds)
  done (took 9.93630339 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.080838656 seconds)
  done (took 9.092159635 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.094119437 seconds)
  done (took 9.087739492 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.221656946 seconds)
  done (took 10.213349267 seconds)
done (took 171.385336451 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.082689837 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.075190544 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.070984444 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.071031892 seconds)
  done (took 30.278235823 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.108909422 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.10868581 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.117876769 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.109733056 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.10266716 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.102157914 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.110468521 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.073915447 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.098986609 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.106670283 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.109396802 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.108068226 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.109013485 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.118864789 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.119175422 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.108847306 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.109422089 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.110834092 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.10047561 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.115841915 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.108516455 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.111628399 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.075664038 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.074264753 seconds)
  done (took 52.513410675 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.263386432 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.141003288 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.229477702 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.126425569 seconds)
  done (took 10.751420925 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.07531871 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.13949789 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.127256589 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.123560577 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.163017032 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.178681365 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.12644808 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.287310521 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.193027712 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.203437245 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.084054233 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.099301291 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.103171959 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.124543913 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.181167504 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.076623248 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.078192876 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.193876582 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.139732109 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.287058773 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.078449435 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.131218304 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.171036606 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.130036028 seconds)
  done (took 53.488947304 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.07738853 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.086086051 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.083673049 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.079406121 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.079574188 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.078839848 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.086338788 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.078006835 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.101187085 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.079937134 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.077155327 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.080795383 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.085952818 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.079847262 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.078315447 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.094565062 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.093806995 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.075067076 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.081878993 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.085632646 seconds)
  done (took 43.658442311 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.07696872 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.922676169 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.424846661 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.327905616 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.077568927 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.078630101 seconds)
  done (took 32.903245439 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.091798285 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.098584539 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.085628295 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.102444044 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.12757997 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.086839195 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.141037854 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.218592837 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.086925636 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.137342631 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.100175368 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.085955451 seconds)
  done (took 27.359831409 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.078659964 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.078555869 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.077941186 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.088498767 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.090904082 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.087089221 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.088412086 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.07897633 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.091993886 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.099964341 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.087007841 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.091938619 seconds)
  done (took 47.037720597 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.295368784 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.30671058 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.303956042 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.759508951 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.397937722 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.059531548 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.366836643 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.293397776 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.80361818 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.833862217 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.378587137 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.061168615 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.019149063 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.006572943 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.998776136 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.325154663 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.081798889 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.936564817 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.333760061 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.126031532 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083979456 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.082261154 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082763132 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384672517 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.408233271 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084273033 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.291920038 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097916047 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.08073433 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.339892281 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.599709934 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.137230659 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.284416382 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.338176593 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.418155249 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.164313824 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.081545088 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.328663286 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.127510551 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.114266015 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.091361052 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.093343427 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.601933962 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.094505615 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.354798521 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.083669371 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.11061508 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.09292461 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006838197 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.425661624 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193571955 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.080346966 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.11814782 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.512882971 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202155212 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.325407303 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.087606236 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.322275641 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140375282 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.352984918 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.233142266 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085261057 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.296200196 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.008338368 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.430568806 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206633178 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.070420295 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.08841814 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.782012808 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.32722473 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.166055975 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.425521956 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.844763302 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.084089253 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.086124621 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.127567564 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182762801 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.083447197 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.385309159 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.081900836 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.007826357 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.1843305 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.482670044 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09095286 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.082562852 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.091260796 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.930121315 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.011504275 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.180965062 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.356807286 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.405664562 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.085322342 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.0857847 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.106948205 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088891265 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.035336729 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.722064111 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.154388601 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.012725974 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.64836854 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.629653956 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.054233421 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.6235923 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.131369011 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.366205443 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.230140701 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.489537271 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.294427392 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.330319258 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.618435413 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.090437541 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.643276729 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.169481253 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164131489 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08591539 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.647262076 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.339059191 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.401572875 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201256605 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.08771107 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.998562583 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.099384601 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.288464825 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.630403992 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.145843112 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.083621568 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.092215347 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.087072225 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.090131122 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.249876063 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104195406 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.376023683 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.160008769 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.086620522 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.023250858 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.091513174 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.368157127 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.873784928 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148248699 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.3497998 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.352434005 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.78804075 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.684425439 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.127905185 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.354170526 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.15839656 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161795709 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.668289983 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.220768377 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.184480128 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.088380653 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.221290345 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.095884554 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.092285771 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.595934136 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.502681464 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.517182178 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.131496412 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.089469499 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.04289316 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.339921317 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331737927 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150749463 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.117244679 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.093400244 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.174680309 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31764478 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.090244408 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.016185878 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.337068659 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.3360901 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.378919422 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.501198131 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.144439875 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.159635324 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.099101367 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.303676785 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.172279787 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.743944768 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.635367046 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.308308329 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.751338729 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.056303894 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.727202841 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.367970583 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.468930819 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.107680516 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.542310314 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.333333058 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.83960945 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.121878996 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.616319578 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.016750275 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09695557 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.43527928 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.050125747 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.402477574 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.153109452 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154288719 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.093660534 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.092664142 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099598259 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.000188135 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199527034 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161429974 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162843575 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.020244816 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.800398998 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.134422937 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.091707001 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.093071306 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.400028154 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.916715597 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.044972186 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.090347052 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.168474966 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.831889872 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.64121773 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.093958559 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095037037 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.695355843 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.096211652 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.971998014 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.160280665 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.844674426 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119891481 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.384990382 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.791792399 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.386262583 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.165616247 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167675221 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.092355236 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.099220445 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.793559436 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102654371 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.794514169 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.377868634 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.365352467 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.53826837 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.152717589 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.303343858 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.108911044 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.096074054 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.573525796 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.119696351 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096402776 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299137606 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.614543581 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.44305808 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.735464034 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.179019392 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.096463227 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.361701232 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.095451245 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.623031435 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.781344553 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.088756899 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.093760534 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.339290879 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.778550015 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.096062788 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.004845984 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102447749 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.308136307 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.29994234 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.376682398 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.398745658 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.542041533 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.023407353 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.10294462 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.116792813 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.338852396 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.096967834 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.113151471 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.543302674 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.163523245 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.524362533 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.377772084 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.500037641 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.725908502 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.365611648 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.160195266 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.092593283 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.747640145 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.219332489 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.029158036 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215277664 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.023648816 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.773049421 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.387327318 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.111741202 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.362254165 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.074267246 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.443558694 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.395194702 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.390905766 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143906885 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.125071533 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.095991352 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142747865 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.096781076 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.359027042 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.216032404 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.089628233 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.695834723 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139622922 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.145177808 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102852489 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.601972268 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.07950334 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.100913868 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.794011326 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.122122001 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219368406 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172403762 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.847032445 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.665722381 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.127063257 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.052305398 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.748329741 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.364694772 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.15442972 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.54963322 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13961284 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.503586639 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.098953738 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.310560377 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.105071068 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.739464845 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147929032 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.374104801 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.056313544 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.307750516 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.30534377 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.128639397 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.103039115 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024902122 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.202523252 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.002230887 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.080996692 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.100607196 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.769110261 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.531499194 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.373996785 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.559337825 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.92130954 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.101802431 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.427873572 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.498606742 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.783021377 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136501701 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103074806 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.434674671 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.232771884 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.420451045 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.394788868 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.110240275 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.124827197 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.315870174 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226430612 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.023054886 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.594910115 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.683324668 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.80162597 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.112279709 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.305961676 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.448069482 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.462720729 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.139221454 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.179615515 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.506592046 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.367340674 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.171171602 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.0267164 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.101656509 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.494431043 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.498168291 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.196845837 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.3420455 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.415938329 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.840954308 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.637352289 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.596907045 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.488053533 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.51285783 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.499983022 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316397593 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.473156007 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.431053939 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.692748959 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.515467497 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.314943494 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.2028669 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.38952384 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.978916841 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.811733367 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.346584303 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.106430846 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.031969455 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.310790532 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.22638827 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.622016915 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.62510414 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.352168261 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.381236187 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.572428136 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.642019544 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.368225901 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.128349132 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.068279384 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.126872 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.123364828 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.102213795 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.598125205 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.39625953 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.116627437 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043107581 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.772917901 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.030628093 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.317199204 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.364268985 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.142629715 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.661143189 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.373021976 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.202274224 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.394879597 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.411193538 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.140847888 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.029610179 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.837605113 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.051240216 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.167665881 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.528744762 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120846949 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.107381506 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306533606 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.035828352 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151091523 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.110579496 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.316112844 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.690391436 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374513038 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.229289015 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355455754 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.407963363 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.935060669 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127286395 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379426086 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.032124954 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.788553571 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.805423447 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.145137202 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1770644 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.104003717 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.108700412 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.378121577 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.446168696 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.304746086 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.662090983 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.141569663 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.129518905 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.441981897 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.192553016 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.108749298 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.109430789 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.660828697 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.341273798 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.10768908 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.070577161 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.318874439 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.179375708 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.303040133 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.180237449 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.621412667 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.112406445 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.939515001 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204132305 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.058618175 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106058684 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.846215908 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.168310349 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.106861589 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.378205568 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.763401402 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.310836518 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.503061538 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.994048758 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.365477597 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.150652839 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.110427361 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.22642044 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.390493904 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.410414302 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.106705738 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.385006777 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151058889 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.112841003 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.771371131 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.07635292 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.107760113 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.781849824 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.008812417 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.838099415 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.503520874 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.112447627 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.146984082 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.112041344 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.039034963 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.110031483 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.273121215 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.119037158 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.22510359 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.382073855 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.439259887 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.194964967 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110686386 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.110606994 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.116288963 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.322193276 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.623573187 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127487155 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.811161731 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314666792 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114570378 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.604351392 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.559556534 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.437006049 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.151143299 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.370595726 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374627387 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.652243722 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.380544237 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.089795944 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.336119452 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.112411793 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.380946208 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.381599358 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.111138443 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.325299053 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.648445478 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.397634735 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.453385979 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.421374992 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.17495803 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.376860447 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.027313585 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.110252556 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.112822378 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.382645601 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156596033 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.107488884 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117964187 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.663421554 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.851385442 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.579496557 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269217772 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.448299062 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.93980925 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.867134961 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.114461049 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.039597684 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.109913751 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.136343756 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.116777871 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.036774487 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.793313254 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.833076023 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.324567715 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.421670901 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.038754174 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.316447495 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.697580826 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.037325497 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.079605547 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.114335121 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.356967975 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.038236245 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.116094615 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.067703636 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.414128186 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.909260043 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.369233575 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.112389031 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.056694828 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.116578977 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.115118828 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.110474682 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.197428167 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.111828795 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226978322 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.384034704 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.498130866 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.217931075 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.752627604 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.788664875 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.049757096 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.155806837 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.668577862 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.680619607 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.408437075 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.240368865 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.790871333 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.058757325 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.115908798 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130918771 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.380927938 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.117608719 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.116064255 seconds)
  done (took 2220.224174426 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.124048301 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.161177036 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.164163553 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.179117139 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.226108821 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.204721169 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.161518205 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.165687661 seconds)
  done (took 59.418868734 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.113849992 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.095433732 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.110318163 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.114368778 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.112218062 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.142671594 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.30798008 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.147637736 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.114563868 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.116441781 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.115304653 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.116239438 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.102627378 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.114986684 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.11774772 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.428155511 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.132130687 seconds)
  done (took 80.550791826 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.119228159 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.939434695 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.113590186 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.803131651 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.168759228 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.454690813 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.116660981 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.115745331 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.227906404 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.412609434 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.163326829 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.119101946 seconds)
  done (took 92.806356532 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.115819688 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.116912101 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.113114361 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.113197608 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.116509485 seconds)
  done (took 12.605560125 seconds)
done (took 2765.652586256 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.390879579 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.213813627 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.190329203 seconds)
  done (took 6.436671448 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.260541056 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.308759813 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.41993865 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.427670126 seconds)
  done (took 11.454688215 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.398888283 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.486552405 seconds)
  done (took 6.919364028 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.489918624 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.121334257 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.503740822 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.113440535 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.115229522 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.117417669 seconds)
  done (took 23.383968343 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.115970366 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.115643928 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.114928649 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.116465822 seconds)
  done (took 10.497748593 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.113814619 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.878780527 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.115336388 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.121558672 seconds)
  done (took 22.259774868 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.295589843 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.791542051 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.883554337 seconds)
  done (took 11.004372813 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.933927861 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.562656692 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.729518508 seconds)
  done (took 10.258709299 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.946355712 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.933891911 seconds)
  done (took 7.91325507 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.255942424 seconds)
  done (took 4.290022478 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.947860471 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.42945605 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.598236037 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.643436682 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.701670065 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.336010699 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.444538431 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.39164329 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.515159778 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.527572763 seconds)
  done (took 27.572062164 seconds)
done (took 158.531801065 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.564106343 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.134276996 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.325293856 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.498354058 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.367087917 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.381031991 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.388629655 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.485337196 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.168665862 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.153108766 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.495071035 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.367543055 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.336724917 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.143005842 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.342646645 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.14140211 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.366265206 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.586746572 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.170685132 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.41783706 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.397865176 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.138990792 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.339698537 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.150944054 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.367545685 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.291382453 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.713415764 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.142578711 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.322287288 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.759088658 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.292337903 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.561335554 seconds)
  done (took 177.346251347 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.120734002 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.116752492 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.117623222 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.11725588 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.377075119 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.118034724 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.120203325 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.114743084 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.379740911 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.365215794 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.117808044 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.368392421 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.118560127 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.117497791 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.121105457 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.117894274 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.475376371 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.118878407 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.117074049 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.11939498 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.120823508 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.237966437 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.118427067 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.279120876 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.488211346 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.114714364 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.117306019 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.120210253 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.12231541 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.121110425 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.122141192 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.120045835 seconds)
  done (took 215.860085063 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.123000654 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.121186955 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.11813226 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.108940753 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.120438 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.123366122 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.122396944 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.119279406 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.923428537 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.906233633 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.122734245 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.120295526 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.121152292 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.120137602 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.120794497 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.120435783 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.119733824 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.121179517 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.121294913 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.119226806 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.122101784 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.78588822 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.120678234 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.819467213 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.122578825 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.129085926 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.121255575 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.119794198 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.117761179 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.121397317 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.122445685 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.122437112 seconds)
  done (took 228.858034089 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.36465531 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.124689583 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.125179781 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.142457341 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.126095635 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.125377068 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.106606158 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.397001646 seconds)
  done (took 21.55475362 seconds)
done (took 645.668790511 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.518289106 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.859055196 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.26107071 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.147248264 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.371322221 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.191751448 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.143039914 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.208034862 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.78882751 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.213934955 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.775460911 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.154641119 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.071186293 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.173905733 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.26148397 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.201288766 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.48856044 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.743511514 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.281048034 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.806290808 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.355995523 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.098912858 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.22602691 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.807096089 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.787290482 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.118068843 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.171680527 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.491861102 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.14927268 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.379109886 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.809487051 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.415777637 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.161780656 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.148150025 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.199999166 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.179316568 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.344367745 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.158901138 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.257627161 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.891460788 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.798152791 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.669423718 seconds)
  done (took 111.322461425 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.133477895 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.118968126 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.108496683 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.133981897 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.1410066 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.134066162 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.134480532 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.134746688 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.133373803 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.132768966 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.13310829 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.143917218 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.135133845 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.143493659 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.134721634 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.132346853 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.134953658 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.143628175 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.133103763 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.135817818 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.135228278 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.135368139 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.128792063 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.133163443 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.135043266 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.135236469 seconds)
  done (took 57.533158077 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.129494417 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.308600379 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.408803572 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.164284109 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.128677226 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.130642695 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.158426543 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.138016604 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.133232913 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.130528574 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.242303464 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.135297837 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.142529989 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.405869053 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.161594294 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.129667809 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.130031364 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.13345484 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.318858398 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.14465532 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.163811897 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.137747253 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.163086573 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.144603412 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.135487647 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.131710806 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.135832467 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.563229445 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.143831489 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.24659436 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.174410837 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.165247373 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.485564726 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.417253921 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.202473364 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.138616584 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.131608258 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.296278812 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.143871701 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.133940256 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.161056953 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.138845566 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.408713657 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.644066517 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.14742186 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.133249968 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.560919484 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.309646838 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.180491162 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.146808992 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.420013954 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.163450276 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.133559271 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.135253135 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.167640204 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.147805407 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.132641162 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.379785287 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.149786784 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.16223968 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.139657815 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.136062193 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.325628107 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.141946954 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.318277498 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.14292295 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.141574641 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.135266816 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.412149027 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.166683709 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.642547149 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.147990102 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.133441779 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.252003113 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.324059612 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.586855554 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.147093528 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.326597573 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.501454424 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.168579449 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.143688091 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.550745348 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.175401189 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.142975402 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.133656895 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.134322957 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.136135395 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.177175563 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.160155667 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.560142656 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.641789483 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.397723449 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.17375666 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.145824614 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.137260841 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.384998572 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.146242614 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.135916082 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.406107652 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.670015058 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.149510934 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.142277072 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.621101524 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.15209976 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.16570946 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.147953285 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.427810791 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.167096784 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.178228435 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.135655549 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.141359355 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.13902595 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.166821363 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.145746405 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.135217981 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.61102659 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.313862952 seconds)
  done (took 263.690398728 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.139486127 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.135240173 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.135009732 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.133441775 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.136520488 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.137179196 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.134217456 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.134105884 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.136685938 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.134129982 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.13596713 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.13543353 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.136745351 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.141737353 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.171188361 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.138032014 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.626523766 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.134911298 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.134899604 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.136665237 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.709331872 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.140475597 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.137800414 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.136394838 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.137007422 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.136307082 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.140861004 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.167157826 seconds)
  done (took 175.014655869 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.137791234 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.192172812 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.14942526 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.184242256 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.149571658 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.137249751 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.163426005 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.150422838 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.141840608 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.136617281 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.137539427 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.170000704 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.142705754 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.235980391 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.169505932 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.171096427 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.237363797 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.143338737 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.139950661 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.137358977 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.18613123 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.151990754 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.169867217 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.2007465 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.151937997 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.194559496 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.1556674 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.138847027 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.139957081 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.254682824 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.157821612 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.172126255 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.173986961 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.15841873 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.255626706 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.254314955 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.24230608 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.17090021 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.142343397 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.14059569 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.141611347 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.141179084 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.196622492 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.153566215 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.141917897 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.258050457 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.16086396 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.14071537 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.160707116 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.139813862 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.155440418 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.157743189 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.177876195 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.266351838 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.189209307 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.165215483 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.165590555 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.158197809 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.141751979 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.238010844 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.149121603 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.25607058 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.160336154 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.142371644 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.14398368 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.145441002 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.190197775 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.178521887 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.240249963 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.147926672 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.240156518 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.196493404 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.157309566 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.144155928 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.143549393 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.199571514 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.252657184 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.197573928 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.204714394 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.177701242 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.152567153 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.141385203 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.146087523 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.1719473 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.150763267 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.258895989 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.257834815 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.148100948 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.142828259 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.143218344 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.143832218 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.168299146 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.208953108 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.182907222 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.250458657 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.180145901 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.180831447 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.150757896 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.158418261 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.149884865 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.177774015 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.151810279 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.157463821 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.487433108 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.184155182 seconds)
  done (took 230.666803361 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.499496675 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.190049621 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.21366218 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.403293097 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.50320006 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.035625228 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.183539898 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.193923001 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.202629717 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.304117734 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.254639208 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.241672246 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.182842903 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.165089081 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.185116723 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.206088829 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.220460861 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.479084126 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.292431861 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.676808792 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.184229492 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.477957592 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.48229416 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.519521933 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.230119377 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.559659067 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.791063075 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.284768732 seconds)
  done (took 70.230389189 seconds)
done (took 910.501956201 seconds)
SAVING RESULT...
DONE!
