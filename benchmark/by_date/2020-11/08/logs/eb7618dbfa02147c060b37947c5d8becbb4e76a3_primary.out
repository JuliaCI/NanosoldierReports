cset: moving following pidspec: 26564
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.979843301 seconds)
loading group "shootout"... done (took 1.124985632 seconds)
loading group "string"... done (took 0.674662714 seconds)
loading group "linalg"... done (took 8.726921537 seconds)
loading group "parallel"... done (took 0.185607696 seconds)
loading group "find"... done (took 2.997685666 seconds)
loading group "tuple"... done (took 2.227704047 seconds)
loading group "union"... done (took 15.060537609 seconds)
loading group "dates"... done (took 1.485558212 seconds)
loading group "micro"... done (took 0.220937152 seconds)
loading group "simd"... done (took 4.82208447 seconds)
loading group "io"... done (took 1.086565796 seconds)
loading group "random"... done (took 9.639592442 seconds)
loading group "problem"... done (took 1.52928127 seconds)
loading group "array"... done (took 25.509918271 seconds)
loading group "misc"... done (took 1.915271178 seconds)
loading group "scalar"... done (took 43.947967919 seconds)
loading group "sort"... done (took 3.353862219 seconds)
loading group "sparse"... done (took 12.874510905 seconds)
loading group "collection"... done (took 18.795380318 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.532522012 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125236049 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129475008 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122363897 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.189270798 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122495604 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131342075 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086097491 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.855872529 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139568019 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11658922 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.437206059 seconds)
done (took 5.429079294 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.168799532 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.095865178 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083085428 seconds)
  done (took 1.387118391 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.074449665 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061612229 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067601804 seconds)
  done (took 1.411781425 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065974061 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138345636 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066756425 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067490806 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066909524 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067247346 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068047326 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.07095053 seconds)
  done (took 1.758327517 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074634405 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069941967 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06780391 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069516489 seconds)
  done (took 1.495129396 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068338789 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124904409 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066641736 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066361379 seconds)
  done (took 1.536753833 seconds)
done (took 9.058473218 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.142904933 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.823366663 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.755130732 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123792511 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250417723 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.449621691 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124113001 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183323604 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090100405 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075342471 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122407342 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07829571 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.607668292 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399481395 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071772438 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172539698 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.6606604 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089485167 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132894523 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.468903245 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074722166 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088108243 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08555312 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071803611 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.328063714 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154673522 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667129385 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.177882706 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068930728 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09515632 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.07099796 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07845342 seconds)
  done (took 11.031476989 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09682002 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091858224 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069277398 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124462107 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097053407 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070520968 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07624402 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069168401 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.092039606 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.127243741 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092186675 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.100691808 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067580418 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.072154134 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.077034411 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.206372715 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.084235441 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.084865434 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070075965 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083605354 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108862636 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081204385 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.081363968 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080501333 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132610016 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173254279 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.099992389 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099931508 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068888971 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081715124 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.117249264 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128832714 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069851052 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.070667909 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.123005049 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097823425 seconds)
  done (took 4.736996322 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.899466409 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098659792 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085706703 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076731696 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109410913 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.116528282 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.123847924 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123236951 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100254251 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069480213 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155490053 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.65298307 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.136169322 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072016013 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120633944 seconds)
    (15/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.098109403 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.367069198 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.057232462 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07034393 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068344828 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071026364 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071746641 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115280225 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068511126 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.180116853 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.594187406 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072295954 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071864089 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099429639 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067261239 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.087300876 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144840674 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094686321 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075187446 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.556670249 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066019653 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063966992 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089200441 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092704732 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.18057457 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070657064 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.082475975 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06875765 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111661744 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082863756 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.504000873 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072181487 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.570493091 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225507174 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074130941 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072880414 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.067076454 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104582704 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066856657 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069774109 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.848465479 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.126727111 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068772377 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276782858 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069748161 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070107331 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071119771 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102642607 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069396964 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070773083 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074659955 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098786488 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.887832459 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090314475 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098993151 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072594662 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.493531555 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076483368 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071681535 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071643566 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.0867843 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.114085981 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068706644 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068382147 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.111028433 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.090670696 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089648394 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070213645 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067581238 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066597182 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.344353282 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.147837737 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067205097 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068248809 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.480694743 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064126402 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.0669743 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068131636 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089447771 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067215971 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064160127 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064726261 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100205573 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067736563 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.806751207 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067757516 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.463979274 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068845054 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102939297 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119920881 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068532038 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.096433277 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.072355964 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066821575 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076161737 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067254525 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066087385 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071686422 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067363222 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068373474 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066108836 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071191283 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070046118 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06950648 seconds)
  done (took 23.303963997 seconds)
done (took 41.194188397 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.319458693 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081025599 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081469299 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.0814612 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.08113332 seconds)
  done (took 1.902542145 seconds)
done (took 3.263318972 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.135854035 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.097004677 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065112215 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103124928 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070192037 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104048436 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.109862023 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105296707 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068667589 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069996629 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070910152 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105326164 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107748753 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.07066219 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100815284 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106559937 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070457952 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066268642 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070632425 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070846054 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.073767092 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066896016 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070670424 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070608956 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.102276297 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069763819 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066074232 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101314798 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071647708 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.10165973 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.07105487 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.071296141 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.071063956 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.10209916 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071155327 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101690742 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066285261 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070911269 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070753385 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071389729 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.07121204 seconds)
  done (took 4.706932428 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07367239 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084408343 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085608184 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063857676 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073596054 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08442683 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064200875 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084136614 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091460461 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084918721 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084308426 seconds)
  done (took 2.182138957 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072948469 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085393979 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086115576 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063802088 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075120955 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.088721266 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064376153 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085012203 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08772878 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083956638 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084173566 seconds)
  done (took 2.164257677 seconds)
done (took 10.339363202 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.100143148 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068423321 seconds)
  done (took 1.439192004 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224948228 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.627378302 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.328059095 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093733627 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072455209 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086187617 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203209581 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067463988 seconds)
  done (took 8.163463277 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.103513111 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.07071275 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07580963 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071856841 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069464312 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070573323 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069702999 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070195692 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070802046 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069542717 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070081761 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068159033 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069843361 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069358579 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068827563 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069193914 seconds)
  done (took 2.53913403 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.107081748 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071830235 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101275569 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064383988 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074141658 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064770176 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072968508 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075164768 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072734234 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073327317 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074748243 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072922261 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073476206 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073659437 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075323328 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075614802 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075408056 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072884006 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075621096 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.076239414 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074556703 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075334545 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.076128885 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073850003 seconds)
  done (took 3.226283397 seconds)
done (took 16.660891278 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.179923924 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076480498 seconds)
  done (took 1.534182944 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.070666597 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.07072933 seconds)
  done (took 1.437023453 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.076306867 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062593311 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081039086 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.073092139 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063613596 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063092678 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079971984 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.064140115 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063567273 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063082391 seconds)
  done (took 1.985437155 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.065735744 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071076742 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068878566 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066732845 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069123536 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064188115 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067201694 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064592258 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071849726 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064022727 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068609984 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086233573 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068167358 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086723491 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06836083 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068667425 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.070621156 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.068200408 seconds)
  done (took 2.557046533 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.063915649 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063719006 seconds)
  done (took 1.43111053 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.067030365 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06405201 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066530338 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066773041 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063762896 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063274937 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064328271 seconds)
  done (took 1.751614084 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.431224339 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125535658 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348528657 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070909886 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079004137 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259677391 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06549006 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070516656 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070316062 seconds)
  done (took 2.862755702 seconds)
done (took 14.877017912 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085004874 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184226956 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088458423 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.408164067 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091700403 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067821198 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113019379 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.179096206 seconds)
done (took 2.545714937 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.218189075 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.179612592 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.37401134 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124896966 seconds)
  done (took 2.982702278 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.339514455 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078936474 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078172512 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068738322 seconds)
  done (took 1.881906495 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.067325253 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073010548 seconds)
  done (took 1.450592275 seconds)
done (took 7.859626126 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075000422 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064133852 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.069903891 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066824952 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.066049846 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065856092 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.094043697 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066417159 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.075105722 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.06646849 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.066772231 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066288823 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066181522 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066257935 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06645062 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06618992 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066398648 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.065812632 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064416237 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065759536 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066569524 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065442796 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066059227 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065478984 seconds)
  done (took 2.971882669 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.082634177 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067397544 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068433516 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068387257 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06945912 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068770653 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068807989 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067992883 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068252273 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067272041 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069192593 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069534425 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067537656 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070143458 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067608209 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069666222 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069475772 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068441546 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067116781 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069674043 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068988872 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068137773 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069206843 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069252052 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069383129 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069829853 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.06784287 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068321146 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069642138 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069628892 seconds)
  done (took 3.402990365 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068300687 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061269795 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062296609 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072203854 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.06175569 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062144944 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062156576 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061985494 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062252793 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062810147 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061959839 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061678228 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061998739 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061392971 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061942307 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062559372 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066696886 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081657614 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062418952 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062181862 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067072802 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.06258956 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061924036 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06174843 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062945025 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062257736 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062345329 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062756487 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062000958 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062836875 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062132324 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066275228 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067249525 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061999302 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072253204 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067004545 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062077328 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065918378 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062715054 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061910697 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061439902 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061600748 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061695021 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061779695 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072281943 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062015516 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063018844 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.065972553 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062815531 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062302353 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.06247693 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06364861 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067690923 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063586403 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06182058 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063009029 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061511181 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063109562 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062005706 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.06175122 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061854607 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06543083 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063520845 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062167064 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081539055 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06318501 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072334231 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061589137 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063047 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065497417 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062710762 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079847158 seconds)
  done (took 5.951479608 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07430714 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074733111 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081179269 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073040343 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06687393 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063355465 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066571704 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063223932 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073162644 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067591202 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063179695 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066697946 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073120089 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067554827 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064664515 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073004805 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067530957 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066812916 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063474532 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067709407 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064742778 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066931602 seconds)
  done (took 2.84941115 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.139205988 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068033576 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108264296 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077358254 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070782846 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077029647 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067960679 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068187957 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068303505 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068865619 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069072215 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068879101 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071248242 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068845232 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068749132 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068499773 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06827329 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068893882 seconds)
  done (took 2.696856982 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079349145 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068109777 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091614473 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067758219 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068000477 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067170977 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071433901 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07238318 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067307949 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067553775 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071717156 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067273076 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067562855 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067868863 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067806171 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068713625 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06811431 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06774955 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072099595 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071275282 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071580369 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072538387 seconds)
  done (took 2.885427155 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079842809 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066903681 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082702788 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068522706 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062237481 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062599245 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068168325 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066926168 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065843017 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066294932 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066719096 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062419586 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068635357 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067122824 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068778485 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067150178 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066999227 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06787743 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067103917 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062048465 seconds)
  done (took 2.685518744 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.088949454 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065176161 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065374697 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084688804 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065133819 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064826119 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08460442 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065416569 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065270348 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086610877 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064875922 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064856617 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.085133831 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.08457981 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065119754 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084690674 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084931602 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.085348339 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065411381 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065307452 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087312015 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06552559 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084349736 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065561725 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065075162 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064872518 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065615709 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085178559 seconds)
  done (took 3.402069556 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066311804 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064878766 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065337482 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065659344 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06619832 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065949554 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066630009 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066405324 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068831305 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.0664398 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06594304 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065996991 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065640648 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06508436 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06544033 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.0650244 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06538122 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066268183 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066473815 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066673617 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065938563 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065730301 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065134766 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065746258 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065459999 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065607229 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066080717 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065917969 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06606732 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065927395 seconds)
  done (took 3.316101594 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.076716781 seconds)
    (2/2) benchmarking "in"...
    done (took 0.074320729 seconds)
  done (took 1.490116673 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.065070516 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080295599 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.062312073 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07463449 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070989236 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065652771 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071511613 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070622829 seconds)
  done (took 1.893482461 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.069414685 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092928215 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063948876 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064240358 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066925707 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134966984 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07689443 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076296175 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077609837 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065949432 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065052811 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076355011 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063918193 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077410817 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065892488 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072710796 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071116025 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081155178 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076652879 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06236584 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076339212 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064651424 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062530539 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065294628 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063958902 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070746732 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079603193 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076736385 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072159244 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061495316 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082873134 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062676821 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064155304 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072238174 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067609446 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063203951 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100586466 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063959981 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068426448 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062940963 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075168195 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084498493 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077814485 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081148942 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064980457 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065059205 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062682705 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065233021 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066428157 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07260042 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062675102 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070572359 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062601818 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064412639 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073787366 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063573064 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.0685226 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071992157 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077004749 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073468732 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071789537 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078936011 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071614163 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071048608 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063633129 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082678399 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065123589 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076473442 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078522484 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064417058 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076265301 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062712743 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061466266 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062929049 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097856763 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064839224 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064125327 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062810892 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062647478 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064602236 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072491123 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068448361 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070183509 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06616214 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078636897 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072235699 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062869098 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.0701574 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081102414 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06613593 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063274595 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079754407 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065977025 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062391521 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080121186 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072302289 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064265428 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063368264 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06546418 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075948032 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06404019 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061043473 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070780821 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064487624 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064601818 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067196409 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071141235 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062396615 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072275083 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066852863 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063946222 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061126016 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066209443 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063302169 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061011631 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071891863 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062732075 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07685304 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068234004 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076460997 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077230584 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072573581 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077762707 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061782565 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061076854 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079643424 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.074486941 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.205020677 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083191483 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064430139 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075308374 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063902476 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.066130225 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073345046 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062761654 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065960972 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063136132 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.06854604 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064640616 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065419984 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.0690892 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071243217 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075614101 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064533948 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071916392 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.064157264 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078977145 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072937974 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067654597 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067176805 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06419333 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074572445 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069581323 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072392354 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062841041 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063629894 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063354867 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073484024 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072667604 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065019426 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.07069647 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067639306 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063832151 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063002819 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064509729 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066265764 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066904606 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064058348 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070886288 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072413599 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076975671 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.07083525 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072165235 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062337938 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.063126166 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065007674 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.063273007 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067550718 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072843794 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07904861 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074807399 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084832594 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063065461 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072875567 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064816787 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080164015 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076720583 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064300556 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067953813 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062132216 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065040392 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072484036 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074508565 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076983097 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078010971 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067817436 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067442365 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062260997 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078215443 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063451072 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071940121 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072099319 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067784028 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063298036 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06483518 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072327037 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067649966 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063066108 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078902334 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069469843 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.0628829 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077649631 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063235011 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074054658 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06256734 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066593998 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068246159 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064865674 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072453824 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078141327 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061621059 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063736626 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078609839 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06471114 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064827783 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.07144762 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078512208 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067478715 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071274374 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073825023 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072976951 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067027809 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072287461 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063406222 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072576528 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066247298 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074601152 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06313957 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081297439 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.06164096 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078837764 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062744951 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073575887 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063457594 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071977713 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063732019 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079594556 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064488926 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062964453 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074165873 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060996977 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071467578 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060610995 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066571437 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068554308 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072042064 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063992889 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072205824 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.209280274 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.074158357 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069876638 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073525354 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073938115 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.069001162 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063576599 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072343329 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074727124 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071984618 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064743728 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065173972 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064285875 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073080478 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065296991 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06520263 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071557745 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067556614 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069340219 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064847282 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065613681 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065296572 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072026629 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072697146 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081845697 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07251755 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071325151 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.075749178 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062927563 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079677035 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063094045 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070900751 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062037674 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069315252 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072374459 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063962816 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082918449 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065599225 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071576702 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076133495 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071961727 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.069116827 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081737898 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.067026585 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.0718047 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070884971 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067949242 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069434488 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065265404 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071905741 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073357088 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073998142 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064240167 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071051766 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072203089 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06471801 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071551496 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065289787 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072283816 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065250597 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062502897 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.06789043 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075068287 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068166213 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068499232 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06388148 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061618802 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063583721 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070543852 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068151897 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071729199 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079212036 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062171126 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064734378 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062952867 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067002446 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081811911 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073258366 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071303814 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067669024 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.06241283 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065012482 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065637383 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063367239 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066734607 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062485273 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063259915 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073895953 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065478087 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067362211 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063687772 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064602893 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072930881 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06828872 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064671765 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.06993087 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063054468 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068464995 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062566232 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064964613 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067580104 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062454252 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067223306 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074035317 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.08070085 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070059118 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071820849 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064483036 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070868627 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078522979 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070465332 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064402595 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072489681 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062763216 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081838879 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072858984 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071627255 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072999716 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063683316 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079400411 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067391388 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072787921 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077626301 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064355261 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06905719 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062137121 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078058281 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066473252 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061666165 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070257397 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070630533 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068219342 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074360141 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.063109219 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070979399 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067847343 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066012086 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064113198 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063204623 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070703013 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077820195 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062867532 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066342668 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070105974 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.07024771 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066734281 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074498998 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070106882 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063027512 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064229207 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065373552 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062803397 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073737592 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062669802 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066262395 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066315144 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061499364 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068111205 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07869956 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071241195 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071718955 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061454423 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061117441 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079996942 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065942912 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065652363 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070156721 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072187824 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074556667 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071549413 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078626015 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06291604 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067900645 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073619724 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062284546 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061026759 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064584619 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062785103 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.068598903 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070032768 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068028419 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062607803 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068214028 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076131925 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063029416 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06704665 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069259327 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06111591 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070366743 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.067891165 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.068639523 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061361322 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060137603 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063549347 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068466226 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068014664 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069174199 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061279663 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06527892 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.073052884 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06688148 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062365049 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059828793 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062056404 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068456107 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063614115 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059127933 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.064920903 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064420218 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067062839 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068667085 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064437602 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05933378 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075817018 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068227364 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070089659 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062263687 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062127447 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060873691 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.059848163 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07108407 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059654242 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06256587 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065780813 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062870437 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07863295 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.06840783 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075384748 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061445646 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064715939 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059742979 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069536291 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064748609 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.059865851 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069805952 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059235022 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075065302 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071073077 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06403287 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059063907 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065639356 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.087953221 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07442879 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069394186 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068608852 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062877538 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06907835 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061584987 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070460533 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060369104 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058705999 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069726172 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068372689 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.071838296 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059395762 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069404506 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061301798 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068555124 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067354557 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061327305 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06106455 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.060952419 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068903582 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.063860441 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069161969 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.322090295 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081774352 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065019901 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074935116 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073509429 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075132668 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077611764 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076566178 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.072594124 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.065709372 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072828093 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.072849689 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06598368 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.070027478 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067895739 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085628607 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06547799 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06504074 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07768603 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070191624 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063574277 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070409394 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068271827 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073423673 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064307791 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073654469 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067754599 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064423331 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06824185 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068444476 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06241208 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062668089 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062926722 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073440658 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067552627 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06318306 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081941175 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064582652 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071659703 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074076028 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06938338 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064915592 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062227469 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064089292 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07617903 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078192626 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066344017 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071774217 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063787024 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071939978 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061121115 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071372973 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070873777 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071108676 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062316707 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063400957 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077515823 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078180657 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066874774 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071874791 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071433545 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064322098 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08398739 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071516905 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064601516 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.075286988 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066654529 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.063469789 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.063025527 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.06519976 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075409083 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063802468 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06625896 seconds)
  done (took 43.017336046 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.105908972 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065684007 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064125492 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064219496 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075918767 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065607352 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064449073 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068509902 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065128935 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066832577 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.064412172 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064159493 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07515763 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077856942 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075360022 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.068093558 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064194013 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065328369 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064915851 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065877622 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075421759 seconds)
  done (took 2.980942414 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068715969 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.068036599 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068094278 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06783934 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066386879 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062639528 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066903843 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063174979 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068628434 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064411779 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067532696 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062930434 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064350381 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.065121523 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064867337 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066133388 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068804573 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068551886 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064261974 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068542239 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065893704 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.069281588 seconds)
  done (took 2.931323732 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.066529222 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.064738429 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.073038853 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.063588794 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.06325623 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.067859775 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.063546518 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.068167926 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.068198656 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06816359 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.073046291 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064645093 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.063613067 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.069404761 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.063562512 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.064957873 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.109337416 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063971262 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.064229782 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062866213 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065906646 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071906828 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062248279 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062728625 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066925402 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066022039 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062154733 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064794616 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062871371 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067364386 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063202495 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062157035 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072692372 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07279115 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.068283465 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.068902515 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.066367947 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.065426966 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.064690791 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.064365179 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.073113061 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.066390252 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.064551213 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065687956 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.073552074 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.064131483 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063981974 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.073526553 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.063854247 seconds)
  done (took 4.77186554 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.075736315 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.118100309 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068797669 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096170506 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.077096056 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068905405 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068153912 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.099377112 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063243534 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064767127 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077668538 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.079005293 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066847199 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068154314 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.071359125 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065308665 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06592178 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064937752 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067768046 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065190726 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067896614 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069597875 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.077195572 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.077568754 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06777923 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.066202031 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066625944 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.068422892 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07746472 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.070476741 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.069148663 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.069559488 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077741849 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070338557 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066673041 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066490915 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.0784132 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.067092569 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06732007 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.065487379 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.0664794 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.068095581 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.071781893 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.078614086 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065278976 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069904189 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064925221 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063249454 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.075410203 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065474018 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068971094 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077218583 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066090299 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066196406 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066734852 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.077051089 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065909328 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063854719 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.068086144 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.075037839 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063042512 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065684413 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075985835 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064485224 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068330201 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.076590662 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070036095 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066211138 seconds)
  done (took 6.457014288 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.075425508 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.099832985 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075865565 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075442245 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07489728 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.075128773 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074450588 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074498972 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074785715 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075735296 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074845188 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.115902836 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.071493975 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079698218 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07357341 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073159448 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072998764 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073933143 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072842535 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072757954 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072583392 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073067835 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072936075 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073410168 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075424076 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069232515 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072241125 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072744467 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072827858 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07270967 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076078574 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07236479 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074121225 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075125508 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.077714999 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074695837 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064921045 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074448057 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074630731 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.074791358 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070572329 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075139042 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074455748 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.071311192 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074248091 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074185497 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074940817 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076803086 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081622592 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075471718 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074354657 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075076872 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073010764 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07349738 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075201504 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.0819572 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075525741 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075247223 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076092007 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07545386 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075432755 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.081660931 seconds)
  done (took 6.194883909 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078132588 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.070567032 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.083121556 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063581962 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063817232 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073725744 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063617888 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.06424608 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070868115 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070901611 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072715066 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073911719 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.076342347 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072707797 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07372935 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07569969 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071923704 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070908609 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069401919 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073321495 seconds)
  done (took 2.941422629 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.079946471 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.083350484 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069551418 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073502243 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06909559 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073606539 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068646824 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069649613 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070277212 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069280183 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.075010631 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074519261 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070271492 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073265047 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074588534 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073515692 seconds)
  done (took 2.662542733 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067875233 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071359776 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070527974 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064754917 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065752475 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064282277 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065574754 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063866445 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066896226 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078634253 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064919641 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067298093 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064852452 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063482518 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063998951 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067260896 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.066309986 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064888571 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06531629 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069277912 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072630407 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064282998 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065917017 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.063038508 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06524845 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071469079 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064297516 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065412147 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.064626887 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.067090645 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065244839 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070812232 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066970779 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065055935 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063964231 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064599663 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.065490029 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.070928438 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06772632 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.065183306 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063337669 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067083659 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.065235025 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065548187 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.066676297 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.067702533 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.066484487 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.07075208 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.065666727 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067182254 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064863763 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06626119 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065016229 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072222567 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.067384136 seconds)
  done (took 5.166609559 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.082493127 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069066748 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063211791 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063774977 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.069099519 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068416706 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067990861 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069237011 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069773343 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063341193 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070255046 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068757989 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069857824 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069048862 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069942693 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069671388 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063075619 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069215597 seconds)
  done (took 2.748848646 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07654571 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068727878 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.074001603 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.068846716 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068869928 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066628314 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061951774 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062203113 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062678276 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068061896 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06769591 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.066314638 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06214971 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.066645948 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066666465 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066735128 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.066616828 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062257966 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067280077 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063119487 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067746261 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063885962 seconds)
  done (took 2.969344057 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.090687305 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086353571 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.131444556 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082197295 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089739548 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073036356 seconds)
  done (took 2.057002261 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096258737 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105900452 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067224739 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067671598 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075215579 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070283563 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070038821 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072217132 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076876478 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075752227 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071817269 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078118169 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077664966 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073833733 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078151154 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080505713 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071489848 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072180234 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06897267 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080801918 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072079339 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075692356 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070631179 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069960899 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070195161 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071788913 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07788871 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074188368 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070317165 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075910157 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078361237 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070534395 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076237238 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073861904 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066793633 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075743525 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070113509 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07834027 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075820868 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071553566 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066967397 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075325471 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075398908 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071972663 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07800955 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070266046 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071716592 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070502067 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070575566 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080581457 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076211539 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072277867 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075485253 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077996786 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078039549 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080332728 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074740174 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072318626 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076541275 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074533135 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072397388 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076193705 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072501648 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076330528 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079574012 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074104997 seconds)
  done (took 6.444905546 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104457679 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069032431 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071029594 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074085156 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072038679 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070138411 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070555641 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071922708 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07225791 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069985848 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109574194 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072506465 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074174625 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074199633 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072402804 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072104417 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072703371 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074040689 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067557871 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080610509 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070249962 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072727638 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072085639 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072248327 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07727593 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078370253 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070268242 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070067718 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070078475 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069819498 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071841739 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070594314 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072462641 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069071119 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073614261 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072152835 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071706069 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074009622 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072135929 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077806025 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072947349 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077815411 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070131224 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070676238 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074205141 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069978143 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070141126 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067796056 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070117829 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067284443 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073741199 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074059228 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074568462 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071862764 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070494048 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07045271 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0717738 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071405596 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071657778 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078253612 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072075771 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070354446 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080308504 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070627948 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070768414 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07234984 seconds)
  done (took 6.372715933 seconds)
done (took 132.583936049 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.222988455 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191378567 seconds)
  done (took 1.903299465 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.078664804 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.170831713 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075925769 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07548281 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109608315 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108969952 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.077074814 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072953474 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.078088308 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07606729 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142975541 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077206114 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073246539 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.075217343 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.075434634 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.075661761 seconds)
  done (took 2.954505355 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.112120294 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.191382545 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085481907 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072772107 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.119162755 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080554593 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07554836 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078865837 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.080753913 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072699678 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.111626044 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.085039002 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.077159097 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080368445 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07522767 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.077018532 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079150879 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079908208 seconds)
  done (took 3.157811306 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099414253 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089523038 seconds)
  done (took 1.707025327 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.162724688 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107540592 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147082094 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.332318453 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.131265825 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.129358648 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133101159 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.12950369 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11561163 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.124096042 seconds)
  done (took 3.023016995 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.111275237 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108950689 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.314615952 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10346552 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082947056 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078149127 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07583001 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080279968 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075975702 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077639844 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122816846 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076483728 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073596793 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124686683 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099625102 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107765184 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.07215308 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079000036 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080900037 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071829355 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077411618 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.08082153 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.180596295 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079491755 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.101403954 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076671663 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078377281 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075793101 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075598104 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078817342 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079687483 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100643463 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079217979 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083026601 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077607424 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.098496219 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072472049 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099661375 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075586074 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072951458 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076426991 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079578548 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073082415 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079100931 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076673818 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07822093 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080890031 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071753549 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076395161 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075040779 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073981332 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076970757 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076956373 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078044064 seconds)
  done (took 6.373229176 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.113139485 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106939979 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071480374 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114207896 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106434573 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070833705 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105852662 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.102012897 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.110186163 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070723357 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070382704 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071351153 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.082958855 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.084754779 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117892248 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.110232429 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072633893 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071192153 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.109166608 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.109042732 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069779554 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103197451 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101502211 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107519485 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06941859 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071445545 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069698098 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069816407 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077349571 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078395707 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069928638 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076830254 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081571488 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076288783 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068827963 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069113593 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069422073 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07627437 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07776227 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076850999 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075892773 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069418981 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069338879 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070245874 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070412545 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068989848 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076012228 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076506106 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075694752 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069609041 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069881268 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069246618 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070577461 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076839288 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075235018 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07739361 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076472313 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069798921 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06993698 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071232741 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077980618 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077619612 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077259015 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070533347 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078020791 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06983242 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078482954 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081515533 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069302203 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069998094 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069943096 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069928321 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069910806 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075873669 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075757856 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070542385 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069982415 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069303927 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078106889 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075686168 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069638059 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074836184 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069049874 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06978777 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070470288 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07070434 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075484183 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077116541 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070244273 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069838998 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070203993 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070290365 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069609896 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.07520756 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076599737 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076951146 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076217092 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070424018 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076618993 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076602538 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070477447 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076174511 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070164995 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070387276 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070225769 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075658861 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075006331 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07686072 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069320965 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069482696 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075118378 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.215726978 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071497956 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076410677 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078986225 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076343392 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.07021374 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078859737 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070644889 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078341108 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070338637 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078554494 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070129968 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076612478 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070146967 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069529847 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070071971 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076886306 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070643681 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069731773 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070719815 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070257471 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076431202 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07958118 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070726888 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07619961 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.07669153 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070559569 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076073759 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070869111 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077315028 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070701298 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07052127 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069576253 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07872807 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069661308 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.07191495 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071185213 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078125115 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069990648 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078210804 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075447836 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069355108 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08008629 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078081314 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075871214 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07865155 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071018958 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07017501 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069854715 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070199339 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075549493 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076360735 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070091262 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070641682 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077082639 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077797338 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069748397 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075827838 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075710011 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075638391 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.073493552 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069667237 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078516891 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.316248929 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075897085 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075162334 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076391197 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070070099 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075947195 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07562549 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069838126 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082148928 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069801902 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079534934 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075825 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075042639 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076310958 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077221183 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078086593 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078053694 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080506205 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069346097 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06960935 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078416475 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.072192218 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071767122 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077999619 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072690079 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071970407 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082996967 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070054971 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078474715 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069305613 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07661491 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069646608 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070415733 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08108767 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070210315 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070075077 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076233074 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069990761 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075555571 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077985164 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075912445 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069588775 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070393022 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076075962 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076290703 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069302288 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069648168 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070379919 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075298724 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074594929 seconds)
  done (took 18.912368935 seconds)
done (took 39.571133819 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.174581481 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117391105 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209559735 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199238718 seconds)
  done (took 2.32836594 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10274554 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066238832 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081524666 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091773031 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065771054 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077909932 seconds)
  done (took 2.050249549 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202482078 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175707148 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240996164 seconds)
  done (took 2.176105632 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.369410309 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149701408 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216494036 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.506619329 seconds)
  done (took 2.905125843 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110967577 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100900609 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078671441 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.11283341 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.0865376 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063587459 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134586226 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071022397 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101138706 seconds)
  done (took 2.481567907 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13156513 seconds)
done (took 13.674994565 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.227698195 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.190489063 seconds)
    (3/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.105371981 seconds)
    (4/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072814661 seconds)
    (5/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.109232069 seconds)
    (6/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.292056495 seconds)
    (7/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.253517727 seconds)
    (8/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.252508127 seconds)
    (9/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076333243 seconds)
    (10/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.190881352 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.12740455 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.093245958 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077720346 seconds)
    (14/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.184703868 seconds)
    (15/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.114425827 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080904438 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.16628689 seconds)
    (18/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079897794 seconds)
    (19/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.079678934 seconds)
    (20/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.18308899 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.091851109 seconds)
    (22/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.178983217 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066365957 seconds)
    (24/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.076977654 seconds)
    (25/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.119726877 seconds)
    (26/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.079547261 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.092447655 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07795806 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.126996853 seconds)
    (30/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.186609114 seconds)
    (31/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.221212505 seconds)
    (32/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.234412142 seconds)
    (33/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.233733727 seconds)
    (34/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.095268313 seconds)
    (35/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076551696 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079546019 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09959492 seconds)
    (38/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.097867717 seconds)
    (39/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.073383767 seconds)
    (40/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080903769 seconds)
    (41/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.195676208 seconds)
    (42/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.20293704 seconds)
    (43/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075904292 seconds)
    (44/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069027924 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.09061501 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.07964651 seconds)
    (47/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067866201 seconds)
    (48/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074957083 seconds)
    (49/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.076083465 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127277347 seconds)
    (51/341) benchmarking ("sort", Float64, false)...
    done (took 0.138431706 seconds)
    (52/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.081358649 seconds)
    (53/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083519752 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.093151885 seconds)
    (55/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.199617219 seconds)
    (56/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.212883958 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.092132899 seconds)
    (58/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.203019456 seconds)
    (59/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.142672096 seconds)
    (60/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075610312 seconds)
    (61/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.209688398 seconds)
    (62/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.219095864 seconds)
    (63/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.078514866 seconds)
    (64/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165505389 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065829027 seconds)
    (66/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.07206493 seconds)
    (67/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075192544 seconds)
    (68/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.159050323 seconds)
    (69/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.17230773 seconds)
    (70/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.080657712 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075137035 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.088415309 seconds)
    (73/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.142657606 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074164284 seconds)
    (75/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.06988638 seconds)
    (76/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.222430917 seconds)
    (77/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071350514 seconds)
    (78/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.166021105 seconds)
    (79/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.065630191 seconds)
    (80/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066468953 seconds)
    (81/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.345066862 seconds)
    (82/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.076051964 seconds)
    (83/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.19418184 seconds)
    (84/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.075781394 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089209857 seconds)
    (86/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.208049354 seconds)
    (87/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.075283674 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.083253811 seconds)
    (89/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092893357 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.127050072 seconds)
    (91/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.097631489 seconds)
    (92/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.095431229 seconds)
    (93/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.067047495 seconds)
    (94/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.140747055 seconds)
    (95/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.166641757 seconds)
    (96/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072338827 seconds)
    (97/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074805055 seconds)
    (98/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.085074738 seconds)
    (99/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.0677926 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066709438 seconds)
    (101/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.067246139 seconds)
    (102/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074166001 seconds)
    (103/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070494036 seconds)
    (104/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070121531 seconds)
    (105/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.085889325 seconds)
    (106/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.143923655 seconds)
    (107/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.0656496 seconds)
    (108/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086821415 seconds)
    (109/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077658592 seconds)
    (110/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070462311 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.136109026 seconds)
    (112/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.166588285 seconds)
    (113/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.167124691 seconds)
    (114/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.165917335 seconds)
    (115/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.076235447 seconds)
    (116/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073936998 seconds)
    (117/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.06639004 seconds)
    (118/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076282799 seconds)
    (119/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074656526 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134588004 seconds)
    (121/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.138722999 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066504627 seconds)
    (123/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075375839 seconds)
    (124/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.075223278 seconds)
    (125/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070418396 seconds)
    (126/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083929942 seconds)
    (127/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076908468 seconds)
    (128/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077075963 seconds)
    (129/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.163895124 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.200289309 seconds)
    (131/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066583506 seconds)
    (132/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067437996 seconds)
    (133/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077035586 seconds)
    (134/341) benchmarking ("sort", Bool, false)...
    done (took 0.144169398 seconds)
    (135/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.085286684 seconds)
    (136/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.09057667 seconds)
    (137/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074680872 seconds)
    (138/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.149896303 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075565854 seconds)
    (140/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075166171 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068490409 seconds)
    (142/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.066083386 seconds)
    (143/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.085126986 seconds)
    (144/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073908494 seconds)
    (145/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076244611 seconds)
    (146/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076164475 seconds)
    (147/341) benchmarking ("sort", Int64, false)...
    done (took 0.068268334 seconds)
    (148/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.162992847 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092490844 seconds)
    (150/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066577465 seconds)
    (151/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157403529 seconds)
    (152/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066933171 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066829876 seconds)
    (154/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066641976 seconds)
    (155/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096381054 seconds)
    (156/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066222883 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091413033 seconds)
    (158/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.154947246 seconds)
    (159/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083635658 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093822065 seconds)
    (161/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074951595 seconds)
    (162/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067822382 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069869814 seconds)
    (164/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191937058 seconds)
    (165/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067088377 seconds)
    (166/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.066501563 seconds)
    (167/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075618866 seconds)
    (168/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.073604166 seconds)
    (169/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.240695372 seconds)
    (170/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067003922 seconds)
    (171/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06564802 seconds)
    (172/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.145999843 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067650429 seconds)
    (174/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.190645095 seconds)
    (175/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.066276749 seconds)
    (176/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.220677917 seconds)
    (177/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079477254 seconds)
    (178/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.145673604 seconds)
    (179/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.068661542 seconds)
    (180/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150316247 seconds)
    (181/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.153049703 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065579008 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068135625 seconds)
    (184/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.18035883 seconds)
    (185/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.065460046 seconds)
    (186/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066360757 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.066660498 seconds)
    (188/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.334753544 seconds)
    (189/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066901677 seconds)
    (190/341) benchmarking ("sort", Float32, false)...
    done (took 0.141406635 seconds)
    (191/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079016862 seconds)
    (192/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076441713 seconds)
    (193/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.068017978 seconds)
    (194/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.068128179 seconds)
    (195/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075251816 seconds)
    (196/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068940393 seconds)
    (197/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08263109 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154912019 seconds)
    (199/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093685931 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067788803 seconds)
    (201/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07567353 seconds)
    (202/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077531553 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.160956678 seconds)
    (204/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077226822 seconds)
    (205/341) benchmarking ("sort", Int8, false)...
    done (took 0.155161825 seconds)
    (206/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076109993 seconds)
    (207/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.080054543 seconds)
    (208/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070281894 seconds)
    (209/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.091418009 seconds)
    (210/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071664022 seconds)
    (211/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069940695 seconds)
    (212/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071513235 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068488384 seconds)
    (214/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.150989289 seconds)
    (215/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077926235 seconds)
    (216/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.200634508 seconds)
    (217/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.182362325 seconds)
    (218/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069112815 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142053338 seconds)
    (220/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067689218 seconds)
    (221/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.197964975 seconds)
    (222/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066911616 seconds)
    (223/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067329974 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06649166 seconds)
    (225/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.078893478 seconds)
    (226/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067517608 seconds)
    (227/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076929108 seconds)
    (228/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078980038 seconds)
    (229/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067458694 seconds)
    (230/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067439039 seconds)
    (231/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.067777353 seconds)
    (232/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066222837 seconds)
    (233/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066862268 seconds)
    (234/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.06626381 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068352295 seconds)
    (236/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069709149 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.15700848 seconds)
    (238/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068939087 seconds)
    (239/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073852923 seconds)
    (240/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067698223 seconds)
    (241/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067816803 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.09132072 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.17966627 seconds)
    (244/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073764061 seconds)
    (245/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070026176 seconds)
    (246/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070348246 seconds)
    (247/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.143917928 seconds)
    (248/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068109106 seconds)
    (249/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067124336 seconds)
    (250/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068690062 seconds)
    (251/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066876046 seconds)
    (252/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074317392 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066827921 seconds)
    (254/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.086893131 seconds)
    (255/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.069884441 seconds)
    (256/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067920913 seconds)
    (257/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073489188 seconds)
    (258/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.06671209 seconds)
    (259/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.076996493 seconds)
    (260/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178454691 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123862069 seconds)
    (262/341) benchmarking ("sort", BigInt, false)...
    done (took 0.26855786 seconds)
    (263/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067235292 seconds)
    (264/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066879487 seconds)
    (265/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.143869256 seconds)
    (266/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087633737 seconds)
    (267/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078844267 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.100306594 seconds)
    (269/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070058802 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066221977 seconds)
    (271/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068111544 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143542267 seconds)
    (273/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.07399237 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067622705 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065318494 seconds)
    (276/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066577791 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066289691 seconds)
    (278/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.066644586 seconds)
    (279/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.155007487 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084825677 seconds)
    (281/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065759108 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.15245833 seconds)
    (283/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067712373 seconds)
    (284/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06896534 seconds)
    (285/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066937532 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115457469 seconds)
    (287/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066663648 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150348718 seconds)
    (289/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066830999 seconds)
    (290/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228616279 seconds)
    (291/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070062722 seconds)
    (292/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066558314 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148287077 seconds)
    (294/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.06656055 seconds)
    (295/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066128224 seconds)
    (296/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066544875 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150938734 seconds)
    (298/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068537508 seconds)
    (299/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066780719 seconds)
    (300/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066518366 seconds)
    (301/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.066609791 seconds)
    (302/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067627624 seconds)
    (303/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071495299 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066076283 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.124689445 seconds)
    (306/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.152855582 seconds)
    (307/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066273916 seconds)
    (308/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.066868985 seconds)
    (309/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.245648001 seconds)
    (310/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.177864274 seconds)
    (311/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.068052662 seconds)
    (312/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083232885 seconds)
    (313/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.068517134 seconds)
    (314/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.071493114 seconds)
    (315/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069345633 seconds)
    (316/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.069721511 seconds)
    (317/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067957602 seconds)
    (318/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080030489 seconds)
    (319/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067164457 seconds)
    (320/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078935878 seconds)
    (321/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072329903 seconds)
    (322/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.07859911 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079366791 seconds)
    (324/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.069227948 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113023083 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149957449 seconds)
    (327/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.067266708 seconds)
    (328/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067800234 seconds)
    (329/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067164524 seconds)
    (330/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.066831455 seconds)
    (331/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066492008 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133675638 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091251082 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.172323851 seconds)
    (335/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067674278 seconds)
    (336/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066509824 seconds)
    (337/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066633207 seconds)
    (338/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066733324 seconds)
    (339/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067220938 seconds)
    (340/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066938079 seconds)
    (341/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065637735 seconds)
  done (took 37.259259879 seconds)
done (took 38.847624463 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09264332 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080573515 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078612159 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075453462 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079403161 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.078091501 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078767024 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076393493 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078062319 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07795358 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077555434 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066129063 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074649678 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081060739 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075652444 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082472646 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079562778 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082619488 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067883491 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081264664 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093250839 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079075863 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075487592 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080829506 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067059873 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076779299 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090630109 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087625762 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073182647 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076427488 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073892371 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082237681 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074642395 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073324678 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076727851 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072529608 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076611037 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074080071 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089784927 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073220935 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067301936 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079454885 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.077473891 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075303278 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076226522 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078666558 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072513875 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080105974 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066287619 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078284444 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090291182 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071138873 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073605774 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074951264 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07163993 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076606568 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072919546 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077737451 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072002226 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078117035 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077976012 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074945224 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066607541 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075021765 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07355984 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073838383 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065731271 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071051577 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066246831 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066095444 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065571614 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075440761 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073196263 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071809001 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065884515 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066725351 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066426254 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078187933 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073210741 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076031061 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.0668544 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071665344 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071374622 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066793343 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071463988 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078133643 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065592331 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066700622 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066191098 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080239118 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072726786 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065911423 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077871987 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07116242 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071200725 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066501101 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066105455 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071032019 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.0746774 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066288005 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065289762 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071314359 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071489342 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075494714 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066975294 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071426141 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071351728 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065668787 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075328085 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073619368 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074995058 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080091925 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075535565 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078452912 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067255428 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06523481 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076357768 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066757025 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071601961 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073842179 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071840648 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075197007 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.06642949 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065944858 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071271641 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072941137 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066584026 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067031704 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066647423 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075723239 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073606882 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06542358 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066019781 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075106263 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075137596 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.0653647 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065232039 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075109088 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06696046 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072081515 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071912187 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074698283 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065786768 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06573016 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.065182253 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065304648 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065204024 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071635256 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071019816 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.065945999 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.074591943 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072043648 seconds)
done (took 12.847329467 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.0712864 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107903374 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074501892 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083981264 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079447444 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068306785 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.07077178 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08382066 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071101699 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086575556 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094922795 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088784756 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093637785 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066215421 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068011893 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06878668 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066293551 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075270208 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081733717 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090776207 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096087403 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066981074 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076796914 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084344279 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077576016 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083578043 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068815135 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068555044 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070419335 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.126284458 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092343283 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067094266 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06854898 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080799517 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082016724 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074244865 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.06780322 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07167002 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068163218 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067321814 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069226957 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081488518 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071179126 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070967532 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.06857194 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068184242 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067776651 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070745302 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080413562 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.07338173 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076007858 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081160903 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071872977 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06959527 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067562659 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073746207 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069903969 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070993853 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.0703147 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069530467 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.070321399 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.072011782 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.07040929 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.06965379 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070592391 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069452436 seconds)
  done (took 6.666326597 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083022914 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095335896 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082445374 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082407755 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067143993 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067979773 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067943669 seconds)
  done (took 2.241288184 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067802282 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075096749 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079606766 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.08019423 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089698095 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077365843 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067715939 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099844052 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066686302 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076002519 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083052887 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081193612 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070879533 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079976188 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068447479 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079318942 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067933589 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075894358 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075824652 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081178631 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071810979 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097909713 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080705943 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068740606 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081539205 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075358593 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069485094 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067722282 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068080904 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067422073 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067041179 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089673345 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073603222 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07962956 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068184737 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066715602 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.073696609 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069092646 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071969187 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076660735 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071205327 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.068080461 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068239764 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069710223 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070929215 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.075325429 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.071089094 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.068953354 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06786718 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074879252 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06678625 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.075297005 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071944439 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.075260102 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073721562 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073797127 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077038357 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068436078 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075916997 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074273651 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069327453 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.08277682 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081465254 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073537172 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081664414 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078593373 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.077141596 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073846429 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.068518818 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068924961 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069716991 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081596072 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071309761 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069876647 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070416318 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074321868 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.073720758 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085304575 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085412366 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083125753 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072334599 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.070059439 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.07330794 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.08556205 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074499423 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069942249 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.071172486 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068615898 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074670291 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070514503 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074900584 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069900975 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076863218 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072069497 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071941083 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077856405 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069957541 seconds)
  done (took 8.909147697 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071683685 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072397757 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070759991 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070615578 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.072013167 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071062431 seconds)
  done (took 2.156036612 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091818741 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069340022 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.081321577 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068941072 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090010908 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074806828 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074616764 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070027975 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084183039 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078502291 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075056758 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077250502 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074760355 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069579483 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074274314 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068887023 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07437722 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071863824 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.079792804 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072577708 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084055456 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072261456 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072518869 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.083033928 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073778006 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071545367 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071134694 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.081183764 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080732648 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072433857 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.074858668 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073035752 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079256051 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.072269297 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.076890978 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.079106793 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070521822 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075707273 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070963562 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070972492 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07686172 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070323957 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070256144 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073038495 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069199954 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.077656655 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075619207 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07416213 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.077160508 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075654989 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07618906 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070596989 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073534527 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075869734 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079492145 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07155647 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075972472 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076658896 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071385719 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078779811 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069988763 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073657868 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071575673 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073402656 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075139019 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075978053 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078215228 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071049424 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071936335 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070137969 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.076153962 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.076244823 seconds)
  done (took 7.09552293 seconds)
done (took 28.811270805 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552083606 seconds)
  done (took 2.225177772 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.587541063 seconds)
  done (took 2.301418872 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.065644471 seconds)
  done (took 10.779013619 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.298564411 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.318266853 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.732101278 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133085152 seconds)
  done (took 3.236459642 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.757596918 seconds)
  done (took 2.48477202 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.234029379 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218861048 seconds)
  done (took 2.186570738 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.338189036 seconds)
  done (took 2.057935699 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.143532882 seconds)
  done (took 2.856218447 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.233352906 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160097069 seconds)
  done (took 2.119883012 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.545283531 seconds)
  done (took 2.263402138 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.309899096 seconds)
  done (took 6.034637472 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.234819852 seconds)
  done (took 1.995695663 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233049505 seconds)
  done (took 1.964075624 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.041125932 seconds)
  done (took 3.76307797 seconds)
done (took 48.001627946 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086329178 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087150151 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087212831 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082113551 seconds)
  done (took 2.037958528 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.0762363 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073405786 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.077048994 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076597781 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073822962 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074865635 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076064024 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071305264 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074906004 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.07353053 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071834503 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073064389 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076514478 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073730644 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076188908 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077910139 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073395692 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073489954 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075982857 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073402116 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076692288 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073553164 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071692288 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073610719 seconds)
  done (took 3.512319428 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079998757 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073609446 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076942493 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07199229 seconds)
  done (took 2.036945803 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078566311 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078506743 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087367427 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090987981 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077920903 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077917228 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084527977 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085360584 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066690159 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.08848329 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069337917 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067515418 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067578182 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086443408 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084400267 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063734984 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064874501 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078329296 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077335502 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080407106 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069714205 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066796112 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077820206 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078109735 seconds)
  done (took 3.579463981 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.081625529 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067061289 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079149405 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092101713 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093086943 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066307134 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079901974 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093354852 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128455152 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067345401 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075051848 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068575093 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108533287 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06926026 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084362815 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112539555 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112695082 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070257286 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099605205 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066293413 seconds)
  done (took 3.45569044 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077898013 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072263932 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073186962 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068346806 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079257229 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07408222 seconds)
  done (took 2.181863332 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070868827 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.07089126 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069660928 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075622312 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069422053 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069132917 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068060992 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066522468 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066949279 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068853229 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067454246 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068023996 seconds)
  done (took 2.56349114 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.161709751 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070028088 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070978415 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066636677 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.07210335 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067688172 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082726902 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070230358 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08542059 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068078101 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067632543 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069549455 seconds)
  done (took 2.683907949 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102747864 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102144495 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147428065 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117762458 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117459529 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097511347 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120203479 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095574959 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161437018 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138038118 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117464624 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094522701 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087824927 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070649692 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100773587 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102615897 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136600247 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073817273 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114745296 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.16612164 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116349202 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112828923 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122887671 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117580647 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081662969 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122102022 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095068759 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103328964 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125573945 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110900784 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120122023 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099039157 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072585929 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071845359 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150495356 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101202246 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107626938 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093877829 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100560871 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088752055 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107928784 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071471658 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086792894 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107412208 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085247079 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117262467 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088907569 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104388262 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082037305 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132276555 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107417376 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099556552 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086452438 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105090972 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130131592 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096364893 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111685099 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107929623 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083110157 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11893651 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101816177 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.255028086 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095230463 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082161273 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162340185 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090425745 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113640595 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113494324 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083989711 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091248442 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103987481 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131900668 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108856189 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108668143 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115726731 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096888898 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111416321 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093012102 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128935843 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094401551 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074550838 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105900445 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128886913 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086566577 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101016186 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13082792 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093182504 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078765026 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093534745 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119221606 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081222349 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097007579 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070351507 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098590149 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108176566 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098100334 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114677913 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107324702 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079044947 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125044257 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109693902 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073979845 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118241473 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099712238 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1535195 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096096156 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07735163 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100605558 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09514295 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148877054 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086272905 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081417023 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099576283 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14250032 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095049959 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171111407 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097297777 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129814101 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098293887 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088820429 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076168806 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09047579 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102662582 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108408937 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102729668 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088610988 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077505483 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087287408 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.25305058 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09445092 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082908581 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114497574 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102822005 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076233929 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090850161 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077761891 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125437504 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078895653 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109838607 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125769713 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080221834 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10610509 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099388151 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109674836 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098603882 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10808014 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145307076 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117448223 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080904327 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084739592 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109824775 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144388139 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115407045 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086255944 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078015407 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100938853 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113059812 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098538243 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107705257 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101133081 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11033161 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098407425 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141974406 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118971239 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091780204 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096314835 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097289608 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124774217 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078099136 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156274711 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095458613 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119866316 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08568449 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142302919 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114441397 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091033655 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086161805 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096300654 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105924669 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106469599 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14618676 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097918763 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07418517 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094514233 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134465098 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077468665 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101087505 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091274354 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094994737 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119500075 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084691374 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08239486 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.0689586 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101954901 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135430367 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070625301 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.27563087 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.114740056 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104468755 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105921696 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071112328 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10079343 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140490918 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107343624 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142416204 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11841768 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102414793 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120672865 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.101068097 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107101084 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081094875 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127557467 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135765752 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097359639 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091364938 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136446637 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119041407 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136166679 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097820791 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116623019 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106867478 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10197702 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104815737 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102135534 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14527344 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121548335 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125747861 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086706482 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107575618 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110864975 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137530331 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083819515 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118036584 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.0767941 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113683312 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07853553 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108977908 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080551931 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112137749 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080563169 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100753044 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070418909 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075653674 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143525357 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113552975 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090882839 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087647644 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138385843 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132860938 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082549806 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102598017 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105239097 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10221175 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102348807 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109051921 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085925134 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095049278 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.273443923 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081363517 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083866399 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10051133 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095702641 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10927195 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085426581 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076650199 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137227756 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105577493 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097217617 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078953606 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096255436 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123102615 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091437517 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088777696 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106558044 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10512428 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141306061 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090995713 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09912436 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119139869 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082080447 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093408467 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071099388 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086061664 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077862314 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112035652 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077705848 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109777709 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069750191 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131849877 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088325863 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094364735 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104019944 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098722443 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130251433 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093297295 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130120316 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091369665 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103067512 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109301957 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095848208 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082000276 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104778858 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096881185 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11324579 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097016686 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106388313 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11138883 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095344406 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142587621 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091014842 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121939917 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106861813 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109552145 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105779285 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122853899 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13863916 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113856883 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113033681 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076306528 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084011313 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106998708 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101879357 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145952655 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102835906 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072882033 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086867679 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090862602 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.254943505 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106949068 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084110844 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143122592 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088691051 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088738656 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114470762 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091093521 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09838963 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078086478 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097389586 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102526465 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095588994 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096255762 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109009632 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118647617 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115497685 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133745813 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100840695 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.09515844 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120664597 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112224944 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112430641 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087328551 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088210655 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12551053 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104455959 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129426538 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102328326 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096212475 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104086252 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09214978 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101181579 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098456901 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110882063 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081818607 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077553558 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06983297 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073527868 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119363338 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110085675 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099824641 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099337658 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073681422 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105722915 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101519563 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073727993 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090010608 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09529903 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100729023 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085378925 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094722364 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115647006 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092890991 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105071116 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100683231 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132119195 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101318781 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090349432 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145093163 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129306448 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089424852 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094873969 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072750988 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08067991 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103199137 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145662179 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1192074 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078444595 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084631311 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.07778035 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086620797 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072173731 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089087875 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089582716 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104031437 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092981242 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112521274 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103546047 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075952667 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102642016 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096970965 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09178843 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095439992 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101208374 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105134338 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.122163435 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100673588 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097262877 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076304229 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080378771 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076157613 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079589839 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101020349 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.07763693 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076357793 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128375338 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090854671 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1039773 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108131154 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084006012 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075339793 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130629093 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069736453 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131702613 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.07161363 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081419316 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.08077103 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079282257 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092593115 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104307904 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095648977 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111353315 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104709339 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103475572 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109348057 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153381863 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07040105 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141567805 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075649234 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076095612 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075982055 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109793482 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090969783 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107962729 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140141946 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088774857 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091563365 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076538544 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125844998 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09693692 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102033928 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085552413 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078816356 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125745294 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079210703 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.070015348 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083472218 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107670583 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071248125 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.380574418 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089771224 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083544496 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11915685 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.636537545 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095523509 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080041526 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09352761 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14810077 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132030969 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087575183 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113039726 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.123141727 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093786667 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087177623 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111393639 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.186822478 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077329671 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097754318 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106964667 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101327669 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095412777 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.094933579 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088932614 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.094924687 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.08878648 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082672102 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110372707 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09060045 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09451038 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100328689 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085660178 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082312216 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132832749 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105619794 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084009101 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090784986 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102703085 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089754175 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092921555 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072381035 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116733938 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092760028 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102935631 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092826512 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109421496 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122047565 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090868346 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114560528 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090716122 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111208619 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087378144 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080380936 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104068842 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080030694 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079280493 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119452885 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085772668 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.09428717 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106296102 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097409919 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11620653 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120340956 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113705909 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10010039 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08057824 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088314919 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089552533 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077096469 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080302758 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076028226 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.078132591 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.278827598 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088637305 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085893556 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116891257 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084040737 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10547416 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102522891 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110998416 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084644244 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102498262 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110591322 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09213759 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105176329 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102565796 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130113327 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147550547 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101065819 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125865109 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135246708 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078559871 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077615374 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070872814 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116524661 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080964873 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.083028391 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083403533 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135931912 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084212017 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097011804 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231777229 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082349547 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083649725 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098252627 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071241136 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084698352 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109470002 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086388035 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081772928 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100774892 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08556444 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118920159 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11375751 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090594882 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084603578 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082320825 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094949201 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105302708 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129956938 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091962588 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077138329 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107673837 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104484468 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125778703 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074650658 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082654842 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13240254 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09512059 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106884191 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083977398 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124418245 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134785848 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091711178 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136565671 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07216458 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084803591 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090492733 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126543571 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075836077 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089553639 seconds)
  done (took 65.466723483 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.152770118 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143976105 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.084178025 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.09873431 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188672844 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198103673 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120699167 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.096814845 seconds)
  done (took 3.032444113 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.072374435 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083554276 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.085296022 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208765087 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109527491 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068383057 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07438362 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083349965 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068647471 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068132168 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103032873 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068657376 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069189731 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.367476273 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067287537 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072726989 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068581558 seconds)
  done (took 3.640570386 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.331322893 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.461194675 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.222499995 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.696931761 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138015148 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.484709356 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077486248 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083793073 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627290652 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371651536 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131683683 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088708169 seconds)
  done (took 18.632625537 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.079998487 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.081309212 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.081834591 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077582922 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075812914 seconds)
  done (took 2.325642271 seconds)
done (took 116.904967367 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087268642 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.176482649 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071935808 seconds)
  done (took 2.194703091 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08610286 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.084237001 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083734714 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080480884 seconds)
  done (took 2.256485138 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.078978474 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079498695 seconds)
  done (took 2.071805924 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225816633 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.179371876 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092898031 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084955383 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080811684 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081635024 seconds)
  done (took 2.17069711 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.075376012 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07287105 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073062574 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073959021 seconds)
  done (took 2.207502118 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071558179 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067962015 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069414435 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072180847 seconds)
  done (took 2.192452471 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088309433 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084411261 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113491521 seconds)
  done (took 2.195995645 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08667868 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083958002 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079184577 seconds)
  done (took 2.174226577 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.112739748 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099324481 seconds)
  done (took 2.127091875 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083655141 seconds)
  done (took 2.00277916 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093610101 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099624358 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142759703 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108248861 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141263586 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127949477 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078003728 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078908524 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075046929 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073891683 seconds)
  done (took 2.935623086 seconds)
done (took 27.035490633 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081585305 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369391383 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361259668 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08814392 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672650962 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357822311 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008222843 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092991998 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100978186 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069330742 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085669509 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650879212 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.000642968 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326409364 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.986181603 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.330399731 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651257981 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06969178 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068781059 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069416479 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.992851079 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069157855 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069396162 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070307111 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650787254 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375154118 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070222099 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325599179 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06906938 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072283668 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.3574979 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071203259 seconds)
  done (took 16.524945813 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.074359479 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124601343 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074198701 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085710573 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071904951 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070976605 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072710609 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069736876 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112031775 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069791535 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086561303 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069070161 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073412899 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070872407 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088941602 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069714955 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071071551 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070541239 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070243708 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07082059 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088865878 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069676381 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06952724 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070445383 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069694263 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082844153 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070808658 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069717527 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072898287 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071584806 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073233615 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071040251 seconds)
  done (took 4.381807095 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125915031 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128023675 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075043291 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110279501 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120144406 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071542319 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152211631 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093427289 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115632039 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069356612 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087096858 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069397812 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104875369 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070644354 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090149213 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069842751 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070939824 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070270439 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069815248 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07022222 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088551094 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069335664 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070021847 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07041843 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07054489 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084790135 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070650628 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069381468 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069577169 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072130615 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073759225 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071158653 seconds)
  done (took 4.648897797 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.073431593 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073402686 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081489569 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083058564 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06800342 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070840238 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071403296 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067870608 seconds)
  done (took 2.526879503 seconds)
done (took 30.033347917 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.083173617 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069679631 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072289868 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089328043 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074889527 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071997486 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065900515 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076449446 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072502427 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072791987 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074770175 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067892195 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071809681 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066058323 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07309932 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067366019 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073799428 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071568803 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071588617 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073012492 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069195498 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073135594 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076104337 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.07211031 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072263732 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071852304 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076890943 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073119225 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068015032 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070387891 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069902333 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081969701 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07392996 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074309905 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067430693 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067547276 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07188304 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069524967 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073788334 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076729067 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069542006 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076655379 seconds)
  done (took 4.952463322 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.092438762 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094884173 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088133652 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083009902 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108211797 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083612096 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091129027 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080535905 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079179071 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090980586 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07542131 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080216872 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082423285 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077050012 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079414913 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07579889 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081273821 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074889656 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080104731 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079466908 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091078144 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073464975 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080415239 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080637687 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075387577 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080847331 seconds)
  done (took 4.102246503 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075637206 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089251412 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093983225 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142913689 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111386814 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08412202 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083526266 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.105852793 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102871638 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069590844 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073095074 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095131591 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098319137 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076611155 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10745001 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087608205 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081922724 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070642442 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076528113 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103614952 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092336472 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088334093 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101865743 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089222354 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.06814481 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078947439 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076009315 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.08481451 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076761087 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082268243 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073269595 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07272969 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069798872 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081559306 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073242452 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067174976 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091251007 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082548389 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084970687 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106957606 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078995973 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070849655 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099902118 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134488923 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071659358 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071611581 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073273146 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081537141 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070429324 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09936051 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087456825 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068984369 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088259593 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070428599 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070601779 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085724943 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070976969 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071110603 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081893307 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075366854 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089776424 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074756215 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090267334 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06917682 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080524305 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070654375 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.07028387 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067678213 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105610924 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076803933 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121494067 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069936937 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067637154 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081404227 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080372541 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075784167 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068789635 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088175678 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081131523 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072770003 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080755122 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071766222 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072097152 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104738366 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068010187 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067210991 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067534967 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071698229 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072255059 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069467682 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082507576 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068580309 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072395316 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084522881 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068446669 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070029092 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072023407 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07014233 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068599867 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079630031 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073206522 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070960442 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081763843 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070315071 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072429885 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083673119 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078504434 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068480846 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070015083 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071357924 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070829538 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073196874 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072005836 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071136428 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076126418 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076411865 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074420626 seconds)
  done (took 11.381217497 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166392419 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.152965204 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070583197 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.148355659 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077933029 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073691605 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149927457 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089268987 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069881853 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070747469 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068544303 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097147093 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092870825 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.10464944 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073973101 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069877749 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094973639 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102738483 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151730746 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146067498 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093450357 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077713498 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.07206647 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071555283 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070681477 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078522369 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085752672 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078078549 seconds)
  done (took 4.690290736 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078353844 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085000579 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074301883 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093132701 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087980924 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069845599 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071844055 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070934448 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086495305 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076356013 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069505133 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073940599 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073625053 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070259491 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070703387 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076031545 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076171237 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068749435 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073567867 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074101184 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080069416 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095119833 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074255574 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069711286 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072480695 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069390643 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076803794 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079691152 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069170587 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100015344 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066553027 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073829001 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083505981 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070757606 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069424708 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069851456 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069610501 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070535729 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070078004 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068136791 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067873179 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074632148 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06855709 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075729101 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083793557 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077024775 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071134135 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072402395 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07239873 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066474966 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07246884 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072963457 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071713469 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078515146 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073517782 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072462203 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071202406 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.101993782 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075576011 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068854347 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068976242 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068198948 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071464806 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077339403 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086635675 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07149711 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067945028 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070221478 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074381238 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083560245 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069076231 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075079936 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066450095 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069491908 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071839638 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072300898 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070786413 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067799239 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069636334 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06920683 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069976027 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069707791 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068881529 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072684207 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067676984 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067948033 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07033587 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071193536 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076142639 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068563625 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072489784 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071138068 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068464628 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071884876 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074801915 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072125602 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089286165 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078900091 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070483746 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067781206 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084362421 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071378088 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068988761 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075016842 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073972704 seconds)
  done (took 9.747300923 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.095284649 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071593284 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089382082 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095975166 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080450499 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075458222 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084279283 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071199331 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085929537 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068759062 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078896527 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068467658 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082910292 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078667668 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071053275 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080019047 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072235453 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090254573 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084101418 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068096755 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07848839 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081565857 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082522768 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087982937 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087358039 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088086125 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082247824 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072031624 seconds)
  done (took 4.249589782 seconds)
done (took 41.062965468 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.026813999 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.192624695 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.017519845 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.234031192 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.286987196 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.04237677 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.24843819 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.018022358 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.19301534 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.044736252 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.338166451 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.439106981 seconds)
done (took 70.096764485 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.097300188 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.158567243 seconds)
    (2/2) benchmarking "String"...
    done (took 2.235569432 seconds)
  done (took 6.334817814 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.613637353 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.013017086 seconds)
    (3/3) benchmarking "different"...
    done (took 2.065614552 seconds)
  done (took 8.631164991 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.116790807 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.02419003 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.271547317 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.013900605 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.017242772 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.419079339 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.827987729 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.470623478 seconds)
  done (took 32.986266762 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.32512967 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.265105712 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.763809517 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.796413192 seconds)
  done (took 17.139631335 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.614753794 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.274865637 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.2763749 seconds)
    (4/4) benchmarking "different"...
    done (took 2.270099725 seconds)
  done (took 11.432321624 seconds)
done (took 88.788140934 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.013683096 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.06671667 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.01783104 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.166406721 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.083371051 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.044850361 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.022191871 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.050077863 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.012240753 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.01275937 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.457282183 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.011366955 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.012483662 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.048211958 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.014206783 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.05850591 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.575985178 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.023438943 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.025859278 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.579308545 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.489798935 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.018936472 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.017903332 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.061950848 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.105212533 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.026125085 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.051655988 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.0186537 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.633068512 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.036897721 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.018250061 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.01741627 seconds)
  done (took 211.734055426 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.016141078 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.94427297 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.004220552 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.040320069 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.558377274 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.203068162 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.162389051 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.594967898 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.018795092 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.023736295 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.228007016 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.017347111 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.262960694 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.964931331 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.009816173 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.055635145 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.174302108 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.291299141 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.013291748 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.20371784 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.040205967 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.041741273 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.002097671 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.23005174 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.019942085 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.089437713 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.201237546 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.031692242 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.19702458 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.138360495 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.034662041 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.022694863 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.231554968 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.877400738 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.040901398 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.023133556 seconds)
  done (took 178.952530941 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.192034407 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.033658356 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.080401905 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.14995521 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.784487794 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.757185826 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.015682 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.015159619 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.016600955 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.022049941 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.017094889 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.085568325 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.436198759 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.030401892 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.013749714 seconds)
    (15/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.016611782 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.018316723 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.55502831 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.020335177 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.015831413 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.017155859 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.080658329 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.38946454 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.152334836 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.017211868 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.025509761 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.155102112 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.023813184 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.016227676 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.153219436 seconds)
    (30/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.017235733 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.016886037 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.096313047 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.151808645 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.024738028 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.098538125 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.022674008 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.514810096 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.014918722 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.016595738 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.019826029 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.080614857 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.015167309 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.114795828 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.105993011 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.014961567 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.031557087 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.213866302 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.708043603 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.017517915 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.019087688 seconds)
    (51/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.018528278 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.018196311 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.018437757 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.020191982 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.796648548 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.018849911 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.044562715 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.646335252 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.020021117 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.01997302 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.020479792 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.018309534 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.019730471 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.026712678 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.055633246 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.835124336 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.107843348 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.406809142 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.818846524 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.019394784 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.074956556 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.077086352 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.018922921 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.099315476 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.016369792 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.019516225 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.0198888 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.021028442 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.156364856 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.124404881 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.018727794 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.158870858 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.023659777 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.020096343 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.145286787 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.592205441 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.019495465 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.032051049 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.071566055 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.019395827 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.020109178 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.024902601 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.142975937 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.019261538 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.018555055 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.019039979 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.118013183 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.017792248 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.172379824 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.241118075 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.087208446 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.269309604 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.26940236 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.017276673 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.020454742 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.034892408 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.020028827 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.02064764 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.0309555 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.01985573 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.019474129 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.019763403 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.020748196 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.019960122 seconds)
    (115/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.018715266 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.021915907 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.03459727 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.015938453 seconds)
  done (took 437.831391935 seconds)
done (took 832.706481191 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.703579534 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.764682166 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.617926501 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.654003949 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.620825515 seconds)
  done (took 15.30494073 seconds)
done (took 17.257032965 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.050881169 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.037370795 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.027964469 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.075653152 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.044590206 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.034738309 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.067237636 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.065227102 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.051126192 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.03390898 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.071014354 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.035818997 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.051721448 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.055349733 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.096493924 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.057240001 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.037449184 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.029938022 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.075431791 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.035170583 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.036687237 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.034685032 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.034226025 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.072424346 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.101026647 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.042240278 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.033446782 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.067435314 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.041743355 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.068804443 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.08887266 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.054811969 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.068920985 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.099610262 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.078007738 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.103901159 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.042591845 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.086736053 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.039890713 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.107552127 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.081392496 seconds)
  done (took 86.365310216 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.032240925 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.162443935 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.241958306 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.05913587 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.032685609 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.243412458 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.084639353 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.163942815 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.160443601 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.24615119 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.255281503 seconds)
  done (took 25.63742244 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.03126274 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.167796469 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.251706982 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.063858007 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.031691067 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.250728798 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.091264106 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.156798806 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.16068679 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.244441095 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.25610867 seconds)
  done (took 25.664710532 seconds)
done (took 139.623752697 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.40230592 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.05293999 seconds)
  done (took 6.402873765 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.027207414 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.043015301 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.176003908 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.025461605 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.026452029 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.030262162 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.029165082 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.025687621 seconds)
  done (took 18.332344387 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.026153268 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.026832562 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.026187026 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.026561779 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.028065477 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.024977316 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.0258916 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.026586277 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.026524574 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.026716157 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.02716726 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.027959735 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.027190149 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.027143472 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.026546741 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.028802822 seconds)
  done (took 34.380478061 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.027672621 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.025357705 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.027995031 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.025553167 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.028725844 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.027765613 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.030939071 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.026268076 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.028752546 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.028780141 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.02784296 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.999976567 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.029889374 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.028243589 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.030136555 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.030079468 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.028309276 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.028787724 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.03063728 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.02996774 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.028130001 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.033877296 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.034113481 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.030532214 seconds)
  done (took 50.620061363 seconds)
done (took 111.701844164 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.213842434 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.561956331 seconds)
  done (took 8.727889988 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.034808095 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.028566351 seconds)
  done (took 6.076329287 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.028980317 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.029155276 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.03083634 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.03105587 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.031168152 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.03051683 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.030197028 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.031760234 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.02952756 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.030617944 seconds)
  done (took 22.256164512 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.03127149 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.015989266 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.030246648 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.029089363 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.030451011 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.030190879 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.028721085 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.029986134 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.991610363 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.030143907 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.030735456 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.030735861 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.030482473 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.030432908 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.030910991 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.030712142 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.03076809 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.031501927 seconds)
  done (took 38.4480893 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.030963873 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.030486827 seconds)
  done (took 6.016042116 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.030983714 seconds)
    (2/7) benchmarking "second"...
    done (took 2.030885841 seconds)
    (3/7) benchmarking "month"...
    done (took 2.030598859 seconds)
    (4/7) benchmarking "year"...
    done (took 2.031845364 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.030616753 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.031755504 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.031221537 seconds)
  done (took 16.170705092 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.030154186 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.182297641 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.232356595 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.667725699 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.030032792 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.033084167 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.931125295 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.034350813 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.035135895 seconds)
  done (took 22.129617115 seconds)
done (took 121.786301468 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.859996189 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.03675009 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.257499381 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.098419425 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.040659316 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.375462594 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.047975133 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.580564276 seconds)
done (took 44.260363401 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.112555969 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.032532798 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.059202301 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.060878531 seconds)
  done (took 23.109175469 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.034652722 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.333659498 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.054853486 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.002864254 seconds)
  done (took 23.399449398 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.406645172 seconds)
    (2/2) benchmarking "read"...
    done (took 2.383488434 seconds)
  done (took 6.752693834 seconds)
done (took 62.342860534 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.036476939 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.035642771 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.036045266 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.03588227 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.035339498 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.024329762 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.036276096 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.03675023 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.035577638 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.035818603 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.036664073 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.037273837 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.035783307 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035778299 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034931343 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.036383222 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0355815 seconds)
    (18/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.03637359 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.036076017 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.036894321 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.036808815 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.037156067 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.035490099 seconds)
    (24/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.035685474 seconds)
  done (took 50.813535473 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.036435859 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.035877731 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.037224215 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.035383188 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.036390231 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.035875726 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.036738581 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.037777201 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.038088596 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.036733311 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.037262185 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.037557331 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.037598795 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.038054334 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.037662151 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.039036153 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.038354996 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.037567395 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.037119413 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.037988835 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.037511189 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.037482283 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.038184521 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.038130593 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.026461845 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.019851036 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.038317351 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.038062009 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.038421189 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.038331831 seconds)
  done (took 63.055803658 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.038921282 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.037894349 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.038711041 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.039899632 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.038503448 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.039012652 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.038348441 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.039126443 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.039966947 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.038924308 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.038950203 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.038723979 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.039010782 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.040431553 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.040183516 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.040451525 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.040333852 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.040025436 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.040361935 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.040596025 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.039563299 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.040446094 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.040126321 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.040685022 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.03999791 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.039720112 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.040471037 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.040971607 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.040863571 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.040577143 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.040878734 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.040887213 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.041299303 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.039993342 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.040901308 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.041553636 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.040054475 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.038720754 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.041736461 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.041365578 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.040816823 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.04081027 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.041201948 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.042220208 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.041396691 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.041054377 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.043139199 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.040884171 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.042303073 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.041985857 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.042149409 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.041489129 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.043085049 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.042238993 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.04325524 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.042718828 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.042735148 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.042304998 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.04317172 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.043433198 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.0435096 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.042825833 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.042406656 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.043550625 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.044349554 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.043423222 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.042422478 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.043355152 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.04272365 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.043824129 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.043937502 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.043042598 seconds)
  done (took 148.924109499 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.044298269 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.044467685 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.045047856 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.043772161 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.04335551 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.043251839 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.044565761 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.042895009 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044938829 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.04509831 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.043754676 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.043896036 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.045093448 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.045569501 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.04380052 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.044832649 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.044137937 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.044856953 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.044847685 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.044886732 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.045936338 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.043682387 seconds)
  done (took 46.942857538 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.047322774 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.045740158 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.044618748 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.045201316 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.044794345 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.044658153 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.045160027 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.045975012 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.046185705 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.044731999 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044968728 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.044195539 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.044902413 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.045605387 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.044220805 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.045396124 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.044485125 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.045631752 seconds)
  done (took 38.7801781 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.045598647 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.045207507 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.04571934 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.051303005 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.046404346 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.045694629 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.046671502 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.045218482 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.044806188 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.045690831 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.04618286 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.044921393 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.045544779 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044893312 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.04530672 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.044296621 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.043772808 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.045150651 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.045696003 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.047195316 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.045480408 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.046565326 seconds)
  done (took 46.975017613 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.046261812 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.046189403 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.04793314 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.046050903 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.04592501 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.047190894 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.045090829 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.046864419 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.046325333 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.045590098 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.046581484 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.047963722 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.04665106 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.045988112 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.044767681 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.047668667 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.04607683 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.047547555 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.047828806 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.047594398 seconds)
  done (took 42.900975952 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.048111947 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.049144082 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.047832528 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.048205002 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.048460135 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.048977885 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.048344959 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.048113834 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.0482692 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.049440779 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.047746939 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.047735913 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.049153375 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.047956146 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.049702265 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.048714103 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.048147866 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.048093346 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.037227337 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.049211099 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.049638483 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.050008098 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.048245216 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.04913269 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.049816194 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.049831535 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.050347659 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.049882401 seconds)
  done (took 59.325363046 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.049864987 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.048927032 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.048465283 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.049307406 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.049596632 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.048759765 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.049310384 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.04851258 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.049619157 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.050065598 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.049079575 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.048148758 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.049275422 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.049446737 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.050841796 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.049156784 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.049261599 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.050827682 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.051321635 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.049320077 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.049985078 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.051274741 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.050399629 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.049381866 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.050596626 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.049731733 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.045780482 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.051214498 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.051253462 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.049099287 seconds)
  done (took 63.459059842 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.072156454 seconds)
    (2/2) benchmarking "in"...
    done (took 2.067567366 seconds)
  done (took 6.111036026 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.051350618 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.050492364 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.045697688 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.023366066 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.051181799 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.051825577 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.051176908 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.050367234 seconds)
  done (took 18.347512148 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.051065386 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.055353018 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.052846304 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.051808265 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.052676704 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.060500607 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.052459803 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.053084598 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.054162194 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.054580234 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.057636933 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.05623042 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.063446301 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.058836528 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.053163214 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.053406015 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.054921559 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.055550516 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.055098962 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.052008231 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.05813326 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.052706055 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.053461495 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.054668167 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.052647147 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.055875775 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.063939461 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.056321518 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.054222502 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.05424026 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.061124826 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.053005701 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.054423219 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.055225223 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.054687518 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.053019146 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.061102271 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.054327343 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.054887218 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.054256082 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.057828665 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.058589079 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.05766866 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.061836995 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.055164 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.055312251 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.054978482 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.05387999 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.055219605 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.059215281 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.064117847 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.054915048 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.055233268 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.054407956 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.057956131 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.055731595 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.054525496 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.057800798 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.062400956 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.062934071 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.058941739 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.078599437 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.065844659 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.056747113 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.054993655 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.06647763 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.083756927 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.058020073 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.057307142 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.057125596 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.06179093 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.056863238 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.056837709 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.056311391 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.071177783 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.066909556 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.056336157 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.057181564 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.056369828 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.05740947 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.058678856 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.057989825 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.056873785 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.056547958 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.067487633 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.086559764 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.058496061 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.057605712 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.058596359 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.057251167 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.057152685 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.0578885 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.057975079 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.05602764 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.057908482 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.059986587 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.056828122 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.059627586 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.055902713 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.06590652 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.056562042 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.058467423 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.060362014 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.065907267 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.055999724 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.05775484 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.057632218 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.058701268 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.063013167 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.055642451 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.056398312 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.055189174 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.056449407 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.061860432 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.055379732 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.05937343 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.066150712 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.064629002 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.057514212 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.061109476 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.060815885 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.059293177 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.067666593 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.084151544 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.05685284 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.060331012 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.063315685 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.070642453 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.060001773 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.05571212 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.057247723 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.0449707 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.056114314 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.058768646 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.056563216 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.058466778 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.056281528 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.056998703 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.056453196 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.057040845 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.061356137 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.062763655 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.060022606 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.05790671 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.062632215 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.057763661 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.059918248 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.062688038 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.056823927 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.05620511 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.058039895 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.056391961 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.0576317 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.057708727 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.056117432 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.056978428 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.054908923 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.056459378 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.057693252 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.057769899 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.054743291 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.048663292 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.054308045 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.05062128 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.048386818 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.0548258 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.049556396 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.0492002 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.049756401 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.050608993 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.052822398 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.049060808 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.052924581 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.04809871 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.04792672 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.053663294 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.048091531 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.047995628 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.054142463 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.060820219 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.054354722 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.059227657 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.047970193 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.052704408 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.047686292 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.046040618 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.048258175 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.046046217 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.046070918 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.047037413 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.041724967 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.05132642 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.069072182 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.058911061 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.049932472 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.04255024 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.052588974 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.049766049 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.050674567 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.050087244 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.045795147 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.048259437 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.045450763 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.043700617 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.044523606 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.047418807 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.046535071 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.045982816 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.048116303 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.046031657 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.042762894 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.046046241 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.04404676 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.047471753 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.04502971 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.046201767 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.043885197 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.043938873 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.05308806 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.049078972 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.04415485 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.045369232 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.046986677 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.046441548 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.044935406 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.04833146 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.051679725 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.045502416 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.047378242 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.056795406 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.044730364 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.04704092 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.045638745 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.047010613 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.046938102 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.046784079 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.052650454 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.055994858 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.049961414 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.04595447 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.052995408 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.045760987 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.050600719 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.048436251 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.04732715 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.047131868 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.045575136 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.046775915 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.046990394 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.053630732 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.044626507 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.05112341 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.047824296 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.049772848 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.047562001 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.050799695 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.047188751 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.050254439 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.058611927 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.053077666 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.049270074 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.049048927 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.051292976 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.052732642 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.049464052 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.047251913 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.060981889 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.057837315 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.046788626 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.049182404 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.048321553 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.050650673 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.04686593 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.051364284 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.057014309 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.050192988 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.051109071 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.054801933 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.046436867 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.048038441 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.054844557 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.04906608 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.051607348 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.050476998 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.049443626 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.048553346 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.050844439 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.048342263 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.049282922 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.052203726 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.05375346 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.047608616 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.049602502 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.046319047 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.055800312 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.047665702 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.050271403 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.055483542 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.051141249 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.048536097 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.052159101 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.051933208 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.050979971 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.052290281 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.04846051 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.050716428 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.051252009 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.058280399 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.060045212 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.056699446 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.059324931 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.052224703 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.062852336 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.051835989 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.049663042 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.049266061 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.055609241 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.025056448 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.049983376 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.051055502 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.059807701 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.015735599 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.052174706 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.05790198 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.052911727 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.052673911 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.0484626 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.020149623 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.053579575 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.053265183 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.043843915 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.026706966 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.040323241 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.025520265 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.054259712 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.055882188 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.055213271 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.053452049 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.052999752 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.054737972 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.053437915 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.052487482 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.051520794 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.051237416 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.05098738 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.06008444 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.051597011 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.053000414 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.056767781 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.054886959 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.061353638 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.050562575 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.052362731 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.053338452 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.051089277 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.0565948 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.051295471 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.051248369 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.052154305 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.051319094 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.055265951 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.065707592 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.05945272 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.05571058 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.057412497 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.051144334 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.054169368 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.066605416 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.079192484 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.053987607 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.054479556 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.058147779 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.058224882 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.058758631 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.057970843 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.057290244 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.063891015 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.056078156 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.053312945 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.057045587 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.067346908 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.054765118 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.051086924 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.052526987 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.057153063 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.057743407 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.053699312 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.056644557 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.061253667 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.055072183 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.067513022 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.054982328 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.05440475 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.055496583 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.053044169 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.055811043 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.055926999 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.057590878 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.059225004 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.056545482 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.054767907 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.058623546 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.065481827 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.057485548 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.06073322 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.066877384 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.058280982 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.056092772 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.057604991 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.055622404 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.058681147 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.058595307 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.054821253 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.058983775 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.056284136 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.056387487 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.063490262 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.068188493 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.059017622 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.055201663 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.060421656 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.063365387 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.059575258 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.056109889 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.059991669 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.066846935 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.058212699 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.071281085 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.0689657 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.057788951 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.061324999 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.064462531 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.068480389 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.058440914 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.057567134 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.057050118 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.061113155 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.060782981 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.061084103 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.057826424 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.05835604 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.064873341 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.057301626 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.057699555 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.058272438 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.055969458 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.06031935 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.058875551 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.061760126 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.058265254 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.055709541 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.056840363 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.060012246 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.059011017 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.06184518 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.059215573 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.057623793 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.060666366 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.060126195 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.063400683 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.057876477 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.058897744 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.06019006 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.058901369 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.057441938 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.060020529 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.059678152 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.062154018 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.062429723 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.070916404 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.060585895 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.060975531 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.061992291 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.063819454 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.060318877 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.062581079 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.060300322 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.058596757 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.066856116 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.058332532 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.059719649 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.061924968 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.059797008 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.067386016 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.062719212 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.067721955 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.060266629 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.062643024 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.059723305 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.063230672 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.071436098 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.065948891 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.063919169 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.072261729 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.065905249 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.06449686 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.063195407 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.061220426 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.061221118 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.063865323 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.065634081 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.062752375 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.065509305 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.061779653 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.06150232 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.061594317 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.064763408 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.061762152 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.060956116 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.063869642 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.073231193 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.071266886 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.061055981 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.06222545 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.062786807 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.063417487 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.075507263 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.061845632 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.06199961 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.061949475 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.062408667 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.064412232 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.070774658 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.073414145 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.069040563 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.063014195 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.068114196 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.083329492 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.065279566 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.074207776 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.097357862 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.064854992 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.063800986 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.065030141 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.063735994 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.064260471 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.06719674 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.06407664 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.069422417 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.064971469 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.064431136 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.071975358 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.062476363 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.064077667 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.063558558 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.064026858 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.070850579 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.066039304 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.069691049 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.063578206 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.059697126 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.06354316 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.067143789 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.063058106 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.064348095 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.063759903 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.065809391 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.063492579 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.064091743 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.072958039 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.069310842 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.06595218 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.561830383 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.078583198 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.064354645 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.065554959 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.064286777 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.070450345 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.071975879 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.064214332 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.068678892 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.076348806 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.066399733 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.075221338 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.069059043 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.066223218 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.066231005 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.064947165 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.066840883 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.078839381 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.079010694 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.066808346 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.069541304 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.075354889 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.067203998 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.072308069 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.072800046 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.067383444 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.06853943 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.067459695 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.065323484 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.066018225 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.067983533 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.072049128 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.079586091 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.067876072 seconds)
  done (took 1228.700424176 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.066779189 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.062548731 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.068117549 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.066550371 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.065405389 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.069520541 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.066803681 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.067628518 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.065839692 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.065976522 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.063917134 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.067894013 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.067361082 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.0653654 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.065445231 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.070367582 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.069641375 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.065002094 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.066129682 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.065902701 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.065742878 seconds)
  done (took 45.38552706 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.066954658 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.066421534 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.066181674 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.067824005 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.064707096 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.067669677 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.066439409 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067608459 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.067882959 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.066241784 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.068498903 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067266568 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.068052592 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.068778675 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.067577764 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.068708602 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.068219302 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.069833768 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.06805945 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.068064457 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.068622568 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.068537295 seconds)
  done (took 47.477069133 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.069539831 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.070382305 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.071737442 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.068521652 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.069225065 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.071590262 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.068807036 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.070633173 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.071523235 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.07175959 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.078822407 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.078653975 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.06851235 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.07276362 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.070157637 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.069808451 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.214418468 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.069606069 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.070060206 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.068713994 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.070687421 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.075402637 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.069856396 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.068805285 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.070017017 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.071510235 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.069241047 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.07039738 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.069735364 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.072828723 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.075651212 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.071284031 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.072644473 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.074160964 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.071696661 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.073560498 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.076345122 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.070181225 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.069323541 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.070941785 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.08324462 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.093901365 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.06958724 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.071044208 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.07872028 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.071110644 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.070504182 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.076267565 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.079988908 seconds)
  done (took 103.682547209 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.071067183 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.0694913 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.068636843 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.070408745 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.070330845 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.071938794 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.071238317 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.070571635 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.073938833 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.0724728 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.070742432 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.071738077 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.070409538 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.070591803 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.071257714 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.07244715 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.071783471 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.071217891 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.071695082 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.072378966 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.072038428 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.072106464 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.072595147 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.071397832 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.072736879 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.071740091 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.072561968 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.073460867 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.072944161 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.072400858 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.072856568 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.073161304 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.072728176 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.073158492 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.072741021 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.073038097 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.073423469 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.073651931 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.07414053 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.072445057 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.074540428 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.074617686 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.074627688 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.075201103 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.073958432 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.073027678 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.074273285 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.073594987 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.073343247 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.074377054 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.074169511 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.074762254 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.074403634 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.074272314 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.074930588 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.074571832 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.074423186 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.073956911 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.075214402 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.075214271 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.074800026 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.075764033 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.074218435 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.074681333 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.074269659 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.0732031 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.074600906 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.075440419 seconds)
  done (took 142.957607257 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.074755005 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.076081699 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.07617053 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.073655861 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.076838053 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.075842036 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.075682676 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.076956256 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.076187519 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.076397485 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.077246594 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.075176316 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.077367742 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.076992003 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.077026741 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.076832551 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.077458136 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.076785367 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.076739364 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.077898554 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.077853568 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.076281796 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.077239903 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.076961562 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.078114897 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.076360757 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.078142269 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.076237047 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.076586868 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.07870784 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.076699467 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.077412605 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.077625093 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.071872798 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.077799912 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.077061101 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.078027646 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.077546788 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.078424074 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.078738641 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.077344095 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.078027617 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.077227353 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.076944951 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.077018927 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.077927684 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.076783043 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.077584011 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.077678748 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.078846268 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.079208309 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.078450502 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.078324398 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.077847608 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.078808421 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.079277521 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.077809335 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.07676409 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.079274923 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.077856697 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.079620034 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.079321728 seconds)
  done (took 130.786348809 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.079427372 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.079035 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.078516348 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.078882893 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.080523629 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.07870313 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.078866928 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.079257696 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.079653532 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.080653955 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.080223387 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.079158821 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.080407177 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078911834 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.078009503 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.079448883 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.078343915 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.079777985 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.078892491 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.078977811 seconds)
  done (took 43.583677594 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.07859346 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.080638882 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.079981745 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.077631851 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.080410201 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.080417467 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.07908037 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.080005522 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.079724004 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.080472357 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.079545393 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.079444307 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.081287051 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.080042215 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.081143489 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.079815051 seconds)
  done (took 35.278067178 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.078368658 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.078966818 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.080479936 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.0805052 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.080359214 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.081568717 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.081151208 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.081153059 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.080266913 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.081128664 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.081891941 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.08070593 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.080290465 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.083179517 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.081380312 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.081764866 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.081226003 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.080262683 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.082310057 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.082443037 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.082663479 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.081507951 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.081983926 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.081677292 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.082738055 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.080096805 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.082499448 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.082130771 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.082218657 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.081335433 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.083070972 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.082142454 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.082638924 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.082871257 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.082912367 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.08299085 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.082398699 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.083698499 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.08379227 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.083004971 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.085021417 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.081604187 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.084446633 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.083476427 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.082845544 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.083192094 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.083121765 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.083167015 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.083422863 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.083863624 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.083651692 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.083071115 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.082895954 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.083656066 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.082871225 seconds)
  done (took 116.519710751 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.083508412 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.082940481 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.084307609 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.080158355 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.083583301 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.084247307 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.084160111 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.082149917 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.083913188 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.083405157 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.08323736 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.083023597 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.083808373 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.084555599 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.085167134 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.08460959 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.085001224 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.084914989 seconds)
  done (took 39.51166353 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.085955538 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.086497019 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.085728339 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.085588292 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.085799537 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.087174197 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.084496799 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.085682396 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.085655366 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.085441531 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.084601734 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.085112445 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.084895357 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.086178417 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.085615148 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.085353958 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.084913741 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.086368777 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.086694161 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.085855902 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.08599712 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.087272215 seconds)
  done (took 47.892309061 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.087569612 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.088146612 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.104142385 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.112432857 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.109461418 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.128013315 seconds)
  done (took 14.635387567 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.085799471 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.086796912 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.086378354 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08745227 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087238123 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088016125 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088210676 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087060042 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087137614 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087488134 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086010769 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088697357 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.086834608 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087675746 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088246168 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086446502 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087012612 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.086609407 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088326183 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088542955 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088344807 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088181092 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087645628 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088948113 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088900249 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087795731 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087987001 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090648971 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089125257 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087642441 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088723334 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087963404 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088580808 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090285745 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088777412 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088781268 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090892778 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089673549 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090147249 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09043336 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.089226857 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09034526 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089796244 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087438374 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089584304 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089240142 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090501164 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08950676 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090366031 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090160112 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090013967 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090339697 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089469655 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089313805 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089729281 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.090031263 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089570661 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090319802 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0909382 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090274583 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090136322 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090073787 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088618256 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089361286 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.09113848 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090361426 seconds)
  done (took 139.869432794 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08790218 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.090206125 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08970757 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090932669 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.091205206 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090605301 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090784132 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089976732 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090330968 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090634155 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.092155665 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.09175132 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090031969 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090371218 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09026281 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091175865 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090294296 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090790914 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091386529 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09144987 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09310775 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.092343555 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.090939661 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092665568 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092077748 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.092336434 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.093394882 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.092569386 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09231105 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09322457 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092795819 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09270128 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092474939 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.092081957 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.092267484 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.093139475 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.093065753 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092429931 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091448101 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.092814884 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092943924 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093224794 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.093617263 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092513768 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.094313958 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.091834659 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093253153 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.093046162 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09452928 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.093754808 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.093391541 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.094053713 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.094369664 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088971572 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094220538 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.09475264 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.095252752 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.094751572 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094857122 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.094731562 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.094861893 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0936337 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.095659139 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.094427043 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.094699577 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.094638258 seconds)
  done (took 140.114787061 seconds)
done (took 2864.002817738 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.184714217 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.233813999 seconds)
  done (took 16.430350811 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.260855644 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.128301574 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.276749681 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.21175446 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.114157363 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.096322412 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.094420402 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.096857118 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.187485808 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.098376889 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.146744152 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.095199012 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.098890144 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.097663465 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.098067594 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.096608747 seconds)
  done (took 56.231924607 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.101797232 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.101614686 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.100807804 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.097086883 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.114496756 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.178163901 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.122412138 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.107068472 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.116062188 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.13423211 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.120360634 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.10571847 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.105377185 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.109336248 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.192088742 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.145448144 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.159074454 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.176304375 seconds)
  done (took 40.303058516 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.183599685 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.106924443 seconds)
  done (took 11.31544537 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.132301096 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.09374564 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.108008459 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.124835912 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.102827787 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.107135495 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.12881926 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.134546885 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.092744146 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.100071734 seconds)
  done (took 73.184953131 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.102116671 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.101457215 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.405584679 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.107262556 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.109125574 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.128278953 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.099071831 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.13494047 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.100608248 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.098631431 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.109289679 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.414858165 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.104434891 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.101150344 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.454809177 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.112851587 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.107523951 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.136178377 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.135786536 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.106412771 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.107053516 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.106535468 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.258637132 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.806526949 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.097012917 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.104739236 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.108499377 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.100021108 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.0959908 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.102453357 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.104550051 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.100648209 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.107629956 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.103679801 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.104669311 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.107279197 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.605935495 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.120758385 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.106166031 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.181771368 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.15106824 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.105561068 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.948810189 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.099830885 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.099664679 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.112574187 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.804139629 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.189704128 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.101597865 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.281431867 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.493033977 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.116452148 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.248540995 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.268854223 seconds)
  done (took 145.742559961 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.100827039 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.334533693 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.254271236 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.103405563 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.356340445 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.312852952 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.097997204 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.147608176 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.102933162 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.302698973 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.359490282 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.205041981 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.100098445 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.103888183 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.102378507 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.096287475 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.24855868 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.168333008 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.101664137 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.098295944 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.126578948 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.304815515 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.223334942 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.102991263 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.125263279 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.308620396 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.222778296 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.203523813 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.07468262 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.100427468 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.162178321 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.101745382 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.104105024 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.098558876 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.256087084 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.194732036 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.187602562 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.102626242 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.101712759 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.100120384 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.780153178 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.303887514 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.197287661 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.22500464 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.351442976 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.316443457 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.793104333 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.098734142 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.736040236 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.267755094 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.308852033 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.310873921 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.22078733 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.10451447 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.402704807 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.099827467 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.104307022 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.32336555 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.321780437 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.201299424 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.104465821 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.101732902 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.100496631 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.342898959 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.10443162 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.19305322 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.1054258 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.10294046 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.193979721 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.203476185 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.33097926 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.323655134 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.132643396 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.39639705 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.639607276 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.307678215 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.168972021 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.322503765 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.104628248 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.101753985 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.182551587 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.945082214 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.358385689 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.345975174 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.302302037 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.131976349 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.75820424 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.103655403 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.289972645 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.295516142 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.338154682 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.344216699 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.342648445 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.663553962 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.102989939 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.105678488 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.447061138 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.220980923 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.108213804 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.460142498 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.330312289 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.638550743 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.132421506 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.390106707 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.233734004 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.110084688 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.75494216 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.105029643 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.309058329 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.14461638 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.106154476 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.107070846 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.294816089 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.01632701 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.10636077 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.190481621 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.164509067 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.109106505 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.309270272 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.10785308 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.347841819 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.110447515 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.340550068 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.016783785 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.136257397 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.280345766 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.348440997 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.779106207 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.418850098 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.349293178 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.219307332 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.385883533 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.097524313 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.104271916 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.369632353 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.108139144 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.105365952 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.275928891 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.107147047 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.249347421 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.114340241 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.371232614 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.127046274 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.340790835 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.111747653 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.346789628 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.139537167 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.156060066 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.111316784 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.230349777 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.113008429 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.056748517 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.267992191 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.111329532 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.105741993 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.70261283 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.106866073 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.2608704 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.33638914 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.127813632 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.17701344 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.670698659 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.104307437 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.193799864 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.128736865 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.390795565 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.10995354 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.359916846 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.094452136 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.597983408 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.109585646 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.343766924 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.346622559 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.109798087 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.108873105 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.951955433 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.07450129 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.108205024 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.26454998 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.528245348 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.028414899 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.307412099 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.112105708 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.236129108 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.116491398 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.44089678 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.450604371 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.105902643 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.108575007 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.111991115 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.109594882 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.107955304 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.320893433 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.135646191 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.545327426 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.247317165 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.364755173 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.413182922 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.311217894 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.149932864 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.115779638 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.332790746 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.111986067 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.171922184 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.112858236 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.130281112 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.33777205 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.1146965 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.315582822 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.346286295 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.993289177 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.158230561 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.111603291 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.109200758 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.034497977 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.255521559 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.201038905 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.112437448 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.110840834 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.22620114 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.234864198 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.295643634 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.97489343 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.283714362 seconds)
  done (took 955.368993371 seconds)
done (took 1300.600510689 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.114645533 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.115522021 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.115523141 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.115723205 seconds)
  done (took 30.492593876 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.113213426 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.113485703 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.114314738 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.114782713 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.113604465 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.11359701 seconds)
  done (took 14.718035376 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.11203467 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.113091929 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.115082102 seconds)
  done (took 23.372265267 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.5496879 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.530538048 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.188283808 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.260858416 seconds)
  done (took 11.561817142 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.119335355 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.114166736 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.114220886 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.115332581 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.116692498 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.115121753 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.116860697 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.11512614 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.115534421 seconds)
  done (took 21.085885414 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.29792637 seconds)
done (took 107.570764348 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.640909805 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.185781999 seconds)
    (3/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.203804071 seconds)
    (4/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.193108686 seconds)
    (5/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.820718421 seconds)
    (6/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.121933896 seconds)
    (7/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.089932339 seconds)
    (8/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.182163412 seconds)
    (9/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 4.196340222 seconds)
    (10/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.618993028 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.730699318 seconds)
    (12/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.508679479 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.12883064 seconds)
    (14/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.309330664 seconds)
    (15/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.320085921 seconds)
    (16/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.131113492 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.232414553 seconds)
    (18/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.124757917 seconds)
    (19/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.10944013 seconds)
    (20/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.25401173 seconds)
    (21/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.441701657 seconds)
    (22/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.240585856 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.444893398 seconds)
    (24/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.522543959 seconds)
    (25/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.116095958 seconds)
    (26/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.41519081 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.440212427 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.118455638 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.237512533 seconds)
    (30/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.205662903 seconds)
    (31/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.5094473 seconds)
    (32/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.892478408 seconds)
    (33/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.521894982 seconds)
    (34/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.806635401 seconds)
    (35/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.330104908 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.194182427 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.72677499 seconds)
    (38/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.813663143 seconds)
    (39/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.300146768 seconds)
    (40/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.267016106 seconds)
    (41/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.543081978 seconds)
    (42/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.430302701 seconds)
    (43/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.122271852 seconds)
    (44/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.20014483 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.01048621 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.535826451 seconds)
    (47/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.974110045 seconds)
    (48/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.81378853 seconds)
    (49/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.797102341 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.186694961 seconds)
    (51/341) benchmarking ("sort", Float64, false)...
    done (took 5.859618794 seconds)
    (52/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.103509069 seconds)
    (53/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.348050668 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.449425219 seconds)
    (55/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.28339649 seconds)
    (56/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.872272145 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.965176902 seconds)
    (58/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.531453853 seconds)
    (59/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.246642746 seconds)
    (60/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.184133421 seconds)
    (61/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.31383424 seconds)
    (62/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.884160453 seconds)
    (63/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.100652099 seconds)
    (64/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.210994825 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.198441289 seconds)
    (66/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.684055289 seconds)
    (67/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.117665997 seconds)
    (68/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.736746052 seconds)
    (69/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.657459173 seconds)
    (70/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.095912084 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.194158082 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.413286414 seconds)
    (73/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.098070982 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.105218582 seconds)
    (75/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.156959668 seconds)
    (76/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.095488879 seconds)
    (77/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.153857853 seconds)
    (78/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.356089496 seconds)
    (79/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.434345767 seconds)
    (80/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.758700032 seconds)
    (81/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.408341911 seconds)
    (82/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.37680772 seconds)
    (83/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.092938774 seconds)
    (84/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.339502849 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.250045475 seconds)
    (86/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.309300092 seconds)
    (87/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.105045235 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.348446277 seconds)
    (89/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.110908332 seconds)
    (90/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.865602486 seconds)
    (91/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.204918065 seconds)
    (92/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.17496939 seconds)
    (93/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.088845834 seconds)
    (94/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.301726989 seconds)
    (95/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.215377411 seconds)
    (96/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.105639458 seconds)
    (97/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.100859616 seconds)
    (98/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.17390252 seconds)
    (99/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.869117838 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.421413482 seconds)
    (101/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.196697388 seconds)
    (102/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.202882503 seconds)
    (103/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.155912206 seconds)
    (104/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.148202834 seconds)
    (105/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.572014017 seconds)
    (106/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.364573926 seconds)
    (107/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.190539615 seconds)
    (108/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.111305612 seconds)
    (109/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.393598694 seconds)
    (110/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.361721037 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.221722176 seconds)
    (112/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.197213864 seconds)
    (113/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.078968156 seconds)
    (114/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.410082431 seconds)
    (115/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.175383087 seconds)
    (116/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.089834438 seconds)
    (117/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.295172296 seconds)
    (118/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.106976018 seconds)
    (119/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.214841769 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.219681238 seconds)
    (121/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.163389252 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.355341772 seconds)
    (123/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.184986089 seconds)
    (124/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.165646415 seconds)
    (125/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.143556796 seconds)
    (126/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.370042872 seconds)
    (127/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.368291653 seconds)
    (128/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.087377549 seconds)
    (129/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.264023019 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.325319982 seconds)
    (131/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.28723032 seconds)
    (132/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.401937338 seconds)
    (133/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.394422449 seconds)
    (134/341) benchmarking ("sort", Bool, false)...
    done (took 2.300831717 seconds)
    (135/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.354515583 seconds)
    (136/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.08698913 seconds)
    (137/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 3.783719752 seconds)
    (138/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.084796918 seconds)
    (139/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.138347646 seconds)
    (140/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.099365952 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.086167683 seconds)
    (142/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.111553178 seconds)
    (143/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.451316728 seconds)
    (144/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.104073671 seconds)
    (145/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.100845696 seconds)
    (146/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.097651252 seconds)
    (147/341) benchmarking ("sort", Int64, false)...
    done (took 5.717167958 seconds)
    (148/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.201397411 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.748328645 seconds)
    (150/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.235739561 seconds)
    (151/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.847377696 seconds)
    (152/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.239417639 seconds)
    (153/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.484860042 seconds)
    (154/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.576891745 seconds)
    (155/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.127492341 seconds)
    (156/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.294971115 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.972888067 seconds)
    (158/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.060416103 seconds)
    (159/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.247435633 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.852584647 seconds)
    (161/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.110344214 seconds)
    (162/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.844171288 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.327259065 seconds)
    (164/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.090300216 seconds)
    (165/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.181389715 seconds)
    (166/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.485197222 seconds)
    (167/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.104180636 seconds)
    (168/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.167679851 seconds)
    (169/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.401936663 seconds)
    (170/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.509312981 seconds)
    (171/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.239892516 seconds)
    (172/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.088918387 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 4.509149977 seconds)
    (174/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.088642004 seconds)
    (175/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.477217428 seconds)
    (176/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.08943443 seconds)
    (177/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.813560672 seconds)
    (178/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.280311999 seconds)
    (179/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.796336019 seconds)
    (180/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.19840239 seconds)
    (181/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.608677419 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.47602346 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.443855022 seconds)
    (184/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.304712818 seconds)
    (185/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.365400115 seconds)
    (186/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.491304715 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.089247833 seconds)
    (188/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 7.722854871 seconds)
    (189/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.112246786 seconds)
    (190/341) benchmarking ("sort", Float32, false)...
    done (took 5.769360491 seconds)
    (191/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.091898583 seconds)
    (192/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.150825672 seconds)
    (193/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.326853029 seconds)
    (194/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.491886113 seconds)
    (195/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.168699766 seconds)
    (196/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.089915153 seconds)
    (197/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 4.543326896 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.099739242 seconds)
    (199/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.09405376 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.12317893 seconds)
    (201/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.110601005 seconds)
    (202/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.236416266 seconds)
    (203/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.115840703 seconds)
    (204/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.105414341 seconds)
    (205/341) benchmarking ("sort", Int8, false)...
    done (took 5.043847149 seconds)
    (206/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.111590909 seconds)
    (207/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.826158559 seconds)
    (208/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.219269927 seconds)
    (209/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.008965314 seconds)
    (210/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.183464301 seconds)
    (211/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.091557216 seconds)
    (212/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 5.025650783 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.451391724 seconds)
    (214/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.093276144 seconds)
    (215/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.842408297 seconds)
    (216/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.501714516 seconds)
    (217/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.313387801 seconds)
    (218/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.374618382 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.229247686 seconds)
    (220/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.354047361 seconds)
    (221/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.41304181 seconds)
    (222/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.201707523 seconds)
    (223/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.48764545 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.41246326 seconds)
    (225/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.109697608 seconds)
    (226/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.522668707 seconds)
    (227/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.385925732 seconds)
    (228/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.723890411 seconds)
    (229/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.091964941 seconds)
    (230/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.348265321 seconds)
    (231/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.563824499 seconds)
    (232/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.528425515 seconds)
    (233/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.750794325 seconds)
    (234/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.175441056 seconds)
    (235/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.097002 seconds)
    (236/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.310924953 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.096804997 seconds)
    (238/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.986027155 seconds)
    (239/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.120552111 seconds)
    (240/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.304180363 seconds)
    (241/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.413147154 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.877794567 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.098058633 seconds)
    (244/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.111774996 seconds)
    (245/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.172821786 seconds)
    (246/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.489727463 seconds)
    (247/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.199345444 seconds)
    (248/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.096432377 seconds)
    (249/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.346605675 seconds)
    (250/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.2379097 seconds)
    (251/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.939055713 seconds)
    (252/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.219973392 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.173883844 seconds)
    (254/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.37426924 seconds)
    (255/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.48055784 seconds)
    (256/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.181588475 seconds)
    (257/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.107676142 seconds)
    (258/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.282508942 seconds)
    (259/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.227814859 seconds)
    (260/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.094878684 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.095135742 seconds)
    (262/341) benchmarking ("sort", BigInt, false)...
    done (took 7.14762062 seconds)
    (263/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.227505973 seconds)
    (264/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.17007854 seconds)
    (265/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.375941993 seconds)
    (266/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.228750917 seconds)
    (267/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.643299908 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.097644783 seconds)
    (269/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.230908166 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.239272387 seconds)
    (271/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.156119903 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.295429014 seconds)
    (273/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.275828836 seconds)
    (274/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.490850938 seconds)
    (275/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.224367497 seconds)
    (276/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.346455216 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.387829146 seconds)
    (278/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.222934479 seconds)
    (279/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.0649561 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.990737601 seconds)
    (281/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.203961975 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.100310163 seconds)
    (283/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.501021108 seconds)
    (284/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.843709669 seconds)
    (285/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.551603951 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.232701717 seconds)
    (287/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.258740438 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.102958217 seconds)
    (289/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.100303248 seconds)
    (290/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.421200008 seconds)
    (291/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.298756583 seconds)
    (292/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.243384074 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.127931144 seconds)
    (294/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.377145205 seconds)
    (295/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.489230163 seconds)
    (296/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.296158267 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.096282034 seconds)
    (298/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.150555189 seconds)
    (299/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.264041295 seconds)
    (300/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.410243684 seconds)
    (301/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.36452406 seconds)
    (302/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.516522278 seconds)
    (303/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.354743169 seconds)
    (304/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.41543493 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.050813523 seconds)
    (306/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.78474821 seconds)
    (307/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.525076576 seconds)
    (308/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.095717461 seconds)
    (309/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.614469776 seconds)
    (310/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.096635959 seconds)
    (311/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.232654345 seconds)
    (312/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.897373468 seconds)
    (313/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.309985996 seconds)
    (314/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.207090832 seconds)
    (315/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.104733923 seconds)
    (316/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 4.735645443 seconds)
    (317/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.213639129 seconds)
    (318/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.00132281 seconds)
    (319/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.223321096 seconds)
    (320/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.585838691 seconds)
    (321/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.187965649 seconds)
    (322/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.571719097 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.914396309 seconds)
    (324/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.9844058 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.238987785 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.1214312 seconds)
    (327/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.257315372 seconds)
    (328/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.421279635 seconds)
    (329/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.193274453 seconds)
    (330/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.102640672 seconds)
    (331/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.439558658 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.230796785 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.984009384 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.108544394 seconds)
    (335/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.427267383 seconds)
    (336/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.396004019 seconds)
    (337/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.301075009 seconds)
    (338/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.104386488 seconds)
    (339/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.856837921 seconds)
    (340/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.229169014 seconds)
    (341/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.201425699 seconds)
  done (took 1168.515004256 seconds)
done (took 1170.886461118 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.128053331 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.110384128 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.608313876 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.117866831 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.111161781 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.113666435 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.619325825 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.137049031 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.12788777 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.620539931 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.11784026 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.109374496 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.125791917 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.144616812 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.122012133 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.12688291 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.117315554 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.136359418 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.145300549 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.117049496 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.163011146 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.11760167 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.110878209 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.163733534 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.109845942 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.125085786 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.13008405 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.164135436 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.163569938 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.114305427 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.115650211 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.471138787 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.15719591 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.115978465 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.122037272 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.126889733 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.116795587 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.128864758 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.13050475 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.127444825 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.11245578 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.122446947 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.117307387 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.114806751 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.11210358 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.110802866 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.113908549 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.236062872 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.12700885 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.454234785 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.167918962 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.128760291 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.162974464 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.114942125 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.113657037 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.113827384 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.164519655 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.11722745 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.116977757 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.454900208 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.203513119 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.130155711 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.454927843 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.168569433 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.122281335 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.120736624 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.112990034 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.130854884 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.472988132 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.65711143 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.14228358 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.13380464 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.114245057 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.116373604 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.127253714 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.620842236 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.124814606 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.691979318 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.136307102 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.127790353 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.11914404 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.116577323 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.116857261 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.129828212 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.133105801 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.113938578 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.12289398 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.119693606 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.128153841 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.475146459 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.153289429 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.611915817 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.118775287 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.134174179 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.133965127 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.693245738 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.138510687 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.133711378 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.118743758 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.474506278 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.1526883 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.136328035 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.116956952 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.12664813 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.23099165 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.134522644 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.135127163 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.115819884 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.136129576 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.122917648 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.11570778 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.131284441 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.134806529 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.151289033 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.133069373 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.116506485 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.124899662 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.121067311 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.133566496 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.12618146 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.123149788 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.127456733 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.116703946 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.167485143 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.135959714 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.13285105 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.231043407 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.120905344 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.241348634 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.131325218 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.124948414 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.117275303 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.459966128 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.155976083 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.13911059 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.125770048 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.14248161 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.140444463 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.13462847 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.119927184 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.134149788 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.121042896 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.171653151 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.11995534 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.143620947 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.17046346 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.133773408 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.125095124 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.134640107 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.15325349 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.138222166 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.123929974 seconds)
done (took 332.994330632 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.160558645 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.11204873 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.187071375 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.111359364 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.179202023 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.16391774 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.111060597 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.11174295 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.110964085 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.509788786 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.111423299 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.116275873 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.110236279 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.111447163 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.163167699 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.112184092 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.110970634 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.381553964 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.112665707 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.172697349 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.111802856 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.111262572 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.110742304 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.578545059 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.110405215 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.113097506 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.17332218 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.112934205 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.35318212 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.111548497 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.110441199 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.388128206 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.173685566 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.125125699 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.118790775 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.120859258 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.182078133 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.120174855 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.163050766 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.161894148 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.189711956 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.14643001 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.112182248 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.112671456 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.117922151 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.113613722 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.113026554 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.144573736 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.113825653 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.118246817 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.351771128 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.120524166 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.118493463 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.114089541 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.112340732 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.128834063 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.114745785 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.11498163 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.173849419 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.115481731 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.161537783 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.511874783 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.558584704 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.113859008 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.113829909 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.113830071 seconds)
  done (took 200.161372415 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.181279034 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.187710294 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.182377831 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.120580457 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.163193574 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.17963859 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.119085439 seconds)
  done (took 17.164124196 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.121507845 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.11426758 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.13755228 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.137193931 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.114563037 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.256382151 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.127857329 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.118169169 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.141066254 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.115715037 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.451361388 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.138145068 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.121736417 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.112632215 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.125996398 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.143492896 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.115599757 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.113590481 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.213615152 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.191445294 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.11935818 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.121734557 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.144320396 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.127432172 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.115207342 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.113903486 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.115934675 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.121737343 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.113991746 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.115167685 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.114178934 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.12884939 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.115958279 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.116037252 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.116320182 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.115695017 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.1161662 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.11632182 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.114876195 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.114586466 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.116221293 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.117178563 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.115876012 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.117405286 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.115794963 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.139301243 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.117729656 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.117387859 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.115516286 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.115939837 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.145841786 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.11860943 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.117210096 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.123700217 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.158980272 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.122640678 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.119039881 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.118750954 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.119034261 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.119080679 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.117689218 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.196727436 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.141257839 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.117700771 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.141698907 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.155883362 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.117993456 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.118542426 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.117729195 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.142380589 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.118639043 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.14172623 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.118982579 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.218646699 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.117769428 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.264295522 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.141181538 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.12165965 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.118936816 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.118040141 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.126445206 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.118114216 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.119802928 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.12714324 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.123408186 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.120748264 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.121802082 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.121911711 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.12575267 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.119178781 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.16503543 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.119604939 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.1205427 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.215920002 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.118579073 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.216416649 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.147095633 seconds)
  done (took 229.15073505 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.126094247 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.121083666 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.134577109 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.120326922 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.121696625 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.124563941 seconds)
  done (took 14.783981107 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.121980854 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.122429658 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.120276114 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.11993611 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.118220124 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.119492987 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.119829986 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.122343272 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.123449619 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.120174866 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.120503538 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.120236934 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.121985362 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.119372275 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.120878066 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.119278448 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.119946359 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.119044889 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.120019644 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.119128798 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.324344263 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.120575286 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.120510647 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.125306001 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.12714163 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.120911531 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.130976126 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.121698792 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.121093326 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.12808638 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.125791006 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.122670604 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.126317593 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.129917122 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.125760205 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.126518591 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.125910385 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.125251366 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.122563233 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.124187494 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.123969114 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.122546983 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.122937776 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.123955692 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.12544489 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.130195649 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.128672204 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.133167011 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.125087244 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.122797456 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.124090896 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.122978561 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.124327515 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.126269785 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.128953137 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.128874168 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.129348702 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.123188324 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.124469448 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.127886358 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.12740743 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.124884063 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.127348575 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.129340768 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.131804868 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.125608446 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.127203175 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.129948976 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.124328201 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.124753975 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.126582824 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.12380203 seconds)
  done (took 156.185429665 seconds)
done (took 619.483182338 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.175102109 seconds)
  done (took 9.21549796 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.136358106 seconds)
  done (took 9.255804776 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.620703586 seconds)
  done (took 12.66409819 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.14695927 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.172584696 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.134065955 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.122159649 seconds)
  done (took 30.630620952 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.317127446 seconds)
  done (took 9.358170991 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.13439446 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.124970383 seconds)
  done (took 16.35833193 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.139954351 seconds)
  done (took 9.18517351 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.140894491 seconds)
  done (took 9.205890034 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.132075479 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.144076361 seconds)
  done (took 16.336797909 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.130876281 seconds)
  done (took 9.175272866 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.883842874 seconds)
  done (took 10.002853965 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.133055266 seconds)
  done (took 9.194165513 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.127475328 seconds)
  done (took 9.172033041 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.079460773 seconds)
  done (took 10.124336954 seconds)
done (took 171.929891145 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.136314666 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.130244614 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.128805858 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.128391292 seconds)
  done (took 30.56732649 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.162846126 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.16218178 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.170922372 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.163570108 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.153669968 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.152361845 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.163400075 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.162575803 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.153520751 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.161211155 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.161942037 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.161497455 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.153201182 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.172068998 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.172574996 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.160538112 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.163080664 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.16347726 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.155118967 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.173070118 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.16203965 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.162752575 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.130028478 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.129727532 seconds)
  done (took 53.872716847 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.320525477 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.196372851 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.285005502 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.184201226 seconds)
  done (took 11.029381043 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.129298024 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.193282548 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.181141327 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.175364296 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.214598173 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.23456479 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.181967692 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.338711415 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.246040817 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.257824081 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.138070845 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.150601658 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.144241234 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.174137877 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.233087742 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.12968558 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.130827206 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.244875113 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.191942327 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.3412436 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.13075582 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.183589269 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.223558975 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.182811041 seconds)
  done (took 54.796633506 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.130337744 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.138701437 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.138833401 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.130856855 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.132798472 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.13169352 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.138977059 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.132424571 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.152689515 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.134503272 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.133763596 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.133031344 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.139090632 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.132056452 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.131062666 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.145785925 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.146602749 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.132416625 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.135404714 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.140314436 seconds)
  done (took 44.777937614 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.131414691 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.978641597 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.479001232 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.381813797 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.12964901 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.127890779 seconds)
  done (took 33.27462424 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.143047024 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.148828341 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.140189716 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.154311706 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.179485945 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.140362717 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.191443161 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.268685407 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.139398091 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.1908754 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.1491263 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.139626971 seconds)
  done (took 28.034662249 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.132053235 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.13300705 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.133077697 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.142405677 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.141344106 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.142130387 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.139719305 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.133041062 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.143084584 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.151824412 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.141557206 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.143928475 seconds)
  done (took 47.726600897 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345666133 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.356876813 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341827 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.710582557 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.442581482 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107508666 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.416391246 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.345478715 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.775911527 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.791545054 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.41962576 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.106891278 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.084741273 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.056707173 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.029347629 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.375075839 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13562663 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.990169047 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.385528258 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.174847853 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133765981 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.133323595 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136648945 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.421530291 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453099158 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136992855 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.347230773 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148286351 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.132672642 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.393036138 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.581266987 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.185669719 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.337406461 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.396511005 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.481580199 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.185521968 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.132731152 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.287688304 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.175630322 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.169711076 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144634771 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.14603205 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.676501802 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.149468699 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.407497765 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135650466 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.150596527 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.103700593 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.056994834 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.401014172 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233041072 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.135421856 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.16974156 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.569904299 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255197211 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.377397759 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.140352869 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.295959698 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188133241 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.340796239 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.249998541 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.133827732 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347666887 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061297056 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.450795862 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241810553 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.138576271 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141816077 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.835770317 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.380713162 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.217207715 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.404051296 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.875985577 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.138849781 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.138773591 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.1786512 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.232100206 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.134745532 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.433353163 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.135497372 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.061080851 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.234041604 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.551587897 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143858883 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.136140049 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146866767 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.983739795 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.062572383 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.233561209 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.34879495 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.442834816 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.138051522 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.137027865 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.160602575 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140436631 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.084336748 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.685162031 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.199644127 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.063611556 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.698767089 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.589631211 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.100573246 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.592071334 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17705125 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.419666847 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.287239953 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.539871812 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.348630278 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.382703456 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.6699898 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142312391 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.753071566 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218470242 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21432826 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137166748 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.696088233 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.29751317 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.379798664 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.234727534 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.136084889 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.065460708 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.150829806 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341983081 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.595829355 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.189571672 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136977192 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.144039999 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.137128726 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1423245 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.251280925 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154652002 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.430901153 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.204566887 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.137997131 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.08300387 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.139591046 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.416494269 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.746778291 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192058642 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399551902 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.401014831 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.838450311 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.734334302 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.08460969 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.402839902 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.20448301 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213772285 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.716061945 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.268611024 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.236332906 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139873462 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.274802332 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.147687058 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.143578208 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.483454336 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.549041348 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.569332394 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.183899342 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.140550389 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.091003083 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.304903611 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.378707921 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170561328 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.162656022 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144692566 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.222785697 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.36703485 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.140438378 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.068006319 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394762273 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.380197872 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.425775727 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.547136574 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.160066813 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.205953734 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.152236472 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.352866702 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.223765506 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.809376551 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.686498334 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.351832035 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.684310737 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.102559866 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.804269175 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.350989276 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503542145 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.158346156 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.590538649 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.299843371 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.808389717 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.169539105 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.666454906 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.067811015 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134320414 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.471943322 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.095714477 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.455077039 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.200541349 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209785468 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.144588862 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.143656806 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15043492 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.026584059 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.242212086 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212375166 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216397917 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070355386 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.764775769 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.178566216 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.144746169 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.143822019 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.444477628 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.946558695 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0891612 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.143195714 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22241721 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.887210402 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.694617076 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.144169431 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.147868414 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.757783369 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.148959338 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.048640093 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.196304927 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.85816983 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165693076 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.35817225 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.82562281 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.431041663 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.209423742 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219670719 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.144364821 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.150549561 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.844947993 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.152612517 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.844314515 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.422958868 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.412465117 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.583109665 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.195799327 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.353534162 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.160121601 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.146151521 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.615922198 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.164871815 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146782405 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.349722698 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.662883419 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.42415361 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.772147933 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.231249903 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.145642655 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.410179948 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.139531251 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.598918986 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.827203968 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.136651483 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.14632239 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.401564702 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.83020009 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.148717096 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.123285685 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151263693 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.360688958 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.349789704 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421502799 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.438732303 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.591007162 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.073795468 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.152057497 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.171979038 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.389247517 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.146535275 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.182842249 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.593388173 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.171503801 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.568964637 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.424249857 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.484445294 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.762213555 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.41440513 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.20519497 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.157176083 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.797472077 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.263747109 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.080938929 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26629543 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.073681814 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.857580358 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432027539 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.168603787 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.410611504 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122631903 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.479318623 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.438966821 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.361989163 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.176015711 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.172307538 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.146297281 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.196524087 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.14947359 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.325697818 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.259727202 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.153212726 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.664485643 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182431219 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195283041 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154957947 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.595227795 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163928263 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15104553 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.843820906 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.170489545 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.268827833 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221620528 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.867039714 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.668922114 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.173001628 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.100796823 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.795482862 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.412229006 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.198557004 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.593307404 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184182598 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.554427493 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.149134743 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.362222108 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.152264596 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.713303288 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192667402 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.428963502 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.100866122 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.357954548 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344696114 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.175971205 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.155056285 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077028844 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.250181455 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.020328008 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.129523519 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.151258363 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.832093152 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.543760669 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.340964069 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.57814509 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.977968405 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.153044543 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.419305567 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.525548962 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.751691016 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180339621 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153006887 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.429927772 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.267053253 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.407348653 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.408269349 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.15985633 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.17715045 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.36335004 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275028651 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.071041335 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.641937943 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.731811065 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.8500007 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.163120123 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.354571129 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.43457563 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.412147158 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.180998702 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.22519222 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.556436435 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.414613406 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.213995098 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.077051004 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151549454 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.548307346 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.559095561 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.248465416 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.39228847 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.45777381 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.73570585 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.590848808 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.575350754 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.496308695 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.585486274 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.563947864 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.357718385 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.511669874 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.470424122 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.035140581 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.566172375 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.365981211 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.250696829 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.432004404 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.017158398 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.863388934 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.397774309 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.159100786 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.083705684 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.362095735 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.269386572 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.508364202 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.677869443 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.388717877 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.376510211 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.615770059 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.69231759 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.328475677 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.174965388 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.118368833 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.174032178 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.174173487 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.152989353 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.648361835 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.438395947 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167838706 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092936419 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.822827023 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.079952446 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.36611761 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.326124419 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.184675039 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.711918975 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.368855045 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.237340915 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.442274784 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.376027439 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.186967706 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081022171 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.806403819 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.098221086 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.181697041 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.574712871 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.169396883 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.157065499 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.358639144 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.084352505 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201524428 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.159406224 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.35033115 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.733413298 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.418977171 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264710518 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40614774 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.454910789 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.944577871 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.165316149 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428236647 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.081743922 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.764338185 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.834012982 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.195432172 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227265384 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.15610932 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158849148 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.427619766 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.436841367 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.337075766 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.622967403 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.183692186 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.179677501 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.434916415 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.232025248 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.157486454 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.163217739 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.630617427 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.385720858 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.157847284 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.134780485 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.369591988 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.228705993 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.35341529 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.234288889 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.670942691 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.162227535 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.963323552 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.241741587 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.106809833 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.154546126 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.838872826 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.213778611 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.158243903 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.425808923 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.773700369 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.360874959 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.551360925 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.038578236 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.329512079 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.196155614 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.16073561 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.286768469 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.434816475 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.455293142 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.156733607 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.429395518 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.200327365 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.162702698 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.820317136 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.12453877 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.159096141 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.870643542 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.049145278 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.887464786 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.55670273 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.172247421 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.199598571 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161233875 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.085943146 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158804936 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.327606213 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.151241125 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.266828334 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.427861769 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.432070561 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233220855 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160877421 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.159917066 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.16418596 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.372588786 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.674823632 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176332385 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.861393085 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.364231642 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.163125659 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.654665818 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.619887221 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.598882997 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.197634688 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.342306684 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39622064 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.698711186 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.341020329 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.133430342 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384701874 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.16233579 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432808851 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.433911106 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.162521448 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.374261164 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.632834786 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.443209858 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.511529193 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.469768377 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.220363006 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.341390306 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.065400069 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.163343587 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.163932734 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.428427722 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212382978 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.159580281 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.170698417 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.720419773 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.815061729 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.620519678 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.313443715 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.44095988 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.889889586 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.911590613 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.163747577 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.088814045 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.162941407 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.187585211 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.166496965 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.087655861 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.874911195 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.881220886 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.376750648 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.475023242 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.090722006 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.365733214 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.762540499 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.086374394 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.131372843 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.163326951 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.423388479 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092791849 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.168387423 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.119555088 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.401761729 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.856222316 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.429176497 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.166385558 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108426454 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.165685567 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.166895214 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.163963443 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.248710593 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.165864884 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26979672 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.430607616 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.489783104 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.251335069 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.804252988 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.882551094 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.097956305 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204719964 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.780808392 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.734805259 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.40573755 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.279618321 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.880357994 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.105007018 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.167355889 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182660783 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.408898282 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1673712 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.168176137 seconds)
  done (took 2244.614572415 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.204111186 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.241878171 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.227852519 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.228626295 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.27582917 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.247796903 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.1981764 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.223666854 seconds)
  done (took 59.929026978 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.166306046 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.155022796 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.172127044 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.167502119 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.163875726 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.167600891 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.361671201 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.192761435 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.180091479 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.168162242 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.137580565 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.167161015 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.167770383 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.162044206 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.169058913 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.479732746 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.185704311 seconds)
  done (took 81.463569406 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.221607038 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.978269506 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.165699422 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.840232861 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.209792555 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.510407416 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.167768244 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.170022978 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.281719118 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.461466583 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.21045941 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.187880873 seconds)
  done (took 93.510342028 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.169781318 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.169949124 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.168858443 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.169330133 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.168098878 seconds)
  done (took 12.92849694 seconds)
done (took 2798.637500778 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.416448175 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.266199059 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.235338293 seconds)
  done (took 6.582531407 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.311731801 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.362682113 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.475780183 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.496530919 seconds)
  done (took 11.735862122 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.457430689 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.553806623 seconds)
  done (took 7.09382037 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.539884821 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.183195437 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.558544228 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.168158706 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.171503555 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.170159642 seconds)
  done (took 23.598518778 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.170019599 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.169940259 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.170985774 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.167937206 seconds)
  done (took 10.76327421 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.168297359 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.95987876 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.172749483 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.178115416 seconds)
  done (took 22.561847401 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.366972796 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.293872143 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.936351392 seconds)
  done (took 10.680800064 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.793084043 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.61821885 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.784832068 seconds)
  done (took 10.280166027 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.003948808 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.985908319 seconds)
  done (took 8.072196001 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.309765318 seconds)
  done (took 4.393513783 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.007819576 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.483199752 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.642470382 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.672795862 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.741710938 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.379282587 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.478966149 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.430781001 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.557548884 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.555634173 seconds)
  done (took 28.036970722 seconds)
done (took 160.591132939 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.617625657 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.200960372 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.395064951 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.55275624 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.429327508 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.38414346 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.622411964 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.54346405 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.221564014 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.203635136 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.548481832 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.420675396 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.570284214 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.208263119 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.574069675 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.214028497 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.412989991 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.637081206 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.234484302 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.447220715 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.615709631 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.193598224 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.393014339 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.210367026 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.4135873 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.334521918 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.805243254 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.21279385 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.383613627 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.820828843 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.334367692 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.597729399 seconds)
  done (took 179.839449309 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.173431896 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.167960132 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.170252777 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.169840788 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.443467906 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.168771357 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.171701785 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.169276329 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.387972751 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.363832703 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.170155891 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.424433116 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.170774181 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.169799316 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.174629672 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.170295063 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.512001409 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.170197882 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.170003454 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.170890799 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.170433887 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.303551808 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.17038972 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.322267754 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.500295495 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.169740234 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.170601713 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.170497008 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.170924395 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.171134625 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.170624622 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.170449944 seconds)
  done (took 217.440920038 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.175054498 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.173441005 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.171812556 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.171678654 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.17185823 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.172064053 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.170925181 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.171251339 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.844573877 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.832232337 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.172210889 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.172250831 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.158227225 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.172275223 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.172126451 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.172686921 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.171324453 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.172152823 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.171739499 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.17265251 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.170696807 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.962327912 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.171537071 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.974097076 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.173164761 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.175155042 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.172000912 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.17269731 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.171342557 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.173732411 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.174666383 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.172427321 seconds)
  done (took 230.518171312 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.41440172 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.175303845 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.177554398 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.187025888 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.177416969 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.175724647 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.181053834 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.426030951 seconds)
  done (took 22.0077625 seconds)
done (took 651.912197356 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.55428081 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.914503664 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.304333592 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.197346443 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.44689274 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.2372851 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.194681365 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.257358757 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.832753636 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.261131091 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.61417894 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.199283492 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.940584766 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.217450442 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.312967707 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.249381802 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.544162994 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.807463234 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.328736432 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.857219634 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.390699399 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.121993175 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.269564312 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.881072219 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.621250573 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.141453057 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.217378667 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.544664254 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.198984064 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.432225529 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.825277798 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.453281734 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.206669574 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.199156114 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.248592422 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.227925851 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.394323772 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.204273091 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.30879825 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.918929133 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.861289606 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.710496465 seconds)
  done (took 112.740168416 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.186981591 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.185218291 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.184980236 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.185678604 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.195791095 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.184890829 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.185953425 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.184194613 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.185033605 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.184979836 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.18622674 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.196205541 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.18495765 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.195126871 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.184605046 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.186661618 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.186215001 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.19433117 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.186939073 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.187534756 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.185778035 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.187204381 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.181561891 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.18580721 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.186150883 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.182068777 seconds)
  done (took 58.963655873 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.180899295 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.33169587 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.457225366 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.208095767 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.181651478 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.184328322 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.209616115 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.184492068 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.185575912 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.184620802 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.294194724 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.182525174 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.185827528 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.450156271 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.20503926 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.180904799 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.180940129 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.181447431 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.340699545 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.194028839 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.210303243 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.185039264 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.211992196 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.19295111 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.184010216 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.18421654 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.185305777 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.586617563 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.190262152 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.297086804 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.223058781 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.213630058 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.518871673 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.4643179 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.243493197 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.186434926 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.183066519 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.343407979 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.192957135 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.183382675 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.211974375 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.187870796 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.464466939 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.686570721 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.194640815 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.183212783 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.584269398 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.349296334 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.227296 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.197711852 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.470725995 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.209301337 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.183906304 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.185366138 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.220442697 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.196431275 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.185553332 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.431798519 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.197463176 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.213123882 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.185849553 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.184994567 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.345704038 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.192993448 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.334086279 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.166748688 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.194703075 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.185307912 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.465953029 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.209278128 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.687758381 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.198726528 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.183516898 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.298503362 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.34129116 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.60521017 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.197220847 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.349979319 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.5398317 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.218442358 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.193428895 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.573907417 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.221823791 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.192623066 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.185741959 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.185514762 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.182077714 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.229527236 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.211854295 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.610950058 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.685694443 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.446715636 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.221556849 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.195354704 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.18737952 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.432467131 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.191724144 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.18702494 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.4627642 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.710042338 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.19635542 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.193503216 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.672178343 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.198953251 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.215736883 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.194866719 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.480224526 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.210938477 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.230513461 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.187091799 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.192732221 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.189630243 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.217407725 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.194093009 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.187466463 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.660726563 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.35527424 seconds)
  done (took 269.136313875 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.189278284 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.183143742 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.187488821 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.183689274 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.186141999 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.189596454 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.186590003 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.188728393 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.187445428 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.185128034 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.186290085 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.190054619 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.188962084 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.190213597 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.217815591 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.188161475 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.678711098 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.186535249 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.186865921 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.184493854 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.769207695 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.193832397 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.187428359 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.185712608 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.187950771 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.189395346 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.191703791 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.216660916 seconds)
  done (took 176.495392968 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.187356759 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.244288153 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.201795843 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.23442049 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.200300878 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.187116725 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.21401927 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.199433033 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.193456895 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.188342009 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.187203766 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.221187743 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.191511406 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.283818586 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.215353271 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.215709499 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.286463654 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.191409786 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.189464721 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.189590328 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.235678028 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.201582945 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.221035446 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.247625983 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.200312846 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.2456322 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.202503762 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.1905759 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.189559594 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.305237274 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.201215011 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.220686555 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.220253443 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.20859598 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.307405351 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.299478825 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.288267606 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.215565188 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.190475925 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.189757887 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.190655732 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.190599884 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.244886092 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.199744369 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.191984506 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.305244756 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.202672585 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.191001664 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.212027451 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.190519229 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.204960353 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.209220964 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.228307334 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.312775715 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.230861654 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.212128958 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.215260572 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.207983025 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.193330125 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.287167492 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.193530235 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.304900715 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.203448845 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.192489581 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.193023623 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.196386351 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.23834612 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.227998912 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.288571406 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.194041596 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.287952895 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.240084282 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.203082997 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.193485378 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.191809005 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.247216283 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.297807764 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.24145708 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.251722874 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.225742568 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.201787051 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.193659885 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.196558934 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.220618713 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.196584607 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.307207559 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.302972165 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.195175145 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.195043636 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.194579448 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.195184228 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.218997715 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.25598192 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.230678521 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.295994768 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.227075457 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.228600102 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.198738772 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.206315412 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.198597953 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.227418814 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.198219673 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.205533511 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.526681107 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.22963583 seconds)
  done (took 235.791449801 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.554310189 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.235007433 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.26419412 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.473422714 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.553233431 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.076226815 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.228496336 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.243564229 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.25333432 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.368333761 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.303544861 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.287494283 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.227269014 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.216958945 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.235303229 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.254948512 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.271726544 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.544950595 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.338037277 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.745902479 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.227323256 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.514882417 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.533061824 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.578968659 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.2754479 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.639325589 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.866858522 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.328827594 seconds)
  done (took 71.753795652 seconds)
done (took 926.982487453 seconds)
SAVING RESULT...
DONE!
