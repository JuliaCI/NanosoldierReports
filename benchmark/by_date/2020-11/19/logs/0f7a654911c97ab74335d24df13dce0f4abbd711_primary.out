cset: moving following pidspec: 4704
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.934563702 seconds)
loading group "shootout"... done (took 1.183646157 seconds)
loading group "string"... done (took 0.676079032 seconds)
loading group "linalg"... done (took 8.691154774 seconds)
loading group "parallel"... done (took 0.171483323 seconds)
loading group "find"... done (took 3.000694107 seconds)
loading group "tuple"... done (took 2.143458542 seconds)
loading group "union"... done (took 15.092975914 seconds)
loading group "dates"... done (took 1.462216394 seconds)
loading group "micro"... done (took 0.220603569 seconds)
loading group "simd"... done (took 4.858772306 seconds)
loading group "io"... done (took 1.08263313 seconds)
loading group "random"... done (took 9.687160017 seconds)
loading group "problem"... done (took 1.522508291 seconds)
loading group "array"... done (took 25.411672672 seconds)
loading group "misc"... done (took 1.908572828 seconds)
loading group "scalar"... done (took 43.967197691 seconds)
loading group "sort"... done (took 3.358007657 seconds)
loading group "sparse"... done (took 12.888976689 seconds)
loading group "collection"... done (took 18.955891981 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.539407903 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127659989 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.13158268 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124826105 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.183539827 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123146967 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134421791 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087871086 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.85690934 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.145145593 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118663089 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.443682441 seconds)
done (took 5.437564763 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167135606 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09467275 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085736832 seconds)
  done (took 1.370133726 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07321686 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.0626599 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069526076 seconds)
  done (took 1.397634678 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06693442 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.137844367 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068007272 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06885643 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071646384 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06843862 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068107791 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068444667 seconds)
  done (took 1.748896375 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073308517 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.07004027 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067514845 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069831089 seconds)
  done (took 1.475709982 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066379553 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125716536 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066894241 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066685192 seconds)
  done (took 1.518083709 seconds)
done (took 8.956959041 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143323765 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.836864756 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.762160589 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.127088331 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250806124 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.45297378 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.127340552 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.187714404 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092775226 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077405812 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125383563 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080682236 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.459572284 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.407988467 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073765605 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173179324 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.648889532 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087456865 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134370754 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.467206454 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.075083739 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.090129228 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08729751 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071989728 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.335140537 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154133479 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.662154518 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100456908 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.0712622 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.097460519 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.072311864 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.081177595 seconds)
  done (took 10.843996662 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.095637125 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.093610363 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.07125949 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126792936 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097310074 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072127287 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.078083348 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070556233 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.092403994 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.127284948 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092382385 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101971059 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068802934 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071588727 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.082508324 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200511498 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08101758 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083876859 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070373918 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083465639 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.109268194 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.0793718 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080823443 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080502215 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132365542 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172750943 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097971218 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099620415 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068769605 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081155718 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.120215397 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.129036814 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069067468 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067161472 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122739619 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097966326 seconds)
  done (took 4.720618282 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.902340894 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097839829 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.086028345 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077146864 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109375807 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115898177 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.12617021 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.127025392 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103571416 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071011134 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.156395033 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.652330149 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.152994298 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.075392906 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.124529717 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.370245709 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.093984648 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071858566 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070943488 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073286527 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072591384 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.11546452 seconds)
    (22/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.11800416 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067864742 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.18092144 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.587544548 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071975072 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071848775 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09889849 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066971988 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.14704561 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094320019 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071717454 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.560701921 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067063749 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065517514 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090081561 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094436206 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.180552132 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070797894 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081832192 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069099443 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111862232 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080350565 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.501477227 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072633953 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.57119301 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229806069 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07584834 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074312077 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104611749 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066557521 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069712502 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.926135656 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.126150622 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06843472 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.27820242 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069995344 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070656072 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071101012 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102959744 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069424668 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070610811 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075060884 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09851802 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.807712366 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089972242 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102695476 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069503053 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.408472733 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076970251 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071683065 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072069536 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086564341 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.114199534 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068660495 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068013318 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110710061 seconds)
    (78/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06743174 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.090642042 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092682409 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072024133 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.070465782 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068814629 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.324276582 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.176866279 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068716776 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069425043 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.491804468 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065818316 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068114113 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065583837 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069796496 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091455168 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.0692476 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065626757 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065995119 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101431414 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068470751 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.452808309 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070509342 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.480040126 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071536817 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105689632 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.127960689 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069611834 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.09957827 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070630008 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067199712 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075791976 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067556219 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066345277 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07172231 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06760362 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06825946 seconds)
    (115/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066272826 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.07163822 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.0705701 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069907476 seconds)
  done (took 23.018051032 seconds)
done (took 40.682535653 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.317443303 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081588964 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.08182515 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081642878 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081524945 seconds)
  done (took 1.890195651 seconds)
done (took 3.229991969 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.136239734 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077341601 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066685079 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103312977 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.07084237 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104710698 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111126929 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107047871 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070979974 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.07118918 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070665129 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105329408 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.108580142 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.07079729 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100651522 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.107225539 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.071493547 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069381028 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.071042324 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071392647 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.071614036 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066408564 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070736295 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.071160603 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101962569 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070954635 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066437663 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.102348472 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070823085 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101266512 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.07140444 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.071117437 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070985634 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.103189001 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071272963 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102553457 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.067210675 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071291163 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.071208033 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071045083 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070762556 seconds)
  done (took 4.69317019 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072165929 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084253052 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08579714 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063942365 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074484774 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084171274 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064112078 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08390105 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090764622 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084333842 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.0848612 seconds)
  done (took 2.162275626 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071268555 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085187611 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089920588 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064111647 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075597524 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085537939 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064050182 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084752811 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08855301 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085502418 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085801134 seconds)
  done (took 2.148057066 seconds)
done (took 10.269276535 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097656325 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068557006 seconds)
  done (took 1.417554189 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.229524384 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.636904611 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.322692137 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093513585 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.074609134 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.088630946 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.204893992 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068569852 seconds)
  done (took 8.161461881 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.106522727 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069907417 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069721227 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071793246 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072006631 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.07014456 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070878457 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070058583 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070483372 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071506823 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.070192214 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071399009 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069709337 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070172466 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070827809 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070758885 seconds)
  done (took 2.538333953 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105537894 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071622306 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101678929 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064518852 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074391676 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06460632 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.073185493 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07481438 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072312844 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.073477122 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074687849 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072992552 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073177763 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073402196 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075432656 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075525649 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074770909 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072601494 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075464718 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075659623 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074625812 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075927915 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07577581 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.07358569 seconds)
  done (took 3.208784963 seconds)
done (took 16.594261164 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175831691 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076926825 seconds)
  done (took 1.520085508 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069096025 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070959403 seconds)
  done (took 1.420521511 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074135881 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062599273 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081276146 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.073027273 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063673118 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062712239 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07982476 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063490936 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063565253 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063566879 seconds)
  done (took 1.96768196 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063687833 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071835824 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068417125 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066765425 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069100124 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064367989 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067807185 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065669652 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.072331856 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064186987 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06876712 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08629204 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068046412 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086410475 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067826541 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068091206 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069594482 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06757377 seconds)
  done (took 2.539791526 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062070468 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063834913 seconds)
  done (took 1.411989292 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065744895 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063478491 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066795868 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066223411 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.064054906 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063408906 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063634064 seconds)
  done (took 1.733419442 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.429715204 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125140784 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348748355 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070650885 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079132601 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.26211379 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065622357 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070754055 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070452591 seconds)
  done (took 2.84844713 seconds)
done (took 14.739216466 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082819335 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.186065917 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090637153 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.414701949 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094426449 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069292149 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114834516 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.178437245 seconds)
done (took 2.53496001 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215621842 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.255484842 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.3990579 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127171393 seconds)
  done (took 3.072707655 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.338593742 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.080408174 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.0792044 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068909661 seconds)
  done (took 1.870480509 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065332821 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072665757 seconds)
  done (took 1.435380846 seconds)
done (took 7.896544114 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073531649 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.10017539 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064146942 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.066716381 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064170787 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066498086 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065888029 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.07647959 seconds)
    (9/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065739044 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064833195 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066758881 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064011781 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.066259607 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.066236998 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066741486 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066159949 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065895008 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066497986 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065770021 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066564039 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06595058 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06649369 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065257757 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066139468 seconds)
  done (took 2.958622076 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080080063 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067768135 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069204854 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.069015491 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069518664 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.069214022 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068945232 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067685811 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06916875 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067494413 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069561012 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069818075 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067588523 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069838638 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067543304 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069730282 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069057246 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067806291 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067287546 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06962237 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069414502 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068396436 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069371637 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069178561 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069950189 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069077858 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067573289 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068088149 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069202952 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069777119 seconds)
  done (took 3.388420285 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066802889 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061824634 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062200924 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071835691 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062064631 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062405637 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062774949 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062346312 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062289973 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063832818 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062870795 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062025072 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062609656 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061823018 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.06234448 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063005525 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066512223 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082233411 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062519258 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062431872 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066264971 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062289837 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062286727 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062554844 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063256263 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062474112 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061896188 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062471496 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062667102 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062893895 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062242584 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066453764 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067425126 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06202468 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072500409 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067144362 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061989252 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066182236 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063347916 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061711669 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061720409 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062444979 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061972587 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062178875 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072858412 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062455425 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063229992 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063283978 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.063104379 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062212845 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062396614 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06458905 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.07136726 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063261552 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062319246 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063509363 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062212275 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063231041 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062017329 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062127838 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061704725 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066095836 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06351425 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062656067 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081988492 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06365473 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07218822 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.06206971 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062492505 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066015205 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062989604 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080252319 seconds)
  done (took 5.953031787 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072864867 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074884982 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081740584 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073086769 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067082061 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063322036 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067249475 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063588114 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073017372 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067522081 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063571784 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067178477 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073417431 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067922081 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064325977 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072721021 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068067878 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066861596 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06345734 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067450332 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065104443 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067132006 seconds)
  done (took 2.834892497 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13688171 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068215673 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108814472 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077350992 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071039117 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077723702 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068394207 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068079494 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068152903 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068602357 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068963705 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068125435 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071384794 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068856348 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068997281 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068849372 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068960951 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069001987 seconds)
  done (took 2.677848969 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076971368 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067761364 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091863918 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067767097 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068276799 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068101132 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0714573 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072432294 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067854061 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067788653 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072232218 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068170353 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06777696 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068120371 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067950759 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068537833 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067757435 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068070816 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072409696 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072085839 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071870872 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072242498 seconds)
  done (took 2.872240255 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077841708 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066880634 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082554216 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068326622 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062693512 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06290085 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068092803 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067563877 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067787096 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066554293 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067444714 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062728331 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06867855 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067855346 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.069218785 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06762501 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067219272 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067776604 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067471241 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062788588 seconds)
  done (took 2.673662228 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086946812 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065394512 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06537301 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.085365834 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065096457 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064937091 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084805421 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065399759 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065482132 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086834712 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065650596 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065200112 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084637197 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.085010088 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065254675 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.085361012 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.085379415 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.085526309 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065755976 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065547447 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087188501 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065647196 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084791001 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065428742 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065600413 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065332232 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065663914 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.08456728 seconds)
  done (took 3.388817341 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06551212 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065279924 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065710264 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.066201683 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065679997 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065656958 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066061198 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066590367 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066014163 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066270445 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066412085 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066220067 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069143693 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065841958 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066481965 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.066419701 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065970005 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065920984 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06611534 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066391549 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066214567 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066328687 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065814746 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066281516 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066229976 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065654381 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066412706 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066425163 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065967653 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065823048 seconds)
  done (took 3.305624083 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074413848 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073854721 seconds)
  done (took 1.46925995 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063102509 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079790234 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061860793 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074525727 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071221079 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066107816 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072160028 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07123651 seconds)
  done (took 1.876374633 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.068111661 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.093087149 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06472181 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064966564 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.0674039 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.13537461 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.077108244 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075966196 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077897233 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066316352 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065203168 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076568715 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063823286 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077145029 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065775312 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073545065 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071734288 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081185258 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077039159 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06211994 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076585907 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065401987 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062703264 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065030234 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064341168 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071376968 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079787507 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077155791 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072817453 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062084354 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083289694 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063152788 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064062908 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072961111 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.068004403 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063212047 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100883577 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.0636054 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068163374 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062704937 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075648419 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084189961 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077791128 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081933699 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064777001 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064855984 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06240507 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065114339 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066430755 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072414311 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062606052 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070506095 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062150133 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064919515 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073922635 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063827853 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068621695 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072870077 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076612862 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07382232 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071805341 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078849937 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072490612 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071151523 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064395365 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082957133 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064977503 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07631263 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078575664 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064114178 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077011374 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062489839 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061582705 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062888645 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096949468 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064985603 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06408258 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062844401 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063271019 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064566715 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072518344 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068708442 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070385642 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066709494 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078952659 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07237232 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063003516 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069504335 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080783585 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06622541 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062515894 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079158379 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066176336 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06165863 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080502484 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071982533 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064573317 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063769876 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066354109 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076121617 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063810162 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061172076 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07061104 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064246139 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064758614 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066931672 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070467218 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.06188029 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072330444 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066574213 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063870129 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060911855 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06639946 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062980784 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060779141 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.0713966 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062066304 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.0768246 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068338101 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076643969 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077126013 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.073023148 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07763504 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061813321 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060833353 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080191958 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071128147 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.203765249 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083493881 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064156937 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.076339512 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.066982993 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065575095 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073954251 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062966198 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066119008 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063613832 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.06903756 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064680157 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065656311 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068982975 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071931204 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075836789 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064618425 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072129658 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.064353269 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079367304 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073192584 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067639511 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067506053 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064366795 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075609658 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069645196 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072367745 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062302482 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064161266 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063199941 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073786687 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073354335 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064828059 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070990483 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067675899 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.064048721 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.06383914 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064364242 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066652912 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066873083 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063929344 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071300188 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072463472 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077582514 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070988086 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072642533 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062477412 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062525616 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06533042 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062619935 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067592531 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072908667 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078813327 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075677497 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084874604 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063584591 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073719914 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065303906 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080355365 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077127544 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064468352 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068487808 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062353396 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065124381 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072294034 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075034575 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076953814 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078797148 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.068206503 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067666739 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062898143 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078293896 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063753007 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071838661 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.073067379 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067870862 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063464277 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064686024 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072680696 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067740148 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062909129 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079367984 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069371593 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062785832 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077493575 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063467922 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07404908 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062663447 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066326939 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06830968 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06504997 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072449384 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078135953 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062116035 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063572146 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078695654 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064995665 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064914754 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071275185 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078182323 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.068027529 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070998385 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074047469 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072840741 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067640012 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072940751 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063536285 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072409572 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065940457 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074742279 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062633623 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080842585 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061319134 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077021683 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062985585 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073534368 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062872339 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071402002 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062995874 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079260036 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063680722 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063146118 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073751477 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060928332 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071559704 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061271056 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066755875 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068466946 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.07172857 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064335428 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071863454 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.207954129 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.07455382 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069635977 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073471553 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07393919 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068469217 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063706489 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072818831 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075000086 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072144627 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065243617 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064973668 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06444996 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.07326026 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065760418 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064825695 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072184288 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068115948 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069058094 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065361528 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065188911 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065286749 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072322016 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073246212 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081765659 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072632326 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070518025 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072589975 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063041838 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079736379 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063397259 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.074075809 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062557271 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069193597 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072534622 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063699913 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082921336 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065093453 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071986781 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07626917 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071750933 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067187993 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.083415102 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066749071 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071786776 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071626691 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06783608 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069683586 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065112059 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072042982 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073210456 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.074217218 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064348895 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071038475 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072275118 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064988321 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071481773 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064931288 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07193449 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064930106 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062138794 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067547433 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075421284 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068465174 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068430468 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063963595 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061951409 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063699782 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070732487 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068342336 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072308808 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079417034 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062152322 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064167367 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062907355 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067019679 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081851638 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073032708 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071318444 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068116441 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062298856 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065018693 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065314309 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064087915 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06730956 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062591879 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062841104 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073823853 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065614127 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06768197 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063550482 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064785609 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07308832 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06847873 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064801258 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069892737 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063304018 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068013917 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06217414 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064640685 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06749309 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062370398 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066915279 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074016498 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079980935 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070275506 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071927351 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064261293 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070755237 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078537508 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070471217 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064275885 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072236413 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061756052 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081392082 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072238832 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071277359 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072306882 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063887092 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079347124 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066403934 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071941502 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077558236 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063314484 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068856223 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.06171011 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077688459 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066327201 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061683518 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069915003 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069990346 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.068019373 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073941329 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.211503985 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072800823 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.070123944 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068198012 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066129087 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065802033 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.073158309 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080067267 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064676006 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067851818 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071923998 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072043519 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067579388 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07651093 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.072307237 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064285285 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065280451 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066961022 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064545294 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075639481 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06469487 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067972573 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067751726 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063088383 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070285527 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081279735 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073045077 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073074059 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063463322 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062500827 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081223345 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066946834 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066673252 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071702479 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072847953 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075885399 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072992449 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080418813 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064240845 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068796998 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075749625 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064175095 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063327409 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066919173 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065324773 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072928764 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073591312 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071089392 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066205968 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070183607 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07695608 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065259284 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067710142 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068717273 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064183383 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073537495 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071247892 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07528216 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064872678 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062583775 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066665878 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072582899 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071131688 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072562616 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06443116 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070117881 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07802487 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071637532 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066647864 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063371813 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066995423 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07257519 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06836174 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063086035 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068286852 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066995484 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070835684 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073064531 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067537014 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063311369 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080540674 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071394852 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072493147 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065695366 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065463511 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064014614 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062929356 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074817808 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063104551 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06537194 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067914034 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065173738 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081269134 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071709269 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079441269 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064647316 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.068182703 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063008181 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073565617 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068257234 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063748798 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073269506 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062196703 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078751527 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075260492 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.069039528 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062884685 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.089631428 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071392938 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078124157 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073044501 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072490418 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066717698 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072499336 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064688997 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074051769 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062091632 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061631947 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07215736 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071204985 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07455373 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061644179 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072549291 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06407084 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.07015322 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069898257 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06331815 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06400399 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063664079 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071270452 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066617236 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071767118 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.213303265 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081898865 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06570799 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075759134 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.07303004 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075274581 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078126962 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076367875 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071964446 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063966006 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071117355 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071864132 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064976634 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068574856 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06689346 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085336284 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065216123 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065246363 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078151601 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069986484 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063272168 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070175425 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06783444 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.074140555 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064466928 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074262012 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067580698 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064517821 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067653692 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067817032 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061888125 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062724559 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062999627 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073626808 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068369231 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063540083 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082462728 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065376013 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072565057 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074797089 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070684299 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065280065 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062299462 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064552231 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077478572 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079488798 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067262229 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072081826 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064767169 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.073000002 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062236869 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072644339 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071683418 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072170603 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063306493 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063422157 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078232974 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079253653 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067818636 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072910676 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072825963 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064665087 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085527246 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072405606 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065193845 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074907244 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065681383 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062582526 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062804562 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.065366637 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.075314141 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063643438 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066383446 seconds)
  done (took 43.434972101 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099700691 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064126714 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062882876 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062967146 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0737372 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06412067 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063404071 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064047875 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063766597 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065856453 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063480161 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06590357 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074571222 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076815836 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073760197 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067116815 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063239733 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063814641 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063377408 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064658935 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073712412 seconds)
  done (took 2.877102393 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065773753 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067155496 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067671703 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067770478 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066461512 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063336933 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067561227 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063484508 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06827259 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063806825 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06786558 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063398057 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063960787 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063569197 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063412586 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064882667 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067713407 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067078497 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063097981 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067484676 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064773394 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067338521 seconds)
  done (took 2.862409359 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063424323 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063769814 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072279721 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062239397 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062851097 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06646444 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062592007 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066943293 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067611191 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066764306 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071893198 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063753366 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062403546 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068256024 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062016728 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063385233 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.107002106 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064019791 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063759086 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062434213 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065693416 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072580921 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062590927 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063000094 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067487067 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066613137 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06324364 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065279962 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.064113917 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067556793 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064405301 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062567108 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071953696 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071542172 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067116352 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067299186 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064539317 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063853365 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062753504 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062744054 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071714885 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064355478 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063445104 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064564561 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072080298 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062896056 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062566122 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072361686 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062938619 seconds)
  done (took 4.677289941 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072449342 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.11672296 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068888863 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.098045946 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075921848 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069507152 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.069214789 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09831149 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063848138 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06504199 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077376986 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077362637 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065782072 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067775899 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.071157491 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.0660354 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067209559 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065010413 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068796446 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065941599 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068866412 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070090894 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.076047321 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07653106 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066902323 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065459355 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065525007 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.06738887 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076872411 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069971909 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067646366 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068479374 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076914222 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.071105731 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065708136 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066084459 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.077294487 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066641531 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06583096 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06419966 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.068257389 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067664579 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070988336 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.0776018 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066648819 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070742469 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066120971 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063869832 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076673348 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065665782 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069982091 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.078010653 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06680181 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066424394 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067636337 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076934223 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066096882 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064491448 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066101272 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076519698 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064617532 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066741334 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079849344 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065264376 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069197302 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077461534 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070699453 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067107138 seconds)
  done (took 6.404949715 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071503908 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098165863 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074241517 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074380055 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074334674 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07454125 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073752587 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074348446 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073736599 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074786906 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074152543 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11512948 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070692908 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078900997 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07468521 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074012492 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074033744 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073552658 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.074097053 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073777548 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073983135 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07473309 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074377336 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074320594 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076680014 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070190525 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073454439 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074084996 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074607992 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073464067 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076696555 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073670715 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074195418 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074490954 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076700516 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073703663 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064193277 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07426323 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074040541 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.07388292 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070107704 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074535248 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073895794 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070357103 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073842992 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073954711 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074325476 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07667013 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081596991 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07440497 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073996602 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074523062 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07393701 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074080045 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074454704 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.081634216 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07435188 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07454828 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073756689 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074106784 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074285378 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.081889652 seconds)
  done (took 6.132105489 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074963698 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068674708 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081147188 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062613095 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062872233 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072673877 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063123302 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063219329 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070589655 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070220087 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072107091 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072821115 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074706706 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072054889 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073122374 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075895663 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072702515 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072447915 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070658517 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072564984 seconds)
  done (took 2.875263088 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076642228 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082364429 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068648567 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072387715 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068167473 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072583584 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067758064 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068753936 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068932421 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069057991 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073620852 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074069355 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0690538 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072968069 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073767161 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072971762 seconds)
  done (took 2.594132206 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06547579 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.07045319 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070268538 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064547385 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066558587 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06358341 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064368738 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063103315 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065793033 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077557517 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064262958 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067117156 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064190513 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062846294 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063588367 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.0666979 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065572989 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064182047 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064869063 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068506627 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.073192504 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06465959 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067155947 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064037035 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066529633 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07279628 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065156448 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066322949 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063956915 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.0667787 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066658734 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071623739 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066259771 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064755928 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06292211 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064357575 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064716952 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066913309 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067074981 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064893574 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062668073 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069770563 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064342004 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065017011 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065740183 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.067506977 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065758975 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069983798 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064261268 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066531386 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064471571 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06634328 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06475595 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071803472 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06610555 seconds)
  done (took 5.092428152 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078816782 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068886318 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063177109 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06302841 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067973255 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068822369 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068441681 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068581266 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068915607 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062794717 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069118492 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068134037 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068967482 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068805398 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069159672 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068318792 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062911258 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068787364 seconds)
  done (took 2.682163353 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068039324 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063143706 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.067917417 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.064812884 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065007434 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063575158 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063365695 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064846183 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064499079 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065121164 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065227719 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064349165 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064711997 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064406154 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062957977 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06500967 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064276327 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063229031 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064704806 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063189594 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063448951 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063425766 seconds)
  done (took 2.868988547 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089141472 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086631 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.131015365 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082504543 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091194548 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074368991 seconds)
  done (took 2.006432916 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094724811 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107028792 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067714316 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068141844 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07640735 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071045251 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071159146 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071169507 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077031403 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075888573 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071642771 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077106552 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077103024 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073146662 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077001476 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079243611 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071615977 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071466556 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068883818 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079681459 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071649636 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077090417 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071783286 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071246545 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071534634 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072891982 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07979862 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07560873 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071454208 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077136644 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079489429 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071904853 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07702984 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075436605 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068751438 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077298138 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071702559 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079575603 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077307735 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073687266 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068081798 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077762225 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077343437 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073129658 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079920783 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071732228 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073308909 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072039405 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072020097 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081869946 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077381704 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073682556 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077263783 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079708194 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079949724 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081756887 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07561392 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073412399 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077731468 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076201654 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073564231 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077607098 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073846699 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076116941 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080314143 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073485567 seconds)
  done (took 6.451524255 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101561815 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069017596 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072236564 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075705016 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073535069 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071632044 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072430425 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071957705 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071647222 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069237406 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107853973 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072320867 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073660307 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073944997 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07250226 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071834932 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075024979 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073784069 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069090137 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082072657 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071864843 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0741682 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073878073 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073446967 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075200919 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080404954 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071279303 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071572191 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071660748 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071808805 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073707442 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072554625 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073588478 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068820363 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07385158 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072138209 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071628811 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073274289 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071732301 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077678709 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07363846 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079939176 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072035382 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071918211 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075981706 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071918626 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071402179 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068672977 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071926003 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068869733 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075799965 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07561965 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07611953 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073658554 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072325338 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072150508 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072211482 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071807653 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071820927 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079742741 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073416034 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071857283 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082287228 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07173634 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071645323 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074016408 seconds)
  done (took 6.375830398 seconds)
done (took 132.035761385 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220011671 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191520897 seconds)
  done (took 1.849931405 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076137856 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.170233609 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075894387 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.077841329 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.11194498 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108782379 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076984022 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073322519 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077230159 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074714559 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.141705054 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076684168 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074456165 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07514969 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074555756 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.075285343 seconds)
  done (took 2.899029261 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108497145 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.190222832 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.08483782 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072647905 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.118204595 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080228475 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075191363 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077980555 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079402954 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072858889 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.110791609 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084788775 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076884144 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080268374 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074814285 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07659187 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078396061 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079990736 seconds)
  done (took 3.083817604 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098913589 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089119359 seconds)
  done (took 1.65556416 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.157313328 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106153721 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146475118 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.33154294 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.136140992 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127564792 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133945559 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.130464051 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11176376 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122365702 seconds)
  done (took 2.963711922 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107527368 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108505348 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.315388404 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106317245 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085269974 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080804288 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078385507 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.083573783 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078377128 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079315179 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125550734 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.078194005 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074981837 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12722332 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102642186 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.110153582 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073396972 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.08133297 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082233727 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073254181 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079194045 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082900524 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.182308091 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081107753 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103674841 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.078442225 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080396952 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076723862 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076511199 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081571505 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081857544 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.10309522 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081025357 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085168618 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.08055197 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.101175573 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074503481 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102953659 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.076951721 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074852173 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077396408 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081902235 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074569794 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.081713666 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078021032 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080220775 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083119765 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073197525 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077783716 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077198325 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07507153 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.07926398 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079313504 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080175347 seconds)
  done (took 6.411345233 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109129148 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.10660273 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072850591 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116748112 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.112157751 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073086674 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108015014 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103283138 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112671251 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072201834 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071341616 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071891397 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079424549 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.08299779 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120707563 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10934585 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.074649619 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072440554 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.11073909 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111023282 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071601603 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105336981 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103331486 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.11101739 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.071085778 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07252658 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070596411 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071314178 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076826849 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.077866815 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071761748 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079096061 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.086605648 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075760184 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07056218 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071054539 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071022839 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078923576 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079510496 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079037132 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077649521 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070763024 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071101715 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071839802 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071845901 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070821481 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077243356 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078772622 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077748063 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071385841 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071709286 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071027923 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071712416 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078515466 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077563918 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079740956 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079710513 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07130332 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071247333 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073077968 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080477055 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079881912 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079998001 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072626453 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080064024 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071177769 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081870879 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085906646 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.072006906 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07210575 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071111667 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071385418 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071644847 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07812693 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077192509 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072183005 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071894286 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071347424 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080315975 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077465613 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071518626 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077057239 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07080429 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071309769 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071920117 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071806547 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077284212 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078886517 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072216742 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071329164 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071123206 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071096749 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070540843 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077415653 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077789053 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078531428 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076565783 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071439572 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076256788 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07642009 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070710808 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076084203 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070491074 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070452476 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070506738 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075935288 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075679734 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078344913 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070268539 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070286814 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.076769581 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.220349627 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.073423305 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.079239017 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081765989 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079667671 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.071746576 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082159856 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.073011398 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081643039 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070268109 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080628839 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072333636 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078466374 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072082955 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070618317 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071476528 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.078519161 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072083483 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071891418 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072130092 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071793776 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078537087 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081585484 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072789518 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078601761 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078265186 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072321115 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078136839 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072524381 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079193055 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071840405 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071662622 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070343077 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080689409 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071928152 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071955717 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071521651 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080555026 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072313992 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080607577 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077669978 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070863985 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083736306 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078118934 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.077921743 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.081383536 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071066611 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070078057 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069671089 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071889453 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077321451 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079347715 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07570629 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071906112 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07762057 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081256294 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071659221 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077815992 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077748984 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078426003 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071962456 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071855165 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081301561 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.311614504 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075601669 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077607718 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079051226 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071743617 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07748561 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078225969 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071333739 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085319545 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071639592 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.082131802 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078961363 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077427869 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079044702 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079889765 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080595612 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.081320294 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083685584 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071448594 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071295305 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078190203 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.07189862 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07160892 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077729618 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072152861 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07216354 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08472481 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069315867 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079740647 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070866721 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.079247694 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071141834 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072002125 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083183891 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071885596 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071804723 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077282483 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071773808 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076832626 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08022659 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.076714194 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070151254 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071487805 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076916219 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077771836 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070643876 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070600302 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070836876 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075813088 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075347088 seconds)
  done (took 19.211599438 seconds)
done (took 39.554607686 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.173596674 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117859343 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.215597437 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.207210406 seconds)
  done (took 2.29340107 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101960294 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.068172611 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.085005409 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.094733309 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.068122972 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079815388 seconds)
  done (took 2.016581042 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203751175 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175417928 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.243052762 seconds)
  done (took 2.134044383 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.375957108 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.154052236 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.222432095 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.512908958 seconds)
  done (took 2.882749929 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.11368607 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.105561423 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.0811532 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.114754988 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.089277603 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.066064803 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.137162559 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.072489637 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.102885262 seconds)
  done (took 2.459842359 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13282141 seconds)
done (took 13.466180021 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.107555203 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.244271444 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.124806184 seconds)
    (4/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.129749977 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.162257334 seconds)
    (6/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.188126603 seconds)
    (7/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.160290592 seconds)
    (8/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.082650433 seconds)
    (9/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.221985724 seconds)
    (10/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.21138785 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.07990121 seconds)
    (12/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.237606593 seconds)
    (13/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.242434012 seconds)
    (14/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.219993504 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156995601 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.096460273 seconds)
    (17/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.077980611 seconds)
    (18/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.082845013 seconds)
    (19/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.074880506 seconds)
    (20/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.080619674 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.079956038 seconds)
    (22/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.146810985 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.092145161 seconds)
    (24/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072298544 seconds)
    (25/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.083077942 seconds)
    (26/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.179284719 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080573834 seconds)
    (28/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.156616534 seconds)
    (29/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.261539662 seconds)
    (30/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.196331387 seconds)
    (31/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.250551534 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081864298 seconds)
    (33/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.239259604 seconds)
    (34/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.094771475 seconds)
    (35/341) benchmarking ("sort", Float64, false)...
    done (took 0.140635741 seconds)
    (36/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.225223645 seconds)
    (37/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.075880862 seconds)
    (38/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.068825146 seconds)
    (39/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.20791913 seconds)
    (40/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.088332964 seconds)
    (41/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.253385141 seconds)
    (42/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.072699791 seconds)
    (43/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.0771399 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.090924223 seconds)
    (45/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.078060129 seconds)
    (46/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.224281356 seconds)
    (47/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.145840141 seconds)
    (48/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.087346299 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.147229033 seconds)
    (50/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.24357046 seconds)
    (51/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.148682773 seconds)
    (52/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.069170848 seconds)
    (53/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079853238 seconds)
    (54/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.079619096 seconds)
    (55/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.07708498 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092243772 seconds)
    (57/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.079172991 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.139654384 seconds)
    (59/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.183678318 seconds)
    (60/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072591506 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080805325 seconds)
    (62/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.20803814 seconds)
    (63/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069334606 seconds)
    (64/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.069398275 seconds)
    (65/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.116771729 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067163454 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.077039715 seconds)
    (68/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076271058 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.089897519 seconds)
    (70/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.186376714 seconds)
    (71/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.237944972 seconds)
    (72/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074834865 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095863012 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069752317 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.174481832 seconds)
    (76/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.306556946 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094626086 seconds)
    (78/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077347595 seconds)
    (79/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072236686 seconds)
    (80/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.097506616 seconds)
    (81/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.080109165 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07791807 seconds)
    (83/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.06974421 seconds)
    (84/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076697938 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099356597 seconds)
    (86/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.069446919 seconds)
    (87/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.076138916 seconds)
    (88/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.081078299 seconds)
    (89/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.069353035 seconds)
    (90/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.1478124 seconds)
    (91/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.076261825 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.125673951 seconds)
    (93/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.163918537 seconds)
    (94/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.078346131 seconds)
    (95/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.073912425 seconds)
    (96/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071816603 seconds)
    (97/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.080845399 seconds)
    (98/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078439 seconds)
    (99/341) benchmarking ("sort", Float32, false)...
    done (took 0.14228607 seconds)
    (100/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.147462657 seconds)
    (101/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.082983201 seconds)
    (102/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.087147255 seconds)
    (103/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.169208114 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.092862506 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.092371781 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.138782211 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07648739 seconds)
    (108/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.151193257 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.12146565 seconds)
    (110/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.068821441 seconds)
    (111/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.082769589 seconds)
    (112/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.15808574 seconds)
    (113/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.072791902 seconds)
    (114/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.124904666 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.091998883 seconds)
    (116/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.097223563 seconds)
    (117/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.227288619 seconds)
    (118/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.201232105 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.079373788 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072326584 seconds)
    (121/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.152709413 seconds)
    (122/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069305499 seconds)
    (123/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.068463199 seconds)
    (124/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077189289 seconds)
    (125/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.149732052 seconds)
    (126/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069667743 seconds)
    (127/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.187395165 seconds)
    (128/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069861433 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183804988 seconds)
    (130/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.071022199 seconds)
    (131/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.144357487 seconds)
    (132/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.145061747 seconds)
    (133/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069963408 seconds)
    (134/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.072636322 seconds)
    (135/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07863673 seconds)
    (136/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.070553793 seconds)
    (137/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.077197136 seconds)
    (138/341) benchmarking ("sort", Int8, false)...
    done (took 0.157301413 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.078093895 seconds)
    (140/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079134352 seconds)
    (141/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.167487757 seconds)
    (142/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.068912564 seconds)
    (143/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.069023711 seconds)
    (144/341) benchmarking ("sort", BigInt, false)...
    done (took 0.271623558 seconds)
    (145/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.22506323 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.077327638 seconds)
    (147/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.201192009 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078864502 seconds)
    (149/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.0687559 seconds)
    (150/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.142576279 seconds)
    (151/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.193110481 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.078953968 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.146865036 seconds)
    (154/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.086618544 seconds)
    (155/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.094174922 seconds)
    (156/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069303431 seconds)
    (157/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.069250254 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.116313255 seconds)
    (159/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079574553 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089478434 seconds)
    (161/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.197144465 seconds)
    (162/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.097435518 seconds)
    (163/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.086939816 seconds)
    (164/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.069149964 seconds)
    (165/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067646765 seconds)
    (166/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.067828004 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075558748 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07789314 seconds)
    (169/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069099755 seconds)
    (170/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.067209182 seconds)
    (171/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.06692632 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 0.069576063 seconds)
    (173/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.068807492 seconds)
    (174/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.165766283 seconds)
    (175/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070808761 seconds)
    (176/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.076263962 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.158381937 seconds)
    (178/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.072160257 seconds)
    (179/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.066591334 seconds)
    (180/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.069637843 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087076899 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067199138 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084936542 seconds)
    (184/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.068912747 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.258412404 seconds)
    (186/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.072452876 seconds)
    (187/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.091162196 seconds)
    (188/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.180628263 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.079998693 seconds)
    (190/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.071726472 seconds)
    (191/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.071064273 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.069354114 seconds)
    (193/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.170610266 seconds)
    (194/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.077480332 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.069247838 seconds)
    (196/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.205110807 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067812289 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.094357931 seconds)
    (199/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.149289476 seconds)
    (200/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.070524381 seconds)
    (201/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.098503169 seconds)
    (202/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072568803 seconds)
    (203/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.201827246 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.147578364 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.151507972 seconds)
    (206/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.069722806 seconds)
    (207/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.069596784 seconds)
    (208/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077514157 seconds)
    (209/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077534434 seconds)
    (210/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069599665 seconds)
    (211/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.167716437 seconds)
    (212/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.070965004 seconds)
    (213/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069568026 seconds)
    (214/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.069389138 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068702191 seconds)
    (216/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.077005313 seconds)
    (217/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.073426284 seconds)
    (218/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.141525813 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066907591 seconds)
    (220/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075825909 seconds)
    (221/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.067750451 seconds)
    (222/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.07166613 seconds)
    (223/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069435677 seconds)
    (224/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.068901485 seconds)
    (225/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069764795 seconds)
    (226/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.069808414 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07704432 seconds)
    (228/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.068925373 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076190085 seconds)
    (230/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.069303384 seconds)
    (231/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.06824243 seconds)
    (232/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.171394949 seconds)
    (233/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.071884514 seconds)
    (234/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.076516383 seconds)
    (235/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081058694 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071655472 seconds)
    (237/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.072811127 seconds)
    (238/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.069319792 seconds)
    (239/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.177984371 seconds)
    (240/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.070149109 seconds)
    (241/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.157165968 seconds)
    (242/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.087885372 seconds)
    (243/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.068676204 seconds)
    (244/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093769273 seconds)
    (245/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.06966155 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080984531 seconds)
    (247/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079824141 seconds)
    (248/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.068184922 seconds)
    (249/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068930659 seconds)
    (250/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.181501718 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.069168017 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.156516168 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076012993 seconds)
    (254/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.069486175 seconds)
    (255/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082806762 seconds)
    (256/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.068855884 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.128951974 seconds)
    (258/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.078119649 seconds)
    (259/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06949648 seconds)
    (260/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.071122131 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.094498292 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076740631 seconds)
    (263/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.073108368 seconds)
    (264/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.068354729 seconds)
    (265/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.069191968 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067534614 seconds)
    (267/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.085112233 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094237992 seconds)
    (269/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070888378 seconds)
    (270/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.081001118 seconds)
    (271/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.069853677 seconds)
    (272/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.069197829 seconds)
    (273/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.069047986 seconds)
    (274/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.070532657 seconds)
    (275/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.077709464 seconds)
    (276/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075235779 seconds)
    (277/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.08501762 seconds)
    (278/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.068695358 seconds)
    (279/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.06875876 seconds)
    (280/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076426816 seconds)
    (281/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.079765505 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067997762 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.232111101 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069752161 seconds)
    (285/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.069217399 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153500566 seconds)
    (287/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.070383133 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087661458 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066951244 seconds)
    (290/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068126912 seconds)
    (291/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.070720118 seconds)
    (292/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.067260918 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134995045 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068643094 seconds)
    (295/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.069032925 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154171931 seconds)
    (297/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.133002464 seconds)
    (298/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.14543524 seconds)
    (299/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.069368482 seconds)
    (300/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.068256001 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151290018 seconds)
    (302/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073364334 seconds)
    (303/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.068572008 seconds)
    (304/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.193623113 seconds)
    (305/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.171861116 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151532693 seconds)
    (307/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.068572731 seconds)
    (308/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.068384288 seconds)
    (309/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.247038772 seconds)
    (310/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.079918959 seconds)
    (311/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.079204795 seconds)
    (312/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.069534811 seconds)
    (313/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.073177742 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.07066806 seconds)
    (315/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.070784003 seconds)
    (316/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.086013852 seconds)
    (317/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.072708317 seconds)
    (318/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.070358331 seconds)
    (319/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.074020587 seconds)
    (320/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.070068611 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.070039571 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.130692755 seconds)
    (323/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.137653705 seconds)
    (324/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.071546163 seconds)
    (325/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.069821842 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.070570128 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.12731654 seconds)
    (328/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.069353769 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.081009088 seconds)
    (330/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.06965494 seconds)
    (331/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068997801 seconds)
    (332/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089959749 seconds)
    (333/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.069297455 seconds)
    (334/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.069329346 seconds)
    (335/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072370106 seconds)
    (336/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175912293 seconds)
    (337/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.081252752 seconds)
    (338/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076990853 seconds)
    (339/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073618642 seconds)
    (340/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069818252 seconds)
    (341/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.069421879 seconds)
  done (took 37.994067468 seconds)
done (took 39.525679667 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09234983 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080726403 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080679699 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078075034 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081645842 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079983957 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081286646 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079718457 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080903592 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080615939 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080611909 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068404707 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.077263366 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084255337 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077676694 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084329386 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081610908 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084292795 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069007345 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.083369888 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.095732684 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081306929 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077969114 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083319838 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069380436 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078495677 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093895758 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.091051059 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.075994524 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078573937 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076113273 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084912689 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076810617 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075624129 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.081711753 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074719926 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078468543 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.076491599 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093082105 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.07523657 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068867873 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080821955 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076096677 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077138482 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.07807765 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081062975 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074465151 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.08337254 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.069059321 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079682432 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093067739 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074275139 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.07596524 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077054741 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074056875 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077882324 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07553566 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080404495 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073950248 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.08053107 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.08035345 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077849901 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068597635 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077576195 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075619812 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076182237 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067360485 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074097715 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068214503 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068445244 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067983894 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077428145 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075769541 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073711002 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068291825 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068209903 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067697006 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080982975 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.0746116 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078241833 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068874451 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074358648 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073147634 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068906548 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074232933 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080197694 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06748917 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068948771 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067673506 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082870691 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075340496 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068053347 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080559736 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074512654 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074070858 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068579357 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067955594 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073969023 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.077168154 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068588116 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067704583 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073892047 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073558901 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077741317 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068668699 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073756456 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073778546 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067273046 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.077569575 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075706548 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077495915 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081629461 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077220684 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080168284 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068604075 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067888149 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078253624 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.069409318 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074277103 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076681941 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073648915 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076661472 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.068745503 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068187525 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07395366 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074819191 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068917622 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068631037 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069105639 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078002373 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075773141 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067543288 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067577083 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076771387 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076678456 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067088045 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06724673 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07675675 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067923286 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074161479 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.073421598 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076769442 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067762949 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067903471 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.218786753 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.069304496 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068555697 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074544085 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074663308 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.069796422 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077924001 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074896932 seconds)
done (took 13.288864284 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067431139 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108848604 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076667414 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085552484 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081966796 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070909181 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073307202 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086661437 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.073106251 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089439126 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.098477741 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.09185436 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097546874 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068716063 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069526009 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.07068631 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068337153 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076914801 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084277705 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092789606 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098594291 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06927483 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078571079 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086172982 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080305614 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086455533 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.071063455 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070397195 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.071990769 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.127762535 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095333339 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069472088 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.07068686 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083749362 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084173657 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076885965 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.070711127 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073834001 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070579836 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069588453 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071304186 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.087353436 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073850768 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073655596 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.070330659 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070110882 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069547887 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07268842 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082826688 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073390194 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077893758 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081706829 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071673299 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069215984 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067438915 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07351423 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.070053621 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070560888 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06974666 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069275173 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06967391 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071928846 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070803793 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070077639 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072796854 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072036771 seconds)
  done (took 6.737565137 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083426338 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.096256205 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084977177 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.085112045 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068970111 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069887005 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070391097 seconds)
  done (took 2.213257011 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068174368 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077793612 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.08227145 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082011587 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.091894134 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.079669638 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070253612 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.10249965 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069462032 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078778282 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086459312 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083409086 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073494968 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.08220717 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070807536 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082074241 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.069947428 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077099802 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077968822 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.08367743 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07429495 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100043643 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083340808 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070381595 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.084387385 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077246045 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.07183625 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069928476 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070583724 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069332808 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069041732 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092444856 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076499673 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082399608 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070650662 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068761662 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074930219 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070347956 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074395818 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.079237237 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073553325 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069730465 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070053558 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069409965 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070571802 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074551895 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070796867 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069973011 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.0698148 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077257868 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068843642 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076473827 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071933479 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.07517997 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074471333 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075021566 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076998143 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069801517 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077286283 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07628913 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06983096 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082181639 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081516724 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073690022 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081624797 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078620543 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076994614 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073292641 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.06887845 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068937755 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069975319 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081506545 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.07328655 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071812963 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070974156 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074849819 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.073615633 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.085444706 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.08541505 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083335604 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072378188 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069853125 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073700456 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.084984085 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07540198 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069688425 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070872695 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069192552 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074670757 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069923693 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074414097 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.0698022 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076514384 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072243043 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071955762 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078169962 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069746318 seconds)
  done (took 8.987531973 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070622584 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072436054 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.071311922 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.071147234 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071265529 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.07194877 seconds)
  done (took 2.117361325 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091597348 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070920546 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.08263257 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.071200854 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.093636973 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077149418 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077442195 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07254552 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087391193 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.08095074 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077346429 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.080078952 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076465469 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072057563 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07687834 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071419572 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076916883 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073322181 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.08030653 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072390582 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083559149 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072394093 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07557745 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082765131 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073738017 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071040308 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071541578 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.081217802 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080796951 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.072102853 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071861679 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073047047 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07862435 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071941294 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.076976303 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078406128 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070745529 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075416531 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072707051 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073087118 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.079019388 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072224547 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072292276 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.07564637 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071543436 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07965892 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.076251698 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074408584 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076407263 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075616862 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075664149 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.07064498 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073336214 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075623335 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078050937 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071739009 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.076496169 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076719676 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071479142 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.079083218 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070027331 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073335997 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072227668 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.0731339 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07514887 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.076130669 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078482882 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071896195 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07286686 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070041401 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075464086 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070317528 seconds)
  done (took 7.102597364 seconds)
done (took 28.797478796 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.5455944 seconds)
  done (took 2.177143937 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.58892417 seconds)
  done (took 2.256688725 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.384051651 seconds)
  done (took 10.050465908 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.30862273 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.335400294 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.751521005 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.137239287 seconds)
  done (took 3.242551345 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.764387529 seconds)
  done (took 2.446628181 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231329473 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226307044 seconds)
  done (took 2.149886048 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.338541245 seconds)
  done (took 2.010537537 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.161479515 seconds)
  done (took 2.828553529 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230556965 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160977963 seconds)
  done (took 2.06996388 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.549550089 seconds)
  done (took 2.225490459 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.291695356 seconds)
  done (took 5.974224822 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237667915 seconds)
  done (took 1.955934121 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.232196524 seconds)
  done (took 1.915875461 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.04987238 seconds)
  done (took 3.72572554 seconds)
done (took 46.710464626 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085264582 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087632132 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087529979 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082518858 seconds)
  done (took 1.99526393 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075476149 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072698575 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.077200246 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.077866178 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075235203 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076496769 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076978211 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073715652 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.07609309 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073650951 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072149617 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.074038934 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076937609 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.074142998 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076484461 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077746953 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07410293 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.074026902 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076504134 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073522328 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076661299 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.07409833 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071848119 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.074083072 seconds)
  done (took 3.481327694 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079935947 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073483494 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076870555 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072330277 seconds)
  done (took 1.990463372 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078290312 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078641114 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.089424974 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094725036 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080891831 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.081140131 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08855917 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.089166835 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.069022128 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091415912 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071834987 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070958319 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.07055368 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089746289 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08773033 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066459468 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06737451 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.081546715 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080605353 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083610788 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072324493 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.069479605 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080895548 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080818954 seconds)
  done (took 3.602290114 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080872182 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066663319 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080840285 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093139744 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096044636 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069045138 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083510447 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096428181 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.132688898 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069116455 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075382514 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06925076 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.1098572 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.069067521 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085096901 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112539494 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115736982 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073076793 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101961843 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068565266 seconds)
  done (took 3.4448056 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077007374 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072251999 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073741504 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068983874 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080068736 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.077352166 seconds)
  done (took 2.148094038 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069074635 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.071713766 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.07002005 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075814581 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.074344335 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071553209 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070566073 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069153792 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069082902 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070204923 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070173901 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070765259 seconds)
  done (took 2.544741127 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157154502 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071598293 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071351872 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.070052447 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.075003249 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.070187631 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085136338 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072389612 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089631916 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070092268 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070108876 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072563028 seconds)
  done (took 2.669188905 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101255755 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102769215 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149895702 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12219418 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121995231 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101443029 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124593526 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.099267692 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.164279701 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.14012617 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121830983 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097889189 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090818254 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073598868 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104337628 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105851145 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140781893 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076346083 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117923033 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.170035364 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119824054 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.117034753 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126846549 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120996291 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085129048 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126708072 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09892428 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107306266 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129894914 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1151385 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124428683 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.102409913 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075530954 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.075194946 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154763726 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104755199 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112517501 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097432936 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104789574 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092366643 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111676203 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.07301339 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.091098352 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110824529 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088729095 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120773116 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091482798 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108466343 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084882833 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135348871 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11097246 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103362427 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089310872 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108590424 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134926716 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098874588 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114951807 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110303109 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085686986 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119901925 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103071303 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.260290819 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099000807 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085223846 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165383657 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093786217 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.117708158 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118079126 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.08663924 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094473255 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106987057 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134045145 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109251057 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111008663 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116419947 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099878205 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11480426 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096693406 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.132321225 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09757981 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.077302413 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109425502 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133186435 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089295667 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105244481 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135343844 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096343143 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081044695 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.095979851 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.123233154 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084689107 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.099689519 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073490897 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.102275464 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112409384 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10136481 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116593725 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111933694 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082341517 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129773713 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11374169 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076759869 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122031985 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103429973 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158087548 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100017598 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080427534 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104719409 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097765289 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151674291 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089185067 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084244522 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102898383 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147150263 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099017129 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1753276 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101142465 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134618533 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101806894 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091157352 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078677691 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.093285713 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105279766 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111004903 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106229862 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092219414 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080505936 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089697938 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099243274 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.259731819 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085840065 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119971015 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.107307094 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079773264 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092693867 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080957329 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130584438 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.082249047 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116722988 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130208249 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.083028375 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109216669 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10087473 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112607576 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.10208302 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111922291 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145217979 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.121337278 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08292866 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.08783117 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112646708 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.147940835 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118362502 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08956657 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.0806063 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105222135 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115709397 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101635348 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110633592 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105436364 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113320741 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102245275 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146540755 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123046104 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095697241 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099411289 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100937062 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.126969684 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080305461 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160697209 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098556539 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123338924 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088663451 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145999052 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.119235157 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094199788 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089118929 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100405252 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.109293717 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111539005 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149230678 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.100207792 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076182472 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097740934 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13740254 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080792318 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104908091 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094519671 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097290356 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121716823 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.086785194 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084510578 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.072087697 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104912165 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137401076 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072112491 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.283362726 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.121149031 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107232608 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.1100457 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.073901607 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105078361 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143889458 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109030538 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14558194 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121267758 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10524925 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12332345 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.102701358 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110240278 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083541136 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130035681 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.140713765 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100545873 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094444315 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139895863 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121813756 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.140126318 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.101221149 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11985001 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.109380564 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105778161 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108934173 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105744482 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150481634 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125362819 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.130394903 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090777073 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111028902 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113759296 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141260449 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086438456 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121572133 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079873948 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116834517 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.082148305 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11202648 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.083431524 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.115884875 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083902137 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104722223 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073421816 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.078465078 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14791951 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117770482 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093826153 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090427646 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.143100334 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136269831 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08553085 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10638058 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108403214 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104705177 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104809728 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112114369 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.08897323 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097853168 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.279559495 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084554977 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.087249692 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104468141 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098826981 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112908718 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088618684 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0791345 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14113856 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108841874 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099554807 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082413589 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097971751 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12544751 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09388043 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092502323 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109603809 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108194524 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145315146 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094828409 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.102780908 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122550245 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085035539 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096580655 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073053746 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088637746 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079785412 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114538301 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080233153 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113444942 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072892745 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135305291 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09111863 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097486484 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107078938 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102734862 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133798196 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096587597 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13703756 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094004669 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108171105 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113491676 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098901803 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08395071 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108488024 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100219598 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113896172 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.101091876 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110837361 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115086786 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098397621 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14726359 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094234146 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124666068 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109755107 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112221203 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108270339 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121829412 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142933966 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117219053 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117045634 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079796739 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08693253 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108934297 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10404884 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148769629 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10561698 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.075295199 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089362665 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093716515 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.263302781 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110985129 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087565092 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148041911 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091664192 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091989307 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119016833 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.094702254 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102005387 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080295012 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100377349 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104012124 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098939169 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099223047 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112605701 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121720296 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118703942 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138521115 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.102902817 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.096961879 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.123308763 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11536611 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115814732 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090554392 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090680558 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129401888 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107468459 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.134037017 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104926351 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099517834 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106569002 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09531118 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105289072 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101323809 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.115325366 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085296323 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.08023483 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.071903763 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.076267194 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122585443 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113357611 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103832711 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102952037 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076519949 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108432637 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10440756 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075582007 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091422596 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098888432 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103674275 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088408227 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097031218 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.119203678 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09600465 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108055376 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103745989 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134435517 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.105080727 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093578713 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147316987 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13155548 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092772827 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097676959 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075426135 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082816175 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105667406 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148960018 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121864105 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080208236 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.251448578 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.082803526 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091376328 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.075668766 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.092317436 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094446721 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108959257 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09757867 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.11741637 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109320692 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079769874 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107913079 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101948555 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097097633 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100942615 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105836419 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.109961368 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.127466208 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105091406 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102280333 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080702073 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084677026 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079397892 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08368042 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106249969 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081412689 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080293344 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135180325 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.096357233 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109136393 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113541798 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088937315 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079998708 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138895574 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073034348 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139955681 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075560693 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086256015 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085275473 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083628618 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098688896 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109890136 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100326939 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119073505 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111153001 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109331796 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120456146 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161786551 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074842337 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148610996 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080469261 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07945477 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080163728 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116554101 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094599431 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112955355 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144003948 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093841394 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097632974 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081128411 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134174788 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.103409864 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108560069 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08769357 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083459127 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134105396 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083523646 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075506792 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091253501 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115055684 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.075757288 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107544235 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.255100197 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085705778 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118470768 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.635805341 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0950899 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080343281 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093759773 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147993225 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133952747 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087827925 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112851326 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.12256316 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094644609 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088655569 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112735567 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188939838 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078421079 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099341176 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.108297572 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103452781 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09692346 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096380784 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090842423 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.097277639 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.090099938 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084111112 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112586508 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092204088 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096513319 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102286702 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087804409 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084358021 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135519705 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10962926 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08674221 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093099707 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105485642 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091061129 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095524414 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.07322497 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119150684 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095975405 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106697822 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095435809 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113213597 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126207234 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09325505 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117299293 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.093615976 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114277695 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08888325 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082510792 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106519082 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.082665101 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081596135 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122073866 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.089020961 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.097785727 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109177967 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100013161 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119258193 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123151917 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116188308 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10196014 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083045789 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090174147 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.091405414 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079051814 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081702292 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.077677323 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079659839 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.277697103 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091102326 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088621588 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121173811 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08698094 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107670695 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.104828337 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114250133 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087452625 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105948814 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114187534 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09475181 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106745227 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102765626 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131675041 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149470899 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103403277 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128955398 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137459501 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080573425 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079981705 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072479194 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119808976 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083756717 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.084758162 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08538995 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138347705 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.085926268 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099477091 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23644488 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085119818 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086045792 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101598324 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07414915 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087723679 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113158904 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089475556 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085098902 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104181391 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088212496 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122709962 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115756803 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094178456 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087427226 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085542599 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097980042 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.110067705 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.133658714 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094391158 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.079239703 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110648358 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10777725 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129596831 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.077218416 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085304222 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135485769 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096289216 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108667422 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084935713 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126590254 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138457652 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095578256 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139713859 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075682425 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08805608 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09440093 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.131284199 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078205427 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092167914 seconds)
  done (took 67.479157088 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154366963 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.147898818 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.086155061 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101775322 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189297269 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199345782 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121304509 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.098734809 seconds)
  done (took 2.978760176 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069867636 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.085376166 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084809558 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.215136022 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113756192 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071209797 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.077330799 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.086439987 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.071708055 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.071078845 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106923001 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.072072892 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.07131291 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.380393861 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.0701717 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.075592643 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.070712893 seconds)
  done (took 3.624192656 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.329861805 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.390490805 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.246826203 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.6270949 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.142347742 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486437864 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078373307 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084527652 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627840758 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.375003967 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135998802 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.091750008 seconds)
  done (took 18.458775131 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077589991 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.082394018 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.082730405 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07905235 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.078309003 seconds)
  done (took 2.258641626 seconds)
done (took 118.374828211 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084640887 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.177883728 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.07172519 seconds)
  done (took 2.12348607 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08388224 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.08347136 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.084182925 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082698367 seconds)
  done (took 2.175870629 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07598903 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.080489146 seconds)
  done (took 1.991609246 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228263437 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.180868668 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.095701155 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083474294 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083565749 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084764531 seconds)
  done (took 2.102654209 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073046621 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075006517 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.075301883 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075900185 seconds)
  done (took 2.136670638 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069273055 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068896771 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072053239 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.074953121 seconds)
  done (took 2.126094809 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086655973 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086203516 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115900851 seconds)
  done (took 2.130081543 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085398031 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085644978 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082211089 seconds)
  done (took 2.096572987 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110579565 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.100644452 seconds)
  done (took 2.051117644 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08241493 seconds)
  done (took 1.927572708 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091399545 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100888216 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.146825484 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.113168311 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.146173067 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.130534092 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.081446877 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.082342488 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077358017 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076707338 seconds)
  done (took 2.887110166 seconds)
done (took 26.175827164 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080007631 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.376638859 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.363747331 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.092246931 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.676985295 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.361263035 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.014176166 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096103345 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105205855 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073120609 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091107167 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.655541418 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.005139129 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.334386137 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.992063671 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.330031828 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.656979587 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073059137 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072029734 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07239949 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.997015589 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.07205447 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072668641 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07335371 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653996255 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.378534014 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073479904 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.330003102 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072789369 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075417245 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360953994 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074242173 seconds)
  done (took 16.571921582 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071509004 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128405784 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077096283 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089220572 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075143335 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073929763 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.075914645 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.073305175 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116114956 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072823195 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090721389 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072919168 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.076683864 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.0742595 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092902785 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073102557 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074494849 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073757193 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073091401 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.077263176 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092132643 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072399586 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073330483 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073302414 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073231802 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086312049 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073730682 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072510875 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072950614 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074963558 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076120953 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074458695 seconds)
  done (took 4.408256508 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12310211 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.132351575 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078015437 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114508162 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.124393743 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074501493 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.157379702 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096547923 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.119667379 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07302499 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091189 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073280927 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.109348202 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074148159 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093822723 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073038909 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074432014 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073791877 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072966842 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073289444 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092230803 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072520941 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.073247042 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073651733 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073367372 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.087773885 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073818643 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072735342 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072933944 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075711263 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.077066377 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074418572 seconds)
  done (took 4.684272506 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071054593 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.076058607 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.083295992 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.085795418 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071515883 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073194498 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073972851 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.070680914 seconds)
  done (took 2.469478183 seconds)
done (took 29.990968534 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080679748 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.071259121 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075308568 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.091841232 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078180044 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.074753803 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.068809183 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.079333449 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075753605 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07538817 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077141983 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.07081414 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.074450964 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.069135699 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.076603165 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.070138489 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076926901 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074650408 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.074632219 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07642866 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.072164731 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.075582319 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.078343634 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.074950161 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.074854543 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.074610326 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.079256512 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076619225 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070707853 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.073223379 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.072871983 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.085291612 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076464968 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.076781934 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070059744 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.069784185 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074349648 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072475107 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.076533565 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.079714168 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.073171408 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079164941 seconds)
  done (took 4.995103227 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090581451 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.09570156 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088081117 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.086090582 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.111909062 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086223378 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.094352345 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.083027398 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.081733934 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.094930513 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.07767613 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.083977286 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.085449593 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.080193538 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.082802143 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.079224087 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.084708824 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078094331 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083227689 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.082818151 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.095652645 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.075897415 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.083384662 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.084628454 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078206513 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.083643397 seconds)
  done (took 4.102491582 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074302051 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090623362 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096990718 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146828153 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114550297 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086753475 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086994553 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.101943507 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.105409083 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.07220427 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.075779175 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099738707 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.10108212 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.079714302 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.111469617 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.091310884 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.084556046 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.073936179 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.078497044 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.107367365 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.094872846 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.090913853 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104749964 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092126238 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.071920745 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081305806 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.078633207 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.087412003 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.079554275 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.084055914 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.076394537 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075984681 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.072504526 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.08504668 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076480892 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.070321687 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.097798285 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085065435 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.087695744 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.11046734 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.082301609 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.073485599 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.102940713 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.138389429 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071442713 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074868714 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075613601 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084480787 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.072978453 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101825368 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.091187926 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071632526 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.091119209 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073018894 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073321997 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089702613 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07379958 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.073934266 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084320449 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078019097 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093299588 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.077224647 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093386799 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.071615952 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.083742295 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073306606 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073600005 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070721728 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108718305 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079954232 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.126650322 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.073135733 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.070113209 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084383039 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083212153 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.079384309 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.07174822 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.0919404 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084440307 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075410716 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.083520798 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.074545944 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.074769548 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.108106619 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.070796401 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.069668667 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069904028 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074418647 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075096286 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.072051003 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085670525 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.070614864 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07510659 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.087677877 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071807272 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.071985465 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074173839 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073269915 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071001137 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083035489 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075654629 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.073175749 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.083961935 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.072717522 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075130823 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.086710766 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.08138254 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.070911336 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.073162447 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074406252 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07345703 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.076253928 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075435565 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.073902883 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.078992254 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079161784 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.078075118 seconds)
  done (took 11.638501536 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166795106 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.160800651 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073612035 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.155485862 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080940521 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.076371924 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.156813849 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092306239 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.07261867 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.073842465 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.071438795 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.100918567 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.096531017 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110063576 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077870111 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.072812857 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.098640304 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106821138 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.158993714 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.151485981 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096167223 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.080117589 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.075220391 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07380221 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073767127 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.081363527 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090475234 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.080914165 seconds)
  done (took 4.722129529 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076952771 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.087164619 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.076471182 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096960419 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.091322934 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.073490031 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074436032 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073887457 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089563965 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079236928 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072693405 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.076880088 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.076615125 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073159625 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.073297111 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07863648 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.079392335 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.071646152 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076363689 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.077060888 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.082232978 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.098877219 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076882918 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.072589649 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07506271 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072712295 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079654168 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082168388 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.072488272 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.103061358 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069413425 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.076522647 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086539205 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073409929 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.072726441 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.073095027 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.07244452 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072046545 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072439791 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.070399727 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070128107 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077462696 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.071457781 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078521108 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086652015 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080088887 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.074123811 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075189946 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.07458109 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.072690069 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.076019847 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.075476757 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.075358454 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.080716954 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.075946213 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.074487421 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073054732 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.103201438 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.078705814 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.072180497 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.071176993 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070962375 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.07438087 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080196942 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.089127617 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.074170367 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.070529651 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072370781 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077264188 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.086557778 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.07221552 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.077942089 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069143677 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.072353212 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.074629593 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074941311 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.07351944 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.07091672 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071733255 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072119448 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072235252 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.071736317 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071505805 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.074636988 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.070258779 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.070338052 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.073015579 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.073858382 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.078725192 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.071293119 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.075161602 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.073422378 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.071280062 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.074922784 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07720905 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075119476 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.092801958 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.081125066 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.072580374 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070089398 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086926087 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.073996138 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.0714004 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.078471003 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076488253 seconds)
  done (took 9.955239797 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09306219 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.073440139 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092224205 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099077334 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083338558 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07803244 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.087074272 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073973507 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089105781 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.071449572 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.082330498 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.070484308 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.086039449 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.081941869 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07367676 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082688016 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.074672597 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.092855712 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.0870643 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.071099884 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.082283728 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.084856052 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085372434 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.090945394 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.090366522 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.091021017 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.084950371 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.074739715 seconds)
  done (took 4.244479897 seconds)
done (took 41.510244824 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.929369786 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.109719751 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.932266513 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.124531391 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.207332477 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.059964895 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.050224574 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.92348296 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.088889013 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.957104383 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.240107188 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.321916185 seconds)
done (took 68.871431979 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.995905286 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.068465648 seconds)
    (2/2) benchmarking "String"...
    done (took 2.147943315 seconds)
  done (took 6.078752354 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.530344712 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.929368967 seconds)
    (3/3) benchmarking "different"...
    done (took 1.97672659 seconds)
  done (took 8.296842158 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.063446742 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.957159143 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.18269169 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.927714072 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.934228863 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.319743013 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.74638792 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.392620906 seconds)
  done (took 32.325299724 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.186743298 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.153511794 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.686485803 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.718929572 seconds)
  done (took 16.655333038 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.536097975 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.193515847 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.19077241 seconds)
    (4/4) benchmarking "different"...
    done (took 2.183452529 seconds)
  done (took 11.02692071 seconds)
done (took 86.405832979 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.931767441 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.68255072 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.949222442 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.086012258 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.941277291 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.957858925 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.931293345 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.971059084 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.930321254 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.933878783 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.362508609 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.93118158 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.937149375 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.966079497 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.929964812 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.976077201 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.649229851 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.943836383 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.960104451 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.593489782 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.43207604 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.940259214 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.941419131 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.989336808 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.067849822 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.953053172 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.526363354 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.943121381 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.545475935 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.949519031 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.932385314 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.936519053 seconds)
  done (took 210.58462586 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.931975055 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.766660286 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.817906596 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.95955847 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.407862306 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.128978098 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.079526759 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.446378876 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.934813933 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.946780342 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.089500134 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.931572963 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.101331343 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.885460885 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.926898549 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.933674863 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.061873621 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.100642396 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.932368364 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.119396162 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.939201913 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.897267219 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.860846217 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.060863706 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.952527531 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.030126344 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.932794806 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.951025887 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.1262771 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.043018696 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.945502208 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.961995558 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.127474583 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.800307677 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.948251897 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.944501433 seconds)
  done (took 174.889826998 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.106317839 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.945204174 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.999328929 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.068410363 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.682849612 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.670412147 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.93825499 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.935603458 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.934047229 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.942454046 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.937451251 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.002448254 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.135775497 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.950718716 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.932890045 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.934870049 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.291911121 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.942690414 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935214121 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.936289759 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.001082222 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.309112364 seconds)
    (22/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.930213184 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.072202556 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.938327315 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.946912388 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.070819074 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.948630485 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939335795 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.073489568 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.938694985 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.014968659 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.068011301 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.949821051 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.01695199 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.936272596 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.420773843 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.938787682 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936878797 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.939471862 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.002534488 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.937660963 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.040093429 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.029105632 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.935913444 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.946709539 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.007542583 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.592323188 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.936924558 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.93912666 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.94070382 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.93753603 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.940973494 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.515500205 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.940215859 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.963022605 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.53244704 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.938138657 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.937065607 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.942081556 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.941647147 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.941098197 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.945519244 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.979453839 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.745519413 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.12901014 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.331187471 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.749255025 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.94565087 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.502001056 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.993174777 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.943347804 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.017418983 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.937639209 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.937305138 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.941596384 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.943177289 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.025214415 seconds)
    (78/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.905425642 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.006202364 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.938924029 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.067524704 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.943833758 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.922697377 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.084935402 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.397494805 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.145741806 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.952226206 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.997945203 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.937293284 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935503346 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.941247817 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.96006513 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.097639444 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.940171028 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.940089381 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.943064298 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.115838252 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.946086375 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.149787502 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.168746763 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.014938239 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.19240856 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.169944987 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.944345989 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.944812031 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.957615049 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.939413841 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.94010772 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.950676689 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.942445775 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.944392392 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.948104394 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.94452505 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.942589044 seconds)
    (115/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.940491677 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.94423919 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.953846071 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.939395526 seconds)
  done (took 427.29136766 seconds)
done (took 816.783729011 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.563373072 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.656605813 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.545933681 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.572628977 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.546875122 seconds)
  done (took 14.758958473 seconds)
done (took 16.632075374 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.973348346 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.95713375 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.946585235 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.004688932 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.964362434 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.95439717 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.977141485 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.992037436 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.975486586 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.955706333 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.992669111 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.962738185 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.977654715 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.979875442 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.019240394 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.979896948 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.958335661 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.950898306 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.000386632 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.960139553 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.957832169 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.954297103 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.955717897 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.994577087 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.028342703 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.965282572 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.956523712 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.990303749 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.967081908 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.992298579 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.013962165 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.977370507 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.988395843 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.023851601 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.999765173 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.024222657 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.964850634 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.013004515 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.961410637 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.03081389 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.003943258 seconds)
  done (took 83.121270812 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.953079274 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.08857358 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.167591184 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.987511621 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.951608107 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.15941215 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.010299328 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.07753575 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.0884212 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.167800229 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.168399286 seconds)
  done (took 24.700275908 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.950357351 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.089733698 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.166166138 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.991467705 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.955181966 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.165276503 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.019946493 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.089825369 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.09367309 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.19258953 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.205621107 seconds)
  done (took 24.804685886 seconds)
done (took 134.501705088 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.339077107 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.982444605 seconds)
  done (took 6.199510408 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.948220614 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.966993755 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.101074929 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.949257524 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.950233653 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.950510707 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.949302807 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.949807343 seconds)
  done (took 17.641990891 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.948877771 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.947623976 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.947949733 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.949272331 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.94705836 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.948291721 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.948034937 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.948312005 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.948862622 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.94900051 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.949890782 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.949276552 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.949244535 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.951464022 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.95091231 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.950032645 seconds)
  done (took 33.062988637 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.948200808 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.94760942 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.950578334 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.951666462 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.952342519 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.952047166 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.952200404 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.949665306 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.922154657 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.952609309 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.951144511 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.949631799 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.947951207 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.947508823 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.951485355 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.951541536 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.952010541 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.949965311 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.951219563 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.953241797 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.952719169 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.952101116 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.957565596 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.950073989 seconds)
  done (took 48.676339388 seconds)
done (took 107.468346106 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.160197157 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.492709552 seconds)
  done (took 8.533275346 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.954056927 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.952342016 seconds)
  done (took 5.85191963 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.953206468 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.952426681 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.953046596 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.951838401 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.951200515 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.949964034 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.956419349 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.954180753 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.95554739 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.952521773 seconds)
  done (took 21.410573036 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.954980423 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.951480474 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.952812986 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.953826345 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.951294765 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.955490867 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.952169402 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.955290327 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.952156012 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.955687106 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.953464542 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.953761622 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.955961773 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.953134777 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.95374383 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.954345492 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.954520828 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.955271221 seconds)
  done (took 37.049812722 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.951829445 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.955634196 seconds)
  done (took 5.790806375 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.955275383 seconds)
    (2/7) benchmarking "second"...
    done (took 1.950238722 seconds)
    (3/7) benchmarking "month"...
    done (took 1.954426656 seconds)
    (4/7) benchmarking "year"...
    done (took 1.955082494 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.955499585 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.953471461 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.953295979 seconds)
  done (took 15.559573351 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.953988821 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.113776323 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.161968941 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.542040288 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.955574784 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.954606106 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.836622059 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.957625857 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.95915144 seconds)
  done (took 21.317814867 seconds)
done (took 117.395047187 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.782984145 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.950714627 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.177300637 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.027690787 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.029359831 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.245791336 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.965642568 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.5029527 seconds)
done (took 43.564221427 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.03907809 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.952231599 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.983105398 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.982720619 seconds)
  done (took 22.800880757 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.962307971 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.279158033 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.979709772 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.845556188 seconds)
  done (took 22.96596674 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.332358664 seconds)
    (2/2) benchmarking "read"...
    done (took 2.310822937 seconds)
  done (took 6.529604046 seconds)
done (took 61.221895307 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.958094729 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.954956641 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.956666144 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.95719456 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.95678813 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.955536418 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.956315997 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.953344819 seconds)
    (9/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.955063347 seconds)
    (10/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.952659808 seconds)
    (11/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.957874885 seconds)
    (12/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.956439425 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.958896526 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.956917942 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.958333074 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.958601949 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.95686144 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.956577588 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.957231943 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.953207736 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.956620746 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.95783004 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.957802995 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.958497685 seconds)
  done (took 48.842333732 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.956322963 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.956995944 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.958861878 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.957979188 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.961033887 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.958402934 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.958944234 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.957843896 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.958436069 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.954998772 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.957498869 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.958872365 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.959466079 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.959966304 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.957440918 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.958662503 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.960070056 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957922269 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.959061747 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.957614545 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.956126519 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.957011736 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.959976691 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.955407772 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.956176094 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.957827451 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.95626213 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.957736954 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.95911029 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.958857991 seconds)
  done (took 60.625620135 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.95828971 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.957645165 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.960104724 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.960544211 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.958396331 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.957924933 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.958949249 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.956583896 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.958473781 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.957487604 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.960324525 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.960556049 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.947812747 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.959817297 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.958913588 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.961435038 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.959541602 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.955218865 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.960938858 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.957896607 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.957727196 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.962180088 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.963045291 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.962253766 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.96113988 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.959096061 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.961788784 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.957881449 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.958318654 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.958394704 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.960616215 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.959104341 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.961932873 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.961622946 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.960562455 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.962884405 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.961556543 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.960971129 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.962803198 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.960975609 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.962863706 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.96158724 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.961722392 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.960618937 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.9606851 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.961363342 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.959366844 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.961478854 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.96402384 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.964850132 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.962686499 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.961806766 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.961914685 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.963271534 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.962314765 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.962390699 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.963793717 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.960128764 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.961044975 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.961019195 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.963124414 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.962141048 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.961485482 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.964366672 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.964812517 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.9646991 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.964525761 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.965552953 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.963684066 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.962634274 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.962967536 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.960797425 seconds)
  done (took 143.070477517 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.96483417 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.962213233 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.964315133 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.964843614 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.962691559 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.962431856 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.964046884 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.965530683 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.95126924 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.951429954 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.941860829 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.963303355 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.962957579 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.961840264 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.964374207 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.963458194 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.962864629 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.963475088 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.962730699 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.963248207 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.963332972 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.964100908 seconds)
  done (took 45.043190096 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.965504792 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.961689984 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.966451155 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.966027257 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.965624834 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.966831081 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.966231282 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.962885642 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.967506399 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.967242077 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.965950791 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96402846 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.964009963 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.964186304 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.96557089 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.967824322 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.966502724 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.965625988 seconds)
  done (took 37.271731574 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.967644801 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.967356435 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.967747447 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.963158322 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.965496539 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.966965462 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.965466462 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.964187026 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.965955178 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.964363062 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.963480464 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.964429375 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.962319084 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.965252988 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966170952 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.965912296 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.967869316 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.963990046 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.955224485 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.944665408 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.969006327 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.966095207 seconds)
  done (took 45.105166205 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.964735154 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.966396223 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.966451683 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.967050926 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.964074792 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.965406886 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.966335153 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.966353048 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.965413454 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.965564158 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.968330198 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.965038043 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.967464618 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.966883262 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.965263429 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.966386018 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.967411 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.967679011 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.967393476 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.966720818 seconds)
  done (took 41.219809591 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.970058591 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.967255547 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.969952469 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.967423785 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.967401336 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.969093091 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.971452574 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.970150744 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.968320764 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.969259942 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.968011776 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.967363432 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.971534062 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.970551221 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.969121424 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.967330566 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.968208102 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.965811122 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.969875093 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.97032803 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.971947419 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.970820488 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.969327534 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.968223035 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.971650269 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.953388753 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.96520301 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.973230092 seconds)
  done (took 57.018912285 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.967976005 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.970898877 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.97116056 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.969778906 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.970051976 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.971361969 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.971847681 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.968375341 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.969332745 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.969603543 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.97123839 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.972882351 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.972316082 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.972228837 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.971189216 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.968874603 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966468372 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.96670041 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.973014676 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970377442 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.972369687 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.969897636 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.972360683 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.970779795 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.969994928 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.970902883 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.970746798 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.970613808 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.970692623 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.967786806 seconds)
  done (took 61.002874809 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.994818797 seconds)
    (2/2) benchmarking "in"...
    done (took 1.991454402 seconds)
  done (took 5.869559418 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.96965812 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.97190966 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.972141191 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.970644966 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.974158105 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.971902467 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.971290807 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.972313035 seconds)
  done (took 17.635629578 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.94899163 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.965338283 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.975047122 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.974039608 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.974883527 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.982120076 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.973989229 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.972289866 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.974217904 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.976009179 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.978569834 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.979752687 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.981599115 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.980230716 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.974146106 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.974575427 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.976596389 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.979303939 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.976168522 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.973840002 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.979313588 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.975407602 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.974466949 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.975726534 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.974377501 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.977831973 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.986159208 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.976236621 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.975102074 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.973203756 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.979682029 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.976539651 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.974570383 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.976958957 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.974882865 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.97623703 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.978871375 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.974843276 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.972656863 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.972960735 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.9764485 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.973289142 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.977324254 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.982785469 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.97585119 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.975309189 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.974652792 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.974351605 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.975261658 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.979083983 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.983646838 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.972783705 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.973410045 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.97541341 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.977228936 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.972942261 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.976492843 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.976209773 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.980955938 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.985042778 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.98041965 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.999495488 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.987571057 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.975279654 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.977658051 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.987446817 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.001649948 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.978280457 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.979196353 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.976867894 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.984926453 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.976470189 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.977942655 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.974557035 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.99083416 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.987096878 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.976965687 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.973701041 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.975179948 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.97673005 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.975754768 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.976488473 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.977443358 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.97656732 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.986480922 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.002417676 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.97657569 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.977704204 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.980786095 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.974223006 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.98143072 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.976485676 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.977158735 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.978255515 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.980243202 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.978651055 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.975920048 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.976253734 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.977734449 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.985460943 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.963285848 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.979161127 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.983249687 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.987682723 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.977002395 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.978133874 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.979082085 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.977675885 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.986679613 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.977799797 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.979060364 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.977483919 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.980482698 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.985534322 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.978330239 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.984183341 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.988634329 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.987163851 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.978707071 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.980918268 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.983170622 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.983788709 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.990331303 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.000195197 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.979515534 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.984164224 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.988193162 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.993157138 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.983634962 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.978672609 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.984069002 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.97856881 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.980726594 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.981879041 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.979089229 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.980808747 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.981182684 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.978907212 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.980860305 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.981069333 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.984061321 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.980888135 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.984265136 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.980797786 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.985250674 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.978858607 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.985393388 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.98719016 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.982756958 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.98167346 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.979504539 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.981186905 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.983486945 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.979616306 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.98053353 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.981378669 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.979112926 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.982382594 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.984631608 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.983073725 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.982566451 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.984552495 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.975699487 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.981768231 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.980298923 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.977344604 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.979892808 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.98021978 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.981366995 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.979089633 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.982758852 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.978796006 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.987321422 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.981695771 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.981939692 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.97982066 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.980885638 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.97954458 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.984093977 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.99209481 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.983844274 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.993677455 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.981575383 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.988295702 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.986375485 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.984821252 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.982850904 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.983536319 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.980210419 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.982728238 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.980930108 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.983109244 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.00416367 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.993650121 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.98588417 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.984243951 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.989147182 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.98756777 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.989496719 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.982677897 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.981121853 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.986311055 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.982002129 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.98378345 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.980992464 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.985620613 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.979653399 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.981653712 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.985156092 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.982123749 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.98316043 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.981347846 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.983047851 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.986821404 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.983673255 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.982649729 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.980873525 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.984288442 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.992077984 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.984770523 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.982610028 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.982668943 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.986473505 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.986366882 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.983438553 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.984429847 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.98559225 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.981498788 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.985684075 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.993326537 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.985526176 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.983674314 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.982336388 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.987361773 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.982825395 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.984389306 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.988410008 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.993408293 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.989976079 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.983340315 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.990261675 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.986960923 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.986094113 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.987999261 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.988917 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.988402993 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.988261703 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.987418534 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.986137438 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.99325878 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.984542292 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.988156586 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.98534138 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.987844298 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.985554918 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.986727821 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.989410864 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.993444023 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.000104771 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.996133044 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.989580349 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.992382097 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.990383364 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.988937691 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.994860469 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.989594416 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.002363106 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.999162785 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.987701312 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.988662174 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.989845342 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.990776661 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.988039105 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.98733252 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.997974313 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.985179438 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.988066089 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.992582142 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.988861508 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.983682943 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.998052981 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.991060002 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.99380686 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.990733439 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.990199321 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.991370318 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.990890021 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.992011969 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.990281227 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.991109174 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.994610643 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.988657662 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.990037377 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.990540372 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.998194462 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.9897687 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.993013135 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.998409789 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.990935573 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.989414494 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.990555214 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.990535432 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.992134475 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.989822887 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.988921872 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.98934088 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.988042005 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.990709223 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.002892036 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.993264967 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.001070658 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.990851761 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.0011662 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.987893646 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.99082771 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.990158542 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.991111041 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.998221352 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.988800427 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.986545899 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.992596756 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.990551272 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.990569557 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.99654872 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.988350719 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.990962307 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.99141832 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.990887361 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.994230077 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.993481092 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.986871766 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.991278321 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.988955795 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.985078618 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.994257936 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.993873371 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.992489836 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.989296052 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.990010495 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.988471747 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.990157815 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.991663172 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.989399061 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.988766647 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.990736566 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.999551837 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.994381176 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.990352858 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.995653365 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.991340146 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.998110468 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.989256524 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.989661501 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.991251131 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.989095634 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.990930793 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.990188708 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.989445731 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.99115551 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.990730002 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.986494405 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.003286655 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.999408284 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.994576351 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.993440578 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.992536335 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.993663445 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.001820441 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.014931599 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.99022842 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.993622791 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.995151594 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.998727013 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.993530326 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.99926535 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.99564373 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.003002961 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.991474183 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.991367235 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.995640454 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.004966187 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.993244968 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.991198569 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.992366254 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.997173953 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.994904351 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.993672642 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.993011622 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.996801692 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.991863704 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.0076087 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.994129737 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.992790099 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.991309798 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.989972654 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.993347955 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.993362686 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.995790583 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.994009233 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.992207747 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.991189453 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.995261726 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.999069507 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.991620978 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.996530354 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.003777939 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.994378407 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.993153913 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.993712921 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.995359259 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.994288768 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.988149769 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.9928146 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.995419583 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.993121164 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.993207373 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.998654947 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.005684328 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.997074037 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.997516602 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.998407795 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.002952665 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.998128137 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.996879046 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.998039185 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.002762328 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.000114743 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.008107815 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.003638954 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.993955831 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.993847512 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.005600816 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.006857042 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.993674931 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.992806175 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.995980312 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.999490261 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.996953359 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.99551782 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.99331135 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.995431612 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.001738432 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.994554041 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.994161242 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.994714329 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.995011989 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.997306797 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.997047462 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.000537453 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.995137176 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.997309904 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.994571399 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.996365728 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.999891471 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.998961692 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.996030392 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.000017481 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.998738386 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.999660454 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.000151914 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.994687378 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.996133588 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.999796173 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.998168233 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.998915792 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.997169972 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.997886862 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.995329209 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.998752049 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.003978533 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.99825588 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.002034293 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.000179401 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.00391988 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.999884688 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.996939976 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.999432694 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.999045372 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.010201195 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.99967883 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.999461181 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.999475811 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.001478063 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.005444232 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.001892023 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.001906015 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.001386651 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.000031929 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.000291672 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.002252197 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.009633235 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.00471274 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.005489605 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.007567957 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.003665864 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.9999945 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.001692361 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.99873504 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.001121045 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.000451757 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.003902375 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.001646786 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.002324897 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.997670288 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.000633464 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.999375475 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.001204814 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.998821452 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.99840329 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.005027441 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.009474565 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008506923 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.000891584 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.000406189 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.002417346 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.005291892 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.013677024 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.000976281 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.000282787 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.001221183 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.000577458 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.999828535 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.013952746 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.012780546 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.006215639 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.00379121 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.003599842 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.019887947 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.002853796 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.009768965 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.03437722 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.005526293 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.004272378 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.004584103 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.003790256 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.002399717 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.005314061 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.004135408 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.008444047 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.004203234 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.006076113 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.012358604 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.003144553 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.000641441 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.002963043 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.000781425 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.010643243 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.006292958 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.010521088 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.002042237 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.00364138 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.00113934 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.004262662 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.002093594 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.001141593 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.001837462 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.003998072 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.001018788 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.004519513 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.014079666 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.00816281 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.008930953 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.508636813 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.015654807 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.003295931 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.00287415 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.003820349 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.012546682 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.008931527 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.001308067 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.008899806 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.014326335 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.007574155 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.014381232 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.00764034 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.005344252 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.007557593 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.004638397 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.009562926 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.021957111 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.020568123 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.005873297 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.005514108 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.013924046 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.007567597 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.011215972 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.013432897 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.004687649 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.004043927 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.00080713 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.999173427 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.99843974 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.99925458 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.005363097 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.007178267 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.9972553 seconds)
  done (took 1189.076151057 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.996820613 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.99777166 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.997363901 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.997113231 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.994007115 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998431939 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.998184876 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.99827503 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.997561972 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.997578538 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.997922738 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.997731058 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.003880736 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.996866376 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.997882341 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.996452326 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.997094819 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.998345496 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.99813205 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998758342 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.996795615 seconds)
  done (took 43.878676681 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.997540193 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.997774063 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.998420098 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.997795303 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.997474112 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.998834018 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.997375555 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99797198 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.997249205 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996496192 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.998103763 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.996565144 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.996543385 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.997150011 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.995870626 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.996113413 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.997414692 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.996759476 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.99880371 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.997275105 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.000578437 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.997280885 seconds)
  done (took 45.872409597 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.995917023 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.997311619 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.997428134 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.990702239 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.989791854 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.990815331 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.99123262 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.992105148 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.99031841 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.991103572 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.000566955 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.000160143 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.993646497 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.993860695 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.992400338 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.991392515 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.137914417 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.995033753 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.992905175 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.992031622 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.992227996 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.002640823 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.997846949 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.99613637 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.993897286 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.995813955 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.993463817 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.994463939 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.994207137 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.996713056 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.997807479 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.99617112 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.995279969 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.998517604 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.995550384 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.99474416 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.998008647 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.994337623 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.992909017 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.993405833 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.003035585 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.018880429 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.997439424 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.994672612 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.001671882 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.996466528 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.993400737 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.996442131 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.999875116 seconds)
  done (took 99.857391878 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.992777329 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.991814333 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.988988503 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.990522597 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.990699173 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.989704972 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.989518776 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.992344428 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.989442604 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.9920364 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.989517951 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.991519737 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.991836977 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.99129297 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.9877293 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.989638658 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.99342527 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.992935007 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.989135934 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.992021488 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.992975039 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.989630116 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.9935199 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.989931948 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.992829012 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.992412498 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.991810072 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.992469589 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.992294291 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.988570746 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.991858527 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.989193591 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.992375354 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.98994423 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.993184906 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.992792561 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.988758976 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.988905507 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.991441934 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.990648753 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.994662337 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.990936261 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.992379045 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.988666316 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.9939434 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.99111525 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.990896569 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.990742493 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.994261457 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.991361333 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.990862426 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.991020319 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.99299438 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.991183216 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.99302701 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.993398351 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.995715334 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.99300679 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.992707235 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.994977747 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.99070534 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.990119102 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.994066322 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.992815759 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.990662626 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.990779405 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.991280078 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.990663115 seconds)
  done (took 137.338107301 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.994386852 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.992846727 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.992814407 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992350348 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986201672 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.991467783 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.993296563 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.995472242 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.995724037 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.990529111 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.991304451 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.99074697 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.989123361 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.993048527 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.988891994 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.991268555 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.991220168 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.989979079 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.992297291 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.985022396 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.986228115 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.98935672 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.990497261 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.98598924 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.984443373 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.985134398 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.982380193 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.984938019 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.983104924 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.985143048 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.981020957 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.982368296 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.981116501 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.980652423 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.984518599 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.982750951 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.983826054 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.980688367 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.980532602 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.982976075 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.981856745 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.981835622 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.98172343 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.980029248 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.968727427 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.967041793 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.982093326 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.979919591 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.980444961 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.981373261 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.976007275 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.980820478 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.981105408 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.981545223 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.984245298 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.977511371 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.978973241 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.977087365 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.977365813 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.979736146 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.97928888 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.981937917 seconds)
  done (took 124.964022671 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97947522 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.978902115 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.977925965 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.979708086 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.980852464 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.978211999 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.983753389 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.979047544 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.981502991 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.97685119 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980553447 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.979741232 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977330102 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.975253776 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.978336385 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.977870166 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.97994174 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.977936475 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.976838211 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.977093547 seconds)
  done (took 41.479573663 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.97760762 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.97917522 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.978752845 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.975086682 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.975372025 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.979715388 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.972666342 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979115198 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977759198 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976779738 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.978275565 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.978062415 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.979693166 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.976579271 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.977961838 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.977240829 seconds)
  done (took 33.543521266 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.976340653 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.982325163 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.980220701 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.965597288 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.975892337 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.974491258 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.976383916 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.975574653 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.977932988 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.975536622 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.976764037 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.978050324 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.976243168 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.979330874 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.978219641 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.978987614 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.977832897 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.974128037 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.976026445 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.976092434 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.97351144 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.976909071 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.977787793 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.978867058 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.976335024 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.9765791 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.977609464 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.975954271 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.974955097 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.974629477 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.975442183 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.97790637 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.977205044 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.976132896 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.978359995 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.972982734 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.975284372 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.975327796 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.974262906 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.978372717 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.975548123 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.973285605 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.974059898 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.974291964 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.977200899 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.976431334 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.974588948 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.973213013 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.976063076 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.978329678 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.973076111 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.954725362 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.975259475 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.976829464 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.978121658 seconds)
  done (took 110.570982128 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97416907 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.978437751 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.971405549 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.981592769 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.972759376 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.976802067 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.973392294 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.974891921 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980493111 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.973340373 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.977678346 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.973974638 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.974820302 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.976473249 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.972661906 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.972433228 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.973777919 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.970848734 seconds)
  done (took 37.445923455 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.971736592 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.976838487 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.976225891 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.973275653 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.972576473 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.972403804 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.97297184 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.973609172 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.974649002 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.971715636 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975270906 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.971892754 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.972644513 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.97485179 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.971706771 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974940641 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.970777155 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.973612633 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.973104827 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.971273033 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.974019238 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.969193145 seconds)
  done (took 45.307255311 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.974227918 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.968530531 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.985059675 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.993552487 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.993480371 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.990564001 seconds)
  done (took 13.800041803 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969362404 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.949872052 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.970369564 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970815725 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971137476 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972959821 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971406883 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967504557 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972744709 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972237871 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976650941 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970894336 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971033328 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.969298105 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971643993 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972013624 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970247556 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971853996 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969961009 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976982969 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977043918 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970801844 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971410998 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973127659 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96914799 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974634574 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.973246832 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.96800673 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97052888 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969443106 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972699691 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970342846 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974186697 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970255238 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969533738 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974097896 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969952618 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968486697 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97357803 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973100128 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.972379879 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974587293 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971117659 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972925536 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974919584 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972576933 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968471348 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972944889 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.974407125 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971642569 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971112823 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.953973784 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.95984187 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975235586 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971459356 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972996958 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973228953 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97461492 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970322771 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976559385 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.974328016 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975943892 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972203543 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975868786 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97398075 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976736952 seconds)
  done (took 131.989604879 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973749112 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.976285903 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970189989 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971895668 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979326951 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971901732 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978928356 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974291935 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971780103 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972467047 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973479251 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976317188 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.976158947 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.976056631 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977698341 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.975383075 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97846237 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973047624 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974358326 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972826829 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973376389 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.976509999 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976535271 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976467985 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977304808 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973543908 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972333538 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973449475 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974672717 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.981129407 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977471056 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97661273 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.977155189 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.981747339 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978020671 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973726909 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978233753 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.975488682 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.976653868 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980265584 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978009956 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975309807 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97719492 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978761441 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978308478 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974297459 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979400639 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978032396 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.977443437 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980437448 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.975862435 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983029324 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978862604 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.977045584 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978413211 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974051279 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976811422 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980110344 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978388416 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978926713 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.982069624 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.976870277 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.977606545 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978224659 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976665956 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979922962 seconds)
  done (took 132.356280735 seconds)
done (took 2752.077945687 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.091184589 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.017049596 seconds)
  done (took 16.010610433 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.133845395 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.039664416 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.160811581 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.093243805 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.980581689 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.976335889 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.977207057 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.980168406 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.072443301 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.978182396 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.991968345 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.975617417 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.978086158 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.978576833 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.978737161 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.976969 seconds)
  done (took 54.180501109 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.983404579 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.982843348 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.985680859 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.979032089 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.994353226 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.057070428 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.003513011 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.986904635 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.994396684 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.012156422 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.998574565 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.986692011 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.992879478 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.987201009 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.07222152 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.023797229 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.040390419 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.05533341 seconds)
  done (took 38.035501002 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.058869268 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.987934511 seconds)
  done (took 10.952783416 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.947528663 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.992429964 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.992678566 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.974274116 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.990379135 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.009135044 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.986570701 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.993818511 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.981855463 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.981919091 seconds)
  done (took 71.754753526 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.981418895 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.984469835 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.245477267 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.985615129 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.99076783 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.00602533 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.984632326 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.01146219 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.978868498 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.978100066 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.987205295 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.250476808 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.991096231 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.981871159 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.409351699 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.992802365 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.985596721 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.013512225 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.021012221 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.98235708 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.986753259 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.98420854 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.141990524 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.688747739 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.978750154 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.983266334 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.987609533 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.979050463 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.976597479 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.981544299 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.982213506 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.9802029 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.987270028 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.98604404 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.98559615 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.983332202 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.485492525 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.000288803 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.987820797 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.076405105 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.026651187 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.984977205 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.832282488 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.98253949 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.981242518 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.991103583 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.660333638 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.056421258 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.98510539 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.167000938 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.322542591 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.992893998 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.196110072 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.137635551 seconds)
  done (took 139.127407734 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.978922946 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.21369613 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.132688085 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.97991906 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.233593175 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.185625346 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.978528107 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.025735369 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.977095543 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.179695048 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.22809509 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.080115385 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.977411164 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.980957439 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.977928932 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.975477888 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.123402056 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.044735919 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.977953677 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.978557669 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.004009069 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.180304326 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.097302445 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.980699734 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.002812765 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.185429609 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.097063804 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.07924051 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.749753094 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.977858426 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.041160192 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.978821119 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.98187073 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.977994663 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.133149042 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.068310676 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.06105685 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.981275444 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.978049357 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.979807283 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.655642965 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.18154296 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.072293177 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.099600094 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.226267321 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.19354822 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.588310261 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.979135148 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.611690837 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.148030662 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.183963259 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.188041196 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.095476328 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.981006004 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.531252474 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.981680028 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.981706503 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.199944517 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.195168034 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.079717155 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.982656832 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.982922308 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.977994629 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.219976139 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.980725791 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.068411731 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.984360867 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.977571954 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.074601199 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.080512975 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.206705833 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.201375397 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.008358143 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.319546481 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.467493758 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.185504088 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.035705257 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.200302766 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.983866704 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.97874151 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.060665336 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.81782079 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.233531197 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.223302493 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.177666296 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00997768 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.632783704 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.982257427 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.169845977 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.170624955 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.212208261 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.222193423 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.215615566 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.335996367 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.98449409 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.982026 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.288221141 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.097090202 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.931271316 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.33457168 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.21611361 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.475844415 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.010712328 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.26650106 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.10859956 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.984505897 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.632350249 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.984014478 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.162826414 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.022603278 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.986882468 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.983565866 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.171607049 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.888597207 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.984196285 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.699952092 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.044277319 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.98281605 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.189234689 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.985921741 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.226404001 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.986519141 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.217248952 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.623942053 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.012458144 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.210342963 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.224649853 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.619130386 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.225474202 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.227027788 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.095969928 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.20805128 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.787310621 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.988113462 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.248316294 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.985476505 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.984257237 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.154322902 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.987966701 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.127648568 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.989880913 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.25284848 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.006241761 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.212953005 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.990127504 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.227021116 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.014616538 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.033641134 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.987577859 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.113959356 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.987252908 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.825189953 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.145155396 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.990558233 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.98722577 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.745782516 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.98843232 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.133452976 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.211003921 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00483088 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.054814241 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.55010123 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.98758421 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.074489874 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.006250735 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.620982726 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.988135038 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.236370079 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.944345478 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.464220795 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.988274016 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.220309194 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.170740911 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.990904028 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.98615035 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.831515289 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.988863751 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.989461729 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.143503928 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.430097714 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.896239353 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.186845281 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.988526367 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.117052428 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.990251592 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.060103662 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.334804912 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.986385703 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.989003204 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.989087022 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.987088418 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.988758038 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.249491064 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.013388189 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.424203695 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.126032871 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.244191507 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.294911767 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.186832997 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.025387829 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.994901932 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.209353162 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.988047042 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.04915589 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.991402126 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.008868692 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.218400955 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.992617985 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.19378998 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.223923396 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.047353263 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.036406969 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.990063015 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.987297266 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.905044308 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.136329391 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.073745801 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.988745399 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.991310298 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.104104214 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.111772864 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.169419755 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.810496112 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.123248311 seconds)
  done (took 926.712359077 seconds)
done (took 1258.676193942 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.988942845 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.991323842 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.995161853 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.000864865 seconds)
  done (took 29.887835744 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.990815705 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.992368697 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.993356229 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.994114224 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.99313228 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.992804196 seconds)
  done (took 13.871653596 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.9911188 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.990978159 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.991271662 seconds)
  done (took 22.88904936 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.419057776 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.394984717 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.066842796 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.135292671 seconds)
  done (took 10.9323235 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.997126714 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.993200639 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.993985199 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.992158266 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.995739888 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.99364723 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.995894945 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.994558091 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.996135913 seconds)
  done (took 19.876731876 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.18434441 seconds)
done (took 103.557216049 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.083282172 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.019887681 seconds)
    (3/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.846355303 seconds)
    (4/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.623833142 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.990215332 seconds)
    (6/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.058900401 seconds)
    (7/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.991550013 seconds)
    (8/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.123671707 seconds)
    (9/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.194838277 seconds)
    (10/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.369170525 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.175822422 seconds)
    (12/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.21453004 seconds)
    (13/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.408917611 seconds)
    (14/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.410710128 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.992400357 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.849346976 seconds)
    (17/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.948930599 seconds)
    (18/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.08996309 seconds)
    (19/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.167888961 seconds)
    (20/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.430312465 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.396565699 seconds)
    (22/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.17751165 seconds)
    (23/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.487794398 seconds)
    (24/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.066438507 seconds)
    (25/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.012959094 seconds)
    (26/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.438349855 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.020955123 seconds)
    (28/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.015573759 seconds)
    (29/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.020117287 seconds)
    (30/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.007601072 seconds)
    (31/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.415278838 seconds)
    (32/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.028340121 seconds)
    (33/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.332611 seconds)
    (34/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.251854259 seconds)
    (35/341) benchmarking ("sort", Float64, false)...
    done (took 5.739487845 seconds)
    (36/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.019185127 seconds)
    (37/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 4.379506338 seconds)
    (38/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.432241544 seconds)
    (39/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.183500425 seconds)
    (40/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.257852059 seconds)
    (41/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.798585522 seconds)
    (42/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.221567771 seconds)
    (43/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.024209169 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.355841438 seconds)
    (45/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.021711018 seconds)
    (46/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.800560945 seconds)
    (47/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.1159346 seconds)
    (48/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.098226903 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.13403667 seconds)
    (50/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.400003011 seconds)
    (51/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.014494205 seconds)
    (52/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 4.857200338 seconds)
    (53/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.091223821 seconds)
    (54/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.237909191 seconds)
    (55/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.156073023 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.877315466 seconds)
    (57/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.261520419 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.108578994 seconds)
    (59/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.231317415 seconds)
    (60/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.096714988 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.419356024 seconds)
    (62/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.341043158 seconds)
    (63/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.255862943 seconds)
    (64/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.234099354 seconds)
    (65/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.920697569 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.314210384 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.250431138 seconds)
    (68/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.017098326 seconds)
    (69/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.931233538 seconds)
    (70/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.224813818 seconds)
    (71/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.985537226 seconds)
    (72/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.511069323 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.600616495 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.617721214 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.012365781 seconds)
    (76/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.148740642 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.774752452 seconds)
    (78/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.029353616 seconds)
    (79/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.084186783 seconds)
    (80/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.04960936 seconds)
    (81/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.027458768 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.018344372 seconds)
    (83/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.249277528 seconds)
    (84/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.02894889 seconds)
    (85/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 2.985573682 seconds)
    (86/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.310004754 seconds)
    (87/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.216070309 seconds)
    (88/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.013967333 seconds)
    (89/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.165466849 seconds)
    (90/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.121311807 seconds)
    (91/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.121064563 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.138836297 seconds)
    (93/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.663804006 seconds)
    (94/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.102865429 seconds)
    (95/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.105661393 seconds)
    (96/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.069043841 seconds)
    (97/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.010778602 seconds)
    (98/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.076444394 seconds)
    (99/341) benchmarking ("sort", Float32, false)...
    done (took 5.673806638 seconds)
    (100/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.217419037 seconds)
    (101/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.491415946 seconds)
    (102/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.162608123 seconds)
    (103/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.164071805 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.360974508 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.339091831 seconds)
    (106/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.110592374 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.020683947 seconds)
    (108/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.007938576 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.142312689 seconds)
    (110/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.169186991 seconds)
    (111/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.565388157 seconds)
    (112/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.063842177 seconds)
    (113/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.088527992 seconds)
    (114/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.023038582 seconds)
    (115/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.324665932 seconds)
    (116/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.051207841 seconds)
    (117/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.020104924 seconds)
    (118/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.307422228 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.317239294 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.292474156 seconds)
    (121/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.018569166 seconds)
    (122/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.293304609 seconds)
    (123/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.326521921 seconds)
    (124/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.024758802 seconds)
    (125/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.209873342 seconds)
    (126/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.269126322 seconds)
    (127/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.136555898 seconds)
    (128/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.021820049 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.037786544 seconds)
    (130/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.021587905 seconds)
    (131/341) benchmarking ("map", abs, Int8, false)...
    done (took 3.768968045 seconds)
    (132/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.489540228 seconds)
    (133/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.329993168 seconds)
    (134/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.288733276 seconds)
    (135/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.695974254 seconds)
    (136/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.371925953 seconds)
    (137/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.237717623 seconds)
    (138/341) benchmarking ("sort", Int8, false)...
    done (took 4.952742555 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.03064861 seconds)
    (140/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.137686014 seconds)
    (141/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.10797323 seconds)
    (142/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.327333969 seconds)
    (143/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.808738611 seconds)
    (144/341) benchmarking ("sort", BigInt, false)...
    done (took 7.010347397 seconds)
    (145/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.344747564 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.112996234 seconds)
    (147/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.333527963 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.25372593 seconds)
    (149/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.130762751 seconds)
    (150/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.180059637 seconds)
    (151/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.085529327 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.30411396 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.231453873 seconds)
    (154/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.285805098 seconds)
    (155/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.026354921 seconds)
    (156/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.707610469 seconds)
    (157/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.100014489 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.136959095 seconds)
    (159/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.011205929 seconds)
    (160/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.072848185 seconds)
    (161/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.015860307 seconds)
    (162/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.804325758 seconds)
    (163/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.406878438 seconds)
    (164/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.120697264 seconds)
    (165/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.125660371 seconds)
    (166/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.407216016 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.033425605 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.031621651 seconds)
    (169/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.066481129 seconds)
    (170/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.018146396 seconds)
    (171/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.089151727 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 5.648385172 seconds)
    (173/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.310679759 seconds)
    (174/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.180167217 seconds)
    (175/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.099927248 seconds)
    (176/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.122868251 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.784485553 seconds)
    (178/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.405483489 seconds)
    (179/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.089363971 seconds)
    (180/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.331486006 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.248985649 seconds)
    (182/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.222217886 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.175867825 seconds)
    (184/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.248525946 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.151275959 seconds)
    (186/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.17625695 seconds)
    (187/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.914783637 seconds)
    (188/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.25890917 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.028108234 seconds)
    (190/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.023464766 seconds)
    (191/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.44273614 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.316266117 seconds)
    (193/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.146081289 seconds)
    (194/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.027624438 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.414750943 seconds)
    (196/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.356314838 seconds)
    (197/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.178451179 seconds)
    (198/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.78889602 seconds)
    (199/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.161522461 seconds)
    (200/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.386881647 seconds)
    (201/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.022203621 seconds)
    (202/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.361345588 seconds)
    (203/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.441011574 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.148736804 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.013166388 seconds)
    (206/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.78179098 seconds)
    (207/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.47408912 seconds)
    (208/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.037306015 seconds)
    (209/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.0258596 seconds)
    (210/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.21610837 seconds)
    (211/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.145272499 seconds)
    (212/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.02756929 seconds)
    (213/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.315487354 seconds)
    (214/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.335485717 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.415285739 seconds)
    (216/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.027308928 seconds)
    (217/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.027321184 seconds)
    (218/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.116206005 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.03781647 seconds)
    (220/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.018056583 seconds)
    (221/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.24723566 seconds)
    (222/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.653983401 seconds)
    (223/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.606965522 seconds)
    (224/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.017889019 seconds)
    (225/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.154684061 seconds)
    (226/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.41677499 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.162081253 seconds)
    (228/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.018848225 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.094405307 seconds)
    (230/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.412630317 seconds)
    (231/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.413149933 seconds)
    (232/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.013665946 seconds)
    (233/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.939597574 seconds)
    (234/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.043510196 seconds)
    (235/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.493024852 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.25611934 seconds)
    (237/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.506012889 seconds)
    (238/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.210574811 seconds)
    (239/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.483244004 seconds)
    (240/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.345706657 seconds)
    (241/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.022863404 seconds)
    (242/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.241972512 seconds)
    (243/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.231539952 seconds)
    (244/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.021803877 seconds)
    (245/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 3.787300936 seconds)
    (246/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.652674679 seconds)
    (247/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.319651909 seconds)
    (248/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.153020193 seconds)
    (249/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.23700841 seconds)
    (250/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.018062681 seconds)
    (251/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.3704863 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.046166535 seconds)
    (253/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.032467173 seconds)
    (254/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.430255534 seconds)
    (255/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.839613084 seconds)
    (256/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.260012758 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.020325591 seconds)
    (258/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.863754305 seconds)
    (259/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.421143571 seconds)
    (260/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.411638182 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.615517545 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.046098542 seconds)
    (263/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.104535931 seconds)
    (264/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.112538924 seconds)
    (265/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.120339653 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.105436999 seconds)
    (267/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.508176372 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.681252353 seconds)
    (269/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.084404444 seconds)
    (270/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.785925894 seconds)
    (271/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.244238732 seconds)
    (272/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.464742633 seconds)
    (273/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.562197509 seconds)
    (274/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.029098088 seconds)
    (275/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 3.64125666 seconds)
    (276/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.017996583 seconds)
    (277/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.31218749 seconds)
    (278/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.130593635 seconds)
    (279/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.193617864 seconds)
    (280/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.042446063 seconds)
    (281/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.019660679 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.173711272 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.439786265 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.017592206 seconds)
    (285/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 3.764391938 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.023264462 seconds)
    (287/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.02824741 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.948597803 seconds)
    (289/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.052825005 seconds)
    (290/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.322268523 seconds)
    (291/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.853413179 seconds)
    (292/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.167539086 seconds)
    (293/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.143359664 seconds)
    (294/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.307909622 seconds)
    (295/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.187478937 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.051263591 seconds)
    (297/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.14736615 seconds)
    (298/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.290791072 seconds)
    (299/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.086006769 seconds)
    (300/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.218906517 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.019747059 seconds)
    (302/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.041555166 seconds)
    (303/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.418623223 seconds)
    (304/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.020766447 seconds)
    (305/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.017477196 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.047075993 seconds)
    (307/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.022099838 seconds)
    (308/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.581335825 seconds)
    (309/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.776641063 seconds)
    (310/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.098523774 seconds)
    (311/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.148830966 seconds)
    (312/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.118278714 seconds)
    (313/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.139646059 seconds)
    (314/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.379296633 seconds)
    (315/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.03359624 seconds)
    (316/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.869284665 seconds)
    (317/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.958983913 seconds)
    (318/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.360058056 seconds)
    (319/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.110542546 seconds)
    (320/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.343880675 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.289249407 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.959904042 seconds)
    (323/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.136618036 seconds)
    (324/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.634870766 seconds)
    (325/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.158219653 seconds)
    (326/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.026508215 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 9.397865997 seconds)
    (328/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.275471607 seconds)
    (329/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.851222418 seconds)
    (330/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.848461895 seconds)
    (331/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.271496139 seconds)
    (332/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.031480453 seconds)
    (333/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.891048045 seconds)
    (334/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.143833649 seconds)
    (335/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.108052672 seconds)
    (336/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.934636242 seconds)
    (337/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.705399524 seconds)
    (338/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.048629116 seconds)
    (339/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.102433585 seconds)
    (340/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.485355227 seconds)
    (341/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.349382799 seconds)
  done (took 1141.746750667 seconds)
done (took 1143.764800143 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.046338625 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.027498718 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.53288313 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.034516867 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.02617309 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.029327064 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.544188821 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.053011295 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.043627981 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.545792406 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.034600662 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.025525791 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.041446308 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.060516584 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.040015763 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.030204153 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.032126956 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.049478184 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.062263202 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.036104987 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.077509608 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.030345433 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.023632088 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.078492905 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.02827368 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.040918032 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.046547341 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.078050388 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.080034976 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.030335094 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.03404277 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.390969718 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.079298783 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.031454159 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.038329996 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.043003935 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.032316509 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.041491038 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.05158601 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.04093535 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.028146435 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.03801695 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.030444016 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.035546408 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.02694177 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.027415584 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.028275552 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.152331439 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.043629976 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.371021187 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.087839584 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.047643346 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.083438414 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.029986965 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.029623961 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.031309074 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.079383932 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.036984695 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.03135525 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.372674504 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.122313366 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.042833641 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.372840488 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.09190726 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.035649251 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.036505701 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.027929563 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.04757281 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.391964002 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.582071291 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.059841394 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.049591197 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.03005885 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.030619166 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.042109488 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.542222072 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.045421626 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.611405248 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.054137274 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.044239081 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.034346203 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.032839259 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.029409512 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.046248014 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.048792028 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.033749751 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.033754787 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.035513056 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.04384554 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.392016717 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.074895387 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.535554363 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.035771149 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.050066092 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.049893053 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.612650735 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.058918472 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.047604069 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.03255318 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.391693161 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.072661326 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.049714121 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.033563868 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.042444372 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.145373828 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.050366284 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.050811486 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.029990955 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.052995204 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.038774262 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.031932755 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.044705106 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.05050722 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.065773319 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.048744689 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.031321682 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.041358516 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.036058668 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.049806212 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.04295659 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.0386677 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.042028923 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.035511927 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.082424697 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.052022472 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.047943686 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.145776688 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.038867393 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.160024872 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.046629449 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.03761218 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.031497101 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.375898286 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.078420558 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.055493278 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.038385873 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.055746824 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.054410563 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.051951928 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.034620794 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.048561095 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.037283347 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.084662633 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.03477849 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.057936028 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.083510319 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.04763726 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.040723873 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.054249331 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.07022343 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.053762263 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.035349706 seconds)
done (took 320.204302518 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.077139069 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.030612783 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.10709603 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.0330658 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.100583897 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.087798252 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.037182523 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.032972856 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.033227044 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.422201256 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.033378252 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.039688059 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.033612753 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.037812246 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.081127238 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.032096303 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.032902772 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.279095755 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.038185216 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.092333972 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.033297698 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.032870057 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.033060541 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.427926905 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.029834758 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.029488865 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.091001253 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.031186991 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.274288765 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.032182991 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.032138294 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.273489461 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.093061581 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.044393638 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.042931681 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.041338069 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.102511821 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.042892581 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.078188737 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.084236384 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.108913018 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.065613893 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.033545468 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.030433553 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.040765003 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.036744787 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.03430526 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.064480178 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.033645912 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.039054422 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.285003407 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.041864099 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.044634263 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.036308502 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.035727986 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.050191789 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.038926223 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.035626893 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.096912296 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.037487669 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.083050792 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.431733967 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.426455668 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.038074463 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.036899144 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.036213637 seconds)
  done (took 194.712147512 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.104049183 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.108599815 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.105185194 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.042211422 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.085871504 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.102140386 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.044189892 seconds)
  done (took 16.548535981 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.042841068 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.037085301 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.059514665 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.062620352 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.037038785 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.185401338 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.047476012 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.039923002 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.06436865 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.037241945 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.383718135 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.059746088 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.044087964 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.036432615 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.048985546 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.065102778 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.038032397 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.036247987 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.134560108 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.116061898 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.040550812 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.045247943 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.065564802 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.049021182 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.038050975 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.036795623 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.036863136 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.045524461 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.037869398 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.038514466 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.037276428 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.050220819 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.040688108 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.037108748 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.038431704 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.038527108 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.038858985 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.03823093 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.039514905 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.035720313 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.038159076 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.03834678 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.040373867 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.037774175 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.039324338 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.061248291 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.038474876 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.039703073 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.039638712 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.037053987 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.068482685 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.037778125 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.038489275 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.042587208 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.084652009 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.047174715 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.039968921 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.036647184 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.040503271 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.039583142 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.038833536 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.115741825 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.061601089 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.038769598 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.061474065 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.076670541 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.037984302 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.041864719 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.039719229 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.063841585 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.040472872 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.062541394 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.039861507 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.145630798 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.04065537 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.183254765 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.062186252 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.042549672 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.042671999 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.038186227 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.047706842 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.038755111 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.041373714 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.047996179 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.045572975 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.040123315 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.040984021 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.042551634 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.048153671 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.040174188 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.087664209 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.039712803 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.042067551 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.145896519 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.041922654 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.139266482 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.067350287 seconds)
  done (took 221.522889873 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.04590467 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.04042806 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.054776758 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.041795633 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.041284706 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.04596237 seconds)
  done (took 14.230629913 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.042093164 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.045842796 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.040327168 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.040840731 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.043746817 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.041298859 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.041087503 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.043421291 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.047597511 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.041010079 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.043806141 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.041263735 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.04374463 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.041941104 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.039683591 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.041905563 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.044394171 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.041159139 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.042634097 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.04221119 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.247327062 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.043389566 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.043349131 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.046563541 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.049412762 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.043098801 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.049581446 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.043017319 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.043659803 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.049354762 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.047159663 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.043359576 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.047906053 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.050217966 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.036078131 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.044951451 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.048552681 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.045098739 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.045328159 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.045875767 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.045307574 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.045137711 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.043454201 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.046337427 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.045579222 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.054123847 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.05410658 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.054595694 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.046462979 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.04561807 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.046467049 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.046350756 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.044964609 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.046301816 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.048348427 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.052116584 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.051831604 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.044727989 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.045211204 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.050321932 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.050802663 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.046155627 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.047881719 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.053106033 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.053406523 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.04800852 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.050847054 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.052683127 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.047083651 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.045427508 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.047699715 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.04532619 seconds)
  done (took 150.472088509 seconds)
done (took 599.440356149 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.164717612 seconds)
  done (took 9.130582748 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.246415685 seconds)
  done (took 9.321355846 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.578892817 seconds)
  done (took 12.538766995 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.058462274 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.066774286 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.06368065 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.051661776 seconds)
  done (took 30.2259196 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.36318581 seconds)
  done (took 9.332163359 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.064823632 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.044900178 seconds)
  done (took 16.15193207 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.084243593 seconds)
  done (took 9.054149128 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.492782315 seconds)
  done (took 9.491172314 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.055929461 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.0745307 seconds)
  done (took 16.123430929 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.049327762 seconds)
  done (took 9.017856902 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.856222679 seconds)
  done (took 9.925733495 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.057026203 seconds)
  done (took 9.046420664 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.106765309 seconds)
  done (took 9.078754407 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.119636901 seconds)
  done (took 10.091413774 seconds)
done (took 170.494276025 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.05793824 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.047523816 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.048660961 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.052644715 seconds)
  done (took 30.176260325 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.082975283 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.084446113 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.095018735 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.083556494 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.071827546 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.074592127 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.085103299 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.084259392 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.073852857 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.082532801 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.083790023 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.082149024 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.083451344 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.09447898 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.09289689 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.084130529 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.083176375 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.085763759 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.072822912 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.09277179 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.082578798 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.084415563 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.049537749 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.050042881 seconds)
  done (took 51.912241435 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.241696053 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.117592362 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.204707298 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.096761076 seconds)
  done (took 10.633988727 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.05005218 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.116344078 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.101524605 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.094914415 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.135304056 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.154541576 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.107382909 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.258960004 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.17054703 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.178442126 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.057482829 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.076296905 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.074880977 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.099150123 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.151917942 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.05126584 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.051533899 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.166445614 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.115904025 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.272117056 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.052840176 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.108139128 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.134432012 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.106897795 seconds)
  done (took 52.860429782 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.054565977 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.061167704 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.058303515 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.048072217 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.056758785 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.053260279 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.060391041 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.054552834 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.075126742 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.054658179 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.054779665 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.056101745 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.06066064 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.05378407 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.051430304 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.071380231 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.066885337 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.055049152 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.058885876 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.061006138 seconds)
  done (took 43.138335045 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.053466565 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.89742845 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.397873417 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.304591618 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.053225274 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.051932871 seconds)
  done (took 32.730773765 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.066358954 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.073341576 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.060811764 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.072812878 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.100482353 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.058347588 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.110495465 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.197109345 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.05753864 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.112387733 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.071652203 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.064583285 seconds)
  done (took 27.019013054 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.05445576 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.050607412 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.05194283 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.055083614 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.062808801 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.05253116 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.040938984 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.053869584 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.070171228 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.076164834 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.065253674 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.069522129 seconds)
  done (took 46.675628572 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.271254775 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.273796074 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.281262632 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.594568577 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.371641097 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.042839023 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.340369999 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.265483533 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.760510466 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.78414772 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.348339272 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.041026703 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.009880042 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.979212634 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.955491033 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.29606204 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.054507937 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.912024382 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318187486 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.111105085 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057224872 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.054462645 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060883524 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351537085 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.383328979 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.056049284 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.270400465 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.074491377 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.053377486 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30765394 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.472712119 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.106711892 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.257416837 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.309502325 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.400583326 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.106679343 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.169536788 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.165226084 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.095985681 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.089654308 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.061176648 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.067235019 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.600728231 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.067574385 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.328828133 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059379309 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.055982309 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.15814516 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.983608947 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.366932746 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180277763 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.02366128 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.095578866 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.493127145 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175707777 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.302141373 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.061875517 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.176120241 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109096162 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.310053791 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.178947698 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.173167939 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.271163648 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.98340245 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.457971013 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190588851 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.058492579 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062155151 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.758147725 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.301827714 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.140300057 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.380100287 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.821342875 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.061224835 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.061655026 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.099511249 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154776687 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.059589624 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.350157569 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.050664242 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.974916714 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.157036247 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.452871408 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064203233 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.056823469 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.068446702 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.90602249 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.983193715 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.157198796 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.320932672 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.389053071 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.062670745 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.061404287 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.080030315 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064316426 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004854495 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.555865044 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.122783897 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.989111178 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.624470513 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.469515898 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.022372459 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.48081951 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.101408582 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340952421 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.219605625 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.468514944 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.271999187 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.310038186 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.594278381 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.066533949 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.677204143 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143037608 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136266426 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.068079098 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.982362374 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.18618554 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.358473827 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.188706925 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.06540234 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.991026743 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.075831263 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269221996 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.479965556 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.112914216 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060556172 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.069745033 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.06282205 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.067767357 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.178613614 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.078253235 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.353583908 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.148554749 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.06468018 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.004164557 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.072105991 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.347670571 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.627518684 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.123000834 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.321823577 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.339375775 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.768193097 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.664320562 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.010467925 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.338486323 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.143708955 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139989148 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.65274001 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.202843612 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.163535935 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06478064 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.209512256 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.070973033 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.070662473 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.349995212 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.48582704 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.494449119 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.114525739 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.069955003 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.014400245 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.189382104 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.304465395 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.164186732 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.096269557 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.069054251 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.151676069 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292969795 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.067336244 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.9912731 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.320185234 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.320473269 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.359358856 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.488963139 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.163062489 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.139432555 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077210582 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.278934217 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.154789532 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.724633837 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.61564258 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.291310571 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.573778422 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.027756291 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.710248375 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.324938007 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.455244695 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.081220655 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.517737782 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.188028166 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.683707803 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.097666282 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.594007395 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.995114316 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070325552 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.406472206 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.025880821 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.383913051 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.132577139 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122646828 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.07134797 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.067810809 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077099751 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.012373044 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17969386 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.136850766 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140283769 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.995293471 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.6482167 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.105764332 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.068520197 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.072538293 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.459588095 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.960929394 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.023069106 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.07034275 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143893864 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.810678068 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.620516433 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.072582792 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071887713 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.67844422 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.072244892 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.978803454 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.07778748 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.992695167 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.095916513 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.328956198 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.774064953 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.364731283 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.14866123 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.144650549 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.068988269 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.074816684 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.770822952 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.075183146 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.774664153 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.354923196 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.349132609 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.515996166 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.137386409 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.277781435 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.086602086 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.07077186 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.616808395 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.100971069 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073680219 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.273702017 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.589736742 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.399480377 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.721003286 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.157626682 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.071832654 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.341551516 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.078647392 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.486409008 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.756602043 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.083733225 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.071027569 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.33398087 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.756319782 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.073311404 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.047389995 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07794673 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.288116519 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.277546807 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347629156 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.373990366 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.529349754 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.002962913 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.074600181 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.093891185 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.314908127 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.072412854 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.106180537 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.51888811 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.16964034 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.498383541 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.352126922 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.462805099 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.716648956 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.342511174 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.140882929 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.082803627 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.729672028 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.207771369 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.004970024 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192975783 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.996458295 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.788328882 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368526847 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.086893634 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.342392544 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.055904089 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.408873465 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.373586736 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.336795503 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.126719423 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.097041558 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.070138969 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.126500834 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.070900016 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.206996947 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.188087064 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.077912274 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.558455338 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109575041 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119069145 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.077819037 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.613154093 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.091019879 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.075095637 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.770416981 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.099687476 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190817008 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146042609 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.852210562 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.517877029 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.151108334 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.947264141 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.716931101 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.343599117 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.131655123 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.522571057 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113547495 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.476821681 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.07048803 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.287623137 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.076654443 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.555778 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118433298 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.349236283 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.03208507 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.285832372 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.281255789 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.110023991 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.080195747 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.000018351 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.180974152 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.952787586 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.056471742 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.078682525 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.757810761 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.495868312 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.221026151 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.535087312 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.913823493 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.077490824 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.474399236 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.485179024 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.642645742 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108028134 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07601519 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.408881234 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.216243689 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.384645057 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.352929009 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.083864876 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.103031515 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289969566 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199777176 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.992374707 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.552601792 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.659220005 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.777013911 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.092016971 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.280722976 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.411976935 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.313638066 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.112039813 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.148720565 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.481582238 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.348179304 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.147606158 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.002686462 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.07450469 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.477366342 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.483269193 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.173515123 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.318972764 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.396350734 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.604075234 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.501634032 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.469602735 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.51006089 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.530796346 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.492694398 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.290840642 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.45048717 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.393912241 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.961907826 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.478818616 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.29020516 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.171057003 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.362551848 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.955161588 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.790396543 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.320356445 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.083261566 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.007157451 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.286122272 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.088092691 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.470756314 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.601994505 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.329939688 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.347015506 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.555253581 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.616631629 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.206744041 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.099120186 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.044198332 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.110170694 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.098727785 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.080182939 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.556280129 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.369007928 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089644941 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.020196551 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.74850529 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.009727879 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.292542605 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.21494238 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.111694303 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.636895771 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.336700361 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.18442143 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.383003114 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.262140971 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.110519651 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.005708012 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.863913882 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.027707874 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.173940141 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.504781247 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095744375 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.083446543 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.286072061 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.007685045 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127675568 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.086725388 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282284681 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.668416656 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35399543 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21323122 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328766711 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.387857572 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.985841579 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.111035468 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.353891799 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.010056759 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.660611935 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.776110078 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.12216873 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151192452 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082211117 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.085351493 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.353448427 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.408457318 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.182160048 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.609640611 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.108970462 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.10618 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.414913257 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.176055926 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.081663962 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.087500882 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.552039864 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.312200957 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.082946739 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.068175052 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.293769183 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.157815734 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.279388581 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157118262 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.596744701 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.087410286 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.991111385 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.186459404 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.034063924 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.080418482 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.832817302 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.1427011 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.086259628 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.358095032 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.707048052 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.285055043 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.480824876 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.952740689 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.214657307 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126462856 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.085841461 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.09394884 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.476023099 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.395332423 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.083655334 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.333252467 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13138214 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.090159918 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.744738019 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.051282673 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.082401595 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.797077675 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.976865756 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.812460097 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.478954183 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.095993766 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.115247822 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.085010331 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.016104132 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08638096 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.26084093 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.070181238 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.087119036 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.45574377 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.401435391 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.17851349 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090584285 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.085944278 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.092044512 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.298311027 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.601499581 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100922917 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.785126949 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.289264744 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.087641091 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.566557127 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.538758054 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.295209752 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.119041871 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.219914863 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.330498283 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.641710449 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.211590922 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.064534896 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.313976747 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.091893405 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.358636667 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.359957336 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.091992422 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.29984939 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.515197591 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.370835939 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.443194533 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.398356998 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.155916819 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.230380721 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.987325319 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.080149526 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.092555248 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.35256964 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147954035 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.084993042 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.099932062 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.646352221 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.81054101 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.563772526 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246104214 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.415648453 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.921538203 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.841315674 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.094278865 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.01586736 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.087271271 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.112291157 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.094436104 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.012129529 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.864651304 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.811083377 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30187451 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.397122797 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.018476858 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.292723557 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.687250254 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.012649678 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.056380698 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.089345576 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.357643495 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.015867237 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093447379 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.045460049 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.365636571 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.759102084 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.357607519 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.089989052 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.035607862 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093439352 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.093438506 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.093989144 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.181881539 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.088588493 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208363709 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.358211367 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.472560056 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.198684012 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.731214886 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.897552521 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.026574855 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130984578 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.70435708 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.663836356 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.37966414 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.225189536 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.88194902 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.034754329 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.091739859 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091348836 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.336741343 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.092646211 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095644702 seconds)
  done (took 2202.326546666 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.15050926 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.150259094 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.157468281 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.140331166 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.239436953 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.214011799 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.140799393 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.179335684 seconds)
  done (took 59.381453286 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.104892519 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.093581108 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.098628908 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.093138614 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.091219894 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.096865396 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.286844544 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.122395796 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.091717388 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.097338404 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.094624692 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.100160114 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.09829648 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.106040979 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.097976653 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.42329466 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.114889464 seconds)
  done (took 80.310691855 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.152038637 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.906233981 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.098358202 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.775097401 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.137622768 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.432911801 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.100130197 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.098256942 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.205413192 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.392450467 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.138183361 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.101991589 seconds)
  done (took 92.574751795 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.096873934 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.096549197 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.095037711 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.093801862 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.097601066 seconds)
  done (took 12.493725376 seconds)
done (took 2744.265626702 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.336103253 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.200259156 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.180110244 seconds)
  done (took 6.39240964 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.240971113 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.285758604 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.398703147 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.41993443 seconds)
  done (took 11.366402611 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.378108551 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.464736151 seconds)
  done (took 6.856724344 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.463328518 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.10437153 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.48680236 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.097653593 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.098487628 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.098621374 seconds)
  done (took 23.312693986 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.095095135 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.095279087 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.0978602 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.097147059 seconds)
  done (took 10.399039099 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.110406352 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.879440195 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.107114749 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.11645579 seconds)
  done (took 22.230620648 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.322752306 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.137526789 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.867165544 seconds)
  done (took 10.341787059 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.711349263 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.536120676 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.70357511 seconds)
  done (took 9.965321573 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.201777683 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.082506925 seconds)
  done (took 8.298680825 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.226395998 seconds)
  done (took 4.241972871 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.928594729 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.41300347 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.570965581 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.621323388 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.803329984 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.314599976 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.413728325 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.360219777 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.493029981 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.538130382 seconds)
  done (took 27.47167889 seconds)
done (took 157.284922314 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.532220329 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.122728583 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.312047927 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.480793637 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.338036365 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.308136949 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.391911955 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.46391676 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.145659356 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.129296347 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.473157617 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.35716269 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.313107881 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.121837658 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.32138464 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.120457565 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.353950697 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.553874956 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.15185062 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.392024523 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.378215834 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.118236356 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.318464106 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.133333526 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.349709257 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.271374781 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.721766317 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.126654877 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.30228879 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.737842865 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.264519167 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.545534147 seconds)
  done (took 176.666472585 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.976664989 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.097861121 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.098104305 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.099623089 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.38639414 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.098828703 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.095870544 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.098730028 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.40081957 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.394178279 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.101010591 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.379114074 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.096413753 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.097577115 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.098371074 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.099442007 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.525602174 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.014083409 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.100534804 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.09702938 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.097983964 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.252405633 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.098486464 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.280853623 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.508823375 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.100356137 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.101243641 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.098793935 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.098271357 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.099342829 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.102701506 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.098512958 seconds)
  done (took 215.312771097 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.103384084 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.100099486 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.099828597 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.098107907 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.101205464 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.099994857 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.104542993 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.098811295 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.976073873 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.965302292 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.101173851 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.100312848 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.104614534 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.099495069 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.10572766 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.099395413 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.106935484 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.100421889 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.099184084 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.104259969 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.101776614 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.763759695 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.100863223 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.790051864 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.099898653 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.105816063 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.102692989 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.102455281 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.100316826 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.10116028 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.103082544 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.101962622 seconds)
  done (took 228.36449484 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.342308548 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.107530007 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.10408453 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.115743221 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.10531999 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.103877152 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.1089333 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.356500731 seconds)
  done (took 21.365806502 seconds)
done (took 643.735538853 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.467705218 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.833725695 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.239197978 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.128948005 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.365272113 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.169626044 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.126138878 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.185563587 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.779869239 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.188769906 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.538741003 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.129189329 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.858865476 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.150208586 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.239454937 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.176998066 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.467295458 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.731612957 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.258661897 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.816183641 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.324577902 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.074229924 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.200037848 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.814623211 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.547540344 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.093181498 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.149996099 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.473283117 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.126971119 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.357301616 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.769018349 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.395529739 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.140856439 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.127750324 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.161391556 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.156333064 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.326325041 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.133220649 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.236060386 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.875488425 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.806832649 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.651148338 seconds)
  done (took 109.813855682 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.114403451 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.113955018 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.110837898 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.110200171 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.12288468 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.113050279 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.111921065 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.111543876 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.113436741 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.109852286 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.11243502 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.122115929 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.111976655 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.121587805 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.112668204 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.112606151 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.112517956 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.119984185 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.111229673 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.081432632 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.114279929 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.116576739 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.109486758 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.111619552 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.113101473 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.115015667 seconds)
  done (took 56.963707738 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.106754705 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.288318154 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.382770906 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.136658172 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.110697601 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.112452944 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.136421295 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.113801802 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.111444915 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.108809772 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.201942802 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.113504664 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.122029954 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.380164081 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.134850641 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.108490972 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.10904166 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.110707929 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.296844195 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.127245797 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.138726338 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.119601619 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.142446447 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.124038812 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.11226068 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.112355129 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.112143579 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.534788721 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.122825773 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.205599988 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.154547427 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.139703028 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.459271515 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.391745789 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.175469201 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.117152823 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.109542802 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.24945849 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.117056797 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.113439254 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.1060034 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.11805164 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.384951785 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.618783663 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.124848917 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.108848537 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.531682959 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.261549587 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.15527501 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.124501025 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.396358799 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.13880692 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.112107747 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.111855324 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.149417151 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.122218868 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.110033402 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.356058761 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.126810578 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.137330602 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.119384031 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.111825029 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.303439123 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.122409804 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.28963116 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.120207042 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.118638141 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.115327047 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.390255849 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.138206322 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.619257301 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.125772131 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.112954844 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.205343486 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.291655104 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.560477866 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.125442031 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.304245618 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.478180702 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.149844413 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.122833874 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.521077866 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.151683882 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.119287418 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.115089639 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.112833144 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.111138051 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.155056859 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.136702804 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.533831931 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.613204886 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.374523687 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.149222083 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.12732985 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.114784991 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.357321712 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.124619507 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.112784808 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.383330921 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.63869385 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.124931368 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.118703773 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.595735859 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.128335108 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.144713717 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.122396189 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.401868414 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.139728311 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.157115514 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.111420463 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.118739898 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.117587336 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.141370172 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.123247068 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.112832874 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.589272214 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.259060643 seconds)
  done (took 260.77603911 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.116241498 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.115475436 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.113800372 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.111590388 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.115288358 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.114166897 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.114982298 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.102941533 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.11503946 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.113823768 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.114190404 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.112408519 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.116749271 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.114734761 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.15002452 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.115793563 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.568079406 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.112785705 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.11355102 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.112266823 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.687794761 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.122313422 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.115099678 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.114314158 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.115979327 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.117255788 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.116251844 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.148841255 seconds)
  done (took 174.340438995 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.115212312 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.169304058 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.12509487 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.162043743 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.128672264 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.116170836 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.126573089 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.129095426 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.122841092 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.114636873 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.117555602 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.148425094 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.122126486 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.206800766 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.14244742 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.140396366 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.208097344 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.119379832 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.115973879 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.116063034 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.162390721 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.14014367 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.14789945 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.176331962 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.128228399 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.170539493 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.141897302 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.116392458 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.116322615 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.228110902 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.13212708 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.147070996 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.150381242 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.133014075 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.234057232 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.227439744 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.215915297 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.144965581 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.119286597 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.116522833 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.11610776 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.130349128 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.170636572 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.127913916 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.118613101 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.244445246 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.131033011 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.11711785 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.140487544 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.117419166 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.130218296 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.134739947 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.154775578 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.238808177 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.159650497 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.147337875 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.143340054 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.134617155 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.1196632 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.213395105 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.135571396 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.2320546 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.134900332 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.130242064 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.118987256 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.121289349 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.167125908 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.153601012 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.215272532 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.123092532 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.214524576 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.169694635 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.130023209 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.119485575 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.120505817 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.172655923 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.226996886 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.16973953 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.17718898 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.153644628 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.137536545 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.117695425 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.133241776 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.144638071 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.125354035 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.233412885 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.23305219 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.123672023 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.120023904 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.11962839 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.118345865 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.144177615 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.178085877 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.156894249 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.235437596 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.154387781 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.154427118 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.125456144 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.132051303 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.124425579 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.153054098 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.12449624 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.130738229 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.457967058 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.158471396 seconds)
  done (took 228.146583787 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.504297274 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.162620005 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.188600856 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.397711745 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.508172707 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.01328156 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.156787073 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.166986184 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.178553719 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.293794627 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.230052852 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.210881903 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.154128714 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.140513694 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.161790403 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.179686889 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.204041319 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.45282383 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.260374916 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.661546018 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.155581962 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.425588217 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.450619102 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.49738474 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.203666907 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.547710772 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.810467479 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.262061394 seconds)
  done (took 69.620384812 seconds)
done (took 901.683002057 seconds)
SAVING RESULT...
DONE!
