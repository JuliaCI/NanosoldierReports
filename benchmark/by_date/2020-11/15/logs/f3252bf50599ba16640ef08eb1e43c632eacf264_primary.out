cset: moving following pidspec: 24473
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.98735439 seconds)
loading group "shootout"... done (took 1.107111125 seconds)
loading group "string"... done (took 0.682835124 seconds)
loading group "linalg"... done (took 8.591860643 seconds)
loading group "parallel"... done (took 0.1691226 seconds)
loading group "find"... done (took 2.849084434 seconds)
loading group "tuple"... done (took 2.068074788 seconds)
loading group "union"... done (took 15.32359668 seconds)
loading group "dates"... done (took 1.484885915 seconds)
loading group "micro"... done (took 0.222246881 seconds)
loading group "simd"... done (took 4.835165128 seconds)
loading group "io"... done (took 1.075807658 seconds)
loading group "random"... done (took 9.630259274 seconds)
loading group "problem"... done (took 1.520041648 seconds)
loading group "array"... done (took 25.331351925 seconds)
loading group "misc"... done (took 1.889202721 seconds)
loading group "scalar"... done (took 43.502546416 seconds)
loading group "sort"... done (took 3.351691684 seconds)
loading group "sparse"... done (took 12.771221104 seconds)
loading group "collection"... done (took 18.518185555 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.53450238 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124127721 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128765108 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122079636 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.180767183 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122017615 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129818513 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086188477 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.856897335 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138967656 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116941947 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.436690896 seconds)
done (took 5.392572695 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167173109 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093333705 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084988185 seconds)
  done (took 1.370065833 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072443212 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061180611 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06814678 seconds)
  done (took 1.392581546 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066195709 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13620723 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066816207 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06748128 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070970908 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.0669524 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06670947 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066889736 seconds)
  done (took 1.736812848 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07262608 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068267112 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066206287 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068608186 seconds)
  done (took 1.470418872 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066063359 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123123127 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065239135 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065230489 seconds)
  done (took 1.512527569 seconds)
done (took 8.927073842 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.141223158 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.812205923 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.756339088 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126855588 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248458676 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.451518082 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124466321 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183856774 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.09032068 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075799544 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122883511 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077874442 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.451697797 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.4009488 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071878205 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170734213 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653393095 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089481135 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134373043 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.480474911 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073877667 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088091575 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084815303 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071490765 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.353638261 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.157316702 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.659196778 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097212443 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068739754 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095447598 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070812863 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078354765 seconds)
  done (took 10.791969577 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093717768 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090616955 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069118075 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.12446865 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094303284 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070626702 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075990109 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069058111 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089416982 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124375354 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090073264 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.09917354 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067303597 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069677647 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.079823878 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196848397 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080825776 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081552982 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067777487 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.08327559 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108442003 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079143607 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079064006 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078392964 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.129919882 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169688399 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097410047 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098765366 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066870976 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079553832 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118760495 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125912046 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067180905 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065686682 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.12057612 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096195646 seconds)
  done (took 4.640255205 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.894099548 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096746942 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083801872 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074948987 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106951029 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114336493 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.123514884 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123661233 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100497067 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069803274 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152745717 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.647716446 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.144879924 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072743199 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120361783 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362619039 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.066017863 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070619713 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069261882 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071472369 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070292205 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112452316 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066637698 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176303453 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.583007531 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071308662 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069288863 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096967586 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066111148 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140125334 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095467347 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070002165 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.549782363 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065852513 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064695876 seconds)
    (35/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.113291073 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088382518 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092863189 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065881859 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066644579 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077757821 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065219796 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107719856 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077657537 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.478594911 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068754867 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.548673812 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.218094114 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.071213635 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070372023 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.099730016 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.062817472 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066994397 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.939247165 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.117675425 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.065204651 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.268684799 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06678348 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06750094 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068109468 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.096369037 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.0657389 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067128169 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071233462 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.095415535 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.869683338 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085454304 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0980593 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06486424 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062429417 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.391613219 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071630884 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067085783 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067060172 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.080568953 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.105555809 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063900323 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064443386 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.100962293 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.08638183 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.084985565 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.067749315 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.064642403 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064514468 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.364162962 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.130536407 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064364456 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.064956651 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.466024358 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062033229 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064578806 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06253708 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066121661 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.086739653 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.064787729 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.061778474 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062939197 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098034799 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065164893 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.881431485 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069591311 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.471000369 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070302561 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104353803 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.124353406 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068967394 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.09740128 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069664233 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067154215 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075452242 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067092677 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.067042663 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071423893 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067732391 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066676283 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06810624 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070217243 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069531034 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069402988 seconds)
  done (took 22.905396032 seconds)
done (took 40.430024683 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.321278893 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080952328 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080477851 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080865782 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080404149 seconds)
  done (took 1.916289431 seconds)
done (took 3.299524429 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.136164992 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077496953 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066164627 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103457067 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070804527 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.103861201 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.110707213 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106211497 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070498564 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070485498 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070160522 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.103988478 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106538191 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070233747 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.099889203 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.105416073 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069961978 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06857689 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070245574 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069959946 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070318481 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06593961 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069845102 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070231836 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101191446 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070061218 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065965982 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.100504315 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070290099 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100186222 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070470165 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070163497 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070342675 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100969148 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069817728 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.100970689 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066237081 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070403009 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070121886 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070099413 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070222482 seconds)
  done (took 4.682690015 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07275638 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083629202 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08470363 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063654058 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073020238 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083944485 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063335764 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083561701 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089798948 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084265228 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083712752 seconds)
  done (took 2.18263116 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071537314 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084516146 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088724993 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063378326 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075013514 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08478919 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063732281 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084074816 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087489471 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084822735 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084980654 seconds)
  done (took 2.172592938 seconds)
done (took 10.328092349 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098204862 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.067383926 seconds)
  done (took 1.449684599 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.226573736 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.635015752 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.27440381 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.094702093 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.074455396 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086990756 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.204607783 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068591724 seconds)
  done (took 8.137776285 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.10509715 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070152772 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.07091672 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069035696 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069485774 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069608864 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069229574 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069052571 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069208538 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069391896 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.07075637 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071233878 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070705163 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070150045 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071297551 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068977994 seconds)
  done (took 2.548597347 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105078803 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071176514 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101128782 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063665378 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073581591 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063665509 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072546973 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074367918 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071400258 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072217176 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073649305 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072613721 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07275566 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.072896232 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074374074 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074537059 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074562589 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071839063 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074282896 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075301809 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073691898 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074426337 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074967203 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072400481 seconds)
  done (took 3.215234435 seconds)
done (took 16.652339619 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.178186389 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076353343 seconds)
  done (took 1.548393611 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069611219 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069883775 seconds)
  done (took 1.448816003 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074873134 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062093309 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07990478 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071694775 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062643112 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062357658 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078294484 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062940792 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062758486 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062821955 seconds)
  done (took 1.989117469 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064608812 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069956814 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067906065 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066307988 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068992811 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063867807 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066246524 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064058781 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070565982 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063514433 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067147349 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084744801 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066564147 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084806958 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066650688 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066962186 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069035867 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066312328 seconds)
  done (took 2.549835299 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06273341 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062791997 seconds)
  done (took 1.438253931 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066067662 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063196373 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065977279 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065356845 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063107389 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06226279 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.06313903 seconds)
  done (took 1.755760262 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.426825407 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125276325 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.347712902 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.07041425 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077892644 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260700885 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065450366 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06988623 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069671663 seconds)
  done (took 2.865340759 seconds)
done (took 14.918240724 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083717749 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.185713202 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08928038 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.414673983 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094274722 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068820648 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11638025 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.176594226 seconds)
done (took 2.561041337 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.217851263 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.271780813 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.399188642 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126878721 seconds)
  done (took 3.116422108 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.342265719 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.07976144 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078231673 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068244137 seconds)
  done (took 1.897968287 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066493264 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072752851 seconds)
  done (took 1.462852422 seconds)
done (took 8.027336718 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073755128 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.063197134 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.098742553 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065501065 seconds)
    (5/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063540703 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06585707 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.066102863 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.075759339 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06460922 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.066012377 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063552448 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.06562034 seconds)
    (13/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063308773 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.065873227 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06557881 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064962388 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064868804 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065347285 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065070604 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065201701 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0657196 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065908458 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064632883 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065185481 seconds)
  done (took 2.964805333 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.081990036 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067351847 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068095031 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068008505 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068817557 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068707506 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068780206 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067493572 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068320519 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066618206 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068439022 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068872041 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066408967 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069099727 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066645121 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069491549 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068374977 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067300896 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066896402 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069193459 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068493326 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067562681 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068572041 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067904607 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069155392 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068613131 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066742967 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067514681 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068240491 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068776934 seconds)
  done (took 3.396491796 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068109673 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061849551 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062083977 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071861402 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062037806 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062278411 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062959975 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061156337 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.06155659 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062779025 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062047495 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061380173 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062059381 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061298021 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061842935 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062190521 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066617808 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081317175 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061670082 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061540603 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066134152 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061993615 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061528503 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061594671 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06204939 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061379144 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061572582 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062540348 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061813809 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062181839 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061163928 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065592621 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067209789 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062028264 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071962012 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066421973 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061714145 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065727702 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.06248582 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061149792 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.06132077 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061402618 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061641581 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061802906 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071679193 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061733332 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062644202 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062089729 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062217316 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061881627 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062165098 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063911389 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071072961 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063064887 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061086411 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062427081 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061107445 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062370147 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061059458 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061158759 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061350165 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065628353 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062562893 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061914248 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.08126436 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063122255 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071772811 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061877057 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06216577 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065071443 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062515241 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079347348 seconds)
  done (took 5.941246947 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.073061391 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074158579 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.0812809 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072045573 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066304764 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062808509 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066884261 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062811099 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071937698 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067143119 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063147579 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066391708 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071809252 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066930374 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064299174 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071843792 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067113643 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065774687 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062853552 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066511254 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06440039 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06628493 seconds)
  done (took 2.85008046 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137817309 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068103937 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107519005 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076137452 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069814648 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.076393189 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067885338 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067192475 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067417616 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06794976 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068572993 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067411879 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070154589 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068184439 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06867137 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067884059 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067719433 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067773268 seconds)
  done (took 2.695532605 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078471992 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068167044 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091010626 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067704951 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067365097 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067203729 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070864896 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07123651 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066882362 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067680574 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071554249 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066870445 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067471779 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067626327 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066709421 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067591416 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06675518 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067367683 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071069483 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070529376 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070532053 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071048309 seconds)
  done (took 2.887448592 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07904342 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066651075 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082080583 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068070486 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062300516 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06190182 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067432887 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066621076 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067278818 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066217216 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067045801 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062023103 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068133474 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067059715 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068577688 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067300887 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06635519 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067404814 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066823716 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061959489 seconds)
  done (took 2.697668169 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.088389278 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064677131 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064803121 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.08434202 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064353358 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064350118 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.083872266 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064499519 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06496392 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086647017 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064415893 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06462525 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.08393576 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084214042 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064809341 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084435138 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084344783 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083884892 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064553104 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065931627 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086558463 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064604944 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084152055 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064613838 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064603509 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064339393 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064156789 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084376803 seconds)
  done (took 3.402965537 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066298932 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065298129 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065524025 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.06492528 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065438156 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064952153 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065240301 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065427783 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065184531 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066306802 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065791644 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065401005 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068326954 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065443645 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065477297 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065236946 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065198312 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065690406 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065611164 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065615492 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065182698 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06499234 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065582987 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065332497 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06586605 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065479925 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065645022 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065758613 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065178438 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065186699 seconds)
  done (took 3.322009057 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.07494265 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072629568 seconds)
  done (took 1.503104324 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063698569 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.080793893 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.063002609 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.075979516 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070814054 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065420958 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070336615 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070324963 seconds)
  done (took 1.910859425 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.068014747 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091531532 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064043856 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063856581 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066357433 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134240913 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075753511 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075066934 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077433441 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06596182 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063587032 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.07549989 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063084869 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076951694 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064853435 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072735499 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070477774 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081226388 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076501754 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062152275 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075796923 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064245762 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062227563 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064605965 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063443295 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070273141 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079035232 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07574412 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071963346 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061037591 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081957552 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061912625 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063371029 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071909055 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066780812 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062416786 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.099630489 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062739144 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067447683 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061961089 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075051519 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083290165 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077160239 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080660389 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063871226 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064295997 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.0621741 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064180468 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065906089 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071710096 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062458308 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07017912 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061837153 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06405075 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072913852 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062878083 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067411489 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071615746 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076041478 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073108052 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071205632 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078071423 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071797229 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070223392 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063393599 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082163106 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064692812 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076270535 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077689185 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063662743 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075900612 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062055871 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061215749 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062417317 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095881782 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064133927 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063560698 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062165426 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062209034 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063616147 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072142651 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067477165 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069750116 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065955684 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07863261 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071481104 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062766884 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068781463 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080708939 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065975895 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063015558 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079043505 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066061776 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061858289 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079854298 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07259068 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063940055 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062709222 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065372431 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075846036 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063647057 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060906193 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071088906 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063864419 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064436862 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066667706 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0701613 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061747604 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072059897 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066739837 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063552931 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060853308 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066016649 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062896963 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060353072 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070769868 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061359038 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.0754824 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067654853 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07576929 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076022006 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.07210615 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077130204 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061020485 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.06021958 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079106189 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070791332 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.200549436 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083232844 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063863903 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074573443 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.066654533 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064805406 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072889938 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06252729 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065078916 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063108339 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068467188 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064176929 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064571344 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06831345 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072031077 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075148319 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063868914 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071723547 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063298118 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078669574 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073379977 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067817226 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066520563 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063393955 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074897413 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069236368 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072906188 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06397072 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064503038 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062242241 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073527303 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072604534 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064759119 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069936972 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067605274 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063335245 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063471303 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064164638 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066582067 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065948121 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063462195 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07106438 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.07161115 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076885534 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070083175 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072085507 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062351405 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062691019 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064689568 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062207556 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066684411 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072155515 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078107497 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074439814 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084095853 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.062630516 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07283705 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064458459 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079322388 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076510587 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063420214 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067453886 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061380742 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064238412 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071995778 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074592526 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076072957 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077939046 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066960081 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066716842 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062205734 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07757953 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062701038 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071379083 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071978995 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067029796 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062608886 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06394418 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071576543 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067013697 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06271922 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078304726 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068806624 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061812115 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076212461 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06255937 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072863383 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06182474 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066166914 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06766958 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064259299 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072511566 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078147494 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061842754 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062639771 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077894364 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064288709 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063897565 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.07057064 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077848247 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067192245 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070213634 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073030099 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07272493 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067246964 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072045413 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063051121 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071698224 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064886159 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073761783 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061624955 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079506035 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060121255 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076568888 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061473291 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072085813 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062193414 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070939625 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062383853 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078419938 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063004012 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061992136 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072868561 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060577593 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070439242 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061236483 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066401479 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068098858 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070924089 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063252243 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070837685 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.203934294 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073495983 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068831094 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072586694 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073591474 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067590753 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062756431 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071310921 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074323389 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071486239 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064207716 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064314522 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063478141 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072462492 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064312121 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064468777 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071351722 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067660604 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068894702 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06429125 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064348015 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064282366 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071530927 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072836013 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081541773 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072121747 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071308512 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072442124 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062557146 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078618596 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063162985 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073203826 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061684605 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068777806 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072497923 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062717236 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081201615 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064415457 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070920434 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075249734 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071981443 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066465704 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.082961941 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065691494 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07161111 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070903699 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067279231 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069320418 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064183934 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071115493 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.07227 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073450109 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063874793 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069853439 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072110679 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064402223 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070670065 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064688973 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071042748 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064330418 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061662589 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067132121 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074346141 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067444031 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067536746 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.064010185 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062034466 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063196495 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069027077 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06714421 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071136304 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078053917 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061577672 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063608261 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062123849 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06602795 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08069405 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072359854 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071432431 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066938822 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061518721 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.06378489 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.064230762 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06267528 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06595535 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061447328 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062144532 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073161019 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064203747 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066941849 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062928365 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06309903 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072337617 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067011267 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062695404 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068888718 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06208779 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067765073 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061627853 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06391888 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067178203 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061831493 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066225098 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072787905 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079079955 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069646102 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.07135343 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063033407 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070333995 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078193082 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069304404 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063233539 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071478829 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061256286 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081290662 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071781383 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071148179 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071946056 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062451674 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077981973 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06610452 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071917485 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076755136 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06264389 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067655134 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060378324 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07625277 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065075752 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.0605899 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068696149 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068929374 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06695798 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07195666 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.206475843 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071939977 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068701261 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066731125 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065336176 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064503904 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071458416 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079112392 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063683102 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067214121 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071019338 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.07124289 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066994993 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075223413 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071446652 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064329456 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064790033 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066007144 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063668707 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07493264 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063540839 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067199259 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067353274 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06242586 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070004721 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080281797 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072511661 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072472978 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062514679 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061878374 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080389793 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066738226 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066243302 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070778428 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072419522 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075067232 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072813847 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079385523 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063683567 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068405779 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075187064 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063959138 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062406375 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066734071 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064367308 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071999502 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072651672 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070341878 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065034576 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069317086 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076043271 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064203605 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067412037 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06709495 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063500044 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073314345 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070827785 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073936462 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063708079 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061958934 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066282656 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071425119 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070348761 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071576575 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063398991 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069015244 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076264786 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070035039 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066008693 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061800661 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066124775 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072020618 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067087643 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061750375 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066687833 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066213395 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069361922 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072211218 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.06747325 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062097479 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079766154 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070756468 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071619809 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064201748 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064394387 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062829238 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062243695 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073508116 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061867959 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064329507 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067204953 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.06411386 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079813196 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070934464 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078328061 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063217954 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066786244 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061781058 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072630893 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066920166 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062707193 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072775962 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061275152 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077814552 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074380046 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06781445 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061674173 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.089251688 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070350347 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077377131 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072138984 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071804765 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06593691 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072151601 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06422924 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073932728 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061481292 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060807899 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072110561 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071327495 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074177309 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061613325 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071715703 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062950239 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069468768 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068842356 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063091167 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062526817 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062913325 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070582798 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065583893 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070233504 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.20916762 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080985816 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064618759 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075164022 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072545557 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074135849 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076608772 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075369634 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.07095157 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063567284 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070406224 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070289376 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064233411 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067838548 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06635546 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084770474 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064453646 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064687143 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077175891 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.069460668 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062749892 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069292612 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066980827 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073049501 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064101367 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073389884 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066585618 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06353978 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067284633 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067611092 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.063007919 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062905501 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062305914 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072962019 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066968772 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06235852 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081664677 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064756395 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071935881 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075388398 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070548368 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06620421 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062994157 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064927796 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077765762 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079883672 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067032362 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073034295 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065749703 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071373222 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061415106 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071459323 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070602452 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071024289 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062178615 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06234392 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077507424 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078304865 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067152403 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072055037 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071816528 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064183211 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084345573 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071517023 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06349993 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072927002 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064961358 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061500677 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061761302 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063883453 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074051337 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062322931 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064696977 seconds)
  done (took 43.012545796 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.101195855 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063814336 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062190322 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062251048 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073133439 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063069602 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062392868 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063210792 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06327716 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064982566 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061909084 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065008723 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073038779 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075000354 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072584187 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066062126 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061976081 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063289605 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.062237074 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063568881 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072146496 seconds)
  done (took 2.879181817 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06623797 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066388073 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06647916 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066479901 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066215591 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062288559 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066844453 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062644432 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066619114 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062874101 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066740491 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062142778 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062751193 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062518243 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062616364 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064109921 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06686343 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065958913 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061951691 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06595351 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063784121 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065962534 seconds)
  done (took 2.862403072 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064015691 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062909044 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071676918 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062019408 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061711088 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065395364 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062044999 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066031454 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066077201 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065913264 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071056898 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062760563 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.06123421 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067186976 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061285626 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062560779 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.105278006 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062937448 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062746091 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061533706 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064625373 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071009836 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061932268 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062031577 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066110028 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064962576 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061697583 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064058909 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06218151 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065918912 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062947137 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061701145 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070800296 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07008886 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066068689 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066341635 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.0631642 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062650793 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061435317 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061352701 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070632241 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063354897 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06230283 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063186987 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070641366 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061649299 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061528046 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071058395 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061707632 seconds)
  done (took 4.644822742 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072605904 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114210566 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067873755 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095564753 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074603614 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067756217 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067134276 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.0962153 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062727522 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063415924 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075525925 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07569729 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064856554 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066412837 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069155853 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064528707 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067326956 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063702084 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066860833 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064365278 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.06763417 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068322506 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074370901 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075972117 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067604179 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064486554 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063810044 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065774461 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074585623 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068157534 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065994252 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067532243 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075219706 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068479632 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064431555 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06427012 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075976337 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064957373 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064859103 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06308769 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064412169 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065896186 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068842138 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.07602022 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064668884 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069275071 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064851265 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06330084 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.075369649 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064559004 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068571404 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07656671 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065761655 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065441477 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066222278 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.075227127 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065385808 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063591295 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065349245 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074596974 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.06273511 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065224287 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077987522 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064002893 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06777996 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075919416 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069409454 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.0656284 seconds)
  done (took 6.323747243 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072448427 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097427551 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073344766 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073163826 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07267393 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072726766 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.072652727 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.072874003 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073080368 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073366875 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072943976 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.112701394 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069464024 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077404067 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072530281 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072573346 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07251223 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072560161 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07238602 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072674491 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072515831 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072689893 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072442082 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072745736 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074510221 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068543369 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072062188 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072393041 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072987883 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072447869 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07489013 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.072196379 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072250187 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072790354 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074810716 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073153577 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063120106 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072794295 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072842712 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072088204 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068858298 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07259246 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072797384 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068505298 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072261278 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072509843 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072785288 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074975154 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078891342 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073049002 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072568189 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073092727 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072247796 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072242285 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073006842 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079703849 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073233026 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073157473 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072740251 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072948377 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072781121 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079019882 seconds)
  done (took 6.057619423 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075487437 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068582674 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080815962 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062020493 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06187645 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071336556 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061912146 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061934183 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068947714 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068732543 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070576612 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071523987 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073420809 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069912734 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07128995 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073418087 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071432694 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071145598 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068807808 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071416414 seconds)
  done (took 2.866821786 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077359558 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080515684 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067431088 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071419019 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06729475 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071381691 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067172991 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067426276 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067795083 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068355272 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072397417 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072809332 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068065892 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07144227 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072392785 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070746076 seconds)
  done (took 2.596634512 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.0653377 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069694313 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.06925112 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063730831 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065334885 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062474898 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063220636 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062133948 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064707824 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076540375 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063260596 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065427988 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062979827 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061971753 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062481974 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065397046 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064488878 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06390433 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063039001 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067046369 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071473631 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063660982 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065638797 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062684474 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065250405 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071547524 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064156653 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065375311 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063020734 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065360845 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064946473 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069909497 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065227499 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06357784 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062085697 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062801797 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063123246 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065571873 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065530511 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063302045 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061575294 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068755075 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063078268 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063829512 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064532561 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065238356 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065333197 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06870932 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06299483 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064904788 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063094052 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064712542 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06355761 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070528338 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065367465 seconds)
  done (took 5.045475933 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079257853 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067157938 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061862301 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062237155 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067117378 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067597062 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067418696 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067020955 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067314457 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061484057 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067484062 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066933288 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0676912 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067158873 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067849683 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067543569 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061526896 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067298369 seconds)
  done (took 2.680682668 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068840858 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062317951 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066294993 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063932282 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063986647 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062778403 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061999271 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06369089 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063324017 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063671149 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064167351 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.063282058 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063362511 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063685671 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062207764 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063938899 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063664988 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06187678 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063850099 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061891887 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062085247 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062062754 seconds)
  done (took 2.866608397 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089220115 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085566275 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129542972 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081595099 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089449937 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072798438 seconds)
  done (took 2.01900877 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094921399 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105116477 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066923436 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066733367 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07518965 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069681507 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069860583 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069804218 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075188992 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073908956 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069947787 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075118061 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075441521 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071703793 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075159219 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077536713 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070058251 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070141261 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066689438 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077963443 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070237426 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075332353 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070503768 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069594598 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070189184 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071519554 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077411199 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073656289 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070086167 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075645625 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077771101 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070343654 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075367539 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074089474 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067115408 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075561904 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070264355 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077962251 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075730377 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072050631 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066866801 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075540815 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07576411 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071709551 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078085915 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071154289 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072289794 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070410215 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07050254 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079886092 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075792446 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072037466 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075605854 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078434104 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077674874 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080274646 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074365879 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071882424 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075267067 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07375884 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071971788 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075596836 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071668286 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074285014 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077630499 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071648349 seconds)
  done (took 6.365499309 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10205656 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067320579 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070236364 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074112731 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072153909 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070430452 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071244154 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072681054 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072440046 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07013068 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109099547 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073025474 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0745657 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074258837 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072603822 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072576142 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075452637 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074333696 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069863944 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080490121 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069954147 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071851696 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072265668 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071744821 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07412169 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077405606 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070127597 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07018799 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070043905 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070052467 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071413228 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070179893 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071714526 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067312209 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071868535 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070328581 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069798207 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071950766 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070235399 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075522157 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071789284 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077880956 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070478866 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070045024 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074331926 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070530367 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070124714 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067361072 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070673857 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067516726 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073846647 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07410537 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074505823 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0720762 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070529952 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071046535 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070307442 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069966708 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070197089 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077938961 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071586089 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069835886 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079713925 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06974873 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069967768 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07210708 seconds)
  done (took 6.316422584 seconds)
done (took 131.43738434 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219502373 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191402932 seconds)
  done (took 1.872093568 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075814231 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.168237538 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076187333 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.076258741 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109648751 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108856506 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.077132168 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073623661 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075411654 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073277319 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140871633 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077697394 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07312391 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073166845 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073591031 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073214852 seconds)
  done (took 2.908709112 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109269018 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186234095 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.083674911 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071769545 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115987008 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077989657 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073701821 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076183012 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078161942 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.07159246 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.109285218 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083089156 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075352092 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077827554 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073631203 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074456055 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076213787 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.078217435 seconds)
  done (took 3.079646792 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099452992 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087518812 seconds)
  done (took 1.676956865 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160271885 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107764477 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147746725 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.332406581 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.13113626 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.131220842 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133192825 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.128355953 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.115268055 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.124328436 seconds)
  done (took 2.995959521 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107394518 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106085067 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.313587036 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106660065 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.084205899 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.07978435 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076844119 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081439408 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076838677 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077349858 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.123348273 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076363076 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.0735011 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125178329 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099848889 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.108739544 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072560703 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079201048 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.081008963 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072116974 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077041931 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080857548 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.180743815 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079680222 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100918622 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076206557 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078741095 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075548037 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075536277 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07950349 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079770946 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100400959 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079287125 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083160448 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077703549 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097713268 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073211857 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099291349 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075697724 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073253191 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075981471 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079551294 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073411896 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079108141 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076473345 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078252144 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080767523 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072617502 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076448226 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075531966 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073917209 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077656591 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077085419 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.07832795 seconds)
  done (took 6.344477703 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109153821 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.10726515 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071610894 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115105008 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.110190086 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071434115 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.106012748 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101422293 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109940756 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070970553 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070540522 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070449791 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07749288 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080179859 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117962532 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109604569 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072350078 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071111033 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108856951 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.10915767 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07026829 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103016854 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10206823 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108110608 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069951011 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071119108 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06990129 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070253753 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074987756 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076442674 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069865943 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076659979 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082030952 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075988645 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069154894 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069837137 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069750805 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077002871 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077651222 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076838802 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07558667 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069340364 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069570317 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070258527 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070821843 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069683825 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075700283 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076796983 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075026104 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070143803 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070211218 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069210988 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070486029 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076277632 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075747401 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07688585 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076786924 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069929526 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069819378 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071605647 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078074268 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077726188 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077562072 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070633988 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077628798 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069679771 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078546335 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082306585 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069993409 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07050422 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070002488 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069777044 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070392121 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075679159 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07586659 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070173882 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069853005 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070134002 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078106449 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075696883 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06949769 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074865738 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06927176 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069517017 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07005536 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07009009 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075047717 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076485838 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070790538 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069697927 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069836623 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069757587 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068748475 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074872759 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07586126 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07573726 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07473772 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069456422 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074976208 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075501356 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069486957 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074754948 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068529383 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069187132 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06971925 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074205602 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073724185 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075849648 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069012108 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068366061 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074145739 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214287954 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071779412 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076876677 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079221217 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077640492 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070273246 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079726064 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07088476 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078834685 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071089401 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078389743 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070515064 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076446783 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070341039 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069693946 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070101738 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076865368 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070752159 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070065154 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070863592 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070475054 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076075811 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079490465 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07106292 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076127043 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077104294 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070374271 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076176191 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070870994 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077608063 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070493955 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07073029 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069834762 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079110216 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070371501 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070144533 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069786578 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077914003 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070607079 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078438369 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075938014 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069448441 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080132564 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078231088 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075976787 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078945499 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070942082 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070857759 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07032944 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070249709 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075177611 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076911271 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.073373121 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070620236 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075426724 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07878226 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069612063 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075686971 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07535683 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075819652 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070195533 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069935714 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078511983 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077960197 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.316410347 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075642387 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076843572 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069877588 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075237888 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075373682 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069816123 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081615741 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069899233 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07988757 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075934781 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07481939 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076275082 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077427824 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077842384 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077918933 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079713935 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069849559 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069329009 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075654625 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069410957 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069682563 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075661012 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.07020994 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070325742 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080229771 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070294066 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078311495 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069279289 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076354813 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069369171 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070134553 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080534354 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069650165 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069791621 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074997846 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069008655 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074864979 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077644112 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075429673 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06958188 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070142241 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075716759 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075414459 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068790274 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068509457 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069118565 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073393599 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073028119 seconds)
  done (took 18.827623457 seconds)
done (took 39.208845327 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172417097 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117408387 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209371479 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.200280938 seconds)
  done (took 2.295449703 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10203088 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066258098 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.082135934 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09131459 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066262695 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076587545 seconds)
  done (took 2.023525653 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202151199 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174657417 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240154433 seconds)
  done (took 2.148791162 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.369112378 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149523164 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216867137 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.510227348 seconds)
  done (took 2.884158766 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.111598307 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101675828 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078413578 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112349811 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085720551 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06356397 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134473495 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070829113 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100827981 seconds)
  done (took 2.455267631 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131126049 seconds)
done (took 13.501850611 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.102753268 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.240590352 seconds)
    (3/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.226133212 seconds)
    (4/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.075134593 seconds)
    (5/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.197249186 seconds)
    (6/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.187825662 seconds)
    (7/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.186491602 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.122747965 seconds)
    (9/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.203438719 seconds)
    (10/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.144170544 seconds)
    (11/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07759929 seconds)
    (12/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.069225307 seconds)
    (13/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.079757641 seconds)
    (14/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06975758 seconds)
    (15/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074739702 seconds)
    (16/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.252852521 seconds)
    (17/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078905807 seconds)
    (18/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.238123387 seconds)
    (19/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066790753 seconds)
    (20/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.077015131 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078899516 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093527076 seconds)
    (23/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07552454 seconds)
    (24/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.082730601 seconds)
    (25/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.158262364 seconds)
    (26/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.143017605 seconds)
    (27/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.144892613 seconds)
    (28/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.076658038 seconds)
    (29/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.247882738 seconds)
    (30/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.079391376 seconds)
    (31/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074143744 seconds)
    (32/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077818061 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.091818853 seconds)
    (34/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.125904688 seconds)
    (35/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.225379872 seconds)
    (36/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068394735 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066298254 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090867073 seconds)
    (39/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.247061019 seconds)
    (40/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.216667194 seconds)
    (41/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086811165 seconds)
    (42/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068450283 seconds)
    (43/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075777206 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.158105378 seconds)
    (45/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.218735293 seconds)
    (46/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.073151769 seconds)
    (47/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082860597 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.088935351 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.088406264 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148090383 seconds)
    (51/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.183102329 seconds)
    (52/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068089512 seconds)
    (53/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.199148562 seconds)
    (54/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07964362 seconds)
    (55/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075615595 seconds)
    (56/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.17583362 seconds)
    (57/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074786261 seconds)
    (58/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070932836 seconds)
    (59/341) benchmarking ("sort", Float64, false)...
    done (took 0.137289699 seconds)
    (60/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075285558 seconds)
    (61/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066587922 seconds)
    (62/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074232 seconds)
    (63/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068050718 seconds)
    (64/341) benchmarking ("sort", Int8, false)...
    done (took 0.152131001 seconds)
    (65/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074230013 seconds)
    (66/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066012786 seconds)
    (67/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.199712376 seconds)
    (68/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.233992565 seconds)
    (69/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.065861328 seconds)
    (70/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.078224869 seconds)
    (71/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092703295 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151712336 seconds)
    (73/341) benchmarking ("sort", Float32, false)...
    done (took 0.137044066 seconds)
    (74/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.218426879 seconds)
    (75/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066312233 seconds)
    (76/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075240218 seconds)
    (77/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.142498598 seconds)
    (78/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.183765399 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.087894068 seconds)
    (80/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.197003611 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.296521996 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095755441 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.128310289 seconds)
    (84/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.146483538 seconds)
    (85/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.078460033 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.093601325 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151788692 seconds)
    (88/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071312374 seconds)
    (89/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.079427131 seconds)
    (90/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075206417 seconds)
    (91/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068898485 seconds)
    (92/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.180061352 seconds)
    (93/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.182309346 seconds)
    (94/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.066349784 seconds)
    (95/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06955132 seconds)
    (96/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.11048799 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.094036663 seconds)
    (98/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075710062 seconds)
    (99/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075378657 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.067094268 seconds)
    (101/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.165086838 seconds)
    (102/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.067181568 seconds)
    (103/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.146136579 seconds)
    (104/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070987637 seconds)
    (105/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.198860116 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087186094 seconds)
    (107/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.067105061 seconds)
    (108/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079547946 seconds)
    (109/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153634025 seconds)
    (110/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.147187695 seconds)
    (111/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.076054329 seconds)
    (112/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.16414788 seconds)
    (113/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.065452135 seconds)
    (114/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268433839 seconds)
    (115/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.202899973 seconds)
    (116/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.156152479 seconds)
    (117/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.082841757 seconds)
    (118/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067728339 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077461184 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070497339 seconds)
    (121/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071928432 seconds)
    (122/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067318577 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111921612 seconds)
    (124/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073920194 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144773897 seconds)
    (126/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067307919 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.085612641 seconds)
    (128/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.206009145 seconds)
    (129/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.229390511 seconds)
    (130/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083654429 seconds)
    (131/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074156127 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075850568 seconds)
    (133/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.154027227 seconds)
    (134/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065677482 seconds)
    (135/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067211592 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095413915 seconds)
    (137/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089297396 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075081209 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089664342 seconds)
    (140/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07660447 seconds)
    (141/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068164457 seconds)
    (142/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.195289874 seconds)
    (143/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.07777337 seconds)
    (144/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.077362666 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 0.144280251 seconds)
    (146/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076025517 seconds)
    (147/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067575637 seconds)
    (148/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.068778548 seconds)
    (149/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067260401 seconds)
    (150/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074188566 seconds)
    (151/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076593966 seconds)
    (152/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06583189 seconds)
    (153/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.084991766 seconds)
    (154/341) benchmarking ("sort", Int64, false)...
    done (took 0.067913495 seconds)
    (155/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.138081391 seconds)
    (156/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074823134 seconds)
    (157/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073450786 seconds)
    (158/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.08267001 seconds)
    (159/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155627204 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06730786 seconds)
    (161/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.092665389 seconds)
    (162/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190612745 seconds)
    (163/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.164314231 seconds)
    (164/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074199704 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066752117 seconds)
    (166/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065812369 seconds)
    (167/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152701778 seconds)
    (168/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.138712903 seconds)
    (169/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074260058 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.1336626 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.162418189 seconds)
    (172/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066047225 seconds)
    (173/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.145167522 seconds)
    (174/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069371973 seconds)
    (175/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.188395063 seconds)
    (176/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.13873424 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114487743 seconds)
    (178/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066718407 seconds)
    (179/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.072707655 seconds)
    (180/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.080893767 seconds)
    (181/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065941646 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075035773 seconds)
    (183/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.068844375 seconds)
    (184/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.083895254 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.080164026 seconds)
    (186/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.363048727 seconds)
    (187/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.08223562 seconds)
    (188/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072391397 seconds)
    (189/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.206883444 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155371493 seconds)
    (191/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081330261 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066909079 seconds)
    (193/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080175212 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067376235 seconds)
    (195/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068325383 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155698117 seconds)
    (197/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.070177855 seconds)
    (198/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149772439 seconds)
    (199/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141657065 seconds)
    (200/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.175507681 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127964763 seconds)
    (202/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066811315 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148058412 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15356905 seconds)
    (205/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.210987413 seconds)
    (206/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067935456 seconds)
    (207/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.221651966 seconds)
    (208/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.076602342 seconds)
    (209/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.0664346 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085349752 seconds)
    (211/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075552722 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092604563 seconds)
    (213/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069228716 seconds)
    (214/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070612942 seconds)
    (215/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.066620298 seconds)
    (216/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.067478743 seconds)
    (217/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.073155338 seconds)
    (218/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066846168 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065421694 seconds)
    (220/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.153559539 seconds)
    (221/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.084153813 seconds)
    (222/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.068006263 seconds)
    (223/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067229742 seconds)
    (224/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067079898 seconds)
    (225/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.085919286 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067315056 seconds)
    (227/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068919241 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074965042 seconds)
    (229/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067057704 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07440306 seconds)
    (231/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067342267 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.17153159 seconds)
    (233/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.068289638 seconds)
    (234/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.165856745 seconds)
    (235/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.067224206 seconds)
    (236/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067037399 seconds)
    (237/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067186942 seconds)
    (238/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09555915 seconds)
    (239/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068306583 seconds)
    (240/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068945521 seconds)
    (241/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067906138 seconds)
    (242/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070537035 seconds)
    (243/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081681246 seconds)
    (244/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.0675363 seconds)
    (245/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067243666 seconds)
    (246/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066988738 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066892292 seconds)
    (248/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082420584 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078792353 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076803735 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092350644 seconds)
    (252/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.198358074 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068095374 seconds)
    (254/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132986633 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074351337 seconds)
    (256/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066232924 seconds)
    (257/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066848477 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074005617 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069725027 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140771077 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066807842 seconds)
    (262/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067021233 seconds)
    (263/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.07745399 seconds)
    (264/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066699384 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065822091 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066479743 seconds)
    (267/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074731525 seconds)
    (268/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066624662 seconds)
    (269/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076497344 seconds)
    (270/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.066763989 seconds)
    (271/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069935579 seconds)
    (272/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083326317 seconds)
    (273/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.06682973 seconds)
    (274/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067119204 seconds)
    (275/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06629092 seconds)
    (276/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.0890408 seconds)
    (277/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066892275 seconds)
    (278/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073661231 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094349945 seconds)
    (280/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078223664 seconds)
    (281/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06921028 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.06635509 seconds)
    (283/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066592386 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066308168 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125641663 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065184378 seconds)
    (287/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071322677 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085853474 seconds)
    (289/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066834609 seconds)
    (290/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.234846814 seconds)
    (291/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066706213 seconds)
    (292/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067987279 seconds)
    (293/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067346166 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150002749 seconds)
    (295/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068253037 seconds)
    (296/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067689625 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066190185 seconds)
    (298/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092743371 seconds)
    (299/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066664809 seconds)
    (300/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.06709205 seconds)
    (301/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069078271 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.12819341 seconds)
    (303/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072532963 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064990327 seconds)
    (305/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085724373 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065404443 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131071769 seconds)
    (308/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065626683 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067230725 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065851998 seconds)
    (311/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070524421 seconds)
    (312/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066123015 seconds)
    (313/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066439373 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.168222093 seconds)
    (315/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065612844 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065639573 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065190599 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130333442 seconds)
    (319/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.06584125 seconds)
    (320/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077112071 seconds)
    (321/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066544209 seconds)
    (322/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.065805558 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076604751 seconds)
    (324/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177393538 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066233025 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.065518372 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088164918 seconds)
    (328/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070638906 seconds)
    (329/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.06582415 seconds)
    (330/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07299302 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065802839 seconds)
    (332/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07325698 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065855893 seconds)
    (334/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072105161 seconds)
    (335/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065694202 seconds)
    (336/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066004898 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.089635256 seconds)
    (338/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068503575 seconds)
    (339/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068702607 seconds)
    (340/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073713828 seconds)
    (341/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.0649367 seconds)
  done (took 36.87749483 seconds)
done (took 38.428507732 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.098483119 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082637563 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081625364 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078411043 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081403455 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079614246 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080455097 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078738074 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080083923 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080170392 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.079138774 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067584824 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076166404 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.082991886 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.076148559 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.083208111 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079900854 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082718674 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067486851 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081822154 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093931757 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079160342 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.076334986 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081335772 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067161763 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076156515 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090732769 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.088013636 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073709306 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076081605 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074915107 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082780262 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074949173 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073299762 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.079313625 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073527153 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076217126 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074235071 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.08982739 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073184546 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067392798 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079529984 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074138374 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074907052 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075535605 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078473853 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072145903 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079997098 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066536133 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078242135 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089765855 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071888881 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073944102 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075591783 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072111582 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076634046 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.074103277 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078627656 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072475303 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078324294 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078561811 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.076126341 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067006976 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07571429 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074589153 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074872708 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065876054 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071999067 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067221985 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066633468 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065979346 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075448959 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073740143 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071931185 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066557085 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.067150357 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066583301 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.07912076 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072948326 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076347871 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066915443 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072056342 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071819036 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067046864 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071771122 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078555053 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065906198 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066789488 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065821191 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080732028 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.07271997 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066246615 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077738355 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071368072 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071204812 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066653974 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065747889 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071549703 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074692413 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.067032734 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065922989 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07190706 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071453331 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075247304 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067118069 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071929596 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071459875 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065470732 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074876212 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073718078 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075073947 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079447509 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07505884 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078726428 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066936534 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065422552 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076014364 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066844297 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071435875 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074141223 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.0719088 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073934942 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066453812 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065646872 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071316387 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072878575 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066712847 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066991844 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066563952 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075495605 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073585965 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065256436 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066415441 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075289114 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075073424 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065522995 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065445357 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075717789 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06632852 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072262309 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071452688 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.074553863 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066440536 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066007823 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.211627956 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067046495 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066874333 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072071871 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071530902 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067209369 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075542595 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073027212 seconds)
done (took 13.103634677 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069304146 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106728182 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074606373 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083407334 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079776676 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068882026 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070801881 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083520217 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070777084 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086373714 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094687093 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08928635 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094108682 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065838668 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067722348 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068172259 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065794586 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075039418 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082354913 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090348614 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096181179 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067699574 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075918767 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084001208 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077655192 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083214912 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068407823 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067978933 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069951714 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.125393731 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092549305 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067053299 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068780624 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080410548 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081338448 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073620578 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068420985 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07132102 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.0684144 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067376011 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069316157 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084207458 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07086382 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071087052 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068381121 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068211011 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067354459 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070143681 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080409013 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070722275 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075034823 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079299213 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069127083 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067512528 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065538069 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.07078244 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067669788 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068070946 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067492068 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067658626 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06790729 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069777011 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068094655 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067973 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070736301 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069617066 seconds)
  done (took 6.599181879 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086319657 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093773372 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081898487 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082749496 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067026684 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068178767 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067774674 seconds)
  done (took 2.229844135 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070402244 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.076295077 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.081312162 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07984957 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089830947 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077322563 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067912764 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099510927 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066977757 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07618038 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083579473 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080886732 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.07069423 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079867503 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067839479 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079558224 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.06841668 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074565968 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075480165 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080642858 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071591798 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097635436 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080745303 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068657356 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.0810035 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075468133 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070185904 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068194087 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068325733 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067726824 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067365441 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088992487 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074040285 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079664461 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068513182 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066499371 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072183873 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068327103 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.072152565 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077001744 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071295482 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067527148 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06803322 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067511282 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068973767 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072539485 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06877063 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067452887 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067062109 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075086538 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066823399 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074221463 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069937918 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072001466 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.07250407 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071776403 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074595071 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067661686 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075048158 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073632252 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067186251 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080261289 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079567725 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071266272 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079102058 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.0762003 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074110308 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071239278 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067301888 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066938895 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067996462 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078907422 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070649906 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069751438 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068714293 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072363396 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071058965 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.083132947 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082704173 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080831493 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069964126 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067848627 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071703084 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082501954 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07278058 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067338273 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068821151 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066885218 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073066747 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068097063 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072402171 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067890528 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075276223 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070246723 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070601651 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075093488 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067311796 seconds)
  done (took 8.793709469 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.07088625 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069671117 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068643378 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068565219 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069574039 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068917963 seconds)
  done (took 2.126402435 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09159017 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068235589 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080166059 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068761915 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090668177 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074881507 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074708533 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070021047 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084729595 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079085045 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074782844 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076862708 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074030201 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069579176 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074221619 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069287519 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074284774 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071151325 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078054491 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070239702 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081373646 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070100283 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072722884 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079943217 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071156392 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068907632 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069019296 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078605533 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077792267 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069714169 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070191232 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071123957 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076550082 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069851213 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07471525 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07648603 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067814469 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073545075 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070368604 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071084942 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076996522 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069602615 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07033931 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072922795 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069041152 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076505373 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07371399 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07147872 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07418308 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073325414 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073469756 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068799517 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070968984 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07345098 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076347859 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070073548 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073433348 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073926556 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069842444 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076498062 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068118289 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071462707 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070017473 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071055261 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072702934 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073321618 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07645439 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07026113 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070112874 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068429458 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073543738 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068031188 seconds)
  done (took 6.957155374 seconds)
done (took 28.36458593 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552294983 seconds)
  done (took 2.208081246 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.591957862 seconds)
  done (took 2.286681888 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.945681101 seconds)
  done (took 10.63741 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.299311581 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.319282651 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.738947817 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133030789 seconds)
  done (took 3.217415459 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.758381537 seconds)
  done (took 2.468144334 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.234859249 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224269528 seconds)
  done (took 2.175134994 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.342043314 seconds)
  done (took 2.035038728 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.142822845 seconds)
  done (took 2.837131498 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230162288 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.166498036 seconds)
  done (took 2.098876334 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.550065355 seconds)
  done (took 2.246373482 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.276531951 seconds)
  done (took 5.978996067 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.237150563 seconds)
  done (took 1.977606522 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231874655 seconds)
  done (took 1.939619143 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.055270484 seconds)
  done (took 3.752955579 seconds)
done (took 47.562713102 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086029206 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086797737 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08698926 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082189513 seconds)
  done (took 2.012915489 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077471451 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073733131 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076881811 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07453597 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072562821 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073838495 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073587565 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071018285 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072134036 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070877675 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069241787 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071144626 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074002869 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07091732 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07362777 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074374507 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.070886251 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.070998087 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073116031 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071030469 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073761507 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070872331 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069839161 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070713983 seconds)
  done (took 3.440747793 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080720791 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073346002 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075965613 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072029132 seconds)
  done (took 2.010577336 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080298659 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.079640455 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.089328659 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091826171 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077620283 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078143926 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084733431 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085480268 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065976317 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087657096 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069112173 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067660842 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068288262 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086707016 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084089505 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063361198 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06468465 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077856469 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077196708 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080279191 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069540871 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066860954 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078015153 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078463048 seconds)
  done (took 3.560474666 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082926929 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066364958 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079161161 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092449516 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093058272 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067068863 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079835016 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093387883 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128138449 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066652663 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072571567 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066275037 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105165911 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066106717 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081291918 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109329027 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112196122 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070776393 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099185534 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066605721 seconds)
  done (took 3.413086033 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079362987 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070356938 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071481939 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066585079 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078235331 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073852026 seconds)
  done (took 2.157131646 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.072094945 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070054559 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068362858 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073122609 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.07206255 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069020605 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068441334 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066641104 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.06705812 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067674329 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067569788 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068337758 seconds)
  done (took 2.538810603 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.161523981 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072957643 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071107105 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067569782 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.07199219 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067815257 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082541687 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069965182 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085587868 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068031704 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067607393 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070324523 seconds)
  done (took 2.666491722 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104874165 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104352794 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147556324 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117580946 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117010295 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09767147 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12004414 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094921907 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161358251 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137873046 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117770359 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094501852 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087624663 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071458077 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100643988 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102602356 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136890201 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073669027 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11437557 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164825252 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115107597 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112665148 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123243709 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117458326 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082114724 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122220243 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095027088 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102774757 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124406842 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110513691 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119531647 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098327494 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072545957 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072075875 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150248517 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.102258167 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108945952 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093652245 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101058269 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089191067 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108040252 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071167493 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087958404 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106887258 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084974657 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118149451 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089190974 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10411288 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082157085 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.13244713 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107347388 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099861414 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086025103 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104731438 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129849453 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095531875 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110826793 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107692323 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08328905 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117990392 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100228972 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.252735892 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095492375 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082709323 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16149657 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090642647 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113596358 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114333256 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083938699 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091002418 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10349922 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131915004 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107830658 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108765265 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115674879 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096886893 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112237746 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093338744 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130341686 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097251607 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.077168136 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109304617 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133544873 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089203864 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105049595 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135187863 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096650827 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082678328 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.097006703 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121109834 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082885311 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097192622 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070585755 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098088516 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108058168 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09758108 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112913433 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107561461 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078681063 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125548754 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109641663 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073703292 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117826807 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099385136 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153125063 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096038417 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077134217 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100786898 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094476362 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149425079 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08538442 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080915818 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099402194 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141807415 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094464387 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170583145 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096972224 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129677791 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097940751 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088162655 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075913124 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09104193 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102737674 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10777191 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101260403 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088769637 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077449449 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086837137 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.252888242 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094687849 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082677083 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115175704 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102317244 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075962226 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090069508 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077532468 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127363224 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07958388 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112719249 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125834314 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079884178 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106477764 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099379427 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108546435 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097951703 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10872011 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141582363 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117096649 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080821382 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084889032 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109316132 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143562412 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1148329 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086189699 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077773989 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100407086 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111755726 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09865697 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107457504 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101173649 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110125824 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098643892 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14248372 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118784904 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092088801 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09614375 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097591008 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123977662 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077424602 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15647921 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095028032 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119258653 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085974617 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141401232 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115003946 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090364982 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085436021 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096555323 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104995856 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106370661 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144236242 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096930704 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073305346 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09389109 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132646409 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077550238 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100628892 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091049711 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094196273 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119102044 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.085717452 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082706376 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068514682 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101668853 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135186526 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070083343 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.275105133 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.116759557 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104744682 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.10631252 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070717908 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100948112 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138767855 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106352769 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142204714 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118094338 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101939636 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120002903 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100793342 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107533853 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081102154 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127199061 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135892847 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097012554 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091642433 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13654465 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118589451 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135428353 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097833785 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116019505 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106594578 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102129484 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104865117 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102167093 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144964302 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12136315 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125857548 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087193915 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107679499 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109706998 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137051542 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083441605 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117327618 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076150159 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112430296 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078574589 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108620531 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080583973 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112266387 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080480763 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100343317 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070334882 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075087995 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142733901 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113233022 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089696767 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086831329 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136787816 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132790531 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082005645 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102644914 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104828542 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101240856 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101689558 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108144261 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085874162 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094238682 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.272225549 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080933379 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083565012 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100744879 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096357138 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109024126 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085719289 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076470334 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137273528 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105292029 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096931831 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0798629 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096354657 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123678067 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090549753 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0892319 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10626886 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105318529 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142733949 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091306548 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099731768 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118873305 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08173797 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093318368 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070845116 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086311841 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077040188 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110566959 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077598951 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110081552 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070394523 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131868941 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087950479 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094155785 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103654541 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098535748 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128889399 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093299477 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132790048 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091394396 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102899128 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108884089 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095153418 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081266868 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104608115 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097121405 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11049379 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096695536 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106360725 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111373128 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095283484 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142658254 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090497028 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122034795 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106839142 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108393327 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104631969 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117533852 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138151387 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113531983 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113162708 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075971734 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084346722 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106638665 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100770273 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145681714 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10205349 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072867462 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086835933 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091118896 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.254527632 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108198676 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085153703 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144071183 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088654763 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088416124 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114220421 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091098339 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098346481 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077520585 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096817127 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101522866 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095616611 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096043848 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109424828 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118146236 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115512148 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134809327 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100141541 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094308481 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120856488 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112373103 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11203332 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087011527 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088002572 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124596472 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103303191 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129981297 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101565677 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095499609 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103439487 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091855147 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100943254 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098168013 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111182346 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081708126 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077247878 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069435173 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073390113 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119638282 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110379259 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09980753 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099281784 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.07332507 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104540015 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101099675 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073099597 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088781015 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095146891 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100155269 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084760588 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093431842 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115138335 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092525905 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104623323 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101011947 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130178866 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101166214 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090068154 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144104012 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129534189 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089481599 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093786622 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072823084 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080277504 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103005747 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145080108 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117866093 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077975443 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.244033932 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079718283 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088442187 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073376914 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089425693 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091225989 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105213919 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093522523 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113641459 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104889056 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077259662 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104527886 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098051287 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093814018 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09757769 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10351374 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106286588 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125391982 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102149417 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098851367 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077747816 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08169978 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076962356 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081422693 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103809151 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079120913 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078031025 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130913848 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092769014 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105887821 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111049192 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086337783 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07657791 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134648102 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070319159 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135172764 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072756936 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083791016 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082368433 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080797677 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095134107 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106966616 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09763119 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113952751 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111093803 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10597359 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11179581 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156917153 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072239697 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14442355 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077146444 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076580242 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07700561 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11250499 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090474434 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108711636 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14132897 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090535118 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093615115 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078366233 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129110291 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099136161 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104335335 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083792152 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080193012 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129328961 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080546103 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072355114 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087633189 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112281547 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073530228 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103995856 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.247240766 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082017356 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114753821 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631644903 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091963513 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077510379 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091188236 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143144331 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129951803 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085098966 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110269385 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120060659 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091650822 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085035399 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108892255 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184454998 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076114013 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095866433 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105336315 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099607155 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094034681 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093592628 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088837821 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093647634 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087667601 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081429892 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109033297 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089130506 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092910361 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099238341 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084854991 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081842326 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132192718 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105270425 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08359047 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089871944 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101855646 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088965216 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092606866 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070750863 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115361289 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092408334 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102295159 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.09230556 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109607734 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120979979 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090057752 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113638636 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089529285 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110007488 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086514357 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079401109 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102453598 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079168306 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078869163 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118223039 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085432286 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093782734 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105381378 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096299207 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114808317 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118260919 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112163239 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099314648 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081379449 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0874251 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089015698 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076533591 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078776619 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074950921 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077064587 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.27049815 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087904683 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086212958 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116887122 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084141676 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104966022 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101834226 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110576103 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085076795 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102612346 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110542271 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091766238 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104755669 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101525568 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129849573 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147000749 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100734557 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124998106 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13512148 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078053987 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077285637 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.07089127 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116573944 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08084503 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082895082 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082159199 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134670453 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083517949 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096063005 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232480948 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081786819 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083206626 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098085 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071638007 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084770565 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109886257 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086225103 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081643002 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100489211 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084912227 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118526995 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113195353 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090623183 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083885637 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082630932 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09459491 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105103112 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129843427 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090883076 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076304863 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107509927 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104639021 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124676107 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074224716 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082026907 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131003781 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092953057 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10390388 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081413389 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12182822 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133475462 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090993632 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13539383 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07217813 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084717109 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090395017 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12653866 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076017277 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089808097 seconds)
  done (took 65.434777884 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.157960879 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.144019729 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.086615319 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098938911 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188305187 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19848254 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121012482 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097125352 seconds)
  done (took 2.984175309 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071227017 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084241871 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082081121 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208059168 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109575155 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068619472 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074301678 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.08313103 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068348904 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067793774 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102563203 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068220459 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068471877 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.368655886 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067858471 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073253036 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.06894331 seconds)
  done (took 3.58676684 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.335659486 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.391684856 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.22120659 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.632251301 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138258823 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485821517 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078432034 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084196079 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627236382 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372876854 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135791774 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092719434 seconds)
  done (took 18.452984147 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.081494849 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.08148651 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.080731649 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077905971 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077015363 seconds)
  done (took 2.327371572 seconds)
done (took 116.310549894 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.089025105 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.180936956 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069973745 seconds)
  done (took 2.145563444 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.088174938 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083243707 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.08363719 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080705908 seconds)
  done (took 2.200718525 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.079553643 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.080039626 seconds)
  done (took 2.018427281 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.22654043 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.17894901 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092932752 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.087078538 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082735369 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082321546 seconds)
  done (took 2.1231209 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.07669164 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.07459129 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074541092 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074463124 seconds)
  done (took 2.156014867 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071713422 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068658092 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.0707743 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073269248 seconds)
  done (took 2.142092766 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090556455 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085343613 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114499076 seconds)
  done (took 2.141021997 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.088132072 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085268063 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080198566 seconds)
  done (took 2.109539367 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.115856275 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099406947 seconds)
  done (took 2.066694847 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085074452 seconds)
  done (took 1.940778453 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095936879 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099829535 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143159944 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109049346 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142157446 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127854929 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078883781 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080435106 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075917593 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074674013 seconds)
  done (took 2.880854891 seconds)
done (took 26.368503073 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.083537108 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375766436 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.362123193 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089692737 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675750069 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359606608 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.001658623 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093573891 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102168318 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070262325 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087360729 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.65147926 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.997256816 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331616048 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.981243506 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331560601 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.654261931 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070733971 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069988766 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070328705 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.988884279 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069719691 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070393868 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070639325 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651933189 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.377115994 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071078462 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331745499 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070096264 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073106017 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.359120412 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07162959 seconds)
  done (took 16.499230138 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07558734 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.13036688 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076474561 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08613185 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072376476 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071437765 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073163887 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070793432 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112782791 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070836494 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087544716 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069829763 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07470125 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071953884 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090565803 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070350059 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072449719 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071524655 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070700639 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074373403 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088851166 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069938366 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070943612 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071263902 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070989678 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083951624 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071255372 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070872305 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071201466 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072855122 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07379061 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071585106 seconds)
  done (took 4.362401852 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127373546 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129019509 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075616277 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.112517857 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121192246 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072315391 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154285516 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093813005 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116709512 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071347421 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087773795 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070452847 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.107053932 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071736583 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090642686 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070811109 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071866232 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071570531 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07070718 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07100665 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089752189 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070471022 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071188268 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071190418 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07079942 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085512079 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071279423 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070496339 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070582407 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072746391 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074809056 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07168529 seconds)
  done (took 4.62771605 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.074591399 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.0748566 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082603644 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083680851 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069335571 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070809004 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071832928 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068795135 seconds)
  done (took 2.479270257 seconds)
done (took 29.847726324 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.084391315 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.072132782 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073513727 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089785407 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076375843 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072505681 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067277013 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076726408 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073639834 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073216892 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075451085 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069835245 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072412398 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067088416 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074079106 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067897566 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.07479097 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072610413 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072307572 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073927862 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070550484 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074279045 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077293964 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072941792 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072993507 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073099266 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077300895 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074272293 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068608925 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071448399 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070280115 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.0827903 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074810547 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.075240639 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068838944 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068098074 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072693509 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070306992 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074364938 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07752353 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070526001 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077499977 seconds)
  done (took 4.937700343 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.09531653 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096818249 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.089059017 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084233849 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.110692926 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084549812 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.093433407 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081612921 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080017386 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092595239 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075704591 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081437479 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083459328 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.07739843 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.081005753 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077250598 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082157491 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075656128 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080667758 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080597366 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092991745 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073747924 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081617142 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082315104 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07608622 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081677732 seconds)
  done (took 4.079203473 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.077236763 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090705363 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.095185737 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144382357 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112297586 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084898695 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084494485 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.099826608 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103670894 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070391551 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074398364 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096486078 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099038963 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077686545 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109196682 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088630743 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083594872 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072353022 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076570525 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105369433 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093345569 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089264215 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102813571 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090489182 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069837423 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079628564 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07723199 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085861183 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077425262 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082357416 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074111721 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073754813 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070633598 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.083150225 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074610702 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068440956 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.095621884 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082786658 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08615809 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108815769 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080107075 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072025529 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.10131628 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136601322 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069863352 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072635021 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074255194 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082477767 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071692433 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100308355 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088566109 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069580545 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089180797 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071217684 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071502974 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086784447 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071609399 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071720835 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082241489 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076405782 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091318818 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075143703 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.09126432 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070106481 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081165568 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071697849 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071764993 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068874494 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106543164 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078071655 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123261232 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.07114905 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068326404 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082427719 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.0816144 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076380957 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069775964 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089492186 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082025565 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073597249 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081889427 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072624513 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073409635 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.1063328 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068985402 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068056606 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067936219 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072328822 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073308796 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070559957 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083243598 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069090619 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073144539 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085107498 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070170715 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070399249 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072460355 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071278684 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068878764 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080507828 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07363521 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071753421 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082837001 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070618176 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073253439 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084584308 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079507262 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069097941 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070704036 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071763818 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071361807 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073934744 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073024966 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071586231 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077556031 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077548609 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075640438 seconds)
  done (took 11.43070999 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.173012067 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.162172833 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.074417703 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.153632143 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078720874 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.075044348 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.154390898 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090144358 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.07094398 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071712825 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070153725 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098810984 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094160558 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.106047372 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074411364 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071515218 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096951258 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104526329 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155260566 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149945361 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094363166 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078350821 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073647999 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07249404 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072132168 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080546749 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086847139 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078562938 seconds)
  done (took 4.695789002 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080996618 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086274649 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074907708 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.095447373 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08965874 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071355641 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072794682 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071759438 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.088116062 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077498806 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070842758 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074952622 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074177618 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071283604 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071339454 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077364089 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077776659 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069252701 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074248427 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075437749 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081321139 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095544222 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074701238 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071047276 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073490603 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070529762 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076855568 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079989885 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070238668 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101038542 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067625081 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075208811 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084897352 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071399735 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.07064924 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.07128425 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070659492 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070789899 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071034344 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.069049582 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068859473 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075395882 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.06921206 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076236931 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085056086 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078036357 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072369811 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073114987 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073377563 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.070278236 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073781091 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073634879 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073169166 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07879582 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074090923 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073440239 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071581292 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100667725 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07659041 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069585512 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069609814 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069142339 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072217537 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078374623 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087298579 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072529611 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068920116 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.071106241 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075468229 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08473252 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069785696 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076125989 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067966131 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070801938 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072617087 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073292983 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071540401 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068959245 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069871397 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070705237 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070182013 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070221733 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069952542 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073203275 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068109649 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068782279 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070822603 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071396573 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076553761 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.06917968 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073059607 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071390072 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069001718 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073601596 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075684651 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073639609 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090226123 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079179549 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070911841 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068275261 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084776706 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072349266 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070029454 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075867097 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074698377 seconds)
  done (took 9.783761434 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.096787471 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072839888 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090617967 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098274501 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081227302 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076607522 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.08566976 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072226233 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086681094 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070010981 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079586428 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069253441 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084294023 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079881468 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071967174 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080796283 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073415228 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090976181 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085940326 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069073109 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079490108 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082978573 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083294259 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088496056 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088463358 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089308453 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082536591 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073044096 seconds)
  done (took 4.219136287 seconds)
done (took 41.019260999 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.969875275 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.123865715 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.952041837 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.183702168 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.00775999 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.07713669 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.080503348 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.972263942 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.232609311 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.97232556 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.269518481 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.385915864 seconds)
done (took 69.177716294 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.977295098 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.093362449 seconds)
    (2/2) benchmarking "String"...
    done (took 2.168161542 seconds)
  done (took 6.138952272 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.548451453 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.949810472 seconds)
    (3/3) benchmarking "different"...
    done (took 1.99945981 seconds)
  done (took 8.372835611 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.050034222 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.975263797 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.205422162 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.947934202 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.939972875 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.357484728 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.764034155 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.409345925 seconds)
  done (took 32.478630382 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.24730095 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.2016598 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.704804365 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.731074359 seconds)
  done (took 16.812667099 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.553310262 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.21220114 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.213076521 seconds)
    (4/4) benchmarking "different"...
    done (took 2.206266806 seconds)
  done (took 11.120579916 seconds)
done (took 86.927700211 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.950866445 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.99872083 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.955931559 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.1018544 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.990554292 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.97317091 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.958808045 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.987226857 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.947084884 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.952358083 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.393984003 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.962265836 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.946891785 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.983709068 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.951805159 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.992920175 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.029520957 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.960938952 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.980932188 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.614753376 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.42051083 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.956758959 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.958224491 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.173723277 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.085204208 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.985666553 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.53219473 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.952111481 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.655638678 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.952270086 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.948852973 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.95460568 seconds)
  done (took 210.086545909 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.952985992 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.096164786 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.159991413 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.95651818 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.595089289 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.140381489 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.099784888 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.638822225 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.949981385 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.95610231 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.278149039 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.950222922 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.309408949 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.897597384 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.948692098 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.052214958 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.222324654 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.298411042 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.92508618 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.141315647 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.9676946 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.053800329 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.004769572 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.250199798 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.984045907 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.049534162 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.94961769 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.957843285 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.135267552 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.204133023 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.984849719 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.975266507 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.150911338 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.815080906 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.97455201 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.956341731 seconds)
  done (took 177.863703706 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.135082169 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.964234436 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.016652701 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.089108039 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.710303589 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.691687401 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.950451368 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.953966685 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.954340422 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.960238086 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.956889436 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.023296032 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.893922271 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.96869277 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.95010111 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.951148789 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.473542437 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.955344339 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.954595973 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.951488398 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.017851857 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.325556564 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.087067171 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.922511879 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.964289716 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.093101943 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.962785658 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.952148849 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.088932212 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.956256519 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.032906934 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.092722009 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.96413525 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.036339424 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.959921988 seconds)
    (35/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.953237835 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.445364513 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.955666542 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.956760838 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.958079437 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.019473285 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.953015381 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.065975078 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.04765578 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.952754939 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.96620246 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.15073225 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.638467696 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.956246925 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.954315192 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.954819209 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.95544945 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.955732128 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.460014828 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.957429485 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.981663425 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.585263781 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.952482906 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.958292169 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.956722226 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.955697569 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.957686697 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.961256539 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.990714646 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.769056683 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.736319171 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.345587077 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.773842487 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.959069763 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.95382917 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.711287166 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.009596978 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.956782537 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.035845599 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.95331438 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.955952065 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.954472305 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.955953145 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.049022594 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.035042915 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.954865245 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.094742797 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.958762953 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.957196385 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.206960537 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.498177919 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.156368537 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.970579521 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.013990157 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.953831305 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.957201815 seconds)
    (91/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.956021515 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.975956054 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.115488579 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.955973239 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.959015707 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.942864393 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.137517415 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.955133241 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.9590743 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.182900655 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.029868705 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.209143003 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.181404237 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.95720588 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.957470574 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.97221787 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.95726181 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.957197407 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.966465992 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.959548217 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.956507783 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.959216627 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.957474939 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.955530676 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.956318722 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.958655716 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.971543818 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.957518822 seconds)
  done (took 431.126087009 seconds)
done (took 823.143335591 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.58592103 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.789605928 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.567199414 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.605387585 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.581006331 seconds)
  done (took 15.013557453 seconds)
done (took 16.898982669 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.9890917 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.973959228 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.963197159 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.018079681 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.981812958 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.971987696 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.005686196 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.004759877 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.987567304 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.972402528 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.010866874 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.97261437 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.988789979 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.991790699 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.036553623 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.996092859 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.97338125 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.969061103 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.015965137 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.974070475 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.975507435 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.976790974 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.969466188 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.011412471 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.03976586 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.982330518 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.971059688 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.00709452 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.98173637 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.009569313 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.026834564 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.990457555 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.004016728 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.037558217 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.017011834 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.040960645 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.981483636 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.027383956 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.977464123 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.047012964 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.016280261 seconds)
  done (took 83.775005763 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.969247798 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.104095184 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.176833569 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.001826255 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.969482851 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.181566265 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.024385723 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.096926235 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.10576518 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.189854338 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.184790308 seconds)
  done (took 24.899107561 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.970173228 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.107422392 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.181803514 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.004803184 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.972049648 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.186126274 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.031474499 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.100890893 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.107430766 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.211642559 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.201341622 seconds)
  done (took 24.974042863 seconds)
done (took 135.538041821 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.338278373 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.995972393 seconds)
  done (took 6.221473222 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.965445543 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.984024904 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.121709962 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.966529206 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.967128612 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.966838388 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.970858989 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.966574226 seconds)
  done (took 17.798290589 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.967556468 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.966789768 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.966935267 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.965453923 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.966370192 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.96673105 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.966794968 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.966817624 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.966339179 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.964501202 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.965824192 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.967081976 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.96662239 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.967378218 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.966199647 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.96620752 seconds)
  done (took 33.353153376 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.966170479 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.965041424 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.96664735 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.967455822 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.967112726 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.965839909 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.967712262 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.967959544 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.966042741 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.967627823 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.966207266 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.965134126 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.966081775 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.965629985 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.966033045 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.967499269 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.967071047 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.967100143 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.966977745 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.964833645 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.965918174 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.968310662 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.970762302 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.965628706 seconds)
  done (took 49.091733856 seconds)
done (took 108.366366999 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.15803877 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.528566414 seconds)
  done (took 8.577989203 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.969646025 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.966995202 seconds)
  done (took 5.897556483 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.966455135 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.966085679 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.967178253 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.966638072 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.967569921 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.966829245 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.966929238 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.968624413 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.968832622 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.967149067 seconds)
  done (took 21.56324134 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.96812091 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.966723623 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.967614491 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.9668939 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.967574431 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.969480621 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.967802549 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.969584571 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.968587175 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.969140369 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.968022521 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.968801282 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.970035354 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.969761761 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.969121185 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.968195006 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.967399735 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.96723978 seconds)
  done (took 37.323019447 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.967814482 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.968223273 seconds)
  done (took 5.828961697 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.969460028 seconds)
    (2/7) benchmarking "second"...
    done (took 1.964999323 seconds)
    (3/7) benchmarking "month"...
    done (took 1.966157324 seconds)
    (4/7) benchmarking "year"...
    done (took 1.968296906 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.966798237 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.968834668 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.96960043 seconds)
  done (took 15.666895696 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.968431477 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.118033128 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.171470419 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.55822237 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.97048313 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.972321743 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.828632808 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.972279733 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.972732946 seconds)
  done (took 21.425049012 seconds)
done (took 118.176192504 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.820945402 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.967822966 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.190642131 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.043156073 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.002755297 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.262993803 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.968428705 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.504651662 seconds)
done (took 43.656564013 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.04019707 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.966892896 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.995781894 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.999828504 seconds)
  done (took 22.857059022 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.978246848 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.298007404 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.990060335 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.895861806 seconds)
  done (took 23.075109448 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.351943788 seconds)
    (2/2) benchmarking "read"...
    done (took 2.343143213 seconds)
  done (took 6.594439167 seconds)
done (took 61.466230178 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.966834041 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.968111033 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.966423949 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.965775523 seconds)
    (5/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.967997835 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.96763424 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.96858962 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.967894419 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.967965829 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.969228694 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.967167542 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.96931008 seconds)
    (13/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.967673403 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.968343831 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966860776 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.968791995 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.970539833 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966215731 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.966996677 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.966367979 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.966277152 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.972822838 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.963409706 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.963349717 seconds)
  done (took 49.113700263 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.963446338 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.962550323 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.96229728 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.96194568 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.964383471 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.962334226 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.961303644 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.965395837 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.96105797 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.960929464 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.962075599 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.962367582 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.964761504 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.960428171 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.961051001 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.960898543 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.960567988 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.962540452 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961476718 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.960636666 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.961157312 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.961242829 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.963851387 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.96131 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.960354719 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.962017553 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.961307072 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.962375405 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.961406443 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.960549377 seconds)
  done (took 60.745870358 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.961227909 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.957742023 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.95584218 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.960593303 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.957456826 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.931209651 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.96164874 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.962279895 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.960948755 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.959755269 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.960437294 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.965280461 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.959018566 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.961739651 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.961606587 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.962623702 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.963097191 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.963411307 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.961771758 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.961947733 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.960731278 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.961010764 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.962866225 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.962994488 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.962792043 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.961275955 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.961651609 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.962958296 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.961301636 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.960230239 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.961079739 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.961194967 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.960298472 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.959995487 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.958242164 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.958542344 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.95940632 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.963312353 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.958960216 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.960132688 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.959537243 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.959664591 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.963717034 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.947793116 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.958860979 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.94875789 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.93840377 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.959745614 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.959969295 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.959677468 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.959422758 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.959586753 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.960353656 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.959892473 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.959993624 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.95757779 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.946053257 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.961858628 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.957260427 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.95906125 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.957823548 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.960242056 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.959565528 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.960342565 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.959214176 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.960044253 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.960526916 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.960694274 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.960249224 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.960076843 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.959387099 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.959398212 seconds)
  done (took 142.950137321 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.960894048 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.95949712 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.959301513 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.961734247 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.960438587 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.960843502 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.960151539 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.960560304 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96204685 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.960460131 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.962495797 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.96014258 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.959944166 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.961025298 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.946835395 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.966291506 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.960152999 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.960389286 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.959580699 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.96025229 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.962113734 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.960834181 seconds)
  done (took 45.010678059 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.961233759 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.962305858 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.96544809 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.956781003 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.953866687 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.960547412 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.959677024 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.960616355 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.961107447 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.962068332 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.961000196 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961780491 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.964073761 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.959106831 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.962027141 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.961162248 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.96104404 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.963499203 seconds)
  done (took 37.182964103 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.963830203 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.962508833 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.962878153 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.96236505 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.968200549 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.961843179 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.962393432 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.96230342 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.96200785 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.964142436 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.958252325 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.957436578 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.957726808 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957076988 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.962751821 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.95919948 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.950366474 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.958130022 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.956535727 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.962050918 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.959371552 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.958790902 seconds)
  done (took 45.020749721 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.95809175 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.958263256 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.957831237 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.94884217 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.952435563 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.956516947 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.952645151 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.947491642 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.956076859 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.953527425 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.957641937 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.955015049 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.953840359 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.956172553 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.92254849 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.955131365 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.956688881 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.952631756 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.952055312 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.941361791 seconds)
  done (took 40.927731384 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.956937445 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.955946931 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.956653491 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.957712984 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.957547649 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.957091357 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.956572995 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.95773449 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.9564431 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.957651151 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.956922932 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.958667146 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.956312837 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.9556759 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.956543009 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.955021709 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.956711123 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.949952079 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.953957726 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.953659299 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.955185034 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.954616275 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.955723496 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.953206288 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.95688406 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.954501202 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.960120877 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.954938701 seconds)
  done (took 56.647679883 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.954037316 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.95454257 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.95018743 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.949060885 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.948965099 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.950433204 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.948399369 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.952908791 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.945221873 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.948668473 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.94709279 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.947981291 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.945456106 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.947594556 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.948342321 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.947837226 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.946865024 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.948829057 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.954179627 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.946522213 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.94506113 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.947812377 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.945909417 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.952951527 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.945416424 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.944350835 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.947621774 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.946774635 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.946775755 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.947070206 seconds)
  done (took 60.331617173 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.968732229 seconds)
    (2/2) benchmarking "in"...
    done (took 1.962027681 seconds)
  done (took 5.800996903 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.949950444 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.946287803 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.942599164 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.947965979 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.948876567 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.946132897 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.942549075 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.942806735 seconds)
  done (took 17.440831518 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.943562033 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.947237287 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.945482372 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.945361021 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.945320266 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.949240947 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.947835673 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.945451625 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.946999347 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.942016671 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.948686496 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.947833472 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.949138088 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.945496532 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.941107038 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.944468977 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.94850499 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.945099827 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.942321337 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.942615752 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.945683785 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.943860805 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.93935794 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.94325773 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.940166856 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.942184177 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.955843044 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.939986684 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.941781131 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.93949177 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.948144426 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.945194506 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.936250081 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.940053512 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.939244594 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.938129468 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.947282717 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.941113688 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.939427426 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.939528154 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.939004238 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.940392616 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.947527911 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.947380964 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.938818148 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.938014953 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.938376817 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.94013602 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.937199184 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.940464628 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.946350036 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.937964901 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.943749754 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.939900821 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.940362956 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.940720827 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.940046407 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.946262501 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.9438921 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.946680513 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.942947668 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.960137542 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.948645542 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.940041741 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.94002286 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.946367744 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.961192399 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.943159453 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.93842211 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.938180596 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.946026322 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.93878175 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.937356287 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.938015427 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.952171017 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.946906479 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.938008795 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.939429171 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.942359431 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.938172358 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.940785397 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.938323425 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.938324872 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.940414423 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.945440545 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.961710387 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.937845718 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.93940702 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.941066818 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.939547199 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.942193477 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.940995519 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.939047863 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.944400358 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.93968431 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.940790168 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.939288256 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.938025147 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.939570471 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.949780503 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.939488694 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.937523356 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.942408699 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.94988953 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.93566933 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.939300317 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.939280812 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.939800472 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.947670573 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.944227294 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.940838894 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.940156339 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.940067518 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.942704372 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.941598135 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.941465521 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.946979734 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.948576346 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.94167321 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.946498737 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.944485655 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.942424786 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.949198195 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.960703776 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.940283837 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.942554576 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.943219532 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.950553757 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.943317867 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.9425556 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.940478159 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.941340531 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.93998122 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.94095447 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.943277558 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.938378978 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.939247107 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.939460866 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.938645947 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.942605725 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.944010031 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.942052513 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.940832867 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.940009465 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.944826164 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.946878131 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.941989426 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.947818825 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.941205544 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.917666886 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.938546798 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.942870647 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.943082567 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.942023232 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.942320605 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.946043399 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.941418836 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.94188686 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.942624816 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.941106914 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.944518452 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.940824061 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.945901906 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.940040096 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.943003151 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.941064351 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.942427055 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.94152517 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.943318477 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.943290808 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.947886142 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.938151929 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.945414238 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.941625536 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.942273397 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.940901056 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.941657019 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.940071335 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.945542867 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.952987736 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.945231445 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.954327986 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.94486291 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.948988989 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.942131717 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.944242712 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.94355733 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.942961645 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.941832474 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.940785896 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.943147395 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.949649696 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.962657281 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.951255984 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.945181688 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.941871998 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.947013859 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.945366911 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.947888645 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.943082696 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.943179574 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.945969753 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.942521638 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.943676197 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.942339441 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.946288128 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.946406677 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.941525087 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.946329379 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.942901673 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.944133346 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.943836926 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.943487109 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.945194706 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.942573943 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.943386576 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.94494078 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.948513203 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.951130665 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.946199587 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.944926376 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.943302375 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.946753004 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.945729621 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.944277585 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.94475563 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.947133646 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.949582575 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.945187523 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.95138027 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.945966688 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.944491513 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.945255465 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.944222473 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.945231743 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.946435076 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.947667999 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.954136015 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.947751863 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.944490027 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.950980947 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.947044191 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.951503247 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.945979392 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.947222932 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.945410409 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.947257222 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.945628897 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.946271224 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.953312806 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.945556165 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.947032233 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.945974225 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.948917636 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.947170116 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.946437708 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.945776827 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.948693201 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.95132408 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.952379135 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.947410327 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.950117593 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.947869546 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.94666166 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.950043889 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.947179175 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.95986772 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.954872421 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.9471873 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.945901042 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.946517245 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.949120634 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.947574212 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.947444252 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.956085012 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.948115438 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.946565371 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.949567226 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.946877806 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.947921398 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.953520153 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.946797384 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.950050382 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.948685987 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.948480693 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.948066299 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.947357892 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.950001309 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.946941636 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.94887401 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.95028576 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.947646471 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.948386847 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.948924434 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.958153694 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.946742273 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.94868823 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.957240989 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.949613482 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.947020539 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.949785872 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.948123042 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.949078884 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.948402878 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.947769512 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.948497382 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.949412091 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.950804764 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.959222334 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.951379788 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.955888075 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.949921149 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.958217194 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.947966523 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.947040078 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.948038736 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.952491301 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.956417115 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.94932032 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.948399072 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.955673279 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.950152184 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.949530137 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.951739458 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.948299858 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.949061105 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.949736706 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.948788053 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.953409852 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.952431497 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.94950222 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.949368674 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.948869259 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.949506806 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.952594172 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.950666756 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.951010004 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.948494777 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.948325266 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.94910617 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.950910076 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.950338457 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.95035031 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.950448048 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.951558925 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.958726172 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.950759154 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.950199624 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.955029969 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.952072467 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.96011884 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.951300935 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.951476649 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.952324125 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.95113798 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.955010064 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.952424953 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.95146699 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.950220523 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.952198852 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.953061224 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.963003567 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.959332491 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.956087306 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.95368478 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.953886594 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.952931365 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.961535287 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.972945654 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.951154354 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.953632039 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.955958366 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.958821744 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.953965686 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.957492864 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.955039752 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.960324965 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.953502899 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.952129196 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.95517463 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.964548428 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.952074322 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.952901706 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.952551271 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.956732469 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.955067615 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.95188682 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.954128231 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.956025167 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.953710183 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.962920142 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.937549383 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.937760476 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.954194542 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.954382111 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.953141729 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.954275887 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.956108736 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.956526208 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.952811489 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.952122199 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.954053295 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.957625014 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.952300619 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.956889108 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.962014081 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.953641708 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.954068625 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.956087153 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.955241051 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.956646763 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.954846144 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.953835166 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.957547845 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.954195141 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.955458107 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.958192114 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.962960462 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.955861106 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.953822228 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.95564342 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.957234529 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.95524992 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.955400795 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.956724627 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.964635501 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.957493311 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.963619527 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.962395163 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.954445194 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.956176815 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.961868428 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.961184597 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.954285885 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.954935992 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.955270301 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.957219165 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.957724221 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.95615799 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.955758843 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.956051767 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.960464612 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.954397611 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.955009808 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.955851217 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.956081328 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.956979075 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.956355399 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.960782905 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.956511939 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.956260556 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.954740765 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.956825672 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.956644357 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.958429661 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.955212069 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.955412446 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.957740757 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.957433284 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.960278808 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.955972074 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.955778012 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.958368012 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.956472015 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.956077109 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.957197119 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.956115988 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.957351244 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.959809653 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.963154731 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.957101434 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.958460639 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.959058217 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.961854869 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.956790536 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.957487202 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.957539156 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.957736662 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.965962077 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.959502182 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.958008252 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.958263563 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.95707575 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.963214124 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.959372045 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.962058079 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.958393391 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.958132932 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.95904325 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.961960437 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.965009345 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.962643501 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.960585989 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.966008726 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.962383416 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.95998273 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.959644301 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.959634703 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.9591564 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.960856795 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.963633083 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.960691707 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.961949005 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.959936519 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.961263465 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.958942976 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.961328625 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.958658104 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.959067165 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.962145462 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.968300029 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.968582164 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.960393189 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.961543853 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.960877418 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.962469567 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.971181827 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.961361685 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.959858696 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.959973483 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.959481203 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.961803241 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.967439331 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.966725513 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.9639457 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.960563232 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.963744536 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.976693413 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.963128789 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.969311089 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.989630065 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.962985386 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.961422125 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.961472136 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.962143979 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.961166123 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.962843914 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.960929612 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.966886265 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.96035504 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.960993146 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.968554299 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.962754193 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.961712862 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.961433146 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.961774486 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.966482373 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.961799595 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.968790833 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.961543032 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.961583697 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.962267656 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.962944505 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.961587215 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.961922812 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.960773762 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.963270329 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.960775249 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.962404443 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.971557504 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.962239166 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.963256746 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.975059999 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.413794339 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.964881214 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.960071292 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.960884915 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.966100349 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.964397329 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.963131262 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.963979126 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.967795094 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.96514554 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.967526407 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.96277271 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.963018497 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.961309349 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.961032812 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.961589217 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.973442865 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.971962012 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.962902284 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.961083603 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.967857813 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.962655864 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.969119917 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.968623196 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.96195735 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.963723986 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.962599754 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.961613998 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.962250873 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.96179535 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.966332068 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.970392194 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.962670793 seconds)
  done (took 1165.330126124 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.963319224 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.963913897 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.963800602 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.963523117 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.963532954 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.96355115 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.96410442 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.964129718 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.964422012 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.963058812 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.962997869 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.96352306 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.962904234 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.962031181 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.96412001 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.964210894 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.962980717 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.963996843 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.962191914 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.963928754 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.962962382 seconds)
  done (took 43.118303853 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.963674247 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.963108735 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.964356168 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.96374091 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.963413966 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.964565902 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.964332823 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.964923971 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.963904289 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.964673263 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.963280802 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.964935322 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.964700474 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.964471809 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.964427947 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.964835941 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.964187169 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.964245966 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.962919294 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.965925916 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.964072736 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.965677929 seconds)
  done (took 45.100772564 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.964838079 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.964541509 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.965568612 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.964413479 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.965973341 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.965233413 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.965824909 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.96726028 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.96556655 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.964816469 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.971355303 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.971399816 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.966799791 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.96868452 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.965679492 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.964965569 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.111131051 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.96622913 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.964627376 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.965549852 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.965697515 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.96835102 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.967187978 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.965783429 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.966215503 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.96571502 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.964219876 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.965515786 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.96592292 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.967674299 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.969783973 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.965299444 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.967339732 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.968964477 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.96750532 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.966292137 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.969651453 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.967438391 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.96640949 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.966258362 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.975471389 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.988263645 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.968850973 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.969479317 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.97519812 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.968563105 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.967979685 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.970633047 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.976185114 seconds)
  done (took 98.457019452 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.968945893 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.969496177 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.968489246 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.96814761 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.969260267 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.969280219 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.968219689 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.968541689 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.968822206 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.967907295 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.969180041 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.970062045 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.969938148 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.969069117 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.961129004 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.969089507 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.968712826 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.969784802 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.96993242 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.969982561 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.970852498 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.969140007 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.968219634 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.968606376 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.96939549 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.969756667 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.96972757 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.969666541 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.97023421 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.968865233 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.970399567 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.969922412 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.970433065 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.970547229 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.97079733 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.970825586 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.97050389 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.969534809 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.970076065 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.970813592 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.971031862 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.971583491 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.969350503 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.969936214 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.970239841 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.969296387 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.970134434 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.971290916 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.969549245 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.970496028 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.970844222 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.97120429 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.969355762 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.970074118 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.970422741 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.972033195 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.97066814 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.970663873 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.970281768 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.970639998 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.971178644 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.971041886 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.971203125 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.972346147 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.972485243 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.97193423 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.971298228 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.97122702 seconds)
  done (took 135.845852865 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.972833656 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.971725766 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.971118259 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.972669441 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.972243102 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.97137841 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.972002991 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.973164096 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.972940571 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.972025348 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.972254611 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.972416929 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.971810763 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.972396313 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.971052318 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.972712446 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.97317474 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.972638778 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.972994326 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.972897074 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.972390608 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.970741515 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.971579545 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.971055803 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.973668184 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.971569999 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.971414676 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.972948767 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.972852588 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.972652988 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.973578834 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.973663245 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.972732788 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.972843289 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.973988373 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.97412254 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.973002589 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.973720654 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.972928395 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.9752729 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.973017225 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.973961563 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.973574877 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.973880653 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.973564956 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.973234688 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.974671973 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.973569644 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.975025416 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.972652986 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.974686325 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.973456272 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.974389147 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.972863666 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.974179315 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.975087305 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.974084651 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.961229303 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.975828335 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.974775551 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.974294018 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.976281581 seconds)
  done (took 124.217191618 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.975397515 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.974679884 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.975209491 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.976970774 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.974197728 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.97621167 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.976563767 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.974550582 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.976475218 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.975723444 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.977326513 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.97611059 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.977011602 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.975779294 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.975451375 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.977498137 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.976355485 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.975818155 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.975230953 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.97540069 seconds)
  done (took 41.415423264 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.975398861 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.97587649 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.976149451 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.975525446 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.975395423 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.976895304 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.976310638 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976554169 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.975937921 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.976924835 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.976730011 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.976921294 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976394191 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.975649023 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.977194468 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.976954548 seconds)
  done (took 33.520046943 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.977510083 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.97672256 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.976159805 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.975875404 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.978866062 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.976598702 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.976216293 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.977746216 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.977603337 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.976201511 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.978009543 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.977334614 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.96816366 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.97429327 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.978250828 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.978100628 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.977732807 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.978063526 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.976869079 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.977625603 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.978771034 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.977341046 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.976479395 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.977448125 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.978506073 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.978085882 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.978515036 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.97849864 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.978630251 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.978288302 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.977971726 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.979039014 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.978347678 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.980020775 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.979182513 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.978184598 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.978023937 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.979722119 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.978299303 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.978380643 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.979456844 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.979230811 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.977661393 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.978929545 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.97947994 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.979996984 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.979162396 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.978814454 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.980273565 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.979112 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.979408996 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.979773638 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.9792767 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.979446393 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.980745481 seconds)
  done (took 110.692748492 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.980201384 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.980140875 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.978779518 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.981108436 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.979628035 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.980771508 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.980512876 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.979687538 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980833099 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.979278221 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.978407996 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.979853161 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980521555 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.980895117 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.980213916 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980592956 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.980324143 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.980932935 seconds)
  done (took 37.545503015 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.982386823 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.980793549 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.981345508 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.982367774 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.980106323 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.981974479 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.981283726 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.982384411 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981563268 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.981557722 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982016795 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.981404951 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981644535 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.981222016 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.980997496 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982124344 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.981457031 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.982027958 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.981638048 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.98151317 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.981738497 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981901852 seconds)
  done (took 45.49837468 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.982250146 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.981234184 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.995990011 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.003371667 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.000922535 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.015273046 seconds)
  done (took 13.882106116 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983519967 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.981390048 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.982631753 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.982109746 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982311291 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983941967 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.982255782 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983724818 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98581433 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983586638 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.98327826 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.982229034 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.983094407 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.983467446 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983450734 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.983384286 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983667936 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.984487378 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.984138562 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.982928226 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.984146498 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983614368 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984319496 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983499873 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.984722934 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984495343 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984517919 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985341468 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.983976155 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.983820767 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.984265454 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.984858802 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984035937 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.985485614 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.985215972 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.984505119 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983801965 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.983620612 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985389707 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984351762 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.984876407 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.985045274 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.985054831 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.986675764 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984646669 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.985455399 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.986930517 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.985610721 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984813525 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.985136816 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.985872756 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.985657418 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.985154915 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986104211 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.985498523 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983935041 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.985767181 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.986111993 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.986277559 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.985797731 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.986587708 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986739479 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.987039383 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.987172193 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.986059535 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.986186295 seconds)
  done (took 132.890634508 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.987286107 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.985677448 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.98708933 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.986235175 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.987560199 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.987244169 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.986683405 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.986641123 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.987421891 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986547901 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.986173799 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.986581163 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.986513229 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.987127568 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.98781141 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.986461946 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.986100152 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.987033473 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.98669921 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986532789 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.986672857 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.987579862 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.988078499 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.987867946 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.987288264 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.988372359 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.987864211 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.988614657 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.9884654 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.987196664 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.989786136 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.989379481 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98785872 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.988699282 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.989869249 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.988179393 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.988524621 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.989122571 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.989683135 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.988633633 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.988113999 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.987768362 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.988409406 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.988608114 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.989183331 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.989940212 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.989115999 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.988449577 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.989348055 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.98791241 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.988867148 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.987977456 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.98913901 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.988165561 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.989349197 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.988559068 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.989147123 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.987886039 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.988911573 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.988341742 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.989802957 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99092315 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.989123941 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.990038325 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.989254496 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.990757818 seconds)
  done (took 133.124884869 seconds)
done (took 2723.71356247 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.988925258 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.087424656 seconds)
  done (took 15.985587766 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.16770998 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.035334685 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.188485611 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.120189244 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.031890724 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.034207596 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.005898425 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.005442396 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.097969922 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.005191365 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.012036446 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.006555157 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.005835133 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.00449287 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.004858282 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.006322977 seconds)
  done (took 54.682576957 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.010516327 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.010061798 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.010063915 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.005626755 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.022021922 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.086212864 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.031598808 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.013328902 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.023004502 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.040723347 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.026953402 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.014183442 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.016931722 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.014491886 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.102092985 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.054046657 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.067618172 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.083867602 seconds)
  done (took 38.564137423 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.08792396 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.020451422 seconds)
  done (took 11.044960885 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.015533937 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.01682492 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.021236965 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.011710484 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.033353311 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.023897453 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.04277247 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.004364381 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.017610571 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.003483825 seconds)
  done (took 72.1262282 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.009360593 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.009400549 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.266496088 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.016780565 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.017309545 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.035234755 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.008200686 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.0400169 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.012104921 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.006438854 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.019003961 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.27579206 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.020540436 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.008573437 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.424605816 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.021193201 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.013696877 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.041932194 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.04650849 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.011541368 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.992546082 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.003306414 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.170709512 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.715482564 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.011606801 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.014334667 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.015947951 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.007379169 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.00640074 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.009986294 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.011346435 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.009638419 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.015641421 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.006684731 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.015160387 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.012919597 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.495683358 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.03250486 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.015346654 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.105279869 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.054788147 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.015586032 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.800489795 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.010661253 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.010959798 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.01714029 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.691504383 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.10601612 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.009008751 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.190724325 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.344174791 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.022624342 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.164842632 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.218718672 seconds)
  done (took 140.562231159 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.005461613 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.24320079 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.124998771 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.008804019 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.263968327 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.215243617 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.007534138 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.052498754 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.008000931 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.209461676 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.259643461 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.110286542 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.011437678 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.009647771 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.00810405 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.007441471 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.154328653 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.075340401 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.009724355 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.01122982 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.033817587 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.211300703 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.128956585 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.010824088 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.038100706 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.214659562 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.126507626 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.109202074 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.796032681 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.007535282 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.074337235 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.010232939 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.010943725 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.008370507 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.162637704 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.101683986 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.09245889 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.013276062 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.009281613 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.008620018 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.685728362 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.208904742 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.103337546 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.131744204 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.259224682 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.224242881 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.623759396 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.00990049 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.639891431 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.17551407 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.215815122 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.217500528 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.111800275 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.015777675 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.297520357 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.012690945 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.009950511 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.233636868 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.229501353 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.109161063 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.015794243 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.013584851 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.011140388 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.249914037 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.015451333 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.106343404 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.015120631 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.012633865 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.103342505 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.111843804 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.238692863 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.231383494 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.042096058 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.332151957 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.502350565 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.213923397 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.075390845 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.229528214 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.015018717 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.013605321 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.091034693 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.850955046 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.262755556 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.251979658 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.210723376 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.029681431 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.664240594 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.01243914 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.200008327 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.200578729 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.24639061 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.255930423 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.249201737 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.36755552 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.012667415 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.013055315 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.316907236 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.129134573 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.959679281 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.364402454 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.240279796 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.54973316 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.038670095 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.295648609 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.140914093 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.017230137 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.661006911 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.016555343 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.21821129 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.053725629 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.016126817 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.013431017 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.202641491 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.920258181 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.016588886 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.7217424 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.073759802 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.018914117 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.21821986 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.016526854 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259522903 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.01761266 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.246550907 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.635939673 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.044620417 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.188281642 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.25915945 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.652206248 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.305545041 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.254148809 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.127213698 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.236120677 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.824571982 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.016425051 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.27645245 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.015093618 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.013768516 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.183744658 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.015461612 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.156286793 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.016334645 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.280035941 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.035636037 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.242386155 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.018644286 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.252579196 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.047200386 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.063258097 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.017933576 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.141815365 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.01730425 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.851222157 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.172339648 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.02007128 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.016741307 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.60761916 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.018072291 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.167981617 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.243908205 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.033200378 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.083573158 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.578437884 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.010582682 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.098433615 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.033681084 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.291468702 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.012909212 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.260977218 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.98513855 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.482720091 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.013950622 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.246140473 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.194602945 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.013560025 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.008635291 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.851178679 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.010293928 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.011981995 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.169249775 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.405774078 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.908693828 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.207047312 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.017367 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.141190001 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.01433376 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.088795448 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.353315265 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.00955091 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.011491483 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.015329416 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.011391233 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.014729594 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.217969822 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.038013927 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.454250695 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.148623443 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.266966544 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.317865478 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.20945583 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.052394061 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.016363979 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.234917584 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.016087226 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.074536148 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.016720748 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.032932606 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.244475905 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.016015423 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.215712252 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.24767876 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.902165567 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.059504753 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.014979999 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.017701143 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.927961689 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.155073895 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.09878954 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.016791789 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.015552524 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.125657418 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.130577474 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.19553881 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.833179782 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.141303921 seconds)
  done (took 932.116047188 seconds)
done (took 1266.99649556 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.012877431 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.016420435 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.016427721 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.018229896 seconds)
  done (took 30.003557506 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.013621203 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.014881769 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.016151992 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.015544107 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.015415031 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.015467346 seconds)
  done (took 14.030103223 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.011764902 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.018209252 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.019237805 seconds)
  done (took 22.988061527 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.43563699 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.418882618 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.0924468 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.158746959 seconds)
  done (took 11.046084545 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.018554111 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.017682597 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.01721359 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.016139907 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.018679282 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.016918091 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.017218364 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.017908498 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.01655535 seconds)
  done (took 20.103817179 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.209995975 seconds)
done (took 104.32328971 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.121473667 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.035352992 seconds)
    (3/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.503530916 seconds)
    (4/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.13321372 seconds)
    (5/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.285792562 seconds)
    (6/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.603120187 seconds)
    (7/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.11148626 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.132591552 seconds)
    (9/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.172545813 seconds)
    (10/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.098455108 seconds)
    (11/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.033903177 seconds)
    (12/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.031434561 seconds)
    (13/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.02217515 seconds)
    (14/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 11.292608932 seconds)
    (15/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.221343982 seconds)
    (16/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.89839239 seconds)
    (17/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.122213659 seconds)
    (18/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.423938707 seconds)
    (19/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.468386925 seconds)
    (20/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.137792054 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.041396191 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.019955221 seconds)
    (23/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 3.782106114 seconds)
    (24/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.100704979 seconds)
    (25/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.657809557 seconds)
    (26/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.131827924 seconds)
    (27/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.28533337 seconds)
    (28/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.829449578 seconds)
    (29/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.498903451 seconds)
    (30/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.131126777 seconds)
    (31/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.243244599 seconds)
    (32/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.106935144 seconds)
    (33/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.880742203 seconds)
    (34/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.071035528 seconds)
    (35/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.02095976 seconds)
    (36/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.136084559 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.120605612 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.059713543 seconds)
    (39/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.027132831 seconds)
    (40/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.162073978 seconds)
    (41/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.440078818 seconds)
    (42/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.021700165 seconds)
    (43/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.640405937 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.106549618 seconds)
    (45/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.25985303 seconds)
    (46/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.158718958 seconds)
    (47/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.265490932 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.33807644 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.313463854 seconds)
    (50/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.02506772 seconds)
    (51/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.310886963 seconds)
    (52/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.02323859 seconds)
    (53/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 3.745141561 seconds)
    (54/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.02350624 seconds)
    (55/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.102775265 seconds)
    (56/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.118578842 seconds)
    (57/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.12671963 seconds)
    (58/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.609129904 seconds)
    (59/341) benchmarking ("sort", Float64, false)...
    done (took 5.704649638 seconds)
    (60/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.037971713 seconds)
    (61/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.223571933 seconds)
    (62/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.040487206 seconds)
    (63/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.023437152 seconds)
    (64/341) benchmarking ("sort", Int8, false)...
    done (took 4.955621785 seconds)
    (65/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.038534609 seconds)
    (66/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.21228099 seconds)
    (67/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 2.984274953 seconds)
    (68/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.028080043 seconds)
    (69/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 8.364816863 seconds)
    (70/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.064289236 seconds)
    (71/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.038003622 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.04593791 seconds)
    (73/341) benchmarking ("sort", Float32, false)...
    done (took 5.702375165 seconds)
    (74/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.405908934 seconds)
    (75/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.532415017 seconds)
    (76/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.037716717 seconds)
    (77/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.404952367 seconds)
    (78/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.112330452 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.417174456 seconds)
    (80/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.371996831 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.160874698 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.673603314 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.916201439 seconds)
    (84/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.366627594 seconds)
    (85/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.419360564 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.357532349 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.053386233 seconds)
    (88/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.388361227 seconds)
    (89/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.156408178 seconds)
    (90/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.112609595 seconds)
    (91/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.024200429 seconds)
    (92/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.035336753 seconds)
    (93/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.183608821 seconds)
    (94/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.110534869 seconds)
    (95/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.362677369 seconds)
    (96/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.567929844 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.907557332 seconds)
    (98/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.0501234 seconds)
    (99/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.03641542 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.416549042 seconds)
    (101/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.141725886 seconds)
    (102/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.165765683 seconds)
    (103/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.130572873 seconds)
    (104/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.09161463 seconds)
    (105/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.225307377 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.956418421 seconds)
    (107/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.255266129 seconds)
    (108/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.66820932 seconds)
    (109/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.035134049 seconds)
    (110/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.128912038 seconds)
    (111/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.104410575 seconds)
    (112/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.291696018 seconds)
    (113/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.112955883 seconds)
    (114/341) benchmarking ("sort", BigInt, false)...
    done (took 7.025913428 seconds)
    (115/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.418022807 seconds)
    (116/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.234660461 seconds)
    (117/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.125820525 seconds)
    (118/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.177462368 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.332109681 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.298526367 seconds)
    (121/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.043335414 seconds)
    (122/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.280705261 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.152564044 seconds)
    (124/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.29013998 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.165261908 seconds)
    (126/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.372515492 seconds)
    (127/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.663864028 seconds)
    (128/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.244273597 seconds)
    (129/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.340241103 seconds)
    (130/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.907814972 seconds)
    (131/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.161732431 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.043614041 seconds)
    (133/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.922138638 seconds)
    (134/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.164712015 seconds)
    (135/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.298335364 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.622156029 seconds)
    (137/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.154357635 seconds)
    (138/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.125942482 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.350515041 seconds)
    (140/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.279690793 seconds)
    (141/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.148246255 seconds)
    (142/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.921157818 seconds)
    (143/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.034516514 seconds)
    (144/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.374738722 seconds)
    (145/341) benchmarking ("sort", Bool, false)...
    done (took 2.245263836 seconds)
    (146/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.032710254 seconds)
    (147/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.253861298 seconds)
    (148/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.988345859 seconds)
    (149/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.352510888 seconds)
    (150/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.050398254 seconds)
    (151/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.042177424 seconds)
    (152/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.03064522 seconds)
    (153/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.392214753 seconds)
    (154/341) benchmarking ("sort", Int64, false)...
    done (took 5.675301112 seconds)
    (155/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.181099263 seconds)
    (156/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.046958473 seconds)
    (157/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.041084931 seconds)
    (158/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.300250708 seconds)
    (159/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.781467544 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.374157216 seconds)
    (161/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.032263467 seconds)
    (162/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.166767192 seconds)
    (163/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.303344838 seconds)
    (164/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.327017402 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.350879207 seconds)
    (166/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.239727178 seconds)
    (167/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.031824191 seconds)
    (168/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.163116026 seconds)
    (169/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.04711078 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.130142121 seconds)
    (171/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.22779371 seconds)
    (172/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.183282721 seconds)
    (173/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.033007 seconds)
    (174/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 3.707905732 seconds)
    (175/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.581927085 seconds)
    (176/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.158640707 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.166540582 seconds)
    (178/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.900012887 seconds)
    (179/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.27849006 seconds)
    (180/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.113685955 seconds)
    (181/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.159738266 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.05249681 seconds)
    (183/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.228468766 seconds)
    (184/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.244336474 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.34515033 seconds)
    (186/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.383637204 seconds)
    (187/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.504323149 seconds)
    (188/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.100363758 seconds)
    (189/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.801262855 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.030346118 seconds)
    (191/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.034329394 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.24581835 seconds)
    (193/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.190286133 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.287306456 seconds)
    (195/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.368529599 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.035370337 seconds)
    (197/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.033699555 seconds)
    (198/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 8.515898227 seconds)
    (199/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.506793027 seconds)
    (200/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.035509461 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.654234673 seconds)
    (202/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.215995261 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.030504907 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.063236255 seconds)
    (205/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.781826941 seconds)
    (206/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.093977641 seconds)
    (207/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.448097468 seconds)
    (208/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.038977716 seconds)
    (209/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.152814646 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.900353305 seconds)
    (211/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.055617161 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.625975586 seconds)
    (213/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.312045437 seconds)
    (214/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.104675064 seconds)
    (215/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.110011934 seconds)
    (216/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.227945631 seconds)
    (217/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.033779538 seconds)
    (218/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 4.424296734 seconds)
    (219/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.049931066 seconds)
    (220/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.993848019 seconds)
    (221/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.120315218 seconds)
    (222/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.250408801 seconds)
    (223/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.367493467 seconds)
    (224/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.280167282 seconds)
    (225/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.297399869 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.372104096 seconds)
    (227/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.93206289 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.191385673 seconds)
    (229/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.302042687 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.048173343 seconds)
    (231/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.355269646 seconds)
    (232/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.948256763 seconds)
    (233/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.037396038 seconds)
    (234/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.230494105 seconds)
    (235/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.158212088 seconds)
    (236/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.15535704 seconds)
    (237/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.118500358 seconds)
    (238/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.03615108 seconds)
    (239/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.442526945 seconds)
    (240/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.344270184 seconds)
    (241/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.352311122 seconds)
    (242/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.189717189 seconds)
    (243/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.859939251 seconds)
    (244/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.042790323 seconds)
    (245/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.242183728 seconds)
    (246/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.258962944 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.292564051 seconds)
    (248/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.514502518 seconds)
    (249/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.784681643 seconds)
    (250/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.33463215 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.799143711 seconds)
    (252/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.246309385 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.040316571 seconds)
    (254/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.110130129 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.051090456 seconds)
    (256/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.213032314 seconds)
    (257/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.453671951 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.037756884 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.112811903 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.163216182 seconds)
    (261/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.460225902 seconds)
    (262/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.218123073 seconds)
    (263/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.038547723 seconds)
    (264/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.203814833 seconds)
    (265/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.113854409 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.348644599 seconds)
    (267/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.050252773 seconds)
    (268/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.295956096 seconds)
    (269/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.05001728 seconds)
    (270/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.136784746 seconds)
    (271/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.322443754 seconds)
    (272/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.821653649 seconds)
    (273/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.266270941 seconds)
    (274/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.354130921 seconds)
    (275/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.159313082 seconds)
    (276/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.040093068 seconds)
    (277/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.441145248 seconds)
    (278/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.24775808 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.013811888 seconds)
    (280/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.513959749 seconds)
    (281/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.124985401 seconds)
    (282/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.175634202 seconds)
    (283/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.35001199 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.438944424 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.041706132 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.096442764 seconds)
    (287/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.134891816 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.963661892 seconds)
    (289/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.498097913 seconds)
    (290/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.038303754 seconds)
    (291/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.171990366 seconds)
    (292/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.035257727 seconds)
    (293/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 8.42559037 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.127069765 seconds)
    (295/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.039625483 seconds)
    (296/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.04422474 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.52796 seconds)
    (298/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.322440026 seconds)
    (299/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.381559473 seconds)
    (300/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.530551955 seconds)
    (301/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.591411574 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.161488783 seconds)
    (303/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.039896653 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.274683646 seconds)
    (305/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.05324697 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.289375103 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.140858833 seconds)
    (308/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.039547022 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.056027032 seconds)
    (310/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 4.186923052 seconds)
    (311/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.122787238 seconds)
    (312/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.354774131 seconds)
    (313/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.438044435 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.040057521 seconds)
    (315/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.459910471 seconds)
    (316/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.732743801 seconds)
    (317/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.337955378 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.168400874 seconds)
    (319/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.039893536 seconds)
    (320/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.758937435 seconds)
    (321/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.046549231 seconds)
    (322/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.38207686 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.938167635 seconds)
    (324/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.040639736 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.814541984 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.380998572 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.917202804 seconds)
    (328/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.200863111 seconds)
    (329/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.117033173 seconds)
    (330/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.056943016 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.433913394 seconds)
    (332/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.061943522 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.772339141 seconds)
    (334/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.044102026 seconds)
    (335/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.464798591 seconds)
    (336/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.431002299 seconds)
    (337/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.793604873 seconds)
    (338/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.131435916 seconds)
    (339/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.428291929 seconds)
    (340/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.054415287 seconds)
    (341/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.348353161 seconds)
  done (took 1149.03095968 seconds)
done (took 1151.07444647 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.066523212 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.043954914 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.528881238 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.053753784 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.044728009 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.047095067 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.538440111 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.073061124 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.059563827 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.538719352 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.051361907 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.043391109 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.060049009 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.075915603 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.054621075 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.059636121 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.050790959 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.068261929 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.077098792 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.050074014 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.096244251 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.051189538 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.044087938 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.09622866 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.042640396 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.05881601 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.062866085 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.096543363 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.09573384 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.046368654 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.049558179 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.398386789 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.088290695 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.04915002 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.057434406 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.060005152 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.050148275 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.059886606 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.062107542 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.059356831 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.045162388 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.055493495 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.04981604 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.047354563 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.046754611 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.042271505 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.047475315 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.170656583 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.060925574 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.38153434 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.093280958 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.064365195 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.095154787 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.048454313 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.047729731 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.046024025 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.097465717 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.049750507 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.048945824 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.381242079 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.132157894 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.061026286 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.380739193 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.100177404 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.055940775 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.05606698 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.044647191 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.064089028 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.397876184 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.573690982 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.077162957 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.067473917 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.048490127 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.047083397 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.060024752 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.537641118 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.060396268 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.606755676 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.066281149 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.062473787 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.049155734 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.046848725 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.045542622 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.063690306 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.066787831 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.048087052 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.052818615 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.053451477 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.060914008 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.402831346 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.084124084 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.533784188 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.05437018 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.066807843 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.068196568 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.609280162 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.070094983 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.065146298 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.051156128 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.402583133 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.08039286 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.067362411 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.050353228 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.060388751 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.163253142 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.065621439 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.0671119 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.048605236 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.070255181 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.055098709 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.048750059 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.062255471 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.069027902 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.084813847 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.066291084 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.04845114 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.057708173 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.054005572 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.066173174 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.057897548 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.055982706 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.060415562 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.049934981 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.099398899 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.06822801 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.06480003 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.162076616 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.054901554 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.175402009 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.064585021 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.054385792 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.050012411 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.383034822 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.086883503 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.071857999 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.057086661 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.075159203 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.07136904 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.066779125 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.053432031 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.064880426 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.054150187 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.104705855 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.049766129 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.075610728 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.102423489 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.063969779 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.058187641 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.068534435 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.087256118 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.069899991 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.054221398 seconds)
done (took 322.52778502 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.098854522 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.047106972 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.127623316 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.052099281 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.112855783 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.103091683 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.0503036 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.050328123 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.05141203 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.449508485 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.051877666 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.057124763 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.050109207 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.051926161 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.103108586 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.048960482 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.051739115 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.290096942 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.05193896 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.111163287 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.050239936 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.050627219 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.051924317 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.450812018 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.050697362 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.051138746 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.111566454 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.053137503 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.292196514 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.051553746 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.047810037 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.29383778 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.112018002 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.065290911 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.06081445 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.062685626 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.120542872 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.062288017 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.102091169 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.100326173 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.13002895 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.085238629 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.053201191 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.053192796 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.057051809 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.054772298 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.053512386 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.086491929 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.052068764 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.058691159 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.289515205 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.062387867 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.059755394 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.053197564 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.054158044 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.069691825 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.055409798 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.056067433 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.114171926 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.054727507 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.101120314 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.452522328 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.453499516 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.0546002 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.052526913 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.05599338 seconds)
  done (took 195.951499271 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.121068111 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.127868862 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.124417784 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.058807208 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.103000207 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.118466924 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.059440837 seconds)
  done (took 16.688467072 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.0605342 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.055211284 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.078011982 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.077558512 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.054345426 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.196199801 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.065967818 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.061280414 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.080678875 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.055528155 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.392182669 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.077998187 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.059968086 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.054927126 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.067317476 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.084381918 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.057499111 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.056971903 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.15171753 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.134016252 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.061229036 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.062890125 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.084862065 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.066509316 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.056966395 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.057439285 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.056546842 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.061841074 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.056810573 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.055374172 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.055279775 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.069989999 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.057983238 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.057948269 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.057174927 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.058097349 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.056354715 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.056684368 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.035734585 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.05276515 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.044223866 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.05687749 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.057781451 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.056612207 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.056176823 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.079829609 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.057671775 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.057694278 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.057164052 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.05765717 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.086033402 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.057110696 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.05985104 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.063436961 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.099247648 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.061738448 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.057956457 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.056618931 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.058764261 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.058069104 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.058987178 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.136887213 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.081280453 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.05867681 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.082217359 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.095792613 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.059735255 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.059162556 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.058637871 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.082472698 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.058434743 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.081678789 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.059321825 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.159264258 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.058743058 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.206765991 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.081439536 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.063780283 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.063340906 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.059559448 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.066798466 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.061217261 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.061700283 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.066309024 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.064242848 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.059623797 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.06014533 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.061400101 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.067883564 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.058281527 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.105660047 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.059164548 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.061569646 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.158314076 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.060490206 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.158193547 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.085743874 seconds)
  done (took 223.303336631 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.064896935 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.062149778 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.074735194 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.062496338 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.060523637 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.065529612 seconds)
  done (took 14.371299773 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.063667442 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.063497465 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.060713898 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.060794902 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.059786756 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.061552288 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.062098174 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.062820115 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.065718865 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.060202345 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.061296659 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.061883858 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.060572543 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.062266408 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.061751334 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.062253798 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.061711059 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.060295359 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.061563233 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.061116872 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.266888963 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.061798547 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.062159086 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.066018613 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.064940443 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.062631505 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.071145528 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.061090425 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.061600219 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.06639182 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.066326391 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.062239937 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.067053862 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.068171864 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.066121387 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.064537674 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.066363967 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.062755038 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.061845869 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.061713704 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.062742459 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.062603396 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.063810967 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.064083542 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.064298963 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.065399565 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.065859277 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.072161074 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.063279147 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.063608438 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.064639819 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.063782273 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.058046417 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.056811173 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.068106944 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.070501281 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.06784187 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.064122597 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.063083834 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.067337963 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.066954673 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.062860891 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.066731674 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.068991309 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.071112128 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.065167015 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.067156806 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.056459097 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.065107974 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.063757698 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.065964457 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.064489222 seconds)
  done (took 151.788650335 seconds)
done (took 604.080718161 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.120832865 seconds)
  done (took 9.083292421 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.237750628 seconds)
  done (took 9.324990447 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.329432275 seconds)
  done (took 12.3188803 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.091555305 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.126766289 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.072245395 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.072629698 seconds)
  done (took 30.360898062 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.26335912 seconds)
  done (took 9.251915005 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.07363063 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.06305755 seconds)
  done (took 16.191443341 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.148690588 seconds)
  done (took 9.136985425 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.561065334 seconds)
  done (took 9.571121068 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.07300705 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.082872303 seconds)
  done (took 16.164485898 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.068740394 seconds)
  done (took 9.056067578 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.861190268 seconds)
  done (took 9.940431237 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.074066781 seconds)
  done (took 9.079545374 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.090476332 seconds)
  done (took 9.07969419 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.957806105 seconds)
  done (took 9.945916942 seconds)
done (took 170.495024455 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.071832488 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.068579626 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.065115481 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.063242015 seconds)
  done (took 30.256630059 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.102465263 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.101671781 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.11039658 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.101093382 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.093136884 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.092180454 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.102052054 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.10231153 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.092573686 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.099784753 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.101294653 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.097204161 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.098872508 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.109236696 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.108204818 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.097950316 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.100851591 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.101964294 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.090894708 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.109095116 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.097589846 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.099080466 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.066130971 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.067103159 seconds)
  done (took 52.330135413 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.257141295 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.132574851 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.218877168 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.111961486 seconds)
  done (took 10.709000885 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.066239823 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.131241944 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.118194308 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.112024994 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.159884735 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.168878777 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.120773492 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.27673643 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.182035504 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.193565993 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.073367814 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.089741892 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.090923045 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.112250858 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.17001875 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.067321657 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.067197926 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.209358465 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.129493584 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.277046425 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.066987097 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.120520282 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.151745439 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.119134087 seconds)
  done (took 53.26274387 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.067546812 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.075477119 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.075847089 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.068842996 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.070310998 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.069772178 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.074832116 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.07048695 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.090359808 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.070325076 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.068424227 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.07009463 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.075965514 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.068895875 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.069784521 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.081790156 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.083371875 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.069257787 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.072854452 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.075915776 seconds)
  done (took 43.461198639 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.0661166 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.915283651 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.413831358 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.319087108 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.06646134 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.0696613 seconds)
  done (took 32.840551539 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.079737285 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.083874562 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.074183186 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.091396488 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.113833791 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.073502431 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.129915504 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.206729296 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.073783535 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.125988691 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.084739427 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.073783204 seconds)
  done (took 27.201872129 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.067561142 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.069819515 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.070775729 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.081256544 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.079722415 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.075113706 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.076169281 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.068575463 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.082483382 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.086270812 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.076886902 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.080116228 seconds)
  done (took 46.907673876 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.282994413 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.296350764 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294843245 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.534826781 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.384414725 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.049998678 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.3560764 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.281725817 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.822121905 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.847503387 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.370756084 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.050045022 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.013311817 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.994412396 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.987927821 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.310493951 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07176169 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.928255943 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327502922 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118672826 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07257908 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.070100213 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.071759647 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.360809998 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.397683322 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.073876128 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.28430936 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086478321 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.070765446 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.294412259 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.432637996 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.118892627 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.273938254 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.327038477 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.412471305 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.131534665 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.182598776 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.119412991 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.109174437 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.106408581 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.081341088 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.081169731 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.579752195 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.082926098 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.34367346 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073134069 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.075958913 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.17480825 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.997379419 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.444143473 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186539066 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.06886718 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.107142853 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.500697504 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189763777 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.313361318 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.07572996 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.120598189 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1241909 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.370547294 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.18251722 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.182725782 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.284398909 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.998391759 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.445217057 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198156193 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.074384231 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.077075331 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.772485911 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.313949498 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.153590433 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.439780104 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.835335653 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.072922458 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.074824806 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.114880885 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162426392 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.072819083 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.365762927 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.049346498 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.999305175 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.173767782 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.474253265 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.076568614 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.071828912 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.080783436 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.91878119 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.999349588 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.17036856 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.373295759 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.398138465 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.073473461 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.074250357 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.096832526 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075733523 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.022042142 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.508954716 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.135809682 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.001103137 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.635385146 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.418981675 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.035901574 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.438665621 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.111762091 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.35526806 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.216878486 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.480031837 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.28344468 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.319160173 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.608635605 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079359271 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.632780402 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155261125 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150497885 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.074027177 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.633017709 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.128003744 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.414066814 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.19165777 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.074866497 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.001934137 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.087013965 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279323856 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.425486294 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125431107 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.0756861 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.08222278 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.074801569 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.078250085 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.237328726 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09154218 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.367978594 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.149254313 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.077815922 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.012061115 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.079765447 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.358496143 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.524868765 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.132028693 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331987873 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.341864764 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.77597302 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.673564891 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.118313661 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.347384808 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.148534402 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150868769 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.649821628 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.209830065 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.174070705 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.009371832 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.214539489 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.083848688 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.079207436 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.253220839 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.486385124 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.50508894 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.118617257 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.077002607 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.03072132 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.139315866 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.316137181 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.153827598 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.106000166 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.082644023 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.161071851 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.304612324 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.078104455 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.003439847 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.330576684 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.323772798 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.37057874 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.489061466 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150697711 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.151879421 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.088823471 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.291057528 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.161090185 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.72539478 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.623985724 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.302304741 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.531299536 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.038217774 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.722673451 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.388429012 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.462838678 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095975611 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.533772636 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.131713803 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.628878671 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.108877766 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.609495731 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.007797717 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086907992 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424113789 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.040675523 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.395956205 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.145076332 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137186726 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.084381006 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.083738523 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090392823 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.011563748 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189380686 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152845764 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.157005125 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.009787767 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.598905336 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.118591362 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.085625566 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.083762324 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.423914023 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.92933064 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.035477241 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.083870616 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159582047 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.825940793 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.628252284 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.087877996 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.085988276 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.678774338 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.089305406 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.995241155 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.08749157 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.958907337 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.110302534 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.393605737 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.784516266 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37451067 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.160226793 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.160019279 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.084880382 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090775628 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.785429066 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093576205 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.787147843 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.370087939 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.359777373 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.533035242 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.152209099 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.295052183 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.098941325 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.084411554 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.589238622 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.110609868 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088434877 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.289884342 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.599945527 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.453552601 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.729284186 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.170874944 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.085463588 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355538738 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.087873734 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.433503654 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.776371133 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.097177273 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.086228634 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355222223 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.771658924 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.08754896 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.997810981 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094353153 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.299102896 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289348482 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.36839635 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.390816107 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.535945217 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.014303636 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.091228574 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.108770785 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.330716703 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.08737924 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.121649078 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.531666995 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.16056179 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.515699859 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.372618069 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.518329598 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.719880398 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.356622451 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.151446931 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.098835991 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.747348007 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.224316 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.01858191 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204500507 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.013736617 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.786277588 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.377858096 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.104821886 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.357422019 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068687034 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.427507489 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.384924129 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.401884736 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136817111 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.116725937 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.043096628 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143093658 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.088151325 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.151685645 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.19994271 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.094287901 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.503270883 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12443646 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.135158672 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.09439919 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.610574854 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109628435 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.091974318 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.781521139 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.114818828 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208308508 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.160575961 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.853203615 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.465386412 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.112696307 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.963580734 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.74036197 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.359825748 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.145300515 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.544973851 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129966514 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.495252104 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.089905439 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.301749046 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.095661774 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.532799179 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129817822 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.365997502 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.048506564 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.301674043 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300743935 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.115467044 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.096985169 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.016059943 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.196735916 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.964589375 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.073600748 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.092213062 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.772363675 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.540708919 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.175525972 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.559506539 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.911774345 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.093984474 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.453205378 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.485276109 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.585629966 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118296597 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09248009 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.4543861 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.223621743 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.440067459 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.383473862 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.098376203 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.117542359 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.305255634 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217122475 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.01036076 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.580411664 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675296252 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.793485455 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.104142809 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.296662047 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.466331148 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.258650677 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.121901121 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.170084797 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.497143237 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.360840804 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.161085533 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.019060201 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092857841 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.486029103 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.487324218 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.190112705 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.331797746 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.412442385 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.513508428 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.454989491 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.405863111 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.498350191 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.503599819 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.487880222 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311099756 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.467758315 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.420575774 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.684985553 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.504747502 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.306204346 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.186343257 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382062378 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.971730641 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.802263448 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.337993233 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.099220132 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.021566396 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.30090243 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.099020945 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.37726633 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.615269362 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.34045991 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.412791104 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.564826588 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.631920259 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.167440732 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114868214 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.058739829 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.118317317 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.113789447 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.095793586 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.583555949 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.387236429 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.108089748 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033459127 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.766855669 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.022554136 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.308113813 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.162903779 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.12399307 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.651085638 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.397829592 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.19563946 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.384723615 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.211737734 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.125126531 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.021279681 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.854248417 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.04128849 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.16569294 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.521446584 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112262792 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.099099551 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.298959454 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.025013142 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141606502 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.101144194 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.307378286 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.680578158 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.370076667 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222258684 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345542732 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.400400988 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.968024249 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123393934 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.369074988 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.023557152 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.606929675 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.788855512 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.138070974 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170260683 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096114644 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.098906684 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368828774 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.468594626 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.198399611 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.564715804 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.12464422 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.121213397 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.461484954 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.190167816 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.099828049 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.102586394 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.461160364 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.325170138 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.098684138 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.08687188 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.311588127 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173573557 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.293929881 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171347818 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.611535795 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.102888276 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.959614256 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.198643319 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.048114458 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.044893263 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.87276509 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.159488433 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.107814699 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.373228685 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.751347906 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.301670034 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.494521477 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.962037299 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.164627333 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.135226577 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.101683217 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.105349368 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.490269807 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.40414416 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.099461382 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.374419731 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.148749437 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.105477351 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.760722383 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.06917805 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.099484745 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.792682934 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.981288805 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.828721711 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.494750977 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.113530368 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131485402 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102441541 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.028530068 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.149641355 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.230538335 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.081051635 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.104192078 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.479415887 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.464857335 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.192306594 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.102003593 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.102611209 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.105981503 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.313918183 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.615292879 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117805894 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.801444137 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.305401608 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.103685855 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.590616573 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.550497571 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.24206992 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.130196509 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.171166407 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.345242843 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.643689921 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.178671058 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.069476302 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.32850196 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.103413419 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373015987 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37577337 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.10263018 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.315154832 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.460533446 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.380738301 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.457003868 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.415197388 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.167371844 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.178185609 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.035250336 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.10943328 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.103870305 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.373863743 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157198637 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.101066835 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.110978434 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.653348098 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.858375379 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.573974666 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261062341 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.470015008 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.951392879 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.855795184 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.105581887 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.029585192 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.102204199 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.128352336 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.106383038 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.029621372 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.802278117 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.825416269 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.315068137 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.415186525 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.029944028 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.308148883 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.688078524 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.030616725 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.072582072 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.064519159 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.369614143 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033008155 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.107622969 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.057996203 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.435046405 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.709771385 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.369540426 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.104577829 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047655285 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.108358234 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.107521452 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.104245729 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.188728328 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.10482581 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220933583 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.373959993 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.526050219 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.211397736 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.744135035 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.803607634 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.042670915 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150732356 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.661888858 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.673285014 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.4296321 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.205389067 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.805407244 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.050727373 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.1054324 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122610246 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.361006945 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.108270961 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.109274991 seconds)
  done (took 2207.276059355 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.150932243 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.26370784 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.201465732 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.495249818 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.146133252 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.15833324 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.138923838 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.124937376 seconds)
  done (took 59.707436621 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.123126413 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.209060796 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.131168698 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.122372354 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.123900506 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.140774529 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.377773156 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.153908601 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.122104278 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.127438382 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.12341681 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.124725347 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.119756479 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.122592649 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.134524727 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.453195064 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.146662149 seconds)
  done (took 80.902351332 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.187178152 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.998776035 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.129513296 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.783108682 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.143544821 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.504477835 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.128915183 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.126164491 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.248581345 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.429198127 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.130782867 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.14327199 seconds)
  done (took 93.016954753 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.125575258 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.126235187 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.125929238 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.126953326 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.127365615 seconds)
  done (took 12.67559458 seconds)
done (took 2752.596518289 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.369986503 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.224227978 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.202913334 seconds)
  done (took 6.473850877 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.267731009 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.31606567 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.429098533 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.456161324 seconds)
  done (took 11.521772494 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.416319958 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.498778861 seconds)
  done (took 6.959969423 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.539845548 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.13460211 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.515455803 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.12861058 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.134006548 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.130963185 seconds)
  done (took 23.444309748 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.126570963 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.127437609 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.12926253 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.125304068 seconds)
  done (took 10.55464751 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.125273374 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.906915387 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.12673642 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.135457567 seconds)
  done (took 22.341748975 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.307933671 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.232060194 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.895044927 seconds)
  done (took 10.482513032 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.751475061 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.572698113 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.995098277 seconds)
  done (took 10.365125471 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.958210132 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.945757012 seconds)
  done (took 7.951131655 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.267362888 seconds)
  done (took 4.314233842 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.965397114 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.44018945 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.610434168 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.660193599 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.717440764 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.348404522 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.461730501 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.40322775 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.534556031 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.537892216 seconds)
  done (took 27.728348181 seconds)
done (took 158.74787528 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.576247469 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.15668277 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.340320853 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.509895187 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.371978306 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.350040889 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.41542029 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.495945937 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.181198135 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.16367137 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.506415159 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.370050432 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.355542091 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.148573497 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.365013005 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.151710353 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.371009148 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.594605948 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.184844119 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.424363388 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.417002841 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.146124841 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.348936501 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.16514109 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.372896051 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.297558011 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.762286582 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.156297109 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.333670126 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.776910174 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.298786159 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.577842328 seconds)
  done (took 177.73060145 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.135445001 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.131297465 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.130744719 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.132230252 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.499844543 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.13125842 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.137863462 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.131314075 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.350764982 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.339460744 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.13151687 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.487507025 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.132939064 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.132317934 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.135491485 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.137994686 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.479232065 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.133606371 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.138910035 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.132342876 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.132613098 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.374597808 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.13235912 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.39091104 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.452032704 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.132685412 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.132371974 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.132143995 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.132098473 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.12898591 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.136522023 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.132273854 seconds)
  done (took 216.623044116 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.131782394 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.133003522 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.139910035 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.13294231 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.133706344 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.134678824 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.135886909 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.133393898 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.926511016 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.932026093 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.133580262 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.139184871 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.146066364 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.132929357 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.146186282 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.133414274 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.143753925 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.135837595 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.13268209 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.136617769 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.134585564 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.855616855 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.136869728 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.892836927 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.133033431 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.137922089 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.134059544 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.13213324 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.132185465 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.132073264 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.135919017 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.132978157 seconds)
  done (took 229.457401784 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.373420464 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.134593246 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.1350097 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.151289963 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.135049768 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.13454567 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.138622163 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.385755239 seconds)
  done (took 21.641748882 seconds)
done (took 647.512634775 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.500483549 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.877235447 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.272829887 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.161027248 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.376656582 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.201989319 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.152953686 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.217563978 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.801514036 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.222965337 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.551138067 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.162971403 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.849918748 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.181709323 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.268728757 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.210520372 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.497287238 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.752952874 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.292180927 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.817047022 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.368486979 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.10815454 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.234485411 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.842086015 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.566461171 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.124687303 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.175388569 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.502422965 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.159065349 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.391401763 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.813021522 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.419475214 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.172554956 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.156712435 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.209330235 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.186641721 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.354381611 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.167557542 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.269252212 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.903442557 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.812197948 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.685737512 seconds)
  done (took 111.048330379 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.142446874 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.143629751 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.143744777 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.142802982 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.151630427 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.142985973 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.142684562 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.141190072 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.14296712 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.142517965 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.143697928 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.152053813 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.142177958 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.150193103 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.143154247 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.144892803 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.142587044 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.150710704 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.144526488 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.143584624 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.143480223 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.143075917 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.13915256 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.143532642 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.14380674 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.14324413 seconds)
  done (took 57.815003085 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.137791568 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.29004053 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.41490649 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.171529439 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.139854883 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.141188441 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.167778205 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.146331203 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.140970008 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.14148986 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.232173152 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.14504493 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.151807723 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.412713066 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.168443237 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.139613921 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.138791167 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.139565676 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.29681602 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.153167153 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.167453193 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.145986418 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.168732451 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.153375209 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.140237779 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.140402048 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.140431936 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.547678683 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.152590012 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.230848647 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.193182762 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.17259943 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.482473539 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.423437027 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.207678901 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.14583905 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.139340558 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.278455838 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.151458044 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.142737014 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.16716902 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.14879149 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.41571686 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.645346928 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.155203715 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.139403685 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.54384644 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.292198923 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.18784306 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.155171189 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.423935012 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.17260745 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.139374619 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.141780911 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.17708175 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.154396595 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.143033032 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.387459838 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.151812702 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.168546635 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.147533746 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.142305659 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.303108423 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.15213732 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.293556958 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.149634486 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.146163261 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.142810938 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.42037177 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.171513307 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.639451212 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.155684791 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.140895675 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.234627481 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.298884535 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.572324811 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.156676924 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.306581698 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.501719471 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.180252595 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.153451105 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.535825044 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.183863647 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.154449957 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.142556559 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.12918555 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.141710553 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.184967191 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.168877105 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.559987992 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.642216806 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.402815083 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.182814231 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.156277746 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.146178767 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.387950106 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.153712484 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.142204697 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.414261526 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.669059541 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.1581888 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.149504348 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.624494623 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.159928544 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.173671817 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.155953471 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.433816872 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.17316813 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.186400333 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.143029039 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.149092583 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.145997112 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.173751697 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.156062019 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.143714827 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.61414314 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.296719538 seconds)
  done (took 264.113817949 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.146123294 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.142398354 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.142544192 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.143969898 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.141813181 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.143552103 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.144345209 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.143574036 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.144107564 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.14318287 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.142562943 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.146354247 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.144697079 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.146912801 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.180568673 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.146252072 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.634174208 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.143237066 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.144884866 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.145673007 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.717106635 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.152360208 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.145126859 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.146260992 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.14450487 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.146301517 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.146941372 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.178850423 seconds)
  done (took 175.259310521 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.147496031 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.20003151 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.159757256 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.193870096 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.15874586 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.146799455 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.170635128 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.162928308 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.152325067 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.145961253 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.146371118 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.177695139 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.155247791 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.242104896 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.177937901 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.180404806 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.247210302 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.154801626 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.147374963 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.148804626 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.19482634 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.162193059 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.177305939 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.19474539 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.161029078 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.201879346 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.153999756 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.148794139 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.142004956 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.261132565 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.166461724 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.181047614 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.183598873 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.168713458 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.264915223 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.263910724 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.251513789 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.17935236 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.151546732 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.148626539 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.148368362 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.149255266 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.204834108 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.161942153 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.148557635 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.263638726 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.166347347 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.147969261 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.171222137 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.148107637 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.160390735 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.168063308 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.183359662 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.272295298 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.195805514 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.177037701 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.17401741 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.166904575 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.150105189 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.243684903 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.15585323 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.264200849 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.170660927 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.151333325 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.149944956 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.152852638 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.198117422 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.18707411 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.248777726 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.157209825 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.245029497 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.204023675 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.163581559 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.15043348 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.150387239 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.202872762 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.259359842 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.2029544 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.212773052 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.185200339 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.160519556 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.149729243 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.151502835 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.177105798 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.15859642 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.264088185 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.263595649 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.15678887 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.149395385 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.149624747 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.152876322 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.175750787 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.214299834 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.193028639 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.256283758 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.187841696 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.188931404 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.160005721 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.164188773 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.155600122 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.186141444 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.158690367 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.163058584 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.482001793 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.189015658 seconds)
  done (took 231.466595156 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.501947323 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.195914591 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.221745225 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.416882632 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.507320855 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.0263087 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.188927819 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.201084189 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.210398615 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.325021364 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.260113277 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.242393208 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.190342025 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.17445009 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.196523377 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.212106477 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.227985663 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.512424911 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.29610186 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.703047698 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.189856292 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.485500136 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.490129916 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.522993038 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.239440136 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.581666303 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.796108182 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.298193218 seconds)
  done (took 70.49053893 seconds)
done (took 912.251148836 seconds)
SAVING RESULT...
DONE!
