cset: moving following pidspec: 6736
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.986117088 seconds)
loading group "shootout"... done (took 1.136118825 seconds)
loading group "string"... done (took 0.660814161 seconds)
loading group "linalg"... done (took 8.729412173 seconds)
loading group "parallel"... done (took 0.186790824 seconds)
loading group "find"... done (took 2.991498675 seconds)
loading group "tuple"... done (took 2.225052117 seconds)
loading group "union"... done (took 15.054865422 seconds)
loading group "dates"... done (took 1.48587051 seconds)
loading group "micro"... done (took 0.221464028 seconds)
loading group "simd"... done (took 4.825324455 seconds)
loading group "io"... done (took 1.079193729 seconds)
loading group "random"... done (took 9.630592785 seconds)
loading group "problem"... done (took 1.530465012 seconds)
loading group "array"... done (took 25.406983314 seconds)
loading group "misc"... done (took 1.911665373 seconds)
loading group "scalar"... done (took 43.900883602 seconds)
loading group "sort"... done (took 3.354064287 seconds)
loading group "sparse"... done (took 12.85651888 seconds)
loading group "collection"... done (took 18.569723395 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.538861865 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.12491033 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.13201426 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.125478508 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.192342454 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121548622 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131960302 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086446542 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.850449268 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138610119 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116342995 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.436360105 seconds)
done (took 5.424301147 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169935178 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.096228163 seconds)
    (2/2) benchmarking "String"...
    done (took 0.08524566 seconds)
  done (took 1.384865767 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.074183956 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062568773 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069346962 seconds)
  done (took 1.410156059 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067305202 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138515509 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068709313 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068691433 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071851118 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068398549 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067919738 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068429735 seconds)
  done (took 1.760313211 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.075210265 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069763114 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067531397 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069580838 seconds)
  done (took 1.487911028 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067721149 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125468513 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066632942 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066335877 seconds)
  done (took 1.529516836 seconds)
done (took 9.031391284 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143201907 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.834992438 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.760761561 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126816446 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.249753866 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.448230136 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.12402746 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183692214 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090190461 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075556645 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122199209 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078844219 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.617937752 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.404091986 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073177491 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171854446 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.648293714 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089702545 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.13309097 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.463561518 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074600752 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089562979 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087592649 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072139634 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.33139306 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152981021 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.670558783 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.178398313 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070869425 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.097266608 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071253936 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079540319 seconds)
  done (took 11.055523046 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.096641794 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.093587781 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070649272 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126664982 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096213101 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071719747 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077049714 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069868517 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091699774 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126853133 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091520678 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099212698 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.069130557 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071333025 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.075404398 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.203494399 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081107217 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081879427 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067955984 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081638326 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107880803 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079411745 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079809733 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.08054227 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133016813 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.17320654 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098072525 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101048324 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066403979 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.07943538 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118486851 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126190244 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069220503 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067881574 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.12276697 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.098283163 seconds)
  done (took 4.701292228 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.908536326 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098242909 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08582634 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077123017 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110030748 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.116714816 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.123630334 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.124921066 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103042634 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071267096 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.157193582 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.65571468 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.179730807 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072099406 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120536536 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.365209887 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.065192081 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070872574 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068522716 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071252258 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070469933 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112890043 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066529452 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176123252 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.590107663 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071507539 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069472684 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097108061 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066520794 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141867437 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.098377575 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071994694 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.556224508 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065754782 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064058234 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.08956695 seconds)
    (36/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.094041097 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06733074 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094803599 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.18046754 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.082351247 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069293724 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111633933 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083261488 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.497949389 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070694073 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.564915208 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225788516 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073478539 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071917831 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102218707 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064847368 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064916773 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067936826 seconds)
    (54/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.084736282 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.932701542 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.12492091 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066974866 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273420788 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068073162 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068694263 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069317853 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099723932 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067264704 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069015405 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.075587987 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099024251 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.799837147 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090621309 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098824644 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069432554 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.413490746 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073674943 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069610675 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070105157 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084019416 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110921666 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06692094 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066673741 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106982782 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089041971 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089523346 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070604242 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067822658 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066293763 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.333543712 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.173481092 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067592772 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067708296 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.482721159 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064642055 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065946547 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0680703 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063930921 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088926638 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066897457 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063950032 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066128938 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100695653 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067026885 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.447908286 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068230787 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.475489767 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071620541 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.1087654 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123783716 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068617565 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095740496 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068945367 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065641404 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074029809 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066702137 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065304464 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069817825 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067348204 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068542328 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071204662 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070552735 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069799871 seconds)
  done (took 22.848642553 seconds)
done (took 40.721728601 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.318275986 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.081222112 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081443383 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.081799748 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081562841 seconds)
  done (took 1.891295377 seconds)
done (took 3.235154003 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.1362897 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.097472778 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066288975 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103454757 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070625542 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104712176 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111338067 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107069651 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070983535 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070976483 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070627658 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105033522 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107794845 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070725494 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.10079289 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.107393324 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070945307 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069877621 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.07115983 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070926655 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070563002 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066254973 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070986015 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070875896 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.102178187 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.07134326 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066810071 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.100892929 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071869971 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099889358 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070642432 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070239364 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070145171 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102498419 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071116266 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102237717 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066138112 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070268409 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069584994 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069227984 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069481083 seconds)
  done (took 4.703293794 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073734375 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083662223 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085868584 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063796509 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073552428 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084445062 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064192804 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083214549 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088600424 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083513557 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084369562 seconds)
  done (took 2.162854366 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072968001 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085718117 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089643716 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063851785 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07561507 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08550411 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06407499 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085318497 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088179107 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085406742 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085670871 seconds)
  done (took 2.158121301 seconds)
done (took 10.292145564 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.100016927 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068435828 seconds)
  done (took 1.426786469 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224998419 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.51637477 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.425914441 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093881593 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.073597216 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086974444 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203910226 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067644522 seconds)
  done (took 8.145195376 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.101201533 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070255658 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.074735391 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069565777 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069771883 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069753523 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069846089 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070029102 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071018518 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07214745 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.072421968 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071006963 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069862288 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071224639 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071007904 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072017608 seconds)
  done (took 2.538973853 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105702478 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071526334 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101680471 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064111255 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073685287 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062512317 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071815223 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073707831 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070683298 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072510443 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074089877 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073048131 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073246311 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073684933 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075148659 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075355344 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073880888 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070934439 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075054836 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075564644 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073301815 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073612478 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075914729 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073763572 seconds)
  done (took 3.201708238 seconds)
done (took 16.588039734 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.179399433 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076884402 seconds)
  done (took 1.525745046 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.071072631 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070889788 seconds)
  done (took 1.429208744 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.076257211 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062783992 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080905668 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07283229 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063308348 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063029921 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079912104 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063490617 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063271095 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063864025 seconds)
  done (took 1.976726873 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06572774 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071414682 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068690896 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.0665767 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069182987 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064299433 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067266214 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065476753 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.072062497 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064434311 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.069105816 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085887198 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068383726 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086657329 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.068272644 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068329795 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068633409 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065634972 seconds)
  done (took 2.546116356 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.063616927 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063792547 seconds)
  done (took 1.422450232 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.067215031 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063802228 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065893949 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066524665 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06400854 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062593262 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062855879 seconds)
  done (took 1.740512262 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.432122021 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.123030222 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.34765236 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.07135096 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079204397 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.261179639 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065592408 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070301968 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070603487 seconds)
  done (took 2.855290715 seconds)
done (took 14.797963385 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084714725 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.185823584 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090727148 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.409054299 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094431859 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06912743 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114726067 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.179237129 seconds)
done (took 2.541939322 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.221569464 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.177019886 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.371659782 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.127712687 seconds)
  done (took 2.976636398 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.3419254 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079987897 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078297938 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068821567 seconds)
  done (took 1.879982666 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.067053372 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073554805 seconds)
  done (took 1.443892131 seconds)
done (took 7.836566414 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074752571 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064113159 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.070149517 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065563997 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.064549842 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063666036 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064669918 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062275353 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.103440582 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.06460891 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.06438903 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064400022 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064430218 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064176019 seconds)
    (15/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063864443 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064714257 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064201181 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064477524 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063931093 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063849419 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062325431 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064761817 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063758451 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064766785 seconds)
  done (took 2.927445564 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.082935261 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067461024 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068706135 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06747288 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068352942 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066948133 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067183561 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065647934 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066883289 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06581704 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067588996 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067757959 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065976816 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067464882 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066286993 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067778007 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067700644 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065843703 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065668766 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067705106 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067541973 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066212818 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067285366 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067493754 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068076378 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067808558 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065986931 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066166967 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067503017 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.0675653 seconds)
  done (took 3.34942181 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068584622 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.06166211 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061520746 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070517126 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060765766 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061281807 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061103335 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060416768 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060984099 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061984451 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061445196 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060596877 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061267341 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.06038046 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060322851 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061082928 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065168423 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.08029792 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060757751 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060625898 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06549038 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060859832 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060629148 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060553247 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.0614352 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061223247 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060542071 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060865932 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060220612 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061382433 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060586104 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064410001 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065721064 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060839082 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070490742 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06540902 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060523307 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064735943 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.06167161 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060883862 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059982152 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060339604 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.06060251 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060596566 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070654089 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06084997 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061874484 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061151189 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061109938 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060656099 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061135811 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061971998 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069095284 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061460296 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060228606 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061516659 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060316834 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061166401 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060269709 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060384212 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.06043289 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063773074 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061866861 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061149827 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080492301 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062114973 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070777594 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061860958 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062764182 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064764834 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061158553 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078027276 seconds)
  done (took 5.851480619 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074712032 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074811399 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.07983379 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070898894 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064689352 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061734727 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065811311 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061395915 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070603326 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065734149 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061916626 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065088427 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07075346 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066047833 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062877251 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070577848 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065691938 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064872519 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062060206 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065539073 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063379953 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065297389 seconds)
  done (took 2.807187789 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13955874 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06819564 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107176501 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.075199507 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069141637 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074727615 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06609419 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06681095 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066936892 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067480132 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067106789 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06628827 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068634651 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066902356 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067699455 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066760679 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066326287 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066639467 seconds)
  done (took 2.658933377 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079724889 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067672299 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091813547 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067821 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068121167 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066462663 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070527823 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070749996 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067226685 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068053043 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072313361 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067593636 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067274433 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068477674 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06748597 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067778886 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067734235 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067746297 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072231945 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070707306 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069620581 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070480404 seconds)
  done (took 2.870260383 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080082603 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06658643 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082568701 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06842508 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062427918 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062369616 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068093965 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06714546 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067852983 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066797771 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066977772 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062164008 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068606221 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06692076 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068831446 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066882019 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066625042 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067671428 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066885768 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062249438 seconds)
  done (took 2.680676637 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.088746152 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064960293 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064902321 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084404979 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064950341 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064629914 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.083237887 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063764998 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063780274 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085304655 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063663383 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063841721 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082763668 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.08244948 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063363807 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083563049 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083234625 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084819274 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065556954 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06523314 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086915546 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064149295 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082775975 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063632077 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063496729 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063413217 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063411896 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082611628 seconds)
  done (took 3.362095591 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066332777 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065180559 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065531198 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065263012 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065567387 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06543969 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066294678 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065408219 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065630589 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066042999 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065448085 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065351109 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069249478 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065502974 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065561264 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065557207 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065869239 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066137357 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066001986 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065854625 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065895694 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065507218 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065544352 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065888741 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065704318 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065278271 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06637492 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065896475 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06541226 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065547409 seconds)
  done (took 3.304702646 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075710475 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073457483 seconds)
  done (took 1.479389208 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.064513454 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079460029 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.062117695 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.075257532 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070934137 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065858043 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071425288 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070787849 seconds)
  done (took 1.883975847 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.069846275 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.093107743 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063848511 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064227946 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066607174 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132981708 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074619354 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074037105 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076263121 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065074165 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063267121 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074602446 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062440456 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075259275 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063956331 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070978346 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069845744 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079634184 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075244411 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060645549 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074849174 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063006479 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061020131 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063386209 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062076704 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068903518 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078117378 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076030519 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071164256 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060301395 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081194883 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061344894 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062366641 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071101025 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065841938 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061452903 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098099427 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061597997 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06641949 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060786329 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073484184 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082455613 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076168435 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079399404 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065071632 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064852291 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062340043 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06497264 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066552746 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072450809 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062563729 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070639332 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061768141 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064016468 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073821427 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06329184 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068699641 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072686086 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076771828 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073665713 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072080352 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078606256 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071618383 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070962569 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063880476 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082995256 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064789925 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076798811 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078298669 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064571421 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076379577 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062721967 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061468313 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062591745 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09693355 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064464138 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063957831 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062787369 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062478353 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064053554 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072205564 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068397323 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069767691 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064971883 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077083967 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070165196 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061118652 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067889329 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078940864 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065082958 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062676122 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079581255 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066634624 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061964251 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080108861 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071983324 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063879785 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06327624 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065441251 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075981565 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063405077 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060871755 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070883299 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064236435 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063864742 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065214958 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068920111 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060418218 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070734762 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.06527405 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062091961 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059178901 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066535882 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063496998 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060878293 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071451726 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061602053 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076289657 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068234334 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076261659 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076240951 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072676725 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077371577 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061544169 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060199417 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078430686 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.06907965 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.197177055 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082679421 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064295822 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075536299 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.066718405 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065652189 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073351387 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.063067783 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065281019 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063179425 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068390585 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064426652 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064736079 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06833436 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.07156766 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075507504 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06498836 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071802221 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062980743 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078752694 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072818732 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067742793 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067052354 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063741445 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075551175 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069679835 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072426279 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06249923 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063730847 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062932213 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073799194 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073057228 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064896237 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070389615 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066049679 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062203409 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062189225 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062723933 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065421474 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0655143 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062584384 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070111819 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070876765 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076134122 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068704371 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071029777 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060804318 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061140409 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063315008 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061311719 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066017355 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071237907 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077137693 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073389408 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082661407 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061692484 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071181905 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063230355 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077945582 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074973719 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062820011 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066080125 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060425007 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063377896 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07063646 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073451572 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075357173 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076217886 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066816027 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066091155 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060996133 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076293203 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062052872 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069980814 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071340715 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066027272 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062259497 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063042122 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070810797 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066032905 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061773293 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077273513 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067915946 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060924626 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076205517 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062292489 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073196931 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062475188 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.0665459 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068158547 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064887612 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072722643 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078315552 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061796975 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063431063 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078900196 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064855694 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064772765 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071358957 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078402613 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067094312 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071245734 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074033684 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072376893 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06687153 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072030545 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063330783 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072165413 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065997111 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074612528 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062246563 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080138098 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061212454 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077554002 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062449142 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.07098493 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061229367 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070047025 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061703425 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07685559 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062057607 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06096577 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071665025 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05877452 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069250589 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059691235 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065258677 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067393664 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070241342 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062008707 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070123903 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.201409502 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072221903 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069003747 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072526447 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073965676 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06823733 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063175692 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07188844 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074959123 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071900464 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064933234 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065242173 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063706275 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072982484 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06468013 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064250043 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072125242 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067430426 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069096302 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064542377 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065094161 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064922146 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071909166 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073110525 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081583616 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071628483 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070657268 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072365327 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062709245 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079302417 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062044247 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072016382 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060522478 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067517514 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070700764 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06208926 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080631739 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063373333 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.0693198 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073849439 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070155142 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065204899 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079706183 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066734403 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07012962 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069616203 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066460586 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068463496 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064159429 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069784183 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071676603 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073674051 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.064396475 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070710929 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072130649 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064957792 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071236164 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064944758 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071919738 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064954177 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06238672 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067547905 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074873521 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067528668 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066830289 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062457402 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060316178 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.062175142 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068981786 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066069342 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070196549 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077007609 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060616606 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062834291 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062583193 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066806375 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081337575 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073074156 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071070566 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067521829 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062008579 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065061256 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065075258 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063890537 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066622347 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061729013 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061960001 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072897456 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063769039 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066441351 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062690003 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06321757 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071619012 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066507453 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061848701 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068262714 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061903245 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067050796 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061314591 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062876963 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06586142 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061130037 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065296351 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071810104 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078946797 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069288574 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071830015 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06431284 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070827011 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07834472 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070296746 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063382599 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070443433 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060497696 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078996211 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070233146 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069582176 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070465815 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06145815 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076889246 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065135176 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070465503 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075484343 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061914621 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066372336 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059599661 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075216212 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06447022 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059652121 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068001877 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06876419 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.0670706 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071733607 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.204685096 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071395714 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068173467 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066360759 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064563403 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063366518 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.07081928 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077870165 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062522495 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06636151 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070030815 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070508086 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06612116 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073781786 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070151468 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06278536 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063352941 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064990998 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063854121 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074350702 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062244344 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06615461 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066241357 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061692198 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068659526 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078394395 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071445288 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071437537 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061189513 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.06060714 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078942568 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066008849 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065299426 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070078452 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071490493 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074298852 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070968885 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078846859 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062950899 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067235099 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074137503 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062930742 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061675163 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066228037 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063734049 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070990563 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071786439 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069361857 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064072957 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068274915 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075303644 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062929326 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066276172 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066935449 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062464019 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072050311 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.07021303 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073649781 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063058698 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061315768 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064932761 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070959363 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069582323 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071251545 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063134878 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068489638 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075448336 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069026373 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064988951 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.06133141 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065482072 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070668283 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066429627 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061056993 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06616982 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06545023 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068683597 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071274043 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065999096 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06165067 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078376759 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070008096 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071003691 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063575584 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063701235 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062481117 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061273585 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073041719 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061099725 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062950395 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065875682 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063590635 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.07938345 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069889422 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077295691 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063108703 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065892974 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061342395 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071243852 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065709297 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061952354 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072048971 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060987237 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076689528 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073424024 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066862123 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061092934 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.0664452 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.089208427 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076308576 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071135695 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070039775 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064702319 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070605843 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063142307 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071893285 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060739355 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059581953 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070472758 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069048184 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072767679 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060419712 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070475214 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062762514 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.06847865 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06770993 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061554728 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061858734 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061916226 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069416789 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064351993 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069974628 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.206609344 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079364027 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064172273 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07334691 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071915778 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073448729 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076118934 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074355647 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069910943 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062559443 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069046248 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070050052 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063193984 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066459607 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065186022 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082943437 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063508143 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063505178 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075954355 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068605923 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062038158 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068420786 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066140533 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071919999 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062822689 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072105194 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06590915 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062357868 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066381756 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066584206 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06052021 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061042412 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061848019 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070964815 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066159223 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061895956 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080312253 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063283415 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070614707 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073503548 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068613978 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063570004 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060641336 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063084225 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074626064 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077722251 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065096638 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070302929 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062988469 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07101507 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061001724 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070264749 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070060106 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070055303 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061182719 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061707964 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076522403 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077156284 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066551682 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070868802 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070481617 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063203253 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082899137 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070517727 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062826793 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072062931 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064125166 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061009925 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06083596 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063398985 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073624442 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061480354 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064494569 seconds)
  done (took 42.64914585 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102671232 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063730414 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062713738 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062747094 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073635742 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063521458 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062618597 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063893937 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063822723 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06609985 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063044369 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065053544 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072359747 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074632937 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071893558 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065010357 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061396468 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062778189 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061560537 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06359328 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073481251 seconds)
  done (took 2.871049384 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06733422 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067570392 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067148903 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067601779 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065011097 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061383601 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065428468 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061462436 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066268918 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062352102 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065961733 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061777609 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062334174 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062692162 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062163433 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062998759 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066807731 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065114261 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061321365 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065260108 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063091224 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06558124 seconds)
  done (took 2.841586977 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.065227765 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063390144 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071848087 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062240583 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062488672 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066242563 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.06227555 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066658493 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067173197 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066842913 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071923819 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063783662 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062037612 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068646437 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061680229 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062062273 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104036969 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062131804 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062253586 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060697331 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064211214 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070201146 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061128062 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060932904 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06516972 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065076962 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.06111362 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063989002 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062354939 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065298756 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062186945 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.06096476 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070385063 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07007791 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065693747 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065426282 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063107821 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062413989 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061348164 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060908997 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069761688 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062867388 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061325825 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062559174 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070529913 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061123669 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060783552 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070343048 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060773834 seconds)
  done (took 4.624658031 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.074903982 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114366525 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066779575 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094271917 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074139903 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067417875 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066520564 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095888552 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062556886 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063286476 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074908137 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075496308 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064299282 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065484166 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068197723 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063954223 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064760788 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063303637 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066596258 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064059477 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066881794 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067994547 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073401484 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074517576 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065148714 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06290821 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063592035 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065180077 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074438468 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067047046 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065756395 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066194107 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076874004 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067481291 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063796233 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.06369454 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075426906 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064439098 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063968856 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062336991 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064066471 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065147127 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068394902 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075136246 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063981626 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068651927 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064451992 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062226402 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074225741 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063694744 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067686258 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075925026 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064962461 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064727795 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06561822 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074585325 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064099623 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063485001 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064232544 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073888717 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062209659 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064876561 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077658263 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063584356 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067625274 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075466966 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068813854 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065032544 seconds)
  done (took 6.267272072 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.073409343 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098189482 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074378043 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073067755 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073535017 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072549258 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071844523 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071650145 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.07140385 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072227678 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071936206 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111408559 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068272079 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076180098 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071749932 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071895514 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071741014 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071691151 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071878706 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071397987 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072053483 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072241958 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.07188897 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071946936 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074645288 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067694023 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071710725 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071391795 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072220563 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07185701 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074315345 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07141171 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072023842 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072269046 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07481135 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071603006 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062213159 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071959184 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072163418 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072024027 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068160634 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072402229 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072027882 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068131249 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071990615 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071792022 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072407677 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074630227 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078604098 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072170459 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071981502 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072268732 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072073135 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071742073 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07233663 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079764069 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074662071 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072902028 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072542813 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074479595 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074878931 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080297581 seconds)
  done (took 6.018089074 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077560301 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069480093 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082463852 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061911009 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061651948 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07109962 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060984089 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061425634 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068163923 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068207384 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070265617 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071107678 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073029222 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069875922 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070387069 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07315888 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071000622 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070841402 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068071469 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070450847 seconds)
  done (took 2.850919397 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.078833102 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082218572 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068631885 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072165699 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.0684045 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072498804 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068084278 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068420999 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069602775 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068727467 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073784963 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073731306 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069294626 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072338472 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.07377083 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072883234 seconds)
  done (took 2.600467116 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067089635 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071710829 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070627104 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063969037 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065500656 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062147453 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062698723 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061213519 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064341037 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075824934 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062195629 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064896507 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062805539 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061417207 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062036498 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065018138 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063674578 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063035306 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06237163 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.0671224 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07075834 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063544794 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06508585 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06260775 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064478855 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070989132 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063776362 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064430679 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062203058 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064813675 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064330374 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068655971 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064753792 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063107858 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062744898 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.06273959 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062862491 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065302942 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065392529 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.063314035 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061203584 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067917604 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06296969 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062937904 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06401631 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065089903 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064288592 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068396274 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062660452 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064794054 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062634236 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064138293 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062676429 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069062843 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064334268 seconds)
  done (took 5.01203764 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080523128 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068295943 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061930976 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060881026 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067122285 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066946117 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066682064 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066767872 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06711153 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060962249 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067345815 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067502184 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069223698 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067739245 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068906809 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067986728 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062745421 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068588047 seconds)
  done (took 2.672425331 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.076001945 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067480071 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.073273113 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.068062329 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068286881 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067562668 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063028525 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.06187859 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06164568 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067146724 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066470205 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065434958 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061302553 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065639739 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066308295 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066176988 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.065499693 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061833753 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066245861 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061519231 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065885374 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061503191 seconds)
  done (took 2.904273348 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.090843426 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086320456 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130431904 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082115934 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090771115 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074643629 seconds)
  done (took 2.010594514 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096299845 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106669874 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067460975 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065997748 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074566335 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069197677 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069118586 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069572786 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075329807 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073466545 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069721653 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076652934 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077150929 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073084226 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077155851 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07924072 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071699137 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071222264 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06803701 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079683228 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070851202 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074948776 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070165063 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069144923 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069666029 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071549112 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077329052 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073302661 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069320861 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075017316 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077461755 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069646658 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075580558 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073935414 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066891747 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075505816 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070770058 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080206492 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077116234 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073501164 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066670039 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075196501 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075273045 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071242819 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077790657 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069684019 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071875873 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069913399 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070110492 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079951342 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075677387 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071600855 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075899026 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078058773 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078510018 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079916975 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073771116 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071600058 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075689774 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073892653 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071713009 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075691778 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071567404 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074317618 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077739313 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071334735 seconds)
  done (took 6.353532418 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104241384 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068892634 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071739243 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075526371 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071621931 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069789848 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069993708 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069385188 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069868592 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06732115 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104894133 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070258647 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071352377 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071443535 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070066163 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069837567 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069945838 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07168713 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067347421 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079963102 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070263481 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07162024 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071618702 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071728729 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073844879 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077325721 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070086987 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069718175 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072485857 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069427707 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071200097 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070023393 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072015197 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067257878 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071385323 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069998698 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069642392 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07139707 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069722858 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075315462 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071652401 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07812392 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069783717 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069684556 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073509208 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069576156 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069803138 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067160209 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070072175 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067162097 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073723602 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074084527 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07381169 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071657714 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069729593 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070158008 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070217939 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070334245 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070413902 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077907048 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071451962 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069525654 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079759794 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070032375 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069658054 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071538036 seconds)
  done (took 6.251595384 seconds)
done (took 130.410706906 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.224550168 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.19200411 seconds)
  done (took 1.857317048 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.078090542 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.169326441 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075656679 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075884221 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108745173 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.10804728 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076383408 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073028378 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075523971 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072722457 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139882217 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077187481 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072578078 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072434618 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07260959 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072654825 seconds)
  done (took 2.883402256 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.112153021 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186884289 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082544865 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070531027 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.11518754 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077166466 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072640684 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075528066 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077361867 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070665946 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108053634 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082172025 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074501542 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077584957 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072536276 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074392553 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076100216 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.07750875 seconds)
  done (took 3.051016096 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101268063 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087744226 seconds)
  done (took 1.660433417 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159922362 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10575477 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145143591 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.331295717 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.132802738 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127990752 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.129791239 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126839646 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111785525 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12298666 seconds)
  done (took 2.960147565 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.109974878 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106822729 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310531983 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103104665 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082682697 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078201599 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075511964 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080814477 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075453206 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077224266 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.123551722 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076067294 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073294764 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124803467 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099324411 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107502249 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071778256 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07875574 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080471031 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071665353 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076447823 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080540484 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179665579 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078666602 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100177946 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076040365 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077570659 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074498953 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074991655 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07868618 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079396852 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100319172 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078551321 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083332449 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077166976 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.098342821 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072205358 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099142713 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074331296 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072803602 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07532432 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079191664 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072719346 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078572256 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075490875 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077824517 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080490961 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070888153 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075609902 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074932766 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072962379 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076998599 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076599358 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077724402 seconds)
  done (took 6.277798192 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112805177 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107011373 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071143073 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113613325 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105787463 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070331468 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105377139 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100601983 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108946169 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070183553 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06934802 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069997789 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077235125 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080031682 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116229659 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108554982 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072689512 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073728841 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108478288 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107238618 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069893951 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10240472 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100753042 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107018611 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069068898 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070482243 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069206766 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069988489 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074564424 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075107499 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069813554 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076291384 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081645924 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075621197 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068727196 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068756538 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068978678 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076172935 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076854814 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076865925 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074895355 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068885442 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069066557 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06960738 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069749379 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069099614 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075194588 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076367397 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075242209 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069659404 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069706333 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068843844 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.06987605 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075933706 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074772182 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07660562 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076156329 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068905066 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0690211 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071083241 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.0776579 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077663317 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076921857 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070141758 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077522103 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069319627 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077999074 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081219356 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069454366 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06982348 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068971121 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069020385 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069878529 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074976403 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075172654 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070428026 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069078386 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068872324 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077540737 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075149488 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069399484 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075394526 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069307806 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069314005 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069813236 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070005744 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074598472 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.07621903 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069792182 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069079288 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069403759 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069532734 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.0686448 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074645178 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075241529 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075844776 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074526337 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069290096 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074472869 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074588611 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069387611 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074444272 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068906165 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068915078 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068357513 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074072487 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073702547 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075776995 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068440894 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06814957 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073896362 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.213089845 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071069497 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076925174 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079148329 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077408018 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069905723 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.0791908 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069990307 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078237062 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070169953 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078301768 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070151373 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075677393 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070090028 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069427931 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069706916 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076095832 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070302882 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070236064 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070235515 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070116817 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075935495 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079039755 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070115891 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075935406 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076057352 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07073563 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075697707 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069860252 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077266185 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070239028 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070032961 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068598378 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078085203 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069751746 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070149501 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06949255 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077545342 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069972976 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078248203 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075189413 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068571858 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079789487 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078077144 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075023259 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078271995 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070496419 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070062425 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069598741 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069752201 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074757624 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075946113 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070042718 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070149379 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075000127 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07780784 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069380386 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075874205 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07506767 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075648193 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069675699 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069818007 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078040463 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07745482 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078041269 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.306615688 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075748333 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069289794 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.0751072 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075757847 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068893503 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082678533 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069214017 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079348183 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075557127 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074536817 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075838144 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077273158 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078009674 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07792768 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079896239 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069244808 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069192255 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075629556 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069743041 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069695062 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075376321 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069567494 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.07041938 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080402432 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069308477 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077115681 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069153154 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075993337 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06928013 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070070662 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079899694 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069708854 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069511735 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07478825 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069251463 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075031768 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076717003 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073862145 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068366932 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06851127 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075003844 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074596111 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068576494 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068320934 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068351922 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07354396 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073242807 seconds)
  done (took 18.695648499 seconds)
done (took 38.865853071 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17698357 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.118646617 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210938175 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198651952 seconds)
  done (took 2.284099826 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.105637266 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067701066 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.084163412 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.092838688 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.067063699 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077745418 seconds)
  done (took 2.018644618 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.207311939 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.179847539 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.243694998 seconds)
  done (took 2.146019714 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.375719794 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.154284725 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.222674833 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.515388097 seconds)
  done (took 2.890521413 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.113735417 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104834456 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.081919271 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.113112774 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085761285 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063677276 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134405996 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071016227 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100733273 seconds)
  done (took 2.45689973 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130688791 seconds)
done (took 13.471905146 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.24397426 seconds)
    (2/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.193386621 seconds)
    (3/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.110355053 seconds)
    (4/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.298600273 seconds)
    (5/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.245298254 seconds)
    (6/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.214116067 seconds)
    (7/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.221971639 seconds)
    (8/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07815318 seconds)
    (9/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.118522714 seconds)
    (10/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.168335458 seconds)
    (11/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.095428755 seconds)
    (12/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.212834209 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078981938 seconds)
    (14/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.125581607 seconds)
    (15/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.247558346 seconds)
    (16/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.114333678 seconds)
    (17/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.182713441 seconds)
    (18/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.08130996 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080715199 seconds)
    (20/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.077062633 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080745272 seconds)
    (22/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.221263221 seconds)
    (23/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.079601461 seconds)
    (24/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.080007895 seconds)
    (25/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.156040708 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.091884173 seconds)
    (27/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.0944643 seconds)
    (28/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.190348399 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075055448 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073960563 seconds)
    (31/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079176891 seconds)
    (32/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067115466 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.181144082 seconds)
    (34/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.146864878 seconds)
    (35/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.221327392 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.092216983 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.160330415 seconds)
    (38/341) benchmarking ("sort", Float32, false)...
    done (took 0.139001486 seconds)
    (39/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.12450102 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076825374 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073588356 seconds)
    (42/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.208352879 seconds)
    (43/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07487584 seconds)
    (44/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066760684 seconds)
    (45/341) benchmarking ("sort", Int8, false)...
    done (took 0.152743053 seconds)
    (46/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075172667 seconds)
    (47/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.067095335 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.14347939 seconds)
    (49/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.139121684 seconds)
    (50/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.228860607 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.087520856 seconds)
    (52/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.154852766 seconds)
    (53/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073571056 seconds)
    (54/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.185817437 seconds)
    (55/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.199255303 seconds)
    (56/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07474909 seconds)
    (57/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075498453 seconds)
    (58/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071387225 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.082882207 seconds)
    (60/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.154814633 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.088500791 seconds)
    (62/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074632071 seconds)
    (63/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.233716738 seconds)
    (64/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164146373 seconds)
    (65/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.212693617 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091683049 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068110808 seconds)
    (68/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067482697 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169037987 seconds)
    (70/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.165573053 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.091971169 seconds)
    (72/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096214998 seconds)
    (73/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075405662 seconds)
    (74/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.068987731 seconds)
    (75/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.197511995 seconds)
    (76/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.223877894 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07982098 seconds)
    (78/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.193247584 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.175432257 seconds)
    (80/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.206485615 seconds)
    (81/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.184595784 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.078282236 seconds)
    (83/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.070203264 seconds)
    (84/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.186667713 seconds)
    (85/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.169331989 seconds)
    (86/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.079156539 seconds)
    (87/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.142170499 seconds)
    (88/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.151500277 seconds)
    (89/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075542193 seconds)
    (90/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.148599061 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.069494423 seconds)
    (92/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.071248873 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.096067165 seconds)
    (94/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.069417073 seconds)
    (95/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.147609402 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.131450821 seconds)
    (97/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.076524975 seconds)
    (98/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.178203679 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.089989211 seconds)
    (100/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07976514 seconds)
    (101/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.148877187 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.069033004 seconds)
    (103/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.177205066 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076542652 seconds)
    (105/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067161451 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155849223 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06876387 seconds)
    (108/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.06766335 seconds)
    (109/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.090408836 seconds)
    (110/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.074288288 seconds)
    (111/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077432056 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.13434927 seconds)
    (113/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.081504102 seconds)
    (114/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.203730408 seconds)
    (115/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069937478 seconds)
    (116/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.06819172 seconds)
    (117/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.091919464 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06713907 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.091732651 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.0791687 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073065365 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.149832117 seconds)
    (123/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.077978378 seconds)
    (124/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.199772579 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.095366521 seconds)
    (126/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155790457 seconds)
    (127/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.085641968 seconds)
    (128/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.071011685 seconds)
    (129/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.226121467 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.078774417 seconds)
    (131/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.169411782 seconds)
    (132/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075848551 seconds)
    (133/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.069081715 seconds)
    (134/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.080010778 seconds)
    (135/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.094020222 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.083544195 seconds)
    (137/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.119022273 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.127186404 seconds)
    (139/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134983644 seconds)
    (140/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069539307 seconds)
    (141/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.166134418 seconds)
    (142/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.072584505 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075974441 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078059042 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134867254 seconds)
    (146/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.156308605 seconds)
    (147/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095890541 seconds)
    (148/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.076058971 seconds)
    (149/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.085844322 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.154376101 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.137211082 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07864578 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.147769623 seconds)
    (154/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067448284 seconds)
    (155/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069726118 seconds)
    (156/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067412612 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.09837438 seconds)
    (158/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066555429 seconds)
    (159/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072627533 seconds)
    (160/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.06667693 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085074174 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073311348 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075224168 seconds)
    (164/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069400205 seconds)
    (165/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.09203737 seconds)
    (166/341) benchmarking ("sort", Int64, false)...
    done (took 0.06875432 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125827718 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086152499 seconds)
    (169/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.067550343 seconds)
    (170/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066838139 seconds)
    (171/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065912989 seconds)
    (172/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065461865 seconds)
    (173/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.15387238 seconds)
    (174/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066610281 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067659605 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066848966 seconds)
    (177/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.216414015 seconds)
    (178/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076655412 seconds)
    (179/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.197383869 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.229094112 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.086572558 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078482552 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.070634525 seconds)
    (184/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.076003233 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.152164846 seconds)
    (186/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079922462 seconds)
    (187/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066188363 seconds)
    (188/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.18334067 seconds)
    (189/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.079157125 seconds)
    (190/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.066765529 seconds)
    (191/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071426321 seconds)
    (192/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.173199201 seconds)
    (193/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.231394764 seconds)
    (194/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.148254971 seconds)
    (195/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.070379063 seconds)
    (196/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.072949468 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.092300648 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148371021 seconds)
    (199/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.06919736 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068054872 seconds)
    (201/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074691441 seconds)
    (202/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077319392 seconds)
    (203/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.141175389 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.152400669 seconds)
    (205/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.077154353 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068757993 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.093890707 seconds)
    (208/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080702116 seconds)
    (209/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082969382 seconds)
    (210/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.081220865 seconds)
    (211/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.087195203 seconds)
    (212/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.069671606 seconds)
    (213/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.176338088 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134810322 seconds)
    (215/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071254694 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.0651443 seconds)
    (217/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070479576 seconds)
    (218/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06711443 seconds)
    (219/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.069092715 seconds)
    (220/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.166493315 seconds)
    (221/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153368138 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074652463 seconds)
    (223/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067655148 seconds)
    (224/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067361478 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073953007 seconds)
    (226/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080634032 seconds)
    (227/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.06753803 seconds)
    (228/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.067533763 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.06854956 seconds)
    (230/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069866357 seconds)
    (231/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073964971 seconds)
    (232/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.068022458 seconds)
    (233/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.071277593 seconds)
    (234/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.084872548 seconds)
    (235/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071093917 seconds)
    (236/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06708175 seconds)
    (237/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075450463 seconds)
    (238/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068614591 seconds)
    (239/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.084051954 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066456466 seconds)
    (241/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06681881 seconds)
    (242/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070271777 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152794052 seconds)
    (244/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073794019 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078899907 seconds)
    (246/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076907836 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066537162 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067585913 seconds)
    (249/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067280455 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074104224 seconds)
    (251/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080735667 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111451208 seconds)
    (253/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067269675 seconds)
    (254/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267131548 seconds)
    (255/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088327103 seconds)
    (256/341) benchmarking ("sort", Float64, false)...
    done (took 0.140777225 seconds)
    (257/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.081803737 seconds)
    (258/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069951714 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.076108869 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070009999 seconds)
    (261/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.07038593 seconds)
    (262/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065258658 seconds)
    (263/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09202529 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065443641 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084842555 seconds)
    (266/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.083856841 seconds)
    (267/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073744858 seconds)
    (268/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066763894 seconds)
    (269/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066842478 seconds)
    (270/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190995299 seconds)
    (271/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.06732125 seconds)
    (272/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067267191 seconds)
    (273/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.067340876 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066314821 seconds)
    (275/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.06669838 seconds)
    (276/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.066876979 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074635844 seconds)
    (278/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066866787 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.1407013 seconds)
    (280/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069652366 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064720685 seconds)
    (282/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066282999 seconds)
    (283/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.0682022 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065853713 seconds)
    (285/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065933799 seconds)
    (286/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066557634 seconds)
    (287/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066413833 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091801865 seconds)
    (289/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064913247 seconds)
    (290/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077754732 seconds)
    (291/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.154834332 seconds)
    (292/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065898521 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149241532 seconds)
    (294/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067562771 seconds)
    (295/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191865381 seconds)
    (296/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065302189 seconds)
    (297/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067423621 seconds)
    (298/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068156005 seconds)
    (299/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.065709647 seconds)
    (300/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065280523 seconds)
    (301/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066709797 seconds)
    (302/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068673576 seconds)
    (303/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.064252171 seconds)
    (304/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065788822 seconds)
    (305/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087365423 seconds)
    (306/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065739093 seconds)
    (307/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.065646496 seconds)
    (308/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.246532779 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.069082078 seconds)
    (310/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.068925263 seconds)
    (311/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.166838364 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.067274082 seconds)
    (313/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081574195 seconds)
    (314/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066921075 seconds)
    (315/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070602605 seconds)
    (316/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074859118 seconds)
    (317/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069321202 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06744084 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124137502 seconds)
    (320/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.223159566 seconds)
    (321/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.067209853 seconds)
    (322/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.066914315 seconds)
    (323/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.066718817 seconds)
    (324/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067332511 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078492233 seconds)
    (326/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067458878 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066766791 seconds)
    (328/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067681102 seconds)
    (329/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066816395 seconds)
    (330/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067247133 seconds)
    (331/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075097458 seconds)
    (332/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066879463 seconds)
    (333/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066936497 seconds)
    (334/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067282155 seconds)
    (335/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067254546 seconds)
    (336/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066606716 seconds)
    (337/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069812913 seconds)
    (338/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.083325646 seconds)
    (339/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067176728 seconds)
    (340/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066918376 seconds)
    (341/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067345278 seconds)
  done (took 37.366728971 seconds)
done (took 38.902145867 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.096607585 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.083295938 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080918254 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076518522 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078889499 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07824775 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079083108 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076899893 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.0787433 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077802598 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077419101 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065765033 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074274355 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081289254 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074838573 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08249267 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078902607 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081939741 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066837237 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080614097 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093135756 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078694226 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075069912 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080441775 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066434509 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075386959 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090328607 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087595469 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073100654 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075757968 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074413046 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082018101 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074149461 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072872338 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076154325 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072290169 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07568993 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073320995 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089795475 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073086361 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066760304 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079021877 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074657306 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074737788 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076453228 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.08007357 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072911865 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.083706098 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066413897 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07837097 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091447705 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073447342 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.074029023 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075052001 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071728682 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07560912 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075191968 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078603365 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071695445 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07761409 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077614191 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075895142 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066176805 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075033205 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073893567 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073938291 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065675879 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071669787 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066103274 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066154349 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065588591 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074972499 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073112701 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071355456 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065985477 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066148774 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065715705 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078603997 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07251642 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076014718 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066509594 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071562198 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071009684 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066407179 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07188314 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077962253 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065675662 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06668299 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065661312 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.081524094 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072525076 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066657184 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.07801868 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071023906 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071602368 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066379173 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066033144 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071262718 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075101369 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066524631 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065497738 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071053552 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071886796 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075178141 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066977797 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071232034 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071520026 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065256585 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075141867 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073444569 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075267443 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079919018 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075962328 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078010838 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066544597 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06564489 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075485705 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066528578 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071678538 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07463758 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072210028 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074467423 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066997616 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06562418 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07118936 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072127534 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066239534 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066836416 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066264897 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074980609 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073253452 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064576812 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065785907 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074632841 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074104522 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065320408 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064640592 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074258329 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065927183 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071472693 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071898475 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073924849 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065040557 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065869226 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.212410146 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06730212 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066405503 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072380485 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072032513 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067468487 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075362845 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072834555 seconds)
done (took 12.941997565 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.070179648 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109383132 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077046634 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085465023 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.08102315 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.069080613 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070967303 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083827787 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.07048106 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08673616 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095743903 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088819066 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093907508 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066378959 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067149579 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069134149 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066649031 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074542404 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081435017 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090004851 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095611609 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066531312 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075552754 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083217279 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07761261 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083347148 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.06835614 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068084277 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070041403 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.124708333 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092853574 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067300911 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068322835 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080414207 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081183405 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074125788 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067961936 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071134094 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068028509 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067344212 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068814609 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081085935 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070661138 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070411827 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068286754 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068717349 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067644941 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070423065 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080652863 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070382108 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074496222 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079050536 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068958352 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069907927 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065712868 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071244912 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067071141 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067533069 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067517417 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067383979 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06786732 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069776724 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067989075 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067986342 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070417609 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069280954 seconds)
  done (took 6.581117714 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08642986 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095448705 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084455129 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.084807885 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068533938 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069988743 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069503265 seconds)
  done (took 2.215488053 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.07018465 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077939447 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.081761132 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.081871328 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.091769756 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.079921892 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070070913 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.101559902 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068814098 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078966346 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083189662 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080769295 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071004281 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079654264 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067722334 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079394613 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067743716 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073996646 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074897484 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080242505 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071595077 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097551738 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080838198 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068277518 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081003077 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074521644 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069663129 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.0678446 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067847047 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067040133 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067032475 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089335881 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073396452 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078999766 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067704025 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066732902 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071595292 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068308387 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071447934 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076317351 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071532577 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067912394 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06780212 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067485953 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068788409 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072054434 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068509614 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067257399 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066984194 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074946798 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066431267 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073994517 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069692767 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072217317 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.0721453 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072126051 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074639377 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068015323 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075150819 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073761455 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067491776 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079902618 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07932012 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070953165 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07910745 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075989061 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074314772 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071130187 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067199743 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066436916 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068377784 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079331215 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070722519 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069869018 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068918446 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07234942 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071281607 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082765412 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082863517 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080904454 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069988337 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067389625 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071473382 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082989898 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072519877 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067830816 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.06826552 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066581227 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071969105 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067892918 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072639656 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06748857 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074530677 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070449114 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070040311 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075702312 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067705161 seconds)
  done (took 8.772287503 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.072938016 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.07238124 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.07090057 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.071261633 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071041723 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.07122529 seconds)
  done (took 2.12081666 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.094728419 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.070891429 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082768673 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070693655 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092874738 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077181925 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07671693 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071073056 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084586384 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078172033 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.07451715 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077034352 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074061224 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069766389 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074189728 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068917568 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074199134 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070784614 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077750214 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070221558 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.0834443 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072353605 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072175156 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082520679 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073920552 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071094498 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071438992 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.079147126 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077378778 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069544348 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069572044 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.07112613 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076211945 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069271266 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074425887 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078651587 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067689428 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073199818 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070075115 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070864462 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075871024 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070014823 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070253837 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073654641 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.06896441 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.077657519 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072888759 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071156254 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073847285 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07289799 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07324095 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068058307 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070621761 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073218296 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076225205 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069507923 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073643367 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074114608 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06927386 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076933527 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068130237 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071169047 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069952982 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070669589 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.07246464 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073206022 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076570869 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07034304 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069987625 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067939161 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073472237 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067992216 seconds)
  done (took 6.96242784 seconds)
done (took 28.288789975 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.554950803 seconds)
  done (took 2.183245907 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.592501671 seconds)
  done (took 2.267926573 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.537926039 seconds)
  done (took 10.207320895 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.315014991 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.330672707 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.748747533 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.135066653 seconds)
  done (took 3.241061847 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.766886797 seconds)
  done (took 2.446894565 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238198011 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225751302 seconds)
  done (took 2.151845263 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.342861989 seconds)
  done (took 2.015926373 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.159224744 seconds)
  done (took 2.82726719 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.239297507 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.165918175 seconds)
  done (took 2.08714712 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.551465043 seconds)
  done (took 2.226415746 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.330382452 seconds)
  done (took 6.010318023 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.241636046 seconds)
  done (took 1.962907353 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23701418 seconds)
  done (took 1.918561552 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.058067279 seconds)
  done (took 3.732182265 seconds)
done (took 46.958280254 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088003613 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.091069983 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.090233297 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.085927588 seconds)
  done (took 2.00385952 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.078109157 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.073770464 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076954014 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.077274841 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075248444 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.075977304 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076487431 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072018492 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074697639 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073443704 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072662345 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073165657 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076380766 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073426929 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076187835 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077654623 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073495886 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073432786 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.074488411 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071460818 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074537767 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073372268 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071670423 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073217047 seconds)
  done (took 3.466485926 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.083004871 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.075562289 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.078780939 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.075029014 seconds)
  done (took 2.000182628 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.081281096 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.080121375 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08970069 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.095007564 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080450513 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.08088821 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087491589 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08840974 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.069034275 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091636948 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071443007 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.07036654 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.0702259 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089262109 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087392803 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06431062 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064790889 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077933752 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077290325 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080622614 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071119187 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067798773 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080206926 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080742868 seconds)
  done (took 3.582734629 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084191449 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068978208 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081650187 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092010767 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093168828 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066395102 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079719288 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093435451 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129615104 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066539829 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072674588 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066829483 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105290911 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066911057 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084911319 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.111996352 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.116039199 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072906706 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102049283 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.06913693 seconds)
  done (took 3.418599207 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.080008728 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07326877 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.07340186 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068881914 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080250489 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.077232446 seconds)
  done (took 2.148602507 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071849047 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.071239107 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070112459 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075460537 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071206647 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071082551 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070387051 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.069302947 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.0687264 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06977748 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070238243 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.07051406 seconds)
  done (took 2.537819518 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.161243428 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.0730419 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.0736762 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.069681865 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.074755448 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.07311089 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085029807 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071918139 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089334326 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069471383 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067998239 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06990394 seconds)
  done (took 2.668573908 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105969547 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105805478 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151064316 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122341182 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120306882 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099951199 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123527094 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.098971566 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165761146 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.14203017 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121835787 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098029716 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090839587 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073503384 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10499745 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105851429 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138654811 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076401251 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117863448 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.170835253 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119065553 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.11524386 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124255309 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118854576 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084423661 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127103729 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099067368 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106803418 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126987979 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114246682 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123827614 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.101672248 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075535048 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.075118444 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155395905 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.105440875 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111426318 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097330722 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104059714 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092083856 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112570636 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072172052 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090777847 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.111099889 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087852929 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119196338 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089004876 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10394889 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082240467 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131632242 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106934262 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100186432 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087633741 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10771079 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134520921 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098957217 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114719169 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109976635 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085315284 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120437838 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103323667 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100860882 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095174038 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080484199 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1564758 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090782378 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11247639 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110987659 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083796227 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090963474 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103997776 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131234673 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107264339 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107201645 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112225462 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093654046 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105892334 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.088754741 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.123710777 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09022781 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071942947 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100107072 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123784444 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083020329 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097181388 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122154785 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089198721 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076242876 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.089087682 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.114005417 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078892562 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.09276932 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.067715273 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.095335966 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102997374 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092181298 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106123295 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10250956 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076348039 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119319171 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103996126 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071404358 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11169145 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095261497 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143528383 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090918205 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075255019 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096496218 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08955592 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.144348487 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082613325 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077383825 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095013168 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131932976 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090458895 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.163297993 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09226054 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122605708 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093333067 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086132028 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07505951 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087518245 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097424752 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103237651 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098659862 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086710983 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.075887228 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084397749 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092000393 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.359594553 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084431418 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119283597 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.106630472 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079601739 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092119108 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080042122 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129927802 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080752194 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112639888 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129140563 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.081894776 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108463175 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101466465 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111334982 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100358504 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110327286 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142703175 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.119286018 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082635751 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.086278794 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111070303 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.147595824 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115859611 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087431608 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079241155 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101864789 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112406967 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099463776 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108808688 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101024691 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109916445 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098511149 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141949415 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118960284 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093200374 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096526091 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097256145 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124545412 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077661641 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157108586 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095887846 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120372873 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086056248 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142653888 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115653539 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091600697 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085992032 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096955812 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106277857 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106925795 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145627975 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096713753 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074571478 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09487021 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132886353 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07735816 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101127904 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091932434 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094307066 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119463713 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.085191708 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082765023 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069416771 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103117483 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137525963 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070198705 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.275497955 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.114848388 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104565076 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.10603898 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070957648 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100807493 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139068131 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106424961 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142264321 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117749937 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101804622 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119957599 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100880121 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106956433 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081160612 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125979428 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135883866 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097359547 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091862027 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137337269 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119351443 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136435995 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.09762306 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116371427 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106889869 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102886634 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105330823 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102666703 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146036333 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121977934 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126511901 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088281585 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107379103 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111151362 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139033258 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083445558 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118063301 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076615695 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113548763 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078685264 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108740854 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080864798 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112999647 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08104055 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101193448 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.07137137 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075407904 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143148322 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113731318 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09002328 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087529487 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137545428 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132202269 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081997518 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103341725 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105448285 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102531351 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102736085 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109647491 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086531601 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.260041988 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110280578 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080463016 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083236024 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100272213 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095484088 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107950002 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085673805 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076357785 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137315083 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10539492 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096347535 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079414153 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096660141 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122849688 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091006484 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089449828 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107852844 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106777296 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144978813 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094559019 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.102927019 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123073741 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084935837 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096768073 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073205826 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088436239 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077881461 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112464997 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078555356 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110607451 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069780517 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13319384 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089405106 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093845357 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10418532 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099339965 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130089077 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094481308 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130917079 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090893331 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10297463 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109384395 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095674087 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080836513 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105467466 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096601051 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110225713 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097523659 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107265697 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111748523 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09554284 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146367951 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094090566 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125795967 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109969689 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111053502 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106299797 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118633833 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138816645 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113721614 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112867291 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076361206 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084799361 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106762214 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101205968 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147464761 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10387072 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074473925 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087254313 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091174094 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.254110903 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106760018 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085861382 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147568483 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090951159 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091534948 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118234749 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.093828478 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102246918 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080335722 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100229091 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105560504 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099306627 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098996834 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112607178 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120902332 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114530909 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133397184 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103332647 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.097637206 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.124137214 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116228352 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116001324 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090723128 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090682982 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127357337 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104735197 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.12986052 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102085105 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0955184 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103285058 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093304284 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102809244 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098807488 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111142483 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0814593 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077133881 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069371685 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073450534 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118926837 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109774848 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100331452 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099484294 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073707947 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10484534 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100931312 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073501611 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088678722 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095586363 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101022936 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085477812 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094043752 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.116311292 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09541368 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108657167 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104028527 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131902832 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101943411 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090017941 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144711042 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129299572 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089264872 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094645375 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073258408 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080372926 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103678839 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147562707 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119443549 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078466639 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.242024892 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.078983956 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08805207 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072669016 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088822284 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090548286 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105212579 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09354418 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.114562126 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107150981 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079980059 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108127452 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101499769 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095065754 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097815343 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10398347 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108051589 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.12496894 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102177453 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09898957 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077767184 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081872232 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078194878 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080431089 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103593138 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078943033 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077904159 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131467476 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092748861 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106151687 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111044096 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085858091 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076926313 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134522081 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070556539 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137216431 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072574089 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083599426 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082222979 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080490733 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095304377 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105943827 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099257409 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115955918 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107865479 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108423096 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112499564 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156856004 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072570161 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145925473 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079570042 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082600668 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077538408 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113975338 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094031405 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1076685 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146280326 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092864311 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093758282 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079008417 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129979883 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099390496 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10440674 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08472714 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080414436 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129645546 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080327496 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072881002 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090402498 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112551263 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076044276 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.268503507 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087094188 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081500502 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114646766 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.630127708 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091596118 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07737996 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090566479 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143906048 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130011918 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084837568 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110186902 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119800477 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091765546 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085150815 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109120687 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184051448 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075793059 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095781157 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104867436 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099886964 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095579581 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093684201 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088233653 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093660592 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087745782 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081147221 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109393345 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089406425 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094831426 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100627758 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085211757 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082137467 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13301059 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106144755 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083692903 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08999151 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102079496 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089017174 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092315615 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072964098 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117322113 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093750014 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106121071 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096273388 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112011235 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124620684 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091654854 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116850216 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.093345359 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114383031 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089216502 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082108575 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106133538 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.082345221 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080050321 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119772045 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085409318 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094663234 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108832615 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.099484711 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11899427 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122934588 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116471857 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101602343 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082799459 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09051704 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.090253523 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076613864 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079558146 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074923044 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077388984 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.268948104 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086967492 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085242258 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115934105 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083803808 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105556476 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10499091 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113255105 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087950023 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105728667 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113652662 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095325541 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107614489 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101928818 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130006692 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147457415 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10067365 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124576296 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13486977 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077983853 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077410278 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070146882 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117605575 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082129809 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082611881 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082677953 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135298446 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.0858919 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099136328 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.23268131 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081807163 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082887833 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098308021 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07147605 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084197304 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109386707 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085825347 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08185048 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100154245 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085336266 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118814527 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112795195 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090601531 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084603858 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082404561 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095123511 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106331963 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.12977364 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091305856 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076459332 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108133993 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104611657 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124963128 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074696456 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082435658 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131571229 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093371416 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104768049 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081389414 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121700144 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13416956 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091841038 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135627328 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072405772 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084887256 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09122747 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127075135 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075574264 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089651808 seconds)
  done (took 65.667471043 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154441287 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.147027299 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083694031 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098770162 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187857447 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198398983 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120454052 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097770301 seconds)
  done (took 3.002939522 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.072126022 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.086542283 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084648 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.217438703 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113103447 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.071308193 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.077174685 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.085947558 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.07113958 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.071083549 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.105857572 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.069557329 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069080785 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.36534332 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06732685 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072577287 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068442989 seconds)
  done (took 3.639730765 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.333602375 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.403339758 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.242092813 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.639512012 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140516963 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486476261 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077132814 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083671014 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627222468 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372076442 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135403168 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092306984 seconds)
  done (took 18.518700327 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.081375919 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.084023405 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.082708304 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.079759475 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.078803491 seconds)
  done (took 2.36925913 seconds)
done (took 116.723707713 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.088884561 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.179895681 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.072572751 seconds)
  done (took 2.176345484 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.087893584 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082960075 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083115738 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080975075 seconds)
  done (took 2.230777711 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.079633713 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079107068 seconds)
  done (took 2.047896167 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227778645 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178683817 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092392484 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086535883 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082096875 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082421073 seconds)
  done (took 2.147720972 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.076016094 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073885866 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074400196 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074379066 seconds)
  done (took 2.180360902 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071870097 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070807188 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.071643818 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075974711 seconds)
  done (took 2.173068174 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.09062023 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08716461 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115802809 seconds)
  done (took 2.178961027 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.089033576 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086777886 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082441631 seconds)
  done (took 2.154017847 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11566412 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101120226 seconds)
  done (took 2.107525056 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085809356 seconds)
  done (took 1.979518726 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.096264473 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102982016 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.145412692 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.111998478 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145257666 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.132432374 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078924942 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079852526 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076178447 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074665153 seconds)
  done (took 2.936246571 seconds)
done (took 26.783364615 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084231724 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.376434812 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.362335992 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089373491 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.67357178 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359131855 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.999108793 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093354343 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102048952 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070201399 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087292003 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652887953 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.988832698 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.334645688 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.977351204 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.332828846 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.654708018 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071765627 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069945426 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07088723 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.983612879 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070447473 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070704091 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071186604 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652489407 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376856152 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07403615 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.335027418 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073781356 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.076718191 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.363190002 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.075139831 seconds)
  done (took 16.531705335 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075579962 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130024072 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077972773 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090076652 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075382894 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074879965 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.076426965 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.074054304 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11599266 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073712343 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090440775 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072427519 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.075750756 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071235556 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090236153 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070390183 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072804161 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071373951 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070374278 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071435025 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089471756 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069971629 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071252303 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070950389 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071079464 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083546788 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071868981 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070347329 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070634853 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072732168 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073818064 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071471699 seconds)
  done (took 4.413810371 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.130602473 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.13432665 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.079020665 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.116181279 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.124654594 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.075520419 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.157778604 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09832057 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.120918664 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.074496287 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090322778 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073657755 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.110702705 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.075204868 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09144311 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070585813 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072327187 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071158376 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071329874 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071913862 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089342227 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070337612 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071180845 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071268455 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071140916 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085475404 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071143856 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070729666 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070583116 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072924229 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075307833 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072286358 seconds)
  done (took 4.70971794 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.075241556 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.076128553 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.085376698 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.086312843 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071753657 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.07373943 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.07352686 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069089045 seconds)
  done (took 2.521618554 seconds)
done (took 30.077103366 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.083619557 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.071123346 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073164028 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090375257 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076169649 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07264019 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.06697712 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077536364 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073985925 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.074896141 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075813221 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06893914 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072483226 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067433683 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074504202 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068187735 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074716329 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072971925 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072926481 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074067599 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070684702 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074324468 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077131417 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073375285 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073285245 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072910777 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07728225 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074020717 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069018589 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070877755 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070350433 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082803171 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074686565 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074643147 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068002934 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067965385 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073295816 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070853264 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074831421 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.08033995 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.073486398 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.08054484 seconds)
  done (took 4.977402949 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.094088965 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.099752375 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.091482482 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.087861663 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.113739644 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.087051381 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.096046018 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.084757387 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.08352526 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.095644838 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.079113679 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.083679491 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.085506609 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.079935992 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.083051659 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.079985248 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.085500279 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.079077506 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.084478069 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.084114016 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.096773476 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.077036593 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.084100143 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.085590099 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.079434843 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.084759361 seconds)
  done (took 4.189443667 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.077873554 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.09347042 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.098095387 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.148741503 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.115705379 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.087650388 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08732368 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.109541222 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.106967401 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.073160251 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.076845274 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.100803124 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102707055 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.079685785 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.113179723 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.091605392 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.086093146 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.074435588 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.079486107 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.10900572 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.096214239 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.092374139 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.106564379 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092407103 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069438818 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080269724 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076758651 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085951018 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.078058448 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082726607 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074355941 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.074139784 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070828987 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.08296008 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074979692 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068993771 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092591013 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086173364 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.088777078 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.112593323 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.08055462 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071552564 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100970599 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136161136 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069851042 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072525622 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073987139 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082441385 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.07402585 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100544022 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088628544 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069971398 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.092394369 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07386505 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073332691 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088495861 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.072172104 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072223219 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082774713 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076214564 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090763737 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075320729 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090982365 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069783466 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08137909 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071562651 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071810811 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068709814 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106610612 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077311329 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122837243 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070940013 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068328447 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082150073 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081407934 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076871564 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069959808 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089303159 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082156604 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073840451 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.082024597 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072431319 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073268792 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.106067515 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069168825 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.069057561 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06826902 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.073326824 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.074188813 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.073020409 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08670564 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071879451 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075870696 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.088608437 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.072512694 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.073547784 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.075527714 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.074046558 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071945274 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08411354 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.076701578 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.074332054 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.085505867 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073834682 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.076185533 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.087991995 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.08263191 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071873412 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.073744323 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.075064004 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.074248514 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.075785923 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072909732 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072105403 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.079155072 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.080534495 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.078678279 seconds)
  done (took 11.644281483 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.171044493 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.159657896 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.074549589 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.154495914 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.082356794 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.077848133 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.156185232 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.093850376 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073413226 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.074558705 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.072855738 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.102124701 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.097425593 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.112418363 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.076951858 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.072104708 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.097923592 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.108069814 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.156125639 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.15284713 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.097774182 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.081550362 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074363571 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072208023 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07197515 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079374167 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086979741 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078695315 seconds)
  done (took 4.772690956 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080863234 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086119613 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074970026 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094772426 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089237856 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071151144 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072510512 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071683445 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087637249 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077349376 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070505792 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074708569 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074345298 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071460707 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071233974 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077469675 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077323675 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069738779 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074732867 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075090735 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081655587 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.09836459 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.077981308 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.071365862 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074064422 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070583935 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077214101 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080280161 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070176664 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101023608 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06746716 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074429245 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084749521 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071715865 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.072130362 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.073646969 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.073538175 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.073387021 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.073396139 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.071338413 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.071716354 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07627498 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069556416 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076639901 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.085235355 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080085827 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.075234888 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075289529 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.074580591 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06959006 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074332473 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073885572 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073247809 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079364279 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076835392 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.075626061 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.074726504 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.103714867 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.079065817 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.072416288 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.071585005 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.071560304 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.078195599 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.079632125 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.09046469 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.074726671 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.071578204 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.073671007 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.078432807 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.087943227 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.072685638 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.078545483 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069975137 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.072449503 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073271553 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073778808 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.07204994 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068887952 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070273223 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071505395 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.073023015 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.07313047 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.072689782 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.075719183 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.071141655 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.071453692 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.073890335 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072825378 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.077141899 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069220071 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073180597 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071574726 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069544074 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073190929 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075847083 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073544639 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091240588 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.082232417 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.07212149 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068716476 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084979175 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.0751851 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071701139 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.079161173 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.077789683 seconds)
  done (took 9.945114723 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.097342318 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.07531661 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.093915245 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.100536924 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083456385 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.079213021 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.087317714 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073956013 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.090326488 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.072529824 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.082875469 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.0715485 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.087020306 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.082701935 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.074945204 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.08451451 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07640053 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.094504221 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.088767658 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.07237462 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.083445579 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.086360887 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.086081742 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.091783723 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.092109355 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.092584889 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.085636486 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.075929722 seconds)
  done (took 4.341024506 seconds)
done (took 41.767855265 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.977159625 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.147219115 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.980686453 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.19144568 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.031514636 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.108737484 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.102461012 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.989204522 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.084975393 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.999002347 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.29965719 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.393407145 seconds)
done (took 69.281670612 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.00260397 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.119556255 seconds)
    (2/2) benchmarking "String"...
    done (took 2.208856102 seconds)
  done (took 6.232932628 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.575551822 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.975143792 seconds)
    (3/3) benchmarking "different"...
    done (took 2.025424961 seconds)
  done (took 8.477868801 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.109908178 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.005008313 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.226727378 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.976781836 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.979438973 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.364145868 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.786135838 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.431912648 seconds)
  done (took 32.673045711 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.281506876 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.220800024 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.71892488 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.73588471 seconds)
  done (took 16.904848607 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.581694251 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.237487613 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.239504026 seconds)
    (4/4) benchmarking "different"...
    done (took 2.229687578 seconds)
  done (took 11.24732951 seconds)
done (took 87.648477265 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.978715787 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.013506366 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.982125716 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.13363715 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.056260378 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.002987948 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.983029424 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.01777722 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.977392855 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.975983663 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.424485003 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.979616181 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.989009945 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.009842675 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.976663567 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.027800113 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.477899783 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.987324307 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.024961926 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.451312846 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.452161724 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.982456719 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.978263439 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.202816211 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.005667798 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.995343251 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.472286855 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.978320005 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.679594785 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.994318876 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.980555438 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.9796859 seconds)
  done (took 211.075915358 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.980342801 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.954054105 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.005666687 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.999872405 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.645411335 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.169997603 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.129787477 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.665872454 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.978044521 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.975604372 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.196898153 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.977238699 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.255428123 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.929489374 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.974536427 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.024937136 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.206068962 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.237271373 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.974012068 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.171414277 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.987245389 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.097337194 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.161342384 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.202363215 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.021881437 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.983818877 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.000381239 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.985486766 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.166776036 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.198660476 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.01173277 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.025295971 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.184872966 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.8417152 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.003503061 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.995639177 seconds)
  done (took 178.227369274 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.160421078 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.992126198 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.045696169 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.116004397 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.757377284 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.735656992 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.983025116 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.982871274 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.983011625 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.99241173 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.987448643 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.052124487 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.526905942 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.99567518 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.97625208 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.981888296 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.429116415 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.988892418 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.981051518 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.981660538 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.046881769 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.350212404 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.114477617 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.981934928 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.992915185 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.117070145 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.99002492 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.98141717 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.116507768 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.981248928 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.059675529 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.111931073 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.989471764 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.0634597 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.983606109 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.475930642 seconds)
    (36/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.982013588 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.981628399 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.981404343 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.982865639 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.044846027 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.976869318 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.09508126 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.07305591 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.977609556 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.993723646 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.052867946 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.660066601 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.980352799 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.98003714 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.980714611 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.982545073 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.980450348 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.984645501 seconds)
    (54/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.98263933 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.753204859 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.982987438 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.01065393 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.61963265 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.982574197 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.983571339 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.985200504 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.98276996 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.982457752 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.989447922 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.020746084 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.797801264 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.199575163 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.371869147 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.783563394 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.982214629 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.092575628 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.040627331 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.984568304 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.063393534 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.977955769 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.984027229 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.984401981 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.984250544 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.075825585 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.061888302 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.978991979 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.122138793 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.983338695 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.984538252 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.140212342 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.426624877 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.206914775 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.000791428 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.043687818 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.985986678 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.987129127 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.004814292 seconds)
    (93/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.990011396 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.145498689 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.983051675 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.988336321 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.987228537 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.170966543 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.984931307 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.311419438 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.208419669 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.057445283 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.239472255 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.228051493 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.98963051 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.98742192 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.005779947 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.990978472 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.988985555 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.999103064 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.989825659 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.988234376 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.990126898 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.990724272 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.988969761 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.993482712 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.002188104 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.984763313 seconds)
  done (took 434.176841191 seconds)
done (took 827.592756567 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.665017719 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.740857698 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.582918484 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.616446319 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.580894525 seconds)
  done (took 15.098609285 seconds)
done (took 17.012610988 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.020664824 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.005730827 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.994730822 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.050268142 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.015125989 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.001397131 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.03599851 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.034427948 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.018692471 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.002090603 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.043522589 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.007767138 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.020762538 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.023770843 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.066189687 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.030216433 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.00701721 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.99901968 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.046200964 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.006595566 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.0047937 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.004801433 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.003756238 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.040655698 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.076974026 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.01529347 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.002098551 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.040860435 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.016846002 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.03840347 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.060273491 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.023912867 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.038095619 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.070601507 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.049595076 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.075249756 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.01431184 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.060474746 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.011538981 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.076238713 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.04818377 seconds)
  done (took 85.117892426 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.002751928 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.134072599 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.234128458 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.02795564 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.002020846 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.210910866 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.052755004 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.130086239 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.132005278 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.20748633 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.220305821 seconds)
  done (took 25.277852072 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.000778691 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.138617755 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.221380333 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.031407155 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.024492288 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.213582238 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.058888469 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.133970686 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.134975782 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.216326842 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.244687559 seconds)
  done (took 25.346347359 seconds)
done (took 137.65948488 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.367863348 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.020525069 seconds)
  done (took 6.30581149 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.993981997 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.013463596 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.153656719 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.995695688 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.997866446 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.998269888 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.997771093 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.995842097 seconds)
  done (took 18.064729111 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.99653581 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.995183938 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.996585763 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.994784084 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.996774847 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.995406168 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.994673564 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.994811708 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.997301248 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.99499748 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.99683888 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.996672633 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.996015818 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.99715858 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.996919874 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.99574706 seconds)
  done (took 33.855289825 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.997173626 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.994621029 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.996888395 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.997404272 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.998002144 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.996388029 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.998047536 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.998174643 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.997846074 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.994754856 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.99652618 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.996622468 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.996616742 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.998469215 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.997250318 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.999486994 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.997958565 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.998374106 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.999275362 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.999177061 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.997652617 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.99963677 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.00114621 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.997581238 seconds)
  done (took 49.864698516 seconds)
done (took 110.019464619 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.18391873 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.546230186 seconds)
  done (took 8.650943175 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.001535144 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.998990288 seconds)
  done (took 5.986760788 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.997630974 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.997011263 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.998796698 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.997343057 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.997288673 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.998803504 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.998401889 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.998963758 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.999432113 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.997536645 seconds)
  done (took 21.902396616 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.997550955 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.999598495 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.999933962 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.998918675 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.999331511 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.999328976 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.998162804 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.00000494 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.999921404 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.99901296 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.000809543 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.00054187 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.999934448 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.9995183 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.002448389 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.001189494 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.998290222 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.001316925 seconds)
  done (took 37.918316237 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.000494921 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.001865325 seconds)
  done (took 5.925397889 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.000884029 seconds)
    (2/7) benchmarking "second"...
    done (took 1.999289549 seconds)
    (3/7) benchmarking "month"...
    done (took 2.003010696 seconds)
    (4/7) benchmarking "year"...
    done (took 2.001567318 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.000649482 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.002311013 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.001448474 seconds)
  done (took 15.930869217 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.001973873 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.144405448 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.197306619 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.614727016 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.003743962 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.003899646 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.878713039 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.003573234 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.005205992 seconds)
  done (took 21.777759016 seconds)
done (took 120.014896663 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.838459889 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.995168532 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.222618477 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.069899265 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.066364903 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.33825587 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.008411402 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.548243741 seconds)
done (took 44.01154166 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.081360907 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.998952955 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.028459847 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.02852559 seconds)
  done (took 22.979894094 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.00250022 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.327740501 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.023181948 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.999490647 seconds)
  done (took 23.294422329 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.383369785 seconds)
    (2/2) benchmarking "read"...
    done (took 2.35387306 seconds)
  done (took 6.668455863 seconds)
done (took 61.952652652 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.003198403 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.003350817 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.000533433 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.002929227 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.002022477 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.003127222 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.003446178 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.000851801 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.002717169 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.002322219 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.003037739 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.003608678 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.001710443 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.002936276 seconds)
    (15/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.002050031 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.003610553 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.002315067 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.003313608 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.00098309 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.003176494 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.002772736 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.001840561 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.002364361 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.002672899 seconds)
  done (took 49.986094186 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.002738908 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.00405565 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.98928778 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.002471636 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.003309018 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.002596394 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.002674244 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.003952945 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.003382811 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.003615031 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.003903884 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.002922267 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.004018235 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.005008638 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.002080225 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.988659816 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.987051935 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.004377917 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.004707533 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.00553478 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.00409924 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.004414077 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.004074862 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.005701058 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.005871461 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.006895602 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.00796295 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.006966971 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.008414581 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.006992519 seconds)
  done (took 62.014364882 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.006257331 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.009711726 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.00801552 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.007135671 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.007649111 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.007530914 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.007819023 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.006886307 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.008401996 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.992732292 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.007849654 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.992640302 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.007440747 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.009793209 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.007240313 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.009604986 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.008110801 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.007502602 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.008171472 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.005309678 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.008570046 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.007666826 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.008670682 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.007313828 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.007571799 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.007393735 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.008435654 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.008993862 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.009180325 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.008514163 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.009265595 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.009378415 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.008278645 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.008249093 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.010570847 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.009901116 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.008445195 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.009873753 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.009901183 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.010629996 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.007916681 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.009462557 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.009081038 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.009479105 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.008599221 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.009639285 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.01078677 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.010385344 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.008630981 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.011739909 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.009429384 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.009692306 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.009392268 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.010791038 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.010839511 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.010600112 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.010786106 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.010554002 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.011735146 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.010924524 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.011156891 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.011215287 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.010015019 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.008994916 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.010835937 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.010525811 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.012344806 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.01118328 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.012278271 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.011391865 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.011782489 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.009165919 seconds)
  done (took 146.567342259 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.010425722 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.011504006 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.012579944 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.011557324 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.012856631 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.01232363 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.012710423 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.012266681 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.012741511 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.012545131 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.012554525 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.010250084 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.011922467 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.011954841 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.012107721 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.011579336 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.012089239 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.013061081 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.010811133 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.011551742 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.013099993 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.011401834 seconds)
  done (took 46.196904415 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.011726417 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.011326384 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.013192321 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.012095134 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.013110609 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.012588455 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.01349596 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.01226936 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.012077946 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.015258485 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.014997291 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.01328881 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.012672581 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.013812232 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.0149416 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.012510292 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.012089918 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.012920053 seconds)
  done (took 38.167029633 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.014430554 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.012781693 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.014145838 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.012626749 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.012872423 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.013729335 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.014954957 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.01365626 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.013422519 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.013293846 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.013670565 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.014253125 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.014885359 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.013875121 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.015162896 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.01539984 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.014706329 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.014493573 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.010237554 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.013049352 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.014387422 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.013844959 seconds)
  done (took 46.238859228 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.014098344 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.015035448 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.014390764 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.013879237 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.015897677 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.015664244 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.015112519 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.015169552 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.015351591 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.015427438 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.01422373 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.016309664 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.016463556 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.016609496 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.017827596 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.015205715 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.014885203 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.016278574 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.015736687 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.016363562 seconds)
  done (took 42.246819753 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.016794685 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.015974135 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.016826624 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.01655145 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.017081714 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.017731268 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.016941175 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.015926389 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.017663668 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.017723505 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.017583473 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.01618668 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.016766387 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.016505766 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.017597467 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.018931869 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.016569331 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.016912047 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.018313279 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.015935497 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.018148393 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.01722075 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.017538771 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.017410769 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.017769863 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.018331086 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.018951486 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.020149652 seconds)
  done (took 58.423051042 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.017144596 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.018817408 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.0152409 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.017261891 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.017651194 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.016993862 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.017124719 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.017453974 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.016187419 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.018282012 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.018269475 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.018752812 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.018674239 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.017750002 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.017768848 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.01688854 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.019188516 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.018570001 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.019315622 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.019957103 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.018512462 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.017002151 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.01910473 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.019925107 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018200677 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.020484094 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.019290818 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.01939495 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.018597974 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.018174599 seconds)
  done (took 62.484344504 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.043005353 seconds)
    (2/2) benchmarking "in"...
    done (took 2.037179549 seconds)
  done (took 6.019978376 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.019897484 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.018637483 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.020113252 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.019768958 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.018570839 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.020260146 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.020409019 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.020213434 seconds)
  done (took 18.097128066 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.021180078 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.024281094 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.020512855 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.021733604 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.021033385 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.027620662 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.0219848 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.021489213 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.023619644 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.021994382 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.026070178 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.026576232 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.031521172 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.02646038 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.021339806 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.020808386 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.022349842 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.024892813 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.022916904 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.020879863 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.023628187 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.021500193 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.020821955 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.022713614 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.020753541 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.024587044 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.033586298 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.022912491 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.02272789 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.02072593 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.029282922 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.022589818 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.022303282 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.025312007 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.023272739 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.023635441 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.031064016 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.024682388 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.021704429 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.023993169 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.026754691 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.026045039 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.027076595 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.030690341 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.023871296 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.021710401 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.023637592 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.021791778 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.021497595 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.028725898 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.033307462 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.024744416 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.02394053 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.0237256 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.026946916 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.023324168 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.023944463 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.026565419 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.033260644 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.030664644 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.027780933 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.047805768 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.033847122 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.022711216 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.025709759 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.035005342 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.051190838 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.02803629 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.027142449 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.024504072 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.033144901 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.024348858 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.023867731 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.02486426 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.039176491 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.035707445 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.024493545 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.024711795 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.024415696 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.025831536 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.026415393 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.025003093 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.027804778 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.02491783 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.036650824 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.053598746 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.025770144 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.023895028 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.029245117 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.02642429 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.031483197 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.028238309 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.024471326 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.025829493 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.028432222 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.028358734 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.027091484 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.026864197 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.024695071 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.033570519 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.024054288 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.024223153 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.030950854 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.035574786 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.02603107 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.026959276 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.029062761 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.025984555 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.033768065 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.026490145 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.027615193 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.025371005 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.028480074 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.032188006 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.02624502 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.032153079 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.036749639 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.034612915 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.028564753 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.032628235 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.030905814 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.030087502 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.038886659 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.055610626 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.028009974 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.031918628 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.032353347 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.041486827 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.032667702 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.025488083 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.031095928 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.025913676 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.02728606 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.027655812 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.027145846 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.028827124 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.026866109 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.029219547 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.028195295 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.027757443 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.030701454 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.031187759 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.030900083 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.028796755 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.032894518 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.02886557 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.032906791 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.034374087 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.028698691 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.029303628 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.027948963 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.031796327 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.029051651 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.030966293 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.029046845 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.027975874 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.030947168 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.031575174 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.03213131 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.02869752 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.031391817 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.031325812 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.03268723 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.031409889 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.029000026 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.029570589 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.0279499 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.03096734 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.031637486 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.029556704 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.03268929 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.028233174 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.034942353 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.029110061 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.029591955 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.028727242 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.029496711 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.030452519 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.03510154 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.044698599 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.033734073 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.044019483 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.029787184 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.040418025 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.031641519 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.032373294 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.031380912 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.031836107 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.031885991 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.031338112 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.029524169 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.033973708 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.053566208 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.04317259 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.033672764 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.031933636 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.03803709 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.034870224 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.03707571 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.032037292 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.033093059 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.032203323 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.030731503 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.031739512 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.015717274 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.036299176 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.032204 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.030866021 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.035507317 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.030595295 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.031755748 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.033547032 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.031605759 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.034542375 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.031385848 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.030949838 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.032720373 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.032693346 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.040065216 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.036099902 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.030139406 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.031603145 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.034435045 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.03332295 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.032934625 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.030688864 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.037951877 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.032393084 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.034448496 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.039907453 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.034256053 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.035184314 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.033528561 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.031692843 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.034717205 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.032876739 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.03897914 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.042367678 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.036883072 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.032515298 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.040206053 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.033161843 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.036015757 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.034279107 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.038540451 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.033805198 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.037811915 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.034917337 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.036468397 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.042038523 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.034094076 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.037266079 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.037235959 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.03816075 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.034789268 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.03575165 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.034978194 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.039145069 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.046762189 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.042584835 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.036876267 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.038632615 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.038037208 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.035957504 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.039153289 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.037047928 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.050055964 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.047601916 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.035853656 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.033958061 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.038266152 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.043046748 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.035960129 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.036557732 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.043319807 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.036825704 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.038263653 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.040677747 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.036150356 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.035671344 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.043694164 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.037899169 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.040885566 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.036858547 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.037914104 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.038483174 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.034515043 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.039764642 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.037281297 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.038837386 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.040741901 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.036445958 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.038561231 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.037275022 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.045925677 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.037976745 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.037133815 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.043682224 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.039208231 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.039213379 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.038105842 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.037998166 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.037597912 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.039520317 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.036334867 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.040513514 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.03910653 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.042141415 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.050416556 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.041254579 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.048321582 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.03915994 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.049857792 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.038926863 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.037059106 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.038997348 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.040990816 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.047380312 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.036649836 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.038728478 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.047339955 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.039975428 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.040160429 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.044051987 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.038412545 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.039649868 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.038052512 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.039557682 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.044794808 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.042507185 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.0392647 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.039696111 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.03977769 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.038035287 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.042062417 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.041384832 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.039013064 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.039351279 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.038622052 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.038576823 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.039787854 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.040096858 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.039899259 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.03867712 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.035753185 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.048559776 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.038974615 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.042913471 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.044820053 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.039742093 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.050199205 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.039524388 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.039970123 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.042440071 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.039128634 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.042757663 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.039387283 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.03959985 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.038416146 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.039847194 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.041117563 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.051661046 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.047298289 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.042152746 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.039919168 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.040615457 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.041528928 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.051204259 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.067617231 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.038854768 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.042599764 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.043313503 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.048190038 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.042108016 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.047136876 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.043053136 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.051457847 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.042628588 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.04174579 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.043799622 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.053871747 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.039526381 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.04085599 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.0416911 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.045778159 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.044571015 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.040925113 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.043218706 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.044376129 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.04380545 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.054275724 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.041037747 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.043943744 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.043505494 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.04140271 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.042713991 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.041569748 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.043291843 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.043822964 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.043361773 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.042101799 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.04653908 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.049338219 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.042636123 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.048216382 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.05470922 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.042893248 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.044053564 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.043919016 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.045404105 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.046479035 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.043349684 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.044158009 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.04522199 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.043350836 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.043852003 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.046691304 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.054965774 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.04495449 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.042610837 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.043060622 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.047896158 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.043992665 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.0431728 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.045812195 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.052439484 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.047946294 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.058275429 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.054539583 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.044165208 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.046508826 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.051433658 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.054349176 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.043771966 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.043630964 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.044524268 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.046207798 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.047936982 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.046227562 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.043663886 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.037921313 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.050178006 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.045052337 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.045162021 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.045022194 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.044015763 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.046458189 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.04706695 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.052179334 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.045035189 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.044912364 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.045321837 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.048273228 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.046030878 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.048790192 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.04477456 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.046478721 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.047420728 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.048102067 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.050375225 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.044703235 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.044663232 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.049783487 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.046152448 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.045002807 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.045823818 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.047239734 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.047407415 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.049263966 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.05568576 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.046030528 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.047511351 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.047312729 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.049632973 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.047150838 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.046612932 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.046407079 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.046132304 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.055409694 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.045477825 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.046657507 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.047019643 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.047404664 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.054109336 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.048226284 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.051433888 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.046678851 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.048504399 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.047605325 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.05135389 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.058077039 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.052081269 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.051642815 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.056170009 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.049789781 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.049469509 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.04741969 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.046732578 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.04943014 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.050462463 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.0517061 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.050950195 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.051495221 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.049506922 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.050549229 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.047683987 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.050426502 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.04883693 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.048291999 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.054483557 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.060017063 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.056742902 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.047623734 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.05005468 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.050045266 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.053906644 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.062646637 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.0485105 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.050700827 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.050017703 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.04795867 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.050623978 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.057806122 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.058963141 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.052803844 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.048919407 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.054660508 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.070679371 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.051526348 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.060772904 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.0856867 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.051163513 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.049907551 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.051090782 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.052747101 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.050329546 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.05330661 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.049276099 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.056442587 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.049441678 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.051222296 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.057513122 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.050137855 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.050198747 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.050920513 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.051596052 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.058472175 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.04897524 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.05993436 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.049127463 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.048802627 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.051083504 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.053494856 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.050782926 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.04984735 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.05225869 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.052645824 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.049759191 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.049957541 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.059329584 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.053403056 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.050908021 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.062377675 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.061327875 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.050549698 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.540571158 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.050986258 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.055991381 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.05261393 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.048264639 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.05401512 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.061464221 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.054546999 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.059974547 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.051820161 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.050983487 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.049023393 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.047872132 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.051139418 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.06671603 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.063192711 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.05042225 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.051051169 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.058044649 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.048467185 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.056755229 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.05549827 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.050889394 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.052367593 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.051194754 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.047381735 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.047191676 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.048955631 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.05378163 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.058278149 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.048008883 seconds)
  done (took 1218.002986873 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.04833259 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.045752136 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.047989088 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.046356895 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.049028864 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047695333 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.050851676 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.046715809 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.046571832 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.047707595 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.048323991 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.046649875 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.047052664 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.045456391 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.047143088 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.047742319 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.048982906 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.046997876 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.046795766 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047555614 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.047250182 seconds)
  done (took 44.965199283 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.033040057 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.032694376 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.0341779 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.033337476 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.039586307 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.043520067 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.041607701 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041111461 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.043719366 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.041885401 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.039971749 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042016352 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.041376952 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.040938915 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042664908 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.039183434 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.039114127 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.038809228 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.039675696 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.041409103 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.037617056 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.038160223 seconds)
  done (took 46.831770923 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.040350441 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.04124795 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.039837828 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.03726337 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.038749804 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.040436281 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.041319336 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.043475835 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.041411208 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.042811829 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.052773861 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.048199056 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.0379454 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.04363786 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.039813461 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.041962871 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.185440201 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.03771486 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.041644553 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.040240962 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.043603446 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.04464062 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.038893131 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.039224173 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.040064571 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.040863292 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.038523137 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.03815047 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.037783403 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.040716551 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.047782812 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.038513972 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.038655602 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.040951289 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.036001207 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.041124757 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.04403313 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.038382163 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.037702107 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.038824053 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.048491069 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.064899867 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.039843456 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.039040313 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.040829403 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.039691769 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.037927315 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.044908091 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.048816079 seconds)
  done (took 102.146632554 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.038812002 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.038600933 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.039452162 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.04040601 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.039822483 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.037866118 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.040459551 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.038706435 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.04167693 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.040469695 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.041030539 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.040764741 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.03874596 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.039854174 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.039125978 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.037247404 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.040281712 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.039657885 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.038502857 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.04014315 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.038115355 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.040310742 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.040262965 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.03979716 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.039409994 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.040668957 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.040144308 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.039221026 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.039869063 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.041335053 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.040215882 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.039522095 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.040304042 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.041414281 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.042790363 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.041631545 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.039459546 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.041195433 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.039453221 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.039819849 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.042594157 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.040511577 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.039542821 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.040113683 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.043444705 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.041277882 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.040360507 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.041254368 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.041439722 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.045017714 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.041470985 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.04023925 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.04100634 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.042638373 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.041530984 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.043315972 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.0418967 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.039621535 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.042812837 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.038489007 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.03720902 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.040465767 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.039009583 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.044545442 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.036483501 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.035960423 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.034895276 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.035184976 seconds)
  done (took 140.691219493 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.032242293 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.032929528 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.031974381 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.032092319 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.034706083 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.03043178 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.028763354 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.029445105 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.030570723 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.0321158 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.030174539 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.028579365 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.028399692 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.03051865 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.027673803 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.02736685 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.028803458 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.026489308 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.026826422 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029865575 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.027694553 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.028122537 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.027765893 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.026887349 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.029207748 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.026448519 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.025778364 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.026907615 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.027537513 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.029110193 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.025509852 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.024464023 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.026361983 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.026965241 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.026485462 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.026049609 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.025855501 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.025961163 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.025448117 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.026731628 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.025419488 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.025837935 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.023792058 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.025557222 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.029157942 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.023932121 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.024084744 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.024616142 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.025027368 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.02457287 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.02245083 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.022934171 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.026078865 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.023302359 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.024549353 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.023072813 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.022080375 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.023790269 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.023928646 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.022605479 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.024158152 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.024003257 seconds)
  done (took 127.628345171 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.02533038 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.022225242 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.024507289 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.022369023 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.021884961 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.027637916 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.023545524 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.023639225 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.021068787 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.020220687 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.025423156 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.022065656 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.021236034 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.020427967 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.020960996 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.023963132 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.02171329 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.020337864 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.022773924 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.022301237 seconds)
  done (took 42.398877288 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.021027683 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.02203881 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.022864082 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.020885489 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.023732942 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.019943728 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.020515131 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.019133942 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.02003379 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.022676842 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.015855016 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.017815178 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017975867 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.018841986 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.019967843 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.019245822 seconds)
  done (took 34.266371138 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.01905215 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.016930999 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.023236298 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.016853395 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.017992691 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.016501471 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.017951248 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.019042643 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.017697344 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.01748346 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.017607467 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.015292321 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.01706993 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.017417397 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.016180036 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.017181712 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.017736568 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.020118972 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.015438931 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.01695309 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.017623596 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.017849124 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.019793844 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.016275321 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.01742523 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.019172906 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.018609941 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.019997533 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.017822225 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.016462297 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.016179792 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.017280136 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.015414301 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.014050601 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.014465473 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.014481672 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.015233371 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.018191317 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.015495613 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.015126093 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.016984178 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.018035545 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.016374428 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.015677962 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.016082548 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.013887687 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.999777132 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.019517877 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.014789012 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.016748151 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.013948757 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.014158693 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.018153286 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.016035497 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.015923535 seconds)
  done (took 112.858978468 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.015991945 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.016695171 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.014619032 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.015560322 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.01771178 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.014181783 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.015970482 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.015694034 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.01616247 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.015956358 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.015733261 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.011058968 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.01287834 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.014371404 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.004315145 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.014795633 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.016686581 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.014479254 seconds)
  done (took 38.200756602 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.015517291 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.016019242 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.01742673 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.014222621 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.015644015 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.012247676 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.013647714 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.015897249 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.014559721 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.013948378 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.014598181 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.013018116 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.015535403 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.016282139 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.014743976 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.016166501 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.01289403 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.015649817 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.015582142 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.012871251 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.014116274 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.017937354 seconds)
  done (took 46.265759558 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.015854558 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.01428351 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.028371506 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.036232259 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.031914888 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.045906865 seconds)
  done (took 14.109784859 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.01114548 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016201669 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.013606231 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014326605 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.011290751 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.012463067 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.013994723 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014950729 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011721267 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014694779 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.014642178 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.016605256 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014087626 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012316472 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011996587 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.015948595 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.014883301 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.015687777 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015076175 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011626463 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014574093 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.016248513 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015058326 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017032047 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015752707 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.016037873 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015259931 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014342075 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.014412733 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.015447664 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.01390025 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.017856966 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014981321 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015716406 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.016535689 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.013813759 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017562867 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016829079 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.015251496 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015269239 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.015442635 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017427409 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015072269 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.015886128 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.014826602 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.01407379 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017823644 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015937505 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015773612 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014513354 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.015346637 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017377055 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.014235716 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.015040883 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.016061162 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.01697491 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018793131 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.016263512 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015088476 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.013952524 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.013722392 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021047251 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011426802 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012600879 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.013030151 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015603147 seconds)
  done (took 134.928214493 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.013249996 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.015588146 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.016865762 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014809849 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020067404 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.017148414 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015505 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017068625 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.016557126 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022563739 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.01782375 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.017910079 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018684322 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01820546 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021843374 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020886913 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019862696 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.019938633 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01803056 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019895024 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.018221682 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.018185767 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018627339 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018328387 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022486997 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.017937091 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018189786 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.017608295 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018900803 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024076137 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018466006 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019015735 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.020348683 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.018040009 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023251112 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.019992098 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019992765 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019535574 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021326908 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02567176 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020924755 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019955443 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021261667 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020391603 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021096109 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019828783 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.018688963 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020973328 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021181314 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021706491 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023452554 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023136907 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020747621 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022512337 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021929676 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020613278 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020666475 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021684009 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024172697 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022106352 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022765763 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021631561 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021342722 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024904397 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021515248 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023775134 seconds)
  done (took 135.265817007 seconds)
done (took 2816.936068024 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.103981446 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.089340939 seconds)
  done (took 16.135939016 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.184408515 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.063430716 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.203449538 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.13784078 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.026708331 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.025898244 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.018788922 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.022541996 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.115066833 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.022849893 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.051361484 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.018918028 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.024384243 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.021760252 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.02288118 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.023721912 seconds)
  done (took 54.933674634 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.030067726 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.028697001 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.023837778 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.023414691 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.038858404 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.10131231 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.043456997 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.028219651 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.038836367 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.058443178 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.045499474 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.028407091 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.033334225 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.030962264 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.116499129 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.070083009 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.080555755 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.098620779 seconds)
  done (took 38.862039725 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.10716993 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.025960617 seconds)
  done (took 11.084021583 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.044250285 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.044662311 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.040306923 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.037451892 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.018526105 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.039343267 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.018579775 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.028598649 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.033149525 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.012700688 seconds)
  done (took 72.267820882 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.025305997 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.025506386 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.288671876 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.032690654 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.035005073 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.052092036 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.020751298 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.053970953 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.021932283 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.020890816 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.031485936 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.295860859 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.031917342 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.025334389 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.376692476 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.033571274 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.032950156 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.055940333 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.055614553 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.028369562 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.03045309 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.028096564 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.185146941 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.731049721 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.018230784 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.026143162 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.033545213 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.019482175 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.023471082 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.024851832 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.027803788 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.02376945 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.029184165 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.026078259 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.028891567 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.028775847 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.525419434 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.044179226 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.03391562 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.104077636 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.070411836 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.03059965 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.83046513 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.024910342 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.023061372 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.035447714 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.703974166 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.078467417 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.025327446 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.173800376 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.370978146 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.036721579 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.191205586 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.183217405 seconds)
  done (took 141.260625717 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.019563977 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.258252483 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.173678984 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.02308573 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.275590804 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.227068635 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.018361877 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.066401646 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.020259404 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.221999788 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.269481784 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.121529426 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.021259478 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.020901089 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.020500237 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.017413612 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.16935864 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.09120666 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.021115782 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.023004497 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.048125996 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.225317219 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.142511372 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.011233495 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.049314929 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.2298529 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.138095232 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.123121994 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.821571482 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.022524171 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.085000125 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.022727901 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.032878097 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.020425661 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.179138628 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.118188492 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.103074362 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.03214075 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.025082956 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.027316017 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.703628078 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.227426723 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.118956693 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.146607959 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.274158034 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.244438418 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.635108711 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.026995591 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.653760395 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.192741967 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.241709305 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.234629977 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.142646074 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.023940427 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.578402754 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.03246993 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.02848354 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.252753084 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.242736796 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.129020181 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.036631798 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.031115405 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.029911296 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.266698012 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.020373992 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.117908141 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.026513976 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.031924383 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.117949772 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.122322133 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.250528248 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.242829131 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.052330081 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.350979975 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.513205243 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.22701534 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.088286816 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.244930899 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.023590809 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.027620213 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.108023471 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.869097934 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.282359345 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.267353119 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.224218849 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.059478402 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.678369553 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.030599459 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.220211082 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.21799838 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.260384423 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.274964562 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.263603989 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.403477823 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.028747883 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.030007341 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.353289738 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.145470939 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.977895604 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.383212851 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.258947921 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.532506522 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.058250536 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.358834874 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.159113523 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.035324546 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.68045836 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.038921723 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.237535064 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.076322204 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.034142046 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.036417216 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.220370923 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.936373467 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.0348205 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.731811351 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.094357854 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.030071938 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.235959584 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.033796166 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.276761624 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.031855654 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.26611165 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.659590563 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.068798253 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.257272536 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.276945457 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.656348797 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.273322437 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.271818493 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.143997099 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.256686207 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.765480427 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.034415029 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.294775321 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.032166284 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.033574816 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.201933648 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.034035064 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.176350711 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.033024886 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.300044571 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.052545959 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258815828 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.034366478 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.271309118 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.062830338 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.07994056 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.034795134 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.160888988 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.041831495 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.870670274 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.192025325 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.038388806 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.03465684 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.761842328 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.037463679 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.181971538 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.265611618 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.052030369 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.103880014 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.59533569 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.030591318 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.116953396 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.053222692 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.310980385 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.033220295 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.287465185 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.993526306 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.520827722 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.03796043 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.272566691 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.216228165 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.040888329 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.037877013 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.881480764 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.036588868 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.037909469 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.195749578 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.423810929 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.937893035 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.237307733 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.037845063 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.161391568 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.036643574 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.114288527 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.383105857 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.036078466 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.035744939 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.038155 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.038994938 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.041352064 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.298459684 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.058904094 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.467806657 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.173400247 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.292362311 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.340464478 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.236112338 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.075207204 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.042502945 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.256952211 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.039944857 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.100171812 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.037864839 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.056545207 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265559096 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.039028779 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.243247976 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.271918023 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.911221354 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.085607306 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.042119081 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.040870518 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.995170469 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.183539578 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.123147519 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.040894229 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.039908595 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.152922685 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.156485734 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.217438146 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.853825624 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.153652394 seconds)
  done (took 936.744624262 seconds)
done (took 1273.234071302 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.040232579 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.040808383 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.043717181 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.040300712 seconds)
  done (took 30.127435487 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.043168619 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.04068204 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.042660986 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.042136431 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.04266779 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.044526504 seconds)
  done (took 14.218205305 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.041519122 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.042090324 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.042585328 seconds)
  done (took 23.090291895 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.465737679 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.441473665 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.114345978 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.181226295 seconds)
  done (took 11.167278481 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.047907644 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.041788981 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.043559406 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.044209764 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.044192458 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.046254998 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.045386242 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.044628848 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.045041385 seconds)
  done (took 20.373577043 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.248950594 seconds)
done (took 105.187924328 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.067117777 seconds)
    (2/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.507248987 seconds)
    (3/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.05116584 seconds)
    (4/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.041741272 seconds)
    (5/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.39091179 seconds)
    (6/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.043834317 seconds)
    (7/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.438211425 seconds)
    (8/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.124366338 seconds)
    (9/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.495958696 seconds)
    (10/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.124335112 seconds)
    (11/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.433982702 seconds)
    (12/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.363345079 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.057950898 seconds)
    (14/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.114395392 seconds)
    (15/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.0422005 seconds)
    (16/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 4.238357397 seconds)
    (17/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.127806622 seconds)
    (18/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.121664614 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.056223717 seconds)
    (20/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.832815451 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.148549799 seconds)
    (22/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.220225995 seconds)
    (23/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.393894884 seconds)
    (24/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.174813268 seconds)
    (25/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.898915917 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.399405263 seconds)
    (27/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.0432451 seconds)
    (28/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.045319929 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.074423856 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.193727493 seconds)
    (31/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.044438794 seconds)
    (32/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.40547158 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.145974044 seconds)
    (34/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.158409171 seconds)
    (35/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.824999345 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.892727402 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.179167238 seconds)
    (38/341) benchmarking ("sort", Float32, false)...
    done (took 5.726591614 seconds)
    (39/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.144129574 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.220083942 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.275078029 seconds)
    (42/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.442607902 seconds)
    (43/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.058379848 seconds)
    (44/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.262703503 seconds)
    (45/341) benchmarking ("sort", Int8, false)...
    done (took 4.992260186 seconds)
    (46/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.057881175 seconds)
    (47/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.192085651 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.411224949 seconds)
    (49/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.190679512 seconds)
    (50/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.362596387 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.459927754 seconds)
    (52/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.519709064 seconds)
    (53/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.22914526 seconds)
    (54/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.04423809 seconds)
    (55/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.320404655 seconds)
    (56/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.060996151 seconds)
    (57/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.12447301 seconds)
    (58/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.132731065 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.28919039 seconds)
    (60/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.063053066 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.442832371 seconds)
    (62/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.056130344 seconds)
    (63/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.047299974 seconds)
    (64/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 3.834140436 seconds)
    (65/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.237671183 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.787439354 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.652087503 seconds)
    (68/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.091346347 seconds)
    (69/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.047395632 seconds)
    (70/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.293312763 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.282429093 seconds)
    (72/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.085877703 seconds)
    (73/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.049642175 seconds)
    (74/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.247423518 seconds)
    (75/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.259797721 seconds)
    (76/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.120780524 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.05946919 seconds)
    (78/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.318763039 seconds)
    (79/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.37211423 seconds)
    (80/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.443577039 seconds)
    (81/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.044924537 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.059873162 seconds)
    (83/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.259359388 seconds)
    (84/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.045417746 seconds)
    (85/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.220627123 seconds)
    (86/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.068821967 seconds)
    (87/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.267510497 seconds)
    (88/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.460788177 seconds)
    (89/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.227214123 seconds)
    (90/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.247317336 seconds)
    (91/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.371422099 seconds)
    (92/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.050821618 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 4.343835516 seconds)
    (94/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.053840624 seconds)
    (95/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.320204791 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.051329373 seconds)
    (97/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.348754539 seconds)
    (98/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.97622447 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.944575773 seconds)
    (100/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.054292469 seconds)
    (101/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.362087755 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.43307854 seconds)
    (103/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.494401056 seconds)
    (104/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.062612075 seconds)
    (105/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.143569436 seconds)
    (106/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.048760928 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.393863102 seconds)
    (108/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.147075574 seconds)
    (109/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.847797497 seconds)
    (110/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.070075279 seconds)
    (111/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.061016231 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.172630796 seconds)
    (113/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.050760379 seconds)
    (114/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.338442812 seconds)
    (115/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.052185414 seconds)
    (116/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.181937082 seconds)
    (117/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.047748405 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 3.870163026 seconds)
    (119/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.141988637 seconds)
    (120/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.347953607 seconds)
    (121/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.319097834 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.181914053 seconds)
    (123/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.054219461 seconds)
    (124/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.843199498 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.670971145 seconds)
    (126/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.051527223 seconds)
    (127/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.143292958 seconds)
    (128/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.077639773 seconds)
    (129/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.310437889 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.067570631 seconds)
    (131/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.163258926 seconds)
    (132/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.056481405 seconds)
    (133/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.820250134 seconds)
    (134/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.195082436 seconds)
    (135/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.906650286 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.36907719 seconds)
    (137/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.182050401 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.050612962 seconds)
    (139/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.104111348 seconds)
    (140/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.803532776 seconds)
    (141/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.161371079 seconds)
    (142/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.147225665 seconds)
    (143/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.144130302 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.302467583 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.17411025 seconds)
    (146/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.923077842 seconds)
    (147/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.055357411 seconds)
    (148/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.193710349 seconds)
    (149/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.310713308 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.075521037 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.14908259 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.349049653 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.265027219 seconds)
    (154/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.248492405 seconds)
    (155/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.435612545 seconds)
    (156/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.2717099 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.099057304 seconds)
    (158/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.249921198 seconds)
    (159/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.054438286 seconds)
    (160/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.371126051 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.967295963 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.076519341 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.067092975 seconds)
    (164/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.112813051 seconds)
    (165/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.38053719 seconds)
    (166/341) benchmarking ("sort", Int64, false)...
    done (took 5.690338006 seconds)
    (167/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.124639106 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.148587378 seconds)
    (169/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.052770973 seconds)
    (170/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.175403945 seconds)
    (171/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.574581961 seconds)
    (172/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.24474112 seconds)
    (173/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.806948853 seconds)
    (174/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.172484874 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.052918087 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 8.575965167 seconds)
    (177/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.54608925 seconds)
    (178/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.067664631 seconds)
    (179/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.460543069 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.259188157 seconds)
    (181/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.201191116 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.07437389 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.01718712 seconds)
    (184/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.066838375 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.073230984 seconds)
    (186/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.73639349 seconds)
    (187/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.211688743 seconds)
    (188/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.268482525 seconds)
    (189/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.177702279 seconds)
    (190/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.861501793 seconds)
    (191/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.199257822 seconds)
    (192/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.359016528 seconds)
    (193/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.454157947 seconds)
    (194/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.230368515 seconds)
    (195/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.441150736 seconds)
    (196/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.159027762 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.063424361 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.077091026 seconds)
    (199/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.116539673 seconds)
    (200/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.181818934 seconds)
    (201/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 3.807093746 seconds)
    (202/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.069728843 seconds)
    (203/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.226936711 seconds)
    (204/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.075193845 seconds)
    (205/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.183932007 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.470770918 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.852648232 seconds)
    (208/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.991414026 seconds)
    (209/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.550105135 seconds)
    (210/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.074808394 seconds)
    (211/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.789982517 seconds)
    (212/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.506942466 seconds)
    (213/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.068778608 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.172724123 seconds)
    (215/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.170076007 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.08784832 seconds)
    (217/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.153274554 seconds)
    (218/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.186173352 seconds)
    (219/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.670932489 seconds)
    (220/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.384625411 seconds)
    (221/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.06888071 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.234878252 seconds)
    (223/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.284711735 seconds)
    (224/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.469594457 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.086340642 seconds)
    (226/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.54255507 seconds)
    (227/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.082615285 seconds)
    (228/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.418614223 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.316632677 seconds)
    (230/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.263535178 seconds)
    (231/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.289226188 seconds)
    (232/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.160001782 seconds)
    (233/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.739433026 seconds)
    (234/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.521159037 seconds)
    (235/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.168708084 seconds)
    (236/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.233831415 seconds)
    (237/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.831385075 seconds)
    (238/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.263539953 seconds)
    (239/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.341691413 seconds)
    (240/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.319335318 seconds)
    (241/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.079415317 seconds)
    (242/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.366289074 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.10306173 seconds)
    (244/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.085219066 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.700564715 seconds)
    (246/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.380771301 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.364304764 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.072495469 seconds)
    (249/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.179045241 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.094908006 seconds)
    (251/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.555663836 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.206400679 seconds)
    (253/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.776217115 seconds)
    (254/341) benchmarking ("sort", BigInt, false)...
    done (took 7.073126276 seconds)
    (255/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.086262954 seconds)
    (256/341) benchmarking ("sort", Float64, false)...
    done (took 5.771961018 seconds)
    (257/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.236218473 seconds)
    (258/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.502873826 seconds)
    (259/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.089965614 seconds)
    (260/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.152476945 seconds)
    (261/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.138369225 seconds)
    (262/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.170733286 seconds)
    (263/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.086959703 seconds)
    (264/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.164457725 seconds)
    (265/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.966209806 seconds)
    (266/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.325869122 seconds)
    (267/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.087857989 seconds)
    (268/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.207674193 seconds)
    (269/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.280388178 seconds)
    (270/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.080222438 seconds)
    (271/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.509310725 seconds)
    (272/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.604106784 seconds)
    (273/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.216414077 seconds)
    (274/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.230474024 seconds)
    (275/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.40005496 seconds)
    (276/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.469600882 seconds)
    (277/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.467181222 seconds)
    (278/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.226245061 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.212062523 seconds)
    (280/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.135390825 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.090883147 seconds)
    (282/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.236655489 seconds)
    (283/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.065371819 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.391305787 seconds)
    (285/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.166839748 seconds)
    (286/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.94052301 seconds)
    (287/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.192712579 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.734184579 seconds)
    (289/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.166131544 seconds)
    (290/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.737589599 seconds)
    (291/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.229102851 seconds)
    (292/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.306173183 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.078860401 seconds)
    (294/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.372305394 seconds)
    (295/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.084536896 seconds)
    (296/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.274583602 seconds)
    (297/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.080190255 seconds)
    (298/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 4.772210409 seconds)
    (299/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.274690589 seconds)
    (300/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.397552811 seconds)
    (301/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.078604228 seconds)
    (302/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.231238473 seconds)
    (303/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.078405441 seconds)
    (304/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.234459316 seconds)
    (305/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.097446864 seconds)
    (306/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.324258534 seconds)
    (307/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.452244772 seconds)
    (308/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.461182629 seconds)
    (309/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.540631593 seconds)
    (310/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.009685375 seconds)
    (311/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.505844852 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.413208591 seconds)
    (313/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.876829952 seconds)
    (314/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.481815525 seconds)
    (315/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.153749614 seconds)
    (316/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.099714555 seconds)
    (317/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.056001833 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.398936123 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.21504355 seconds)
    (320/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.199132418 seconds)
    (321/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.238367948 seconds)
    (322/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.197895854 seconds)
    (323/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.490862192 seconds)
    (324/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.383495662 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.926263558 seconds)
    (326/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.502643266 seconds)
    (327/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.408806864 seconds)
    (328/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.814554357 seconds)
    (329/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.200756144 seconds)
    (330/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.082028173 seconds)
    (331/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.091243984 seconds)
    (332/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.709710899 seconds)
    (333/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.374526272 seconds)
    (334/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.380136442 seconds)
    (335/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.374556074 seconds)
    (336/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.414000827 seconds)
    (337/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.147559041 seconds)
    (338/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.280260305 seconds)
    (339/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.16977619 seconds)
    (340/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.621717948 seconds)
    (341/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.348244641 seconds)
  done (took 1158.533289412 seconds)
done (took 1160.595828647 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.099171816 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.079684255 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.593413071 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.089661369 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.080603038 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.084255954 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.604254829 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.111609503 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.097140555 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.60456214 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.087948494 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.083157959 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.09681274 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.115617215 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.092746005 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.092920443 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.090191646 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.106273804 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.117218469 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.085993026 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.135259504 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.088511727 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.07981073 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.130437493 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.080826538 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.098199362 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.098454061 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.134217602 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.125582127 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.084769805 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.087792465 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.445861683 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.136404016 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.086829975 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.094099531 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.098684688 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.087055406 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.097780775 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.098414896 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.095801486 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.080492988 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.09287038 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.087481252 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.082895414 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.08142798 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.082902906 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.082574267 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.207353546 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.095623767 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.428501119 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.14512914 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.100570114 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.13631818 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.085261689 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.086637797 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.08538931 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.13763873 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.088361424 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.089136337 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.429974946 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.178723619 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.098157947 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.429007635 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.151248325 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.093771485 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.095033831 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.083952488 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.102420216 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.446974827 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.648364979 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.112227669 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.103984377 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.087682021 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.08592921 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.100081045 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.603930443 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.100224635 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.671486797 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.109852955 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.10006151 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.090405685 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.08945654 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.087480241 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.101118207 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.101739657 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.085632289 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.094515307 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.093026392 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.099399603 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.447512016 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.131602129 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.595842537 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.091421678 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103435305 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.105733994 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.675346824 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.113608869 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.101797307 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.089432178 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.452580377 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.127620237 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.10397993 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.087644089 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.096824302 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.201823819 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.101773876 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.10261474 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.087982022 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.110398051 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.096540391 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.088184485 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.098332818 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.102604294 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.131979664 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.104065648 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.084469454 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.095706327 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.092994426 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.096806572 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.096440784 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.093533675 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.097453293 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.086750648 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.143032101 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.105094591 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.102751989 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.203217175 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.094120222 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.216093313 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.101989498 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.094887652 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.087124046 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.433796 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.134601494 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.110221664 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.094372079 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.111936929 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.113047189 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.106812522 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.091088165 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.104102782 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.089384849 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.146340464 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.088281545 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.114099291 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.138641654 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.10925288 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.094716477 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.103332968 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.123204046 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.110899027 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.099264985 seconds)
done (took 328.716593454 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.135157672 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.088427293 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.162848937 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.090777351 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.147257998 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.141743022 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.089904655 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.090699034 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.090870436 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.502564917 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.088541218 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.09231017 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.088978408 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.091718982 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.137757477 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.09150348 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.091360033 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.322591504 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.093454404 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.147708575 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.08852413 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.089451176 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.08966019 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.482765917 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.089664347 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.093211765 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.148499088 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.090204566 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.337499304 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.09009682 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.095778926 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.32766596 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.150840088 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.104027304 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.099563653 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.094388183 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.156148222 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.102034254 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.136351099 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.136695542 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.165368941 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.125101875 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.092941845 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.090329021 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.093430096 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.09332641 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.092462216 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.122786753 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.091506732 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.096347811 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.324232323 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.094894819 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.099003664 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.095060788 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.090928754 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.105805505 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.092601429 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.094200486 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.153959434 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.093392489 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.139293291 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.479942672 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.501467882 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.097315891 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.090743831 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.094536575 seconds)
  done (took 198.508473527 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.157965435 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.16423318 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.158321456 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.099624198 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.140258587 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.157447252 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.094973631 seconds)
  done (took 16.980849332 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.100908477 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.090438111 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.112538396 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.112764454 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.094647761 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.230620181 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.102739689 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.09646881 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.11780625 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.099273545 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.434215731 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.115437482 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.100331592 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.090051073 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.101724536 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.118097122 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.098071362 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.090518065 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.188699581 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.170395973 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.094304194 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.101958059 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.119550871 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.102741476 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.09269727 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.096626804 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.093484146 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.100205633 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.094553818 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.094389755 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.093280733 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.107032087 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.095547504 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.092342775 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.092718899 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.09537391 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.090680168 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.092112834 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.094085689 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.094631841 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.092563421 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.09233023 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.094355176 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.093910095 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.092984837 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.116281394 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.091669833 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.093547615 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.094421072 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.098804404 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.12228105 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.093969099 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.09518648 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.099238742 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.138728697 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.100336612 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.09307197 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.092534094 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.093925684 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.097798803 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.096385786 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.170890244 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.117391636 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.09513106 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.121441032 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.131097094 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.096814344 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.09567892 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.097604524 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.120225107 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.095252807 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.118138614 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.095062232 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.199356164 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.096694752 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.244747063 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.115669243 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.096920606 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.105035679 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.091603299 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.104019554 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.093955057 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.096411465 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.102079522 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.101116571 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.097893074 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.09447049 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.096021023 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.102665665 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.097335721 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.148266733 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.09557652 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.093649605 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.193584374 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.097854833 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.19030637 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.123288635 seconds)
  done (took 226.935323844 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.099608158 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.100409812 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.109970986 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.09800117 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.096381001 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.101761584 seconds)
  done (took 14.619956831 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.098488333 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.097233441 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.096734614 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.096193781 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.101936271 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.095230644 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.096277679 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.098979742 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.107450793 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.096070072 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.095664278 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.096063846 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.096679549 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.10252794 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.098448544 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.095524405 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.096204487 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.097273537 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.110748181 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.097202769 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.305204568 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.100419982 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.100732312 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.102687002 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.10563106 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.098572144 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.107247478 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.104680822 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.100579333 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.106314622 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.102281363 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.100922607 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.108961105 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.109234663 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.105858873 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.104717266 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.112466081 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.100629367 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.103665345 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.100102678 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.102243359 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.104194217 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.100851969 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.101377795 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.103908375 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.112405164 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.112886793 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.112341873 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.099658453 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.100642404 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.102185059 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.101507552 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.102497632 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.102729169 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.108208432 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.107919512 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.106975008 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.102454383 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.101915121 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.105676396 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.107755369 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.105045688 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.104864909 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.106171323 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.109879782 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.10155299 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.106033063 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.107167495 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.101565623 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.102147846 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.100987538 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.103499197 seconds)
  done (took 154.623147689 seconds)
done (took 613.675484839 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.225904366 seconds)
  done (took 9.246582128 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.164015284 seconds)
  done (took 9.2915837 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.759647125 seconds)
  done (took 12.785899645 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.118590498 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.136618663 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.117375299 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.100146352 seconds)
  done (took 30.50547686 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.450452769 seconds)
  done (took 9.470539343 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.119296923 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.099836275 seconds)
  done (took 16.312002062 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.102236927 seconds)
  done (took 9.122978322 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.129641084 seconds)
  done (took 9.162918677 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.114334262 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.11428238 seconds)
  done (took 16.269334179 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.108098435 seconds)
  done (took 9.127927378 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.910982805 seconds)
  done (took 10.022938128 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.110565912 seconds)
  done (took 9.15221048 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.120309703 seconds)
  done (took 9.14235587 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.242408947 seconds)
  done (took 10.266666523 seconds)
done (took 171.899529041 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.111820331 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.099505701 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.098395919 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.099464024 seconds)
  done (took 30.430285191 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.138191053 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.140638056 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.148162407 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.137621528 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.13111155 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.128509353 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.138904877 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.139527106 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.130215266 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.137932095 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.139344607 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.136733113 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.13863995 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.150936177 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.14807174 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.135160137 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.137947261 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.13786739 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.131250402 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.149913491 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.137716962 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.137281376 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.105180492 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.103785518 seconds)
  done (took 53.283898954 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.295547142 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.172126258 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.257455236 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.15155819 seconds)
  done (took 10.89947542 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.106696354 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.168756106 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.157423159 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.150354006 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.198934015 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.208841346 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.15677163 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.387319383 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.219167898 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.232312578 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.1143236 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.12555602 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.131621283 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.152763048 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.207575078 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.106812955 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.106955633 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.21677712 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.166665512 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.315258644 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.10883255 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.161811156 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.195703502 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.161576288 seconds)
  done (took 54.283545405 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.108356519 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.115461297 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.112546482 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.106676303 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.108542881 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.109788194 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.115262487 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.110384916 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.128563311 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.108623169 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.109370072 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.109053043 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.11552167 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.110327481 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.106276006 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.119092237 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.123153262 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.108522029 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.111982286 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.116228582 seconds)
  done (took 44.27893277 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.107016725 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.953728033 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.454118448 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.359784992 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.106309248 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.106594913 seconds)
  done (took 33.113082109 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.121606823 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.125800319 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.114611245 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.131631382 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.153370751 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.111456322 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.169187124 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.246030422 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.113726508 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.166047684 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.124732263 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.116452862 seconds)
  done (took 27.721598469 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.107346398 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.103675908 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.105974659 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.118025858 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.119003738 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.115355883 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.115098932 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.107906711 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.12017905 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.125973026 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.116083547 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.120931503 seconds)
  done (took 47.400738954 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.323005919 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.335221599 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.32431847 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.712497078 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.422012475 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.087960278 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.39338559 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.321890269 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.80400015 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.826073225 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.395630256 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.08916223 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.063405343 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.031487265 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.006419894 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.350227467 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107705352 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.967266481 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.365942108 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.152427379 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108490096 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.110339344 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109004199 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.405760866 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437259381 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107648146 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.321891608 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123749816 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109467765 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.367148542 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.581437662 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.16338368 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.310864344 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.369486584 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.455393963 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.153639305 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.215578858 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.288251336 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.154997274 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.145815882 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.120256557 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.120166557 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.654122578 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.12422391 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.38164668 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112385817 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.25462902 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.088714307 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033034016 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.411836737 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223060044 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.106649747 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.145439293 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.543112901 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232855787 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.353676367 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115606324 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.293002004 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168318926 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.347911176 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.357828382 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.110553717 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.322650488 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.034584087 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.502291228 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234194793 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.112467768 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11695735 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.809949732 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.350753754 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.192797745 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.422016434 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.867276983 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.112873279 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.111967519 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.154218517 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208694332 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.108009508 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.404606162 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.111745158 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.034632173 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.208692541 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.5114171 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117869355 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.110601565 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11690554 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.959568461 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.036970805 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.209674426 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.356309174 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.435947926 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.114978499 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.114937865 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.135526202 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115094565 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058478303 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.673354078 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.176137151 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.039743979 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.67655715 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.635014863 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.076276809 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.578915864 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154652442 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.389965764 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.267989769 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.516399517 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.321973958 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.359785013 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.66430079 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11834657 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.727953254 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.196158553 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.191241199 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.113138799 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.676494047 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.298511867 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.391560052 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.23132237 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.111312772 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.042049521 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.126217348 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.318353932 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.595473064 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166677052 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.108861272 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.120784589 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.1167108 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.117817643 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.22868193 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130170635 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.40673998 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.188771847 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.114738727 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.053113446 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.11438871 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40354239 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.79211285 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1720734 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.369452974 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.382216078 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.817542986 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.709974054 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.060746252 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.380749241 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.185540746 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188993053 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.686156599 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.244340039 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.21194896 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.116168275 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.249334029 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.121419095 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.118960969 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.541481987 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.525570669 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.541199688 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.160433452 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.115669635 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.065663559 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.3028109 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.355534426 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.192962376 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.134516089 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.121801422 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.200591269 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340708654 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.116421325 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.041113437 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364969196 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.35435007 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.408159474 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.526939051 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.192751739 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.186546912 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127804912 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.33098547 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.198472148 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.771766587 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.662552694 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329295553 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.686595972 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.079361545 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.779807855 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.355705373 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.497214787 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.13206136 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.566467648 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.301334624 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.807373471 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.144748332 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.64203212 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.042123298 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119905113 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.462237013 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.071077529 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.431072641 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.176969034 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17128269 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.117997356 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.118178226 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124415196 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.052393901 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.223331158 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186470221 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189853045 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.047758161 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.758178986 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.156488794 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.120451844 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.119521177 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.50120861 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.991153524 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070841951 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.120547845 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193994157 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.864896781 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.668863959 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.120486187 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.120898949 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.726231922 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.123464665 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.027294257 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.124419753 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.021381409 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142994864 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.369152901 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.821507724 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417305809 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.196358073 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195270956 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.119557993 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.127762582 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.804982894 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129299289 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.82058762 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.407308847 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.393523891 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.566808883 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.181476402 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.327304187 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.135855933 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.125136165 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.64706438 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.142975435 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122517912 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.325747816 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.637574075 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.430531644 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.764788156 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.208114752 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.119992495 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.390657397 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.11805868 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.592818287 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.805832629 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.123221805 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.120154856 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.374502781 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.807759457 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.12358798 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.097968254 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125472819 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.333208065 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.324026854 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396948894 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.413907399 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.570540857 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.044820642 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127812728 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.142528165 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.363410919 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.122571566 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.160004936 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.570364229 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.203167831 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.54806589 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.405144538 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.495992864 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.75422325 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.386999462 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.184780053 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.132820757 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.77387775 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.249005535 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.052087628 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.241858446 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.047862904 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.89378601 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.411144354 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.13612387 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.392930743 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.101020397 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.456408682 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.419685877 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.370952288 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.171251322 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.148042877 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.124660217 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171734428 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.127743192 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.316365431 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.237900778 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.130642656 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.672635044 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.160553065 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17258402 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.129818201 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.637696035 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.142367812 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128822641 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.818478952 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.145600733 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243047002 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195415104 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.919665461 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.624663606 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.149669988 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.077763952 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.772831622 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.391516544 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.180442866 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.575211816 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.160633739 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.531697991 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.124863956 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.341935023 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.129746721 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.709483571 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171293042 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396046698 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07754113 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.33699986 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.328144571 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.146542944 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.127528053 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.054339095 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.225993586 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.988689728 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.106961645 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.163761634 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.81238608 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.549553771 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.347035997 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.580492946 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.947147552 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.131004259 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.499123757 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.529331755 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.759311033 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157719454 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130808725 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.462532015 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.262251328 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.439815468 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.402754043 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136535524 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.156092421 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.34147716 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254242284 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.05050327 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.604508154 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.709061211 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.830528355 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.140501173 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.334057897 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.457260166 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.428985911 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161987243 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207618543 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.532153999 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.3953666 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.196296914 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.055451205 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.129983428 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.523400429 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.528028882 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.226627981 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371670956 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.448688371 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.774095963 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.615532822 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.574948272 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.568199794 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.549997831 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.525314967 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.340630589 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.498639327 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.452846352 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.721273764 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.545726408 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.342555269 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.230564965 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.411092133 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.007258897 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.840634976 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.374898674 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.135608597 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.060554237 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.339070386 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.133826102 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.645037169 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.651927095 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.381973045 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.385006492 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.606403354 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.670793036 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.323012687 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.150964279 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.097247208 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.154993918 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.149551719 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.130977689 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.611563816 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.415167117 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.144327683 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068266527 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.799500525 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.05963858 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.345080956 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.332915276 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.168701462 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.690102668 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.386367069 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.232872747 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.429613404 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.38323102 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.16565973 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.05989815 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.84919032 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.080399762 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.223168662 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.556366928 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148889695 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.136707427 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.337464747 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.063317927 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178507474 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.139391064 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.333919082 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.71349935 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.40124678 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259193762 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.378347424 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.433178167 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.030847477 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155987655 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.406364526 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.061885368 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.756034659 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.809295497 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.171667021 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.203078148 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.134808372 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.137133033 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.407349362 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.460123056 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.23010724 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.728813186 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.164856954 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.158236456 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.453251286 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.225650806 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.135538911 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.139198149 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.628961716 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.363070622 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136581515 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.106987669 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.345532263 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.211582778 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.332026961 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.20864496 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.651183603 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.142294846 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.035215973 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.235406346 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.087068459 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132587498 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.925278103 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.19417545 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.134681852 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412314765 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.757104862 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341918301 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.531795321 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.011971705 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.332182109 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175752077 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.140031793 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.141909343 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.536117676 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.442860981 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.137185865 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.408157305 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.181898924 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.14171211 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.801215679 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.103470649 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.139400433 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.908272822 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.025903896 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.865218893 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.53385469 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.141960512 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.165057649 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.137341608 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.067211872 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.137569112 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.312345864 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.108553077 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.138326067 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.507937277 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.448193861 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226373459 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144625179 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.140259032 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.144634035 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.351154841 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.651653471 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155043786 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.837188661 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.342913792 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.146910765 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.618121251 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.596738758 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.408414487 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.175246888 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.337322503 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.37923304 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.675867657 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.339601665 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.119535555 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.362328666 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.141441883 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.410348188 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413160286 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.142889691 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.352199882 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.618426974 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42312602 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.490440618 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.454317039 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.20691496 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.344051656 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.036288833 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.145099356 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.14366175 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.408511678 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195751913 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.140612136 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.150794006 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.696701271 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.854435094 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.607200925 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.293886823 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.460976262 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.933978793 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.894069039 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.145584911 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.069989188 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.139524458 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14686714 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.14564057 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065740029 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.923399881 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.86253345 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355312745 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.451539887 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.069033907 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.346243112 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.745575192 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.065198806 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.111885654 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.1425127 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.395221046 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0649044 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143428182 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.095014009 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.419639954 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.898872775 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.394467737 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.141074918 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115332291 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142124382 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.146742885 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.14163986 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.22628192 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.145843719 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261171542 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.411765663 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.519170929 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.250546 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.784399087 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.928766893 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.082307578 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184871964 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.756179053 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.715121732 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.429032115 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.273313019 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.923803794 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.090974548 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.14598063 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163193241 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.405227714 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.145676318 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146209229 seconds)
  done (took 2235.095500487 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.188698018 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.286472295 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.201730154 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.189296987 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.170663705 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.203082707 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.258125546 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.176968768 seconds)
  done (took 59.738219508 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.145696545 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.130636802 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.152991862 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.145775487 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.142916773 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.148100485 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.322008194 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.173089099 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.16412747 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.150795175 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.145358964 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.146505043 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.144939769 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.144657792 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.164622672 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.460335245 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.167047529 seconds)
  done (took 81.16684492 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.205588288 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.973637579 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.147785705 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.820106515 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.191407613 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.48614679 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.149805927 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.152119241 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.253162191 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.443960019 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.19515396 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.163803296 seconds)
  done (took 93.288978269 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.148995193 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.148318779 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.147219201 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.148151461 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.149555331 seconds)
  done (took 12.806923062 seconds)
done (took 2785.593309522 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.389438247 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.244958283 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.220802259 seconds)
  done (took 6.530682506 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.2929396 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.341249723 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.455240677 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.459312783 seconds)
  done (took 11.619961527 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.436922994 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.517715222 seconds)
  done (took 7.019309423 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.522516686 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.150135371 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.536728425 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.149809861 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.147404005 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.150331479 seconds)
  done (took 23.52026992 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.149955314 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.148672254 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.150094398 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.149911418 seconds)
  done (took 10.664699556 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.147600144 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.910264106 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.147774682 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.158777021 seconds)
  done (took 22.430775961 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.292099229 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.310673912 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.91990366 seconds)
  done (took 13.589182552 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.774131449 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.595188299 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.763010626 seconds)
  done (took 10.198269999 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.976278521 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.967009292 seconds)
  done (took 8.008098061 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.288998658 seconds)
  done (took 4.357024405 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.978836914 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.463650382 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.629447076 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.670371325 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.735418113 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.371982499 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.475204603 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.420124161 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.5450411 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.555172098 seconds)
  done (took 27.912440235 seconds)
done (took 162.514420174 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.603201039 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.168012781 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.374800511 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.525889792 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.384577737 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.358228635 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.456427596 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.514812779 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.194134323 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.181248902 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.524967102 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.380812266 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.393958816 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.167290017 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.401927035 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.167753379 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.381770592 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.616254928 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.200411309 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.442028778 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.456401293 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.170613298 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.36611157 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.18427954 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.381336997 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.311010768 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.773492566 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.161998795 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.355126593 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.787108111 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.310259706 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.591076889 seconds)
  done (took 178.353693127 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.154593385 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.148885707 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.151326807 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.149952865 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.577519099 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.150598975 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.150577337 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.150291215 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.345190824 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.333084494 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.150092215 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.56326109 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.150279281 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.149208784 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.150236045 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.150324362 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.454688236 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.150200813 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.150358339 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.152157361 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.152208686 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.442320111 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.150169754 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.471466342 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.445861543 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.151419734 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.151532656 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.150914347 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.152304707 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.152389978 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.151660665 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.151256399 seconds)
  done (took 217.328830234 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.152878275 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.151321475 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.15005304 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.150441503 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.151700114 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.151502592 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.153109146 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.151122125 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.951921056 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.940624858 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.155496184 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.151746798 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.154712473 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.152197816 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.153604792 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.152148455 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.151839983 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.154408458 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.153828101 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.152756921 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.153630555 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.874832993 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.153739317 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.890467716 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.153614938 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.152954101 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.1535824 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.154135487 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.152349916 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.154233019 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.152083826 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.154554438 seconds)
  done (took 230.010112635 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.396393736 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.156086591 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.15947137 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.169519302 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.159828338 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.157076513 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.161324095 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.408393204 seconds)
  done (took 21.843586513 seconds)
done (took 649.611853548 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.497757754 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.892322089 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.290171189 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.180220861 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.412904113 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.224717823 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.17762298 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.237767482 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.830815553 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.244620698 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.593389132 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.182244201 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.915929346 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.205977835 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.29310171 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.232011651 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.519808643 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.783622462 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.310534211 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.831041176 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.39019909 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.104859052 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.253103312 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.865478132 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.603139794 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.138295866 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.19801839 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.52674805 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.182434727 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.417339287 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.826112354 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.437888444 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.190536302 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.17810607 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.232915619 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.207182262 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.372830398 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.185886238 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.29016765 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.895284415 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.832122748 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.708226289 seconds)
  done (took 111.966825383 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.167498288 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.168458908 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.167655178 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.165346003 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.175862033 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.165689892 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.165625311 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.167184168 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.165454907 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.167448599 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.167195419 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.177123184 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.166856914 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.176674909 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.166749673 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.166970505 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.166239458 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.175774695 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.166793361 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.167722975 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.166252545 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.167786465 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.1634348 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.16847209 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.165858867 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.168261139 seconds)
  done (took 58.462393554 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.162308489 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.312956591 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.43798234 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.192199284 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.162409599 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.163686175 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.191282244 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.167483798 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.165318225 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.164023075 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.258654462 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.168260421 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.176372093 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.436509694 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.19093671 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.1621504 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.162037547 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.163108395 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.318915209 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.177805267 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.194700971 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.16683645 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.192810684 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.174710803 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.163963623 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.163241231 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.164861894 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.573902226 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.172697137 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.259115924 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.207713369 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.194114157 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.500327603 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.447878834 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.229898144 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.167598122 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.162460609 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.302756732 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.173546943 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.165015806 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.192671499 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.167729221 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.442304008 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.669650665 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.177997233 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.163053062 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.569583508 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.312818879 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.20939928 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.179673291 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.450435635 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.195030361 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.16396066 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.167043713 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.201554845 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.178516037 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.16450421 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.411584315 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.1785256 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.192205862 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.169729259 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.167487949 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.327110282 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.174850318 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.320007001 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.173903014 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.170946373 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.168626787 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.440505554 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.194025268 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.666029 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.181047421 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.163133172 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.263473818 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.324768166 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.598576704 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.178762195 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.327264552 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.525953394 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.203894255 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.175975491 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.559344358 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.204396349 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.173881624 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.1648367 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.167296582 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.167154872 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.215730329 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.194574335 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.581580146 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.667523197 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.429900982 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.203947178 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.178506842 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.165372891 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.413473193 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.175947633 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.165989028 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.435331381 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.695623872 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.183982926 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.173150567 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.647891663 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.18569613 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.196447979 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.175774524 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.458049411 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.197359355 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.216286604 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.167908165 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.173358854 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.174127691 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.20024172 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.176715905 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.167008434 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.643216239 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.31986663 seconds)
  done (took 266.915070772 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.171148384 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.162387454 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.167261643 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.165073964 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.167159994 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.169551016 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.167566562 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.168725997 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.167619499 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.1669828 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.166356413 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.166244858 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.171933607 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.167408518 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.206334276 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.172115143 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.658148317 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.16568837 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.168735453 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.166257153 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.743541237 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.172275411 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.169443827 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.167111045 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.167893664 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.169556822 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.171518126 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.209693533 seconds)
  done (took 175.944435187 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.16902692 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.225981426 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.178111217 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.21569421 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.180782728 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.17007116 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.194132282 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.179094252 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.170442524 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.170177121 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.170504904 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.200793254 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.17373963 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.267286374 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.195204742 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.20214465 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.266069066 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.173468703 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.16906804 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.172545955 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.216087088 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.179864434 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.200994145 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.229750863 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.181017416 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.224889788 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.180714411 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.170445908 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.169684234 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.285084319 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.186173739 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.201637923 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.202771725 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.188586444 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.286513121 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.283545175 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.269215997 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.197765407 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.172520541 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.171160295 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.17273887 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.172363273 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.225072685 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.181883382 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.173033458 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.289039716 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.188030367 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.172968199 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.193322508 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.172067494 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.185600237 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.187087396 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.206570489 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.292666933 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.216562598 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.195601148 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.197620894 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.189235011 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.174030673 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.271297947 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.175109173 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.287724861 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.192239054 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.17527982 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.173916621 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.176877225 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.220584686 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.208562418 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.268982985 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.176460909 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.269149645 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.221562253 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.184640307 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.17422186 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.17300642 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.229970305 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.280078743 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.225598443 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.231762549 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.190605208 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.16157974 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.172426504 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.176754868 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.201503928 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.178666045 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.288017017 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.287927247 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.176869959 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.175506436 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.175603694 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.172379588 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.199410259 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.236254819 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.212063794 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.277277659 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.208146117 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.209195315 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.1797727 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.188337677 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.178131107 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.208724348 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.180150445 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.187437983 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.523114607 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.211929199 seconds)
  done (took 233.812965952 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.532005791 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.216205326 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.243976244 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.452828375 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.538204048 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.04948717 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.210574845 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.223299625 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.234070795 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.353358183 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.284811839 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.268161865 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.209376076 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.197969279 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.217178488 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.236211546 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.261240199 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.515426401 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.318500971 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.718841883 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.215206337 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.502308601 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.518296427 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.558509024 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.258344751 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.613880751 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.841673443 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.312820168 seconds)
  done (took 71.197021579 seconds)
done (took 920.373501512 seconds)
SAVING RESULT...
DONE!
