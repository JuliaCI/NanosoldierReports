cset: moving following pidspec: 2671
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.914630244 seconds)
loading group "shootout"... done (took 1.118683761 seconds)
loading group "string"... done (took 0.667227747 seconds)
loading group "linalg"... done (took 8.593037501 seconds)
loading group "parallel"... done (took 0.18498408 seconds)
loading group "find"... done (took 2.960634382 seconds)
loading group "tuple"... done (took 2.206054279 seconds)
loading group "union"... done (took 14.880019765 seconds)
loading group "dates"... done (took 1.465409526 seconds)
loading group "micro"... done (took 0.220682809 seconds)
loading group "simd"... done (took 4.779722724 seconds)
loading group "io"... done (took 1.067093351 seconds)
loading group "random"... done (took 9.555633729 seconds)
loading group "problem"... done (took 1.49923131 seconds)
loading group "array"... done (took 25.181174726 seconds)
loading group "misc"... done (took 1.887003521 seconds)
loading group "scalar"... done (took 43.592764721 seconds)
loading group "sort"... done (took 3.335392533 seconds)
loading group "sparse"... done (took 12.760259742 seconds)
loading group "collection"... done (took 18.398062957 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.426025879 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124898402 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.130585433 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.123664043 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.184637954 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124385018 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132861099 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086512098 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.866485673 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138338145 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.114781189 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.434391807 seconds)
done (took 5.311789353 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166834662 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093310601 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082792546 seconds)
  done (took 1.373496579 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071446661 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.060397166 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067390991 seconds)
  done (took 1.396424101 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065240386 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135084635 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066113002 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068098282 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071057681 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.06787091 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067529465 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067266106 seconds)
  done (took 1.744542198 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071771103 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067865175 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066436742 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068815583 seconds)
  done (took 1.476886943 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065729574 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122913528 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065674425 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065577174 seconds)
  done (took 1.519933065 seconds)
done (took 8.963462329 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138930629 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.823776606 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.756918851 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.125829048 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250102014 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.448799083 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.12441456 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.182824715 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088597904 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074974033 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121972301 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078987693 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.401635281 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.405755528 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073521454 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.179509021 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.657652055 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.08671408 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132732015 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.437564955 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073399577 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087762044 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086434357 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072586998 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.318785806 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151332078 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.668742775 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099052532 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070203555 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096128536 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070092275 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.077761238 seconds)
  done (took 10.698470045 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092747594 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090608823 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.07035982 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125692947 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096110561 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072147413 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077186082 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068961279 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.090891181 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126685875 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092370243 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.100770658 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.06815139 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070679714 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.080935924 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.19892952 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080328996 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082909624 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06945649 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082753757 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108331133 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.08091829 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080399152 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07988161 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.131728746 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.168633803 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096867812 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.097971001 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066354761 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080559217 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.119521113 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.127381453 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066653888 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067200261 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121800847 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097460629 seconds)
  done (took 4.681287471 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.894783781 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.095544876 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096537697 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085264772 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076302596 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109604738 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115957344 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124755929 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126268433 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102468823 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072474111 seconds)
    (11/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.087154585 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152813624 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.64758115 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.133726543 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071320325 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119633077 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361332034 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.062097185 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070012955 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067902372 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072436659 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071302745 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113467626 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066527264 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174966273 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.583335889 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070688476 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070425021 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098599043 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.069887364 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140001937 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094725949 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071327935 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.550585329 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067195036 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065420226 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090337684 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091899585 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.177987938 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068712181 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079312182 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06802654 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.11132549 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0825826 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.49316496 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071698984 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.565555762 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225832586 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075232019 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073989315 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.103652377 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06542964 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069486909 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.865261456 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.124472261 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068384287 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276749861 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070684542 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069912885 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07092196 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102255185 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.072105406 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07051952 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074459249 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098069863 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.873562762 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.091022972 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09616699 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067095346 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399820583 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073842307 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068968831 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069639401 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084029121 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111547378 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068876175 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067273752 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108210586 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.08869399 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088955415 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069580053 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.06736733 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066452585 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.346510905 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.184299389 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066690833 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067916001 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.481740046 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063997249 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065991318 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067866635 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089384103 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066559399 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063134274 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.0641716 seconds)
    (96/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063817114 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099869293 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067339962 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063833206 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.801772364 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067642591 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.465575717 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.070643639 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.108537632 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120940133 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06785437 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.094928534 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068154886 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065092736 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074155276 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067038448 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065988391 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071296923 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067264018 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067976793 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070531514 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069667733 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069060428 seconds)
  done (took 23.12967583 seconds)
done (took 40.610471941 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312640924 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078490911 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078350011 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078172694 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078721393 seconds)
  done (took 1.879487379 seconds)
done (took 3.22705634 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132393095 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075474558 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06451038 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100608573 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070474356 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.103522378 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.110754459 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105841388 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070430701 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070515514 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.0704022 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104317472 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107016848 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070067916 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100233195 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.105551066 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070194994 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068655103 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070323504 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070321506 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070196992 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066271652 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070636632 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070760238 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101781196 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070467862 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065624488 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.100301437 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.0709569 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.10086319 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070807825 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070578418 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070645798 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102388652 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.070618641 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101195784 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066315459 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070341913 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070830475 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070807452 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070291745 seconds)
  done (took 4.662254691 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070842137 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082164792 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085675671 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063201062 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073010888 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083454727 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064286522 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08351122 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089772977 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084584241 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083903026 seconds)
  done (took 2.165030888 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070144234 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083038541 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088151901 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063437933 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075034428 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085203916 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063344604 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084508871 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087087343 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085070755 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084765948 seconds)
  done (took 2.148622835 seconds)
done (took 10.248989901 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096436692 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065825604 seconds)
  done (took 1.424970288 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223582773 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.615043936 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.28894407 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092565949 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072736132 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085869391 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201591728 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.069272509 seconds)
  done (took 8.098421136 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.103184136 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067883501 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067907012 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068428484 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070644314 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069012156 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069800683 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070473932 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069357109 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070628319 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071441583 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069596239 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071292018 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06947731 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070904039 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069183088 seconds)
  done (took 2.530486643 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103559786 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069643987 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101182093 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.06346612 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.073890618 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064239401 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072579078 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074719065 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071074168 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07283151 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073943385 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072838586 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.07223304 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073459159 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074243226 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074883591 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.074406263 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071729866 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074408087 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074972151 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073530591 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07473782 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075456431 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073306869 seconds)
  done (took 3.196445704 seconds)
done (took 16.533242295 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174283458 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075905288 seconds)
  done (took 1.523838939 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067400876 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068785162 seconds)
  done (took 1.4276463 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073051515 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060679311 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078237384 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.069997537 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061438855 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062335345 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078687804 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063158578 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062599601 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.0632795 seconds)
  done (took 1.963939874 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062640227 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069127164 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066728497 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064735612 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067481929 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064179876 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067189471 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064338166 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070817059 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063979739 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068547075 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085108463 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067811008 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.085860767 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06721049 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.067706633 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069215853 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.067247249 seconds)
  done (took 2.534626295 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061642284 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061464202 seconds)
  done (took 1.421225801 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064623837 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062579562 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064688901 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065625004 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063200114 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062668551 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063870366 seconds)
  done (took 1.738819435 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421111858 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124791816 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.346997021 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.070198422 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.078283486 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259251222 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065117937 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070046003 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069779083 seconds)
  done (took 2.841483586 seconds)
done (took 14.759573465 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082182918 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.183367437 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090038447 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.409305535 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.093884401 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069100449 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114524443 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.176408973 seconds)
done (took 2.540265 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214089929 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.239215304 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.38922982 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124996998 seconds)
  done (took 3.054479503 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337293557 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078693248 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076910952 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067371298 seconds)
  done (took 1.871413089 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064961006 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071466125 seconds)
  done (took 1.441048704 seconds)
done (took 7.898627827 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.097074152 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07202539 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061895234 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062453841 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.066157954 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066980028 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063709015 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.074899311 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064821683 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065641188 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063485742 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.066349897 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.065912179 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065240143 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063976197 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063686815 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064621763 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063882255 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063756978 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063790529 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062923903 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064112517 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063335882 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063668326 seconds)
  done (took 2.926435955 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080060783 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065572729 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066800106 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066477719 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068284196 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.06848133 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068744144 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067220724 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068439682 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066601512 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068381837 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068859251 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067173528 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068980661 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067106589 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06870392 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068721195 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06694992 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067193624 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068689179 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068788846 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067756349 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068747622 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068434418 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069072322 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068744968 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067166681 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067840862 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068721481 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06882164 seconds)
  done (took 3.37073816 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066392391 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060097038 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060783893 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069925546 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060601237 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061319649 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061849874 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061876621 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061994197 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063169724 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.06212407 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061354761 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062338539 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061623002 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061261204 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062435895 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066054866 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081529878 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061995359 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061990673 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.0663484 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.06172372 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061785269 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06181857 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06277685 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061604371 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061756741 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061581774 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060830754 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062136836 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061542632 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065849241 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066723171 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06135581 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071721215 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066990662 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.06174375 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066112201 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063136951 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061455118 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061046817 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.06111056 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061588794 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061600216 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072058785 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061947359 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062845198 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062389542 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061945157 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06110431 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.06149266 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.063822766 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069768118 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063124983 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061546086 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062209054 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061343045 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062360705 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061584773 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061469819 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061555368 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064764469 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063152122 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062326405 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081863853 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062766019 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072105624 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061707717 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062586178 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065303569 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062105945 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079584887 seconds)
  done (took 5.912907182 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071896851 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071467157 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078709832 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071403674 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065700391 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06276661 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066861519 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063228352 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072671164 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067280642 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062809888 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066562238 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072309655 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067096922 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064065793 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072333219 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066532427 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065740307 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062879539 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067110129 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063152726 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06670691 seconds)
  done (took 2.823938113 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135316258 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066181669 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105126043 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074641659 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06824423 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074470917 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065854333 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065802057 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066202859 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06688537 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068032115 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068503937 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069757833 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068273985 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067644621 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067582486 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067525935 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068283867 seconds)
  done (took 2.656636985 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076890586 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066046451 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089125482 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065832597 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065758705 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065491286 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069314376 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070256925 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.06549245 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06604754 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070976541 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067149215 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066924703 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067932609 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0671795 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067594915 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067200251 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067270117 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071426297 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070906693 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070964798 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071373077 seconds)
  done (took 2.853204519 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077178625 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065156915 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080173728 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065899108 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060771194 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060650795 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066323029 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065085694 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065927272 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064788636 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06537164 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060588252 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066645356 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065141257 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066874091 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065587214 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064656809 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065322659 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065217855 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061031865 seconds)
  done (took 2.646082249 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086038524 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063343352 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063142057 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082341801 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063137656 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063300391 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08291717 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063385397 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063299886 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084497156 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063491013 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063235953 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082499594 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.081813572 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063065681 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.082417591 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082119861 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082482248 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063419593 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063187962 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084391447 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.062976985 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082036456 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063525831 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063143838 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06305734 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062714411 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082285671 seconds)
  done (took 3.334876765 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064556327 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063506354 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063806567 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064025317 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063774412 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063878615 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064259073 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065517763 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065932161 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066127021 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066059279 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066085947 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067745296 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065587354 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065003985 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065086619 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064566192 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065530004 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065271601 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065229769 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065132065 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065282765 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065312835 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065866862 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065554287 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064992443 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065956011 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065356749 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064666277 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065315983 seconds)
  done (took 3.287728248 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.07290037 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071500092 seconds)
  done (took 1.47840744 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06231131 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077481863 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060486151 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072742196 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068411336 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065200646 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07032361 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070160722 seconds)
  done (took 1.875645601 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067112331 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090705448 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062544454 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062997257 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065069448 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131604924 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074948344 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073867942 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075362291 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064722613 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063773063 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075819479 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06283044 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077263015 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064761666 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072226745 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070870091 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081505773 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076340138 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062019464 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076364195 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0645402 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061814828 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064608557 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06357743 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070581282 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079402995 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075850528 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071792987 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060886554 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081136595 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060943287 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062120645 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070670808 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065605626 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061260703 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097569932 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061881515 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066468078 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060583065 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073428133 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081740423 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075146196 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078533032 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063003917 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062968439 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060785468 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062956495 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064957855 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070259346 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060457167 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069093037 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062023969 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063685084 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07334615 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06273944 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068069609 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072152299 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076932901 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072782988 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071831343 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078651874 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071619325 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.07080835 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063480198 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081819139 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064250361 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075774072 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076791344 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062345984 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073949206 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060259944 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060116436 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060886755 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094122382 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062405675 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062323393 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060916497 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060457009 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06251212 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071154364 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067494445 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069545346 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066372877 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078644642 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071583899 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062514946 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068503162 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080680057 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065471577 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061891859 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077134731 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06440288 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060805732 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.07977704 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071633407 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06220309 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061429431 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063691449 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073603823 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061746121 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059416438 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070095497 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064033834 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064288646 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06618803 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069842212 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061337723 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072089582 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066658921 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063731172 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060408653 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066371934 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062985338 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060573812 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071098065 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061895626 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076200207 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068523522 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076328845 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076636654 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072207785 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077365624 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061483697 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060215514 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079270113 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071035527 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.202176721 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080880866 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062396074 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07669195 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063577055 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065185591 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073574339 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06271908 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065105243 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062886152 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.069110471 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064130924 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064467342 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068353215 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071646041 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075323394 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063716917 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07184144 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063300799 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078706926 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073366119 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067624397 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06668055 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063475067 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074907139 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069858662 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071973401 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062246738 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063214141 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063345029 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07398168 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072635405 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064734496 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070188526 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066831358 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063211397 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062490812 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063479633 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065960917 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065988067 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063438487 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070729252 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072117822 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076944182 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070345348 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071463728 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061495149 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061476583 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063067962 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060728163 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066645008 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072127295 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078210813 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074867268 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.083997254 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.062629211 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072889638 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064258251 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079627357 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076686941 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063844684 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067444075 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061723516 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064564472 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072191865 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074451407 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076662534 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078275811 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067888719 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066900345 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062317407 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07763052 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062980009 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071383681 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072540735 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067417405 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062619273 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064242182 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071926068 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067521826 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062679914 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078597561 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068785494 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062475944 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076975014 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06258047 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073797124 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06239995 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066022324 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067689352 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064154928 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072426229 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078107041 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061290322 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063240297 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078040189 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064690477 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064453185 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070837062 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077758008 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066912821 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.07033258 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073400617 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072171907 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06742744 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072128137 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062991549 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071637894 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065340926 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073485497 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062134983 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079973858 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061027324 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076973051 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062173243 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073137427 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062788053 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071011958 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062792405 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078617974 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063492732 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06215722 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073325034 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060666727 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070888792 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060940645 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066412218 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067807055 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071563135 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063167414 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071135302 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.206015444 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071448836 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067761322 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.072869445 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07345522 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068147658 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063131336 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071725285 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07412747 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071778803 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064419663 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.06421449 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063547118 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072258927 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064605275 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064219048 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070976252 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066830217 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068765438 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064143492 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.0645432 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065275946 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071429827 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073977804 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081068448 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072058651 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070888617 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072165778 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062188689 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078637929 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062674756 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073007226 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.061491539 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068787146 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071670237 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062895942 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082659746 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064200255 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.07077128 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075051668 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071348063 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066445068 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.082489044 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066079358 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070978128 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071384176 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067504641 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069201884 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064634507 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071491001 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072160043 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073609105 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06395943 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07042879 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071675234 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064695712 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071087511 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064350175 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07132256 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064681804 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061511596 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067164957 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074311476 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067888535 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067651671 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063615793 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061657415 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063143618 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069577651 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068111324 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071859708 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078967198 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061936955 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06378616 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062481402 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066699057 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080832702 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072782763 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070475579 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067571222 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062427489 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064414149 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.064476407 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063179069 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066837223 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062351627 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062610183 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073859712 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064684141 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067102177 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063021016 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063933165 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073118184 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.067979047 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063096838 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.06927837 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062300454 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067989803 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061579874 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064335202 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067218519 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062007887 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066496638 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073343336 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079122895 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069461095 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.07177904 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064157308 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070585808 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078214656 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069895215 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063929182 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071737514 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.06136776 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081167819 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071551904 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071112256 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072134083 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063452648 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079154525 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06701839 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.07252033 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077640953 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063680597 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068208103 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061532529 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077244803 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066669029 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061568681 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069671979 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070034169 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067744714 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073414465 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.210275649 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071140495 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067587336 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066426092 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064579699 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063772053 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070935252 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.0780135 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063840965 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067762677 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071780526 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071726935 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067942681 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075830295 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071380085 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064319277 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064695347 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066427147 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063847242 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074810172 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06365874 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067474369 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068019044 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06294178 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069865341 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079075867 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072372326 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072774524 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062538257 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061790488 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.08056963 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06681175 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066673546 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072042962 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072761471 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076276817 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072578439 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079883713 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.0637243 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06925531 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075433047 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064610321 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062881189 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066648102 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064505667 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072473087 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073395468 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.07063569 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064973233 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069822285 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076550114 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064701367 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067729094 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067761475 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064125254 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073599081 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071536897 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074108791 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064800592 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062320742 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066312025 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072015437 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070779661 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072591603 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064255035 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06994535 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076796289 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070700085 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066085039 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062311495 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066029476 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072018236 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06751652 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062509806 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06766306 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066410576 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070239078 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072960622 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067302547 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062503334 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08025509 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071225691 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072082026 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065109354 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.0650347 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063325742 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062644152 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074273282 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062097546 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064512222 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067796977 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064625859 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080676765 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071324625 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078802265 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063938199 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067084689 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.06275784 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073513803 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067492268 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063364673 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073845183 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062152491 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077967295 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074871607 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068433952 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062436692 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.088018335 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071352962 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077708252 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072318096 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071420406 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066110808 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072123901 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064462995 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073659207 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061982411 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061090951 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072749111 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070722558 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074403251 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061920654 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072633837 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063735947 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070328663 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069741173 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062876768 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062902572 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063690727 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071417305 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064450899 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069403853 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.208808353 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079397273 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063629805 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07398011 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071198662 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07381721 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075918451 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074545323 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070404924 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063891879 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070919767 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070962006 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064466193 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068252339 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066367595 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084409536 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064877864 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064216935 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07735035 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070781699 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063838679 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070289957 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067766682 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073507151 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064261889 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073473987 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067702601 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064103006 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067393934 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067849261 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061687862 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062628876 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063033796 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073127255 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067695979 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062935239 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082281205 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064604029 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071337903 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074643994 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069516428 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064506335 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.06205715 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.066424633 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07621325 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078899181 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066604306 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07164854 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065007342 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072069394 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061865286 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072089883 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071153536 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071048725 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062817142 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062813342 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078232706 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078113577 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067361581 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071924165 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071910262 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064566121 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084562269 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071881057 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064066265 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073466857 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065298705 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061887782 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061869631 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064724806 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074698765 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062504311 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065349729 seconds)
  done (took 43.01255265 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099637169 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062130657 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061123502 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060838703 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07178379 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062188675 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061788039 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062712395 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062934367 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064110759 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06159224 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065235074 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074366673 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075918619 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073545054 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067135755 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06265389 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063280011 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063158432 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06399428 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073399824 seconds)
  done (took 2.878028083 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064352393 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06523477 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064769506 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065102162 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064743677 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061436759 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065357297 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062460035 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067090109 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063419886 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067705208 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063536002 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063249209 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063044301 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063413697 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064024054 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066964849 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065974113 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.062706904 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066589535 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06470402 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066945179 seconds)
  done (took 2.862405234 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063166468 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061994493 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070413416 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060671805 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.06092835 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063955322 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060515959 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065385454 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066741558 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066278718 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071779623 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063201149 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.063029978 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068020811 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062241248 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063485495 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106428425 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063174491 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063581988 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062590681 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065044567 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.071775594 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062725964 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062090036 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067139459 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065625763 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062019426 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065310036 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062789198 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066414958 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06367351 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062013714 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071333754 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070555216 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066666365 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066996888 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064055394 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06337203 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062351425 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062269883 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070857292 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063796442 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062542365 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063950833 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071497234 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062484819 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06226575 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071455425 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062207869 seconds)
  done (took 4.666284518 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071641929 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113645439 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066915078 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09665669 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075520144 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069073687 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068580058 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097539441 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063522514 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064335423 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076880815 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077096523 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065494458 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067036472 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069610782 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065389362 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066330755 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065005316 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068020452 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064904454 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068261978 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069706068 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075789557 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075844259 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066147934 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064869591 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064982258 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066771608 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075937912 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.06894718 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067279778 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067827483 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076068226 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070071687 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064837659 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065015068 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076795678 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065704394 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065411661 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063844532 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065181203 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066729287 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.069935086 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077234635 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065588781 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070971172 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065463933 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063377626 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076144175 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065588959 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069530802 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.076972998 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06663028 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.06591025 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067516478 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076362379 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065992259 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064631133 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065844957 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.075786568 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064408976 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066642509 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079227709 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065096436 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068922728 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077400308 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070633781 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067003566 seconds)
  done (took 6.380298132 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070926269 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095863326 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072288003 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072004248 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07177188 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07366818 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073397528 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073791206 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073607447 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074016982 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073849942 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.113695371 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069079438 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077079628 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073099934 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074278499 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073616435 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073173851 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072075684 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071597054 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072635792 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074073149 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.07331677 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073639434 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075661538 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070128695 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073355739 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073432372 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073686568 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073547103 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076212779 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073555735 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073597317 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073728472 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076146231 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073683235 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063776985 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072962519 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073212276 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073116136 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069684215 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073754541 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.074485376 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070420366 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073744113 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07330042 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073950167 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076700174 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081108675 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074323934 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073969456 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074739212 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073709068 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073660186 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074247236 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080552736 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074370885 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073891864 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073818713 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074121965 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074676077 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080849756 seconds)
  done (took 6.113266027 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075204872 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068166233 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080470324 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061384903 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061219234 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070902809 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062917242 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062836684 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068838782 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067690401 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069655827 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070638924 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072779034 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069907568 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070280218 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072400661 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070425128 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070287445 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06821888 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070249711 seconds)
  done (took 2.858327697 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076668956 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080078095 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067103946 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070896237 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067142888 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072639249 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067772619 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068683703 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06945137 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068280328 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.075067844 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073670649 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067861588 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071232444 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071482568 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070806034 seconds)
  done (took 2.597779449 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064969045 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069581901 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.06781725 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063138911 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065213575 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062589252 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064317319 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062528742 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065686623 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077876713 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064164929 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066761513 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.067645775 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063450485 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063785603 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067239946 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065629131 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06381698 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063994092 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068554 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072438182 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064671539 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066459277 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064055535 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066380456 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072805499 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065578268 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066438811 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063696526 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066618938 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066990531 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.07076074 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.066690187 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064747743 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063096964 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063974188 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064548528 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066896937 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067146278 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064093978 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062632567 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06917061 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064378447 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064480571 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065859313 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066771949 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065663399 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069476776 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064084504 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.0663013 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064415191 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066104415 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064308978 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071030236 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06611352 seconds)
  done (took 5.096154276 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078227476 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067426849 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063290435 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06266776 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068325584 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068836391 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068512343 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068421514 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068854324 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062665966 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069070681 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06810272 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068745789 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068577297 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068988512 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068138738 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062640028 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069016108 seconds)
  done (took 2.695385483 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067754094 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066775976 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065622352 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063277496 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064503705 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072939956 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063223998 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064119908 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064404412 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065381048 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064887338 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064516034 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064326732 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064321382 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069018296 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064959755 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.064250049 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062993163 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064567217 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062404031 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069329046 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062906464 seconds)
  done (took 2.903260435 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.08873183 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085074971 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129393062 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081148795 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091157916 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074143418 seconds)
  done (took 2.014736658 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094589046 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.10403916 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066105436 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067719987 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076740429 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071135677 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071012736 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071283704 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076596399 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075128486 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070935489 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076621614 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076664132 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072720077 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076435836 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078899883 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071673878 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070247963 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068349452 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078907599 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070271152 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074649731 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069551999 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069035961 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069736003 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071059209 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07698653 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07321014 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069364063 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074360561 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07685074 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069081609 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074993516 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073133529 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06651877 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074598884 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070627248 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079751439 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076764173 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073202752 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068131044 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076459397 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076682507 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072899565 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079151444 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071721947 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07306867 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071545053 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07196231 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081856302 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076882038 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072802661 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07728245 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07952587 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079763569 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081425867 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075560011 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07303824 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077340061 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075491891 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07330059 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077133304 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074031365 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075694348 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080412005 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073541649 seconds)
  done (took 6.405740076 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100450847 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066536193 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069766548 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073112561 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070944764 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069725332 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069375829 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069477153 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069733689 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066817195 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104880465 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0697551 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071220613 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073319996 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069733625 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071596651 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071361068 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072569311 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067570288 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080786207 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070480124 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072998812 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072425982 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071008736 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073085478 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076877103 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070467415 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071469406 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070035908 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069971041 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072365219 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070234975 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071087612 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06801881 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072309612 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071180454 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071138591 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073221201 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07151565 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077257391 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072903824 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079572161 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070576964 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071384493 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074947746 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071184034 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070969956 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067970397 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071310045 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068083483 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075195914 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07529545 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075654435 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073616371 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071597922 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071388962 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071235001 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071552827 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071469012 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078455116 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07193323 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071000707 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081627396 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071329959 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07179034 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073428497 seconds)
  done (took 6.304489005 seconds)
done (took 131.26653024 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.21745239 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189855665 seconds)
  done (took 1.857185989 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075091393 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166034355 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075224881 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074858406 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108597018 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107552974 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07635783 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072132189 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075018233 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072438412 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139021666 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076539989 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072536628 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072725748 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072402732 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07275651 seconds)
  done (took 2.882411436 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107596342 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184714632 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.081871254 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071624735 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.116021306 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079878831 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.074260924 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077839547 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079181154 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072518384 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108916658 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083124717 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075857656 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.079462007 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074107383 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076253753 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07752125 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077141487 seconds)
  done (took 3.074242625 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.0974561 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.08707411 seconds)
  done (took 1.664807366 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155990698 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105145945 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144283281 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.32867689 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130278793 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126701175 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.129412121 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.124868221 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111470059 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121464989 seconds)
  done (took 2.952467373 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.105583289 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.104157839 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305896554 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101525965 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081575478 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077267945 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074925218 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079658732 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075375992 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076098565 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120691466 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075008669 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072400143 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123198667 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098033679 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.10619104 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071147175 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078006575 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079792164 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070745782 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077581932 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.081872584 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179165032 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078245056 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099290754 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07514948 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078305755 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075654421 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075992124 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080484021 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081117472 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102288767 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080160614 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084279993 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.079447505 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.099898636 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073754866 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.101730395 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.076821938 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074400292 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076825371 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.081302296 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074139986 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.080516959 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07691451 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07913364 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.082149239 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072717241 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077479261 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.076371961 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074098619 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.078689411 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07862461 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078960533 seconds)
  done (took 6.300895409 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107616127 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.10730618 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07056382 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.112904724 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105054662 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07035412 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.103688013 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100431808 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.107914827 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070138918 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069615891 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069385355 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076641874 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079214027 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115504454 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10809186 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071696174 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069669085 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.106800104 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.106589251 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068932039 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101238416 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100262704 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10655694 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068839881 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070002781 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069172668 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070437935 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074002829 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074831487 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069253614 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075535628 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08020729 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074633923 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068401543 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068385693 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068670283 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075175503 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076246547 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07596562 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074773709 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068327286 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069467095 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071519222 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071612034 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070029919 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07681882 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077573489 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077086384 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07129209 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071322513 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070567367 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070987527 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077937276 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077012092 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079307238 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077519958 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069576828 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071172816 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072754862 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079036882 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078523012 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07694759 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069728773 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077101561 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06921103 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077699483 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080438073 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068830136 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069481522 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069054545 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069194139 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069604172 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074746367 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075110698 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06967845 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068948481 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068877786 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07693961 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074461697 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068785968 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074471854 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068598437 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068952201 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069415177 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069191315 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074140582 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075637738 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069894472 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068888894 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068477649 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06881213 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.06815753 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073600988 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074605793 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074791975 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.073593524 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068520061 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073426905 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073639711 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068672922 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073198181 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067891963 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068044738 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068819781 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073299778 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072366143 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075139435 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067969388 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06699661 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072762931 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075175574 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.207571157 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075250638 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077927698 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076666726 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069569474 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078337991 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069343048 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077172712 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069230616 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077317841 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069538974 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075413405 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069799878 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068720914 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070081247 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077371502 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071514215 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07138781 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071943485 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071599321 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077816594 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081085339 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07132094 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07732144 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.0776104 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071599123 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077355313 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071675153 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078093697 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071261637 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071724259 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070526071 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079695179 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071169909 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071063368 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070915053 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079823945 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069547244 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077615984 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074353999 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06851135 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080534041 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077481325 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074738984 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077605401 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069758989 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069553477 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070774482 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.073121607 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076719222 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079482653 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071635092 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071094644 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076550605 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.079558632 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070627664 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077366296 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076417103 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077219333 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070707483 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.0695644 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077362668 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076572896 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.291379339 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074729719 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075458431 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068609089 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074519238 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074856203 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069014248 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080507874 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069027702 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078253715 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074884369 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073696545 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075377921 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076832709 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077179442 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077432944 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079137586 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068790161 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068976215 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075090922 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068532626 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071114191 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077227606 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070964354 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071625323 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.083443109 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069332753 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076773045 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068681241 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076270469 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069734928 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071335685 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081623521 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071418949 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071694981 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077261741 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070838797 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076572534 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077877329 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073553456 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068164991 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068694058 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07350288 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074149473 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067637927 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068577188 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068779431 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072792506 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072648852 seconds)
  done (took 18.698273352 seconds)
done (took 38.926689108 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17035202 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115447829 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.206457543 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197726932 seconds)
  done (took 2.276419095 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100599441 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065196577 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081438598 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.089126519 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065845786 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.075794799 seconds)
  done (took 2.009246455 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200866494 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172959923 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.237492686 seconds)
  done (took 2.131328938 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.364207059 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.147337855 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.213938886 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.499760452 seconds)
  done (took 2.849977082 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.108912937 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.10045346 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077017251 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.110921105 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.084537374 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062824132 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.1323188 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069755509 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099441684 seconds)
  done (took 2.433018388 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130241074 seconds)
done (took 13.391540574 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.125890339 seconds)
    (2/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.232144864 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.191126146 seconds)
    (4/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.11186119 seconds)
    (5/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.21633152 seconds)
    (6/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.085215742 seconds)
    (7/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.253414356 seconds)
    (8/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.116079139 seconds)
    (9/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.201955472 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.090810919 seconds)
    (11/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.123799054 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.077997966 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.202060597 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.168458841 seconds)
    (15/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.166108198 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078567708 seconds)
    (17/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.22514948 seconds)
    (18/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.235926143 seconds)
    (19/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.190871495 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078361957 seconds)
    (21/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075103312 seconds)
    (22/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073572206 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.07805971 seconds)
    (24/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073159184 seconds)
    (25/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.220494716 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.208542815 seconds)
    (27/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.236444367 seconds)
    (28/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.144862591 seconds)
    (29/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.146181979 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074489767 seconds)
    (31/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.217488709 seconds)
    (32/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.192948191 seconds)
    (33/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.182216261 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.141017585 seconds)
    (35/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071297513 seconds)
    (36/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076257774 seconds)
    (37/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.109688545 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09028435 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077151104 seconds)
    (40/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170671632 seconds)
    (41/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.166282173 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.089086775 seconds)
    (43/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.17381284 seconds)
    (44/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.178970498 seconds)
    (45/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072015374 seconds)
    (46/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.246327887 seconds)
    (47/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068011384 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085346512 seconds)
    (49/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.197370439 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066225576 seconds)
    (51/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071085045 seconds)
    (52/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143723159 seconds)
    (53/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.074147959 seconds)
    (54/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.194670609 seconds)
    (55/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.068358926 seconds)
    (56/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065730389 seconds)
    (57/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066145676 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081834192 seconds)
    (59/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072638815 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.12350244 seconds)
    (61/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.073850148 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.066851681 seconds)
    (63/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.065027237 seconds)
    (64/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.142135752 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066690796 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092181507 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06709288 seconds)
    (68/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.082928809 seconds)
    (69/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189058266 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.150766092 seconds)
    (71/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.186946283 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073435867 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.196283875 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075762316 seconds)
    (75/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.14268877 seconds)
    (76/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067010966 seconds)
    (77/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.222160963 seconds)
    (78/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.078244414 seconds)
    (79/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.150071022 seconds)
    (80/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.087746511 seconds)
    (81/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066985847 seconds)
    (82/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.139626143 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144474312 seconds)
    (84/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067677158 seconds)
    (85/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.06684134 seconds)
    (86/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.083848879 seconds)
    (87/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066637097 seconds)
    (88/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069337822 seconds)
    (89/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.164738262 seconds)
    (90/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.1558803 seconds)
    (91/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065399445 seconds)
    (92/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.170256125 seconds)
    (93/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.162927968 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091637952 seconds)
    (95/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075437662 seconds)
    (96/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09306861 seconds)
    (97/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.143218118 seconds)
    (98/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068048362 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127062667 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125244652 seconds)
    (101/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079668916 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.088708799 seconds)
    (103/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065549785 seconds)
    (104/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170830887 seconds)
    (105/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066806202 seconds)
    (106/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067026852 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086560421 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.089458724 seconds)
    (109/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083894302 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066558514 seconds)
    (111/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.068281555 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074828253 seconds)
    (113/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07652352 seconds)
    (114/341) benchmarking ("sort", Float32, false)...
    done (took 0.140379494 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125626711 seconds)
    (116/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071453365 seconds)
    (117/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.142902975 seconds)
    (118/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.087099078 seconds)
    (119/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.079921975 seconds)
    (120/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.077097142 seconds)
    (121/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077532211 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068047715 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.155363232 seconds)
    (124/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.079126779 seconds)
    (125/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067653854 seconds)
    (126/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069704879 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069766898 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075998881 seconds)
    (129/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.13682998 seconds)
    (130/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.200460792 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093483985 seconds)
    (132/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.06871569 seconds)
    (133/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076223684 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090134715 seconds)
    (135/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.074365619 seconds)
    (136/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178629181 seconds)
    (137/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069491513 seconds)
    (138/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.06779294 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.077264288 seconds)
    (140/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067985869 seconds)
    (141/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.08939926 seconds)
    (142/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.08339411 seconds)
    (143/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.156510339 seconds)
    (144/341) benchmarking ("sort", Int8, false)...
    done (took 0.151451342 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149195779 seconds)
    (146/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077008799 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067971592 seconds)
    (148/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07572066 seconds)
    (149/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.239445128 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.076168965 seconds)
    (151/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069086007 seconds)
    (152/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095376705 seconds)
    (153/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079172345 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077946013 seconds)
    (155/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.066898391 seconds)
    (156/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.182314907 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.078241979 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 0.149845222 seconds)
    (159/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.068876422 seconds)
    (160/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.06769073 seconds)
    (161/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074768367 seconds)
    (162/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074866363 seconds)
    (163/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.078794832 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.09259792 seconds)
    (165/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.217008054 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085894115 seconds)
    (167/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.1619664 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.093204509 seconds)
    (169/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065986174 seconds)
    (170/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065243386 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131475466 seconds)
    (172/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.076612958 seconds)
    (173/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.25165671 seconds)
    (174/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066842303 seconds)
    (175/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073475646 seconds)
    (176/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072076212 seconds)
    (177/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073827691 seconds)
    (178/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065650125 seconds)
    (179/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.073384904 seconds)
    (180/341) benchmarking ("sort", Int64, false)...
    done (took 0.066207241 seconds)
    (181/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064659679 seconds)
    (182/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085307901 seconds)
    (183/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064961542 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.082301667 seconds)
    (185/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.234558561 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.161966291 seconds)
    (187/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076774883 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074707307 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067153426 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.085009004 seconds)
    (191/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070526061 seconds)
    (192/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094082119 seconds)
    (193/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.161867704 seconds)
    (194/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178040639 seconds)
    (195/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.224523401 seconds)
    (196/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.06711116 seconds)
    (197/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.076341559 seconds)
    (198/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.141477212 seconds)
    (199/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071264943 seconds)
    (200/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065230402 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064977874 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091596996 seconds)
    (203/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.084117403 seconds)
    (204/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068255607 seconds)
    (205/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.153334955 seconds)
    (206/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073675227 seconds)
    (207/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07438778 seconds)
    (208/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.087035774 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148081622 seconds)
    (210/341) benchmarking ("sort", Float64, false)...
    done (took 0.139535074 seconds)
    (211/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.073161248 seconds)
    (212/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079772614 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.075747424 seconds)
    (214/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.072653288 seconds)
    (215/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067100279 seconds)
    (216/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066627139 seconds)
    (217/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072690802 seconds)
    (218/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067455971 seconds)
    (219/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065181192 seconds)
    (220/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.06992222 seconds)
    (221/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066087882 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064842318 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089103106 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066303937 seconds)
    (225/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066971455 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07413368 seconds)
    (227/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068157846 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073190398 seconds)
    (229/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089663225 seconds)
    (230/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.073317234 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115539361 seconds)
    (232/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066633537 seconds)
    (233/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.066460686 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068287921 seconds)
    (235/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.065598036 seconds)
    (236/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081937934 seconds)
    (237/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073484614 seconds)
    (238/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075668239 seconds)
    (239/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06706456 seconds)
    (240/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.06611123 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078700642 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076223199 seconds)
    (243/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066403295 seconds)
    (244/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073435419 seconds)
    (245/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066509283 seconds)
    (246/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067644352 seconds)
    (247/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066431597 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.088376219 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07455194 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085614001 seconds)
    (251/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.068195021 seconds)
    (252/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06799661 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073167037 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069027332 seconds)
    (255/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067765069 seconds)
    (256/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077030306 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064436771 seconds)
    (258/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.22847045 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06706343 seconds)
    (260/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070117453 seconds)
    (261/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.067183608 seconds)
    (262/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067460324 seconds)
    (263/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06848832 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146130713 seconds)
    (265/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066648808 seconds)
    (266/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068418204 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151576783 seconds)
    (268/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.200114321 seconds)
    (269/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067220028 seconds)
    (270/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068123368 seconds)
    (271/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.067211815 seconds)
    (272/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069112955 seconds)
    (273/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079640982 seconds)
    (274/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.068371034 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067441896 seconds)
    (276/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154546214 seconds)
    (277/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074111632 seconds)
    (278/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.16116503 seconds)
    (279/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066258093 seconds)
    (280/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065795808 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064754088 seconds)
    (282/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064584467 seconds)
    (283/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066068251 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066345188 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129856252 seconds)
    (286/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264290935 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069726408 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.067842005 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.172610292 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06903804 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092787707 seconds)
    (292/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.221984928 seconds)
    (293/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.068156875 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151156837 seconds)
    (295/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.068135048 seconds)
    (296/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.075941087 seconds)
    (297/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067803005 seconds)
    (298/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.070048995 seconds)
    (299/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068354595 seconds)
    (300/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190925058 seconds)
    (301/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.068476769 seconds)
    (302/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067739846 seconds)
    (303/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080770353 seconds)
    (304/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067748531 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.066621678 seconds)
    (306/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.071368183 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125199668 seconds)
    (308/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066464187 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066107718 seconds)
    (310/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.243594055 seconds)
    (311/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.068046812 seconds)
    (312/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134110421 seconds)
    (313/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154760605 seconds)
    (314/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06537044 seconds)
    (315/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154358096 seconds)
    (316/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065903082 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071318495 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153376393 seconds)
    (319/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067052616 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112270644 seconds)
    (321/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068677546 seconds)
    (322/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070681914 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085364288 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078367701 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.07004637 seconds)
    (326/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078285516 seconds)
    (327/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.066014575 seconds)
    (328/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065573827 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065691201 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085566855 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13277236 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091681107 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141319592 seconds)
    (334/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066576144 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.068274618 seconds)
    (336/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.068387986 seconds)
    (337/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075118851 seconds)
    (338/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.069855083 seconds)
    (339/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.069620139 seconds)
    (340/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.07015703 seconds)
    (341/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.069005606 seconds)
  done (took 37.010127152 seconds)
done (took 38.5552555 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090752341 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079272062 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078192971 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074752404 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.080329271 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077879377 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079736418 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078007621 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.079884693 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078863928 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.079443228 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067741856 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.075926479 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.083207384 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.076442277 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.083634001 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.080471927 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.083692218 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068668899 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082359533 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.095074087 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.081189986 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.076493565 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.08223848 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068922764 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077427028 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092760234 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.089821106 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074885162 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.077680954 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.075296745 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.086011848 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076216511 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.074417876 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.077569653 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073787356 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.077183452 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074797327 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.091499614 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074004454 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068195298 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080447946 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.075740062 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076752284 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077248039 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080246885 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073334973 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079689557 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065767002 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076745006 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.088965536 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070801412 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072482196 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074283152 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071231528 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076551012 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.074833503 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078706692 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072604664 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.078035564 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077727237 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074446619 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065479999 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074474685 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074665979 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075092201 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066581813 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073101614 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067414032 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068422781 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067364019 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077164348 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.075016315 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.072734647 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067761042 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.067448163 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067007149 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080007437 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073732169 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077818129 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068227543 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.07336595 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.07274739 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067969354 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072696661 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.079162507 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06701051 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067884505 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067170247 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082072569 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074488941 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067479044 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078169104 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072808853 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071403474 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065799986 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065389806 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070928219 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.073316447 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065909741 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065979207 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072959647 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071716477 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074070303 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065862349 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070423325 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070806056 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064583547 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074655272 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072979377 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.0745852 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07897709 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074298349 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077383989 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066705305 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06472564 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074995357 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066799311 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070762495 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073887219 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.070973331 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074190232 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066616198 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.064957407 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070543393 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072268921 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065939122 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066578464 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065788445 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074382131 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07243733 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06468413 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065128767 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075455097 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075374784 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064983917 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064907051 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074582234 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066009052 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070821584 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070354657 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073071969 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065330888 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065092508 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.212444843 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066088464 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065977336 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072243712 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072290855 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067852977 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.076887686 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074373131 seconds)
done (took 13.011232983 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.066740386 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105200616 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073274899 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082440032 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078086694 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067483438 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070400932 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082301903 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070207945 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086212865 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094023929 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087722085 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.092854723 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066029923 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06670292 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.067459372 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065377541 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074523151 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080947454 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091768373 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095494021 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066186065 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075440644 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.082854155 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.076833593 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082423372 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067603521 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067604775 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069686447 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.120570771 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091977159 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065957314 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06775413 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.079808103 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080047255 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073488191 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067086011 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070500243 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069627767 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066172815 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.06814948 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080951827 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070437995 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07010508 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067922155 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068004719 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.066983981 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070144269 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079512437 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069838589 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074528138 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078009285 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068037834 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066683826 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065558757 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070145804 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068792947 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068816327 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068544496 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.06743118 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068637454 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071393587 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070017197 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069432532 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070447466 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.068573987 seconds)
  done (took 6.546329919 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082782408 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092117599 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08077756 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081533096 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066834229 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06789189 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068105578 seconds)
  done (took 2.20450632 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067446094 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074955556 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078936093 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079396677 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088739807 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076211929 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067050668 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098256476 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066316086 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075403536 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082621481 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080675689 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070625608 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078814703 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066849459 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078989411 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067074915 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073947551 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077145567 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083056771 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073089516 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.099468001 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.082833581 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069559459 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083296407 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.076094541 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070841474 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069913634 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070056432 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068993726 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068693433 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.090969431 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076253492 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082084347 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069614102 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068139763 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.073469787 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070003464 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.073185097 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07710729 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.072184125 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067736401 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.069645889 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069100249 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070590566 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072903107 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.067399555 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066378831 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066134674 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073833764 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06611481 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072945547 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.0685766 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071816193 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071609269 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071289403 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07359209 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066630962 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074234041 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073507385 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06687682 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079343885 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078129084 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070294993 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078203331 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075348284 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072882893 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070475157 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066601023 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06621805 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067560431 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078788356 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069893989 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069319096 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.067727063 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071434874 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070597299 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081643217 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081716614 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079801821 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06905176 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066957633 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070263802 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083180625 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071445593 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067303189 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067527482 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066021943 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071464709 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067074935 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071415974 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.066881325 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073778382 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069428956 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06897197 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074736737 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.066946273 seconds)
  done (took 8.755972768 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069400493 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069404648 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069095299 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068802916 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.06848667 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068789231 seconds)
  done (took 2.110931339 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090769437 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068437511 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079563583 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067818697 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089392878 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.073687142 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074232301 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070097217 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084125617 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079034656 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.076542798 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.078887414 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075172844 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070648723 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.075086823 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06966524 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076078192 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072240014 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078877282 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071656601 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08476427 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069995306 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069781958 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080418727 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070973274 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069588285 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069202603 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07813632 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077718043 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069837933 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071475961 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072450308 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078017797 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071190694 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.076628396 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.077212711 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06852213 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07354177 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071731271 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072410181 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07814805 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071521377 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071798649 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074768768 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.071120357 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.077679106 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073799514 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071164962 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073026771 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07257131 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072715089 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067944806 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.07010999 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07264213 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07550639 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069186699 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07311134 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074708167 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068845588 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075254228 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067625807 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069831151 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069038401 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069899536 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071869366 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072510161 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075375943 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069081494 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068992468 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068773802 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.074795531 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069452338 seconds)
  done (took 6.957841159 seconds)
done (took 28.227417236 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544718676 seconds)
  done (took 2.184246428 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.581530924 seconds)
  done (took 2.264960454 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.37001021 seconds)
  done (took 10.047694596 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.304428694 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.32856201 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.735559609 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132682316 seconds)
  done (took 3.219460279 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.757121407 seconds)
  done (took 2.445506349 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.228295862 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.219971656 seconds)
  done (took 2.150596429 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.338930834 seconds)
  done (took 2.019379421 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.150963393 seconds)
  done (took 2.826519331 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229097652 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161561614 seconds)
  done (took 2.078682934 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.537980906 seconds)
  done (took 2.220877208 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.267919179 seconds)
  done (took 5.958724388 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233282373 seconds)
  done (took 1.960713371 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.231043401 seconds)
  done (took 1.925194159 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.053464201 seconds)
  done (took 3.739583952 seconds)
done (took 46.734325074 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084147616 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087473924 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.088513031 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083412905 seconds)
  done (took 2.0029885 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074682533 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072989905 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.076534207 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.077243134 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075219915 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074828218 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076698618 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073500072 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074556347 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073031405 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071421712 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073381235 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.075689901 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073164139 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076402774 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077069649 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07348733 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07313625 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075668711 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073592867 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075969514 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073285267 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071331635 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072979042 seconds)
  done (took 3.473450065 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078698464 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073841564 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076322164 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072127339 seconds)
  done (took 1.995655079 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077506173 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07741739 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086136924 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090444931 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077811891 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.07788504 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.086353888 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.087544006 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068247216 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090166673 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.070749765 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.069601207 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070046823 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.088845868 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.085927644 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06484616 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065716309 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080165424 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079451852 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.082715985 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071023497 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068667048 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080283197 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.079925072 seconds)
  done (took 3.556616194 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079671501 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067307056 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080800044 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094331268 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.094944343 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068582054 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.082880795 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.095840008 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.131616362 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.069067801 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075844686 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067964847 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105678758 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067596304 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081999419 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109496775 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.114626041 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.07241954 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102002589 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068477948 seconds)
  done (took 3.430598446 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076351827 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07105564 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072402131 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067709749 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079931783 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076199847 seconds)
  done (took 2.150407352 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069039412 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069011486 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071523075 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.074376095 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070058165 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069221246 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068464767 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066547127 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067122069 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067647007 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067554751 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068336868 seconds)
  done (took 2.527761819 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156040328 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071361036 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071880276 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.06858144 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.074839975 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.069152678 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.084144262 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071958084 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.088084295 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070169483 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.069907148 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072558977 seconds)
  done (took 2.666977752 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100497329 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101623839 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146264239 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117519796 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116367938 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097606256 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120858083 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096268306 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160717491 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136606352 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116863567 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093288786 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086985385 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070214428 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099859755 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101807394 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135593141 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073373047 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112467416 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.163249947 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11465375 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.112309621 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121584276 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116383438 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081534502 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121399774 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094731447 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104131425 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125749584 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109902832 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119052319 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098073309 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073257815 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072154478 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149104177 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100859094 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107680515 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092908173 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100180804 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087939288 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107525672 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069792831 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086684534 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107185829 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084950278 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118439037 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091302937 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10331623 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080784188 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130404108 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107012731 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098524273 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085700121 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103913311 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129027124 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094836349 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110005868 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105845012 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081869171 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116256482 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099475492 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.252376478 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095039197 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081310755 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.160000253 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089720658 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112321586 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112827863 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083033113 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090440131 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10288279 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131483753 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107224812 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.106816306 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114661277 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095456068 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11012654 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093739562 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.12834698 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093886999 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073589319 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104666185 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128882603 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085561083 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100475308 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129792418 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092342754 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077936217 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092282491 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119021785 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081053679 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096258955 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070256485 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.09774236 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107568861 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09862675 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111887937 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107166368 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078835589 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123916243 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109275505 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074676651 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120469381 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100948369 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152543094 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096867208 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077444399 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100262951 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094912494 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149983455 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085556698 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080912841 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098830111 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141258175 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09487805 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169658306 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097451488 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128825676 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098192084 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087224911 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074965179 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.08948907 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10072753 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105987925 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100618157 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088723262 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.076852144 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086071431 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094914238 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.251053019 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082486955 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11484149 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102102076 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07646283 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089344441 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079392539 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125369923 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078553472 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1095343 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125558954 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080226892 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105428509 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099129281 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107344876 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098060851 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108626856 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142575407 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117642178 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080158724 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.08403763 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109633677 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141560508 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11379248 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085202954 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077443898 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100439167 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111262071 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097755074 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107041722 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100148944 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108901083 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097253872 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141284984 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119156608 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092006433 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09627517 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096594092 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123229628 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077435589 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154756993 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094728195 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118344669 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086391912 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140836386 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114452708 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089979049 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084831686 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096344768 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105584271 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105724774 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143916299 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099264202 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.075756256 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095656713 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133123884 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077187842 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10039448 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090304295 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092898991 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117580109 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.085851862 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082788402 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069578409 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102198552 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13542526 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069776196 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112466395 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.280437658 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103656751 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105442747 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071272483 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101704212 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141489724 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109105673 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143408969 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118572145 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101669415 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118756453 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.102438891 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108668956 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083491065 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.128487681 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.138495789 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100013096 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093500396 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139150084 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120665134 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.138382189 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.099577069 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118841638 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.108944409 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103749503 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104591939 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101609996 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14669921 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124007353 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.127787447 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08933079 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109422084 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112931527 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140274664 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085517602 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120085966 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.078813266 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115348102 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.080754242 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111459892 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.082727806 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113036784 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080419831 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10050941 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071638016 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077827965 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144778345 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.116197993 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092984554 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089901551 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140740219 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134066821 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.083515886 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10252184 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104043093 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102321398 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100793173 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109361148 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.08806299 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095343268 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.272254277 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082615443 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084604393 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101289871 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095508042 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10817463 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085603979 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076194312 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13612267 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105313567 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095324044 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079432343 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096363055 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123870306 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091919996 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090891031 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108728967 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107557622 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144316286 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.093923037 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101589466 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121763596 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083948089 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09587144 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072848472 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.089790242 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079496063 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112823881 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079676751 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111892694 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071754128 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133600727 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090665919 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.095176843 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10419371 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1010928 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130259842 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09546415 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133086468 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093459476 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105784124 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111371581 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09788709 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083266134 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10518763 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096209952 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1104498 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.09678105 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106183627 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111436429 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096170787 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144397251 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09369408 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125184117 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109225335 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110333305 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108381968 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121076912 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140630088 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114353708 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112705784 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076176734 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083583332 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105458479 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102279883 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147304486 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104732733 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074397891 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086163634 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091420027 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095935574 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.265659288 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084114121 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142540029 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088899873 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089636424 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117520071 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.093345768 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099270515 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077596506 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09610872 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101422212 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095091245 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095049529 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107551234 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117471123 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114632726 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133303192 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099079495 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093858424 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118721023 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110808111 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11098442 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087148092 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087709934 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123400685 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103255172 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128569806 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100764766 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095130858 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102700599 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090721407 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100165795 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097095332 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.109474858 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080964016 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076378306 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069089116 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072997706 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118248203 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108904191 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099315721 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099034826 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073346443 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104063841 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099779988 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073040281 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087997185 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094763461 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099884766 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084212889 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093168783 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.116956342 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092414678 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104186757 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100163944 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12902444 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100872941 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089249029 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143795997 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129292748 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088890252 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092909853 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07253047 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079468764 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101119618 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143492399 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116281246 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076701557 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083297305 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.238305192 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088476531 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073270759 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088607278 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090349277 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104175207 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09364172 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.112716078 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104680007 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076519278 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103888434 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098385287 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094466368 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100433813 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10392795 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107926058 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124111345 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10253255 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098315594 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077694997 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081534551 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076497755 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080828899 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103228151 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079640383 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079413819 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134157472 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.094499538 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108348312 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111708467 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088141348 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078995146 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135986117 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071013947 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135905001 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072140677 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082642576 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081839012 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079733903 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094696646 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105459791 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096723886 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113210338 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106470377 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109049831 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113381505 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15912142 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07457702 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147588099 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079432786 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078844327 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079973209 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117841862 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094149413 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107864804 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145201249 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092344065 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09499642 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08068516 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.132330288 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.101510793 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10370837 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083839586 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079638673 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129369008 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081317608 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.073276232 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088078748 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1109523 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072642198 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103746324 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.247324281 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081720789 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114608471 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631964543 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091513698 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077085026 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089755268 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143255271 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128317833 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083941014 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109224715 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118729331 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090457588 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084487344 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108052124 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183490938 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074676637 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095782541 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104218519 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0992285 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093120334 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.092327659 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086880994 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092414194 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086716244 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080637666 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108253964 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088656664 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092126824 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098233629 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08369716 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.080917445 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131926389 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10461603 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082923038 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089613059 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101466005 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088451832 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091193046 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070244456 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113814963 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091763631 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102021482 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092246275 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108234899 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120987935 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089433397 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112348581 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089457015 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110137163 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085265677 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078923547 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102336647 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079301869 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078854472 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117407319 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085075368 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093524113 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104587024 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096122193 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114516744 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118495675 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111108643 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098284571 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079703199 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085913928 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.087443638 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075898307 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078308746 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073863336 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076024001 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.269727663 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086845231 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084895007 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115974547 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083161629 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104799259 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101479156 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10959194 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084086573 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10161739 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109099189 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091157984 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103703677 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101177192 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128723155 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145388282 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100036104 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123551228 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133221089 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.079198812 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07736851 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069670876 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11468114 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079704679 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.081413542 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081753223 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132748399 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083214164 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095924918 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.228732867 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080811989 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082898673 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098308718 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.070600273 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083375651 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108416104 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085705323 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080850499 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099079722 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084041819 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117682757 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111462382 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089727209 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083466704 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081730802 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094269463 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104993779 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.128528467 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091127618 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076166985 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107216389 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104000078 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123627038 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073624096 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081667459 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130187004 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092139268 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103687677 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081193715 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120809702 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133368165 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091399645 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134000583 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071672685 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083810651 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090399084 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126269064 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076362631 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089055825 seconds)
  done (took 65.366141258 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151555868 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143142514 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082941479 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.099064132 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188091443 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197727583 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.131355768 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.109941162 seconds)
  done (took 2.993753991 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069145751 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083657406 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.08174926 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.206267234 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.108639299 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068310278 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073862233 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082581038 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068316779 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068030305 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102109005 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06810544 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068255597 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.367906018 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.06704319 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073787741 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068052917 seconds)
  done (took 3.573450133 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.325369207 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.489866593 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.224860004 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.723035363 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.13768132 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485147245 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.078227261 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082985461 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.630309962 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.376518205 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132519917 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088320612 seconds)
  done (took 18.628493765 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07587841 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.078947856 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078307609 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075271058 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075242455 seconds)
  done (took 2.250136236 seconds)
done (took 116.328898951 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.083652862 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171309139 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068386428 seconds)
  done (took 2.117229564 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082835161 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081649197 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.08168463 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.078997255 seconds)
  done (took 2.178617584 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075325218 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076988955 seconds)
  done (took 1.99700522 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.223046504 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174546836 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090567994 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08267281 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080564608 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080615297 seconds)
  done (took 2.10051272 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072361196 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072263132 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.0723812 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073085409 seconds)
  done (took 2.133322115 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068572654 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06688561 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069170353 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071845016 seconds)
  done (took 2.121979282 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08628779 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083519009 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.111895509 seconds)
  done (took 2.127028105 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083756232 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.087626143 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078544339 seconds)
  done (took 2.101802881 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.10999675 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097674823 seconds)
  done (took 2.053733817 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081279952 seconds)
  done (took 1.929010062 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090230532 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098399535 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142488741 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.107280564 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140485261 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.126090116 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077536497 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078689923 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075174411 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07370386 seconds)
  done (took 2.854063786 seconds)
done (took 26.131839185 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078937932 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.365169607 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360570875 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08948216 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674019564 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358204431 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.981703014 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094085117 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100719204 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071238957 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086306746 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649952981 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.975713545 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.322049009 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.95801203 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326120801 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652289153 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069699177 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068561802 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068879763 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.968686739 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069152 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069065993 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071131737 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653466528 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.378289138 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073657312 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.323705738 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06868105 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071085572 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356702893 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070171018 seconds)
  done (took 16.346784151 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071181864 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123396155 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073489565 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084852198 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071559858 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070596895 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071964931 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069432624 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110574181 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069491565 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085752632 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068744179 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073054166 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069881124 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088452634 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069580411 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070317157 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07230466 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068886406 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070029164 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087239008 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068970953 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069254938 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070280485 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069545575 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082044138 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069967854 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069782814 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071470145 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073985211 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074781948 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071293296 seconds)
  done (took 4.296013216 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.121776908 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126166172 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074157443 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110111204 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119468725 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071078025 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150625266 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091906038 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114068448 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069777992 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086598883 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068818572 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104759843 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.06980375 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088980843 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06985687 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070648109 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069880833 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068715947 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069512431 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.0873979 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068673392 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069540022 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069410991 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069619516 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083662642 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070696863 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069147245 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070312078 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072737316 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073070332 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070483605 seconds)
  done (took 4.55718026 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070317652 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072551748 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080609542 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081929512 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069959738 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.072031148 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.073620111 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.070570477 seconds)
  done (took 2.460388253 seconds)
done (took 29.528889126 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079999111 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.07063435 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.074285601 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090662761 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07780758 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.073059996 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066033 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.077631731 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075074497 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.074665893 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077173635 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.070953193 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.073725326 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.068162008 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07564358 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.069703145 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076237537 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.073092283 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07377629 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073740805 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069697453 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072884532 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075218917 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071258416 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071265478 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071576421 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075499967 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072996705 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067445846 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069756403 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069126238 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081304395 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073707231 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073483058 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066598192 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066653932 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071278341 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.06922718 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.076350571 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.078585719 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.071817563 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.078959774 seconds)
  done (took 4.916202428 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089866406 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095418524 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087504826 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083105 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.10819839 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082760718 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091509768 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.07977618 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078785536 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090672538 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076213751 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.082978132 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.084270606 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.079263009 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.081804871 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.078237284 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081380026 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07479933 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080146834 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079603149 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092958756 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073362607 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081615152 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081994435 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.077883821 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.083103316 seconds)
  done (took 4.055373809 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073991359 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088990679 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093646546 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142049842 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110535302 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083270204 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083619223 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.097943824 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101800365 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069508047 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073128648 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095308581 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097346072 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07626938 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107586754 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087749364 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081807499 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070380795 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075261874 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103120819 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091128083 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087533316 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10112162 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088243763 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068038439 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078141132 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075477922 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084543256 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076368063 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081484323 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074408037 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.074932704 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.07230645 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.084473608 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.078073199 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.069534624 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.093844732 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083925344 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.086886138 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109576143 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.081384859 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072932747 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.101279164 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135439479 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.070217166 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072007383 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072403721 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080871651 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070145115 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098350023 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087021069 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070113028 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087640992 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070155035 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071113811 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085087389 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070042522 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070357046 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080694801 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07492911 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089661843 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07393624 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091903172 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070925874 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.082473502 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07312083 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073319629 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070458785 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.107719288 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079145535 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.125759882 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.072681298 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06908797 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.083421428 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083264941 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07834331 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070968266 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089580889 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080793829 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07261243 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081434696 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071536181 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071785191 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103901322 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068037087 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067113783 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066410641 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071016988 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071982992 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069207356 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08203971 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067996013 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071914743 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083821768 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068847959 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070618814 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071908198 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069886951 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06768169 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08049094 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073197749 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071115476 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081055524 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.07130073 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.074008865 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085914846 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080791925 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.070518555 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072512777 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072200366 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070612266 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072817467 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071974135 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070727304 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075662311 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076033062 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074401347 seconds)
  done (took 11.356073212 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.163557998 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.153150643 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070082144 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149313702 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077041369 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073365038 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150188769 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.087898846 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069442028 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070520004 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068924983 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097060371 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091861243 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.103377856 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.0732711 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.069880713 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.0944097 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101866893 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151582782 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.14662789 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092601799 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076918838 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071484318 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070542824 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070483045 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078911381 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085533494 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076592443 seconds)
  done (took 4.607105058 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076454478 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08486344 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073314461 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092565768 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088138909 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06965664 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071523604 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070754035 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086921905 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076952662 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069024148 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073651727 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073361798 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070144065 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070355461 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075829566 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076123899 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068737548 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073225492 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073763029 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.07987106 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094194692 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074024726 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069290085 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072307633 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069220832 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075103804 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078787305 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068618677 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09936754 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066472585 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073591162 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083225879 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070038634 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068743529 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069534125 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069670918 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069132929 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069410723 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067252075 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.0671945 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074337982 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067754665 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074858075 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083073421 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076456332 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07041001 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074107577 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071793701 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066296784 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072207618 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072375191 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07172758 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077400654 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072907404 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072179027 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070535496 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099065927 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074920384 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068278462 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068693066 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067594167 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072682796 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.0768532 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085458549 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071286922 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067094051 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069709738 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074028221 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082836521 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068262057 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.0746279 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065897161 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069505759 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072675743 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074422505 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072456482 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070181297 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071787379 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072369117 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072113215 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070306446 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069891793 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072068497 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066921329 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067533722 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069623388 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070768872 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075408127 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068077716 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072748729 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071101045 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.06835488 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071877165 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074380338 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071955527 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088850263 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07763429 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070121132 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069498752 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.086412159 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074011165 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071216901 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.077269228 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07481283 seconds)
  done (took 9.666310932 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091430867 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070696864 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089042914 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095303648 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081032025 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075107472 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084413923 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072180897 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085778042 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068856235 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07793762 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067628915 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.08267545 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078154376 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070243032 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079234826 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071376278 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089740892 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084087385 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067590551 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.0782299 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081195586 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081380234 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086846934 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086348132 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086997931 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081157005 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071662482 seconds)
  done (took 4.164081073 seconds)
done (took 40.629151925 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.942860822 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.126655154 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.94933317 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.151718252 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.153595595 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.085382663 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.067597067 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.945869112 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.156239966 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.978253038 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.258220074 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.342196348 seconds)
done (took 69.095773341 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.998152095 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.093101172 seconds)
    (2/2) benchmarking "String"...
    done (took 2.168597792 seconds)
  done (took 6.136667449 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.546233996 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.944789318 seconds)
    (3/3) benchmarking "different"...
    done (took 1.995142229 seconds)
  done (took 8.359939043 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.051435756 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.608332039 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.2014716 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.944628955 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.951343947 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.356597612 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.76496274 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.410585278 seconds)
  done (took 33.113881573 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.192052389 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.164887471 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.707768699 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.729746773 seconds)
  done (took 16.722582533 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.55665449 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.210576158 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.209564318 seconds)
    (4/4) benchmarking "different"...
    done (took 2.202744618 seconds)
  done (took 11.117600627 seconds)
done (took 87.48108882 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.948748613 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.081168061 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.962576924 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.101015332 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.977707375 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.977388788 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.956392753 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.992005126 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.948330566 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.949447748 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.366727426 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.9466021 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.947539258 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.987788882 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.948310354 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.979691322 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.494552373 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.948334295 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.950416788 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.517139179 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.415374026 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.966794602 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.954112322 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.191012794 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.040222144 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.963117567 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.963838719 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.952862419 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.638239647 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.955942626 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.950519782 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.952871519 seconds)
  done (took 209.803063699 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.948769136 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.772584404 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.853684338 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.977348129 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.297127222 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.143319219 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.103749347 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.36015216 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.953730477 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.975944445 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.103114722 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.952061787 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.128670056 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.903322557 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.944107149 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.036354007 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.093992127 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.157526851 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.950981773 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.137882651 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.918541138 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.950269607 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.892651802 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.097454997 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.985617038 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.981302891 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.965213717 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.975654463 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.134981531 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.074699346 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.949341252 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.955520606 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.137396104 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.817216986 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.953316468 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.970026445 seconds)
  done (took 175.432278292 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.122759032 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.949104783 seconds)
    (2/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.957440823 seconds)
    (3/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.010920759 seconds)
    (4/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.084328513 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.721314453 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.682967697 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.951391795 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.948887949 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.948937967 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.955044335 seconds)
    (11/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.949052 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.951299762 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.019066621 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.507775844 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.965241689 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.949930759 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.950116554 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.444145137 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.952305688 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.949017667 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.949445088 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.013243912 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.328119673 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.085478594 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.952823706 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.960991653 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.085220443 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.960154933 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.950191232 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.085271654 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.953651475 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.027624507 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.085055408 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.962424698 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.030154945 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.957508489 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.439399007 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.938848877 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.950519882 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.951719216 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.013182823 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.950599553 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.048559069 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.039472908 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.950985971 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.961974416 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.147298541 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.605053793 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.95425029 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.950506258 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.950689677 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.951086655 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.951635661 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.094596413 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.954008219 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.976973715 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.552558073 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.957168555 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.95196648 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.951330277 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.951508108 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.952427469 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.958476862 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.989248042 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.753585152 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.726804565 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.342190456 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.755752455 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.955507204 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.569162328 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.009360685 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.953047439 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.031134134 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.951855711 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.952585146 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.952011476 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.951583424 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.039530293 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.034739805 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.952573645 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.087236349 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.956717616 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.95238915 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.02038827 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.688186233 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.182274726 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.965972783 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.014526649 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.953259254 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.953469718 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.971260818 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.113710262 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.955555959 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.953348386 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.953304735 seconds)
    (96/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.953114932 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.141795037 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.954097654 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.953148749 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.04554315 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.183540657 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.029529011 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.205307388 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.192028944 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.956969379 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.954385204 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.970383912 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.954671 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.954026441 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.965077723 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.955612894 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.954450114 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.955849484 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.956144796 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.954782464 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.957162274 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.967027451 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.954966356 seconds)
  done (took 429.904010243 seconds)
done (took 819.195346505 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.578034194 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.78701862 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.553753868 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.588599695 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.56079411 seconds)
  done (took 14.952836717 seconds)
done (took 16.841003362 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.988027055 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.972532461 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.961846006 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.024712385 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.980728667 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.967238356 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.002859248 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.003332451 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.986424161 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.967621694 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.016885845 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.97173494 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.989199851 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.989604839 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.04441782 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.997211309 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.973367228 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.96541536 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.022111541 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.972416945 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.971317806 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.969982484 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.969677377 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.015923409 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.051979455 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.980416548 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.968951907 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.016141461 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.980119355 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.015208216 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.029400646 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.993224144 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.0048555 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.045198952 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.025879689 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.050532192 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.978682785 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.026082652 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.963589484 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.057870687 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.011264666 seconds)
  done (took 83.809656774 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.967273028 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.099103971 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.179059054 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.999169334 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.966328586 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.17700802 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.024388382 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.099001021 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.101855982 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.179247071 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.1891728 seconds)
  done (took 24.873127528 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.965654775 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.107069262 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.190451884 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.002609638 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.990020055 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.184229792 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.031102001 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.097258902 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.103259358 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.184358995 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.215967598 seconds)
  done (took 24.969193766 seconds)
done (took 135.540384817 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.336475404 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.989752906 seconds)
  done (took 6.216549994 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.961470013 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.979142381 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.115053671 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.961604302 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.961839901 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.963795072 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.963541597 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.961308828 seconds)
  done (took 17.756583045 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.9614573 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.961111181 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.962486089 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.96206471 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.962402385 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.959158466 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.947789018 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.950637604 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.961807105 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.962116661 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.962819183 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.962147386 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.96383765 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.947918212 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.96219827 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.961989222 seconds)
  done (took 33.241273471 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.963389684 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.962073983 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.962956658 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.962341796 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.963154282 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.962932567 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.965174394 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.962490327 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.963294375 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.962899446 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.962856608 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.963126743 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.962763108 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.962329267 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.963075441 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.963173326 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.964135356 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.963853362 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.964555088 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.963628847 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.964020535 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.966353875 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.969429291 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.964207905 seconds)
  done (took 49.018912887 seconds)
done (took 108.134331146 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.157285191 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.529792681 seconds)
  done (took 8.580337472 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.967750836 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.964849488 seconds)
  done (took 5.889572349 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.964198632 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.964448139 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.964872013 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.96516585 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.965418893 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.96481772 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.964532024 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.951549836 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.966570097 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.965174713 seconds)
  done (took 21.528624323 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.965163676 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.965047358 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.965619385 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.965733474 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.964859821 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.964796347 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.965446866 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.96632621 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.965173327 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.965388484 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.965929892 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.965040779 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.966468776 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.966483592 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.965753201 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.964922143 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.966315151 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.966743497 seconds)
  done (took 37.273832201 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.966414747 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.965961904 seconds)
  done (took 5.825543338 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.966979857 seconds)
    (2/7) benchmarking "second"...
    done (took 1.965914783 seconds)
    (3/7) benchmarking "month"...
    done (took 1.966327659 seconds)
    (4/7) benchmarking "year"...
    done (took 1.966571805 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.966515169 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.967669067 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.966414919 seconds)
  done (took 15.660210329 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.967515074 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.116041285 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.170785074 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.577485593 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.967946062 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.969088906 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.841891 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.968769093 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.970629701 seconds)
  done (took 21.443952239 seconds)
done (took 118.098177 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.793504932 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.96973349 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.207861374 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.045410362 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.038799509 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.307183268 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.996820074 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.515919814 seconds)
done (took 43.773604357 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.029332557 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.966038527 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.995289609 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.999827292 seconds)
  done (took 22.856533233 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.961788698 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.285245288 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.993578913 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.982564385 seconds)
  done (took 23.130529885 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.349417042 seconds)
    (2/2) benchmarking "read"...
    done (took 2.327892621 seconds)
  done (took 6.581345316 seconds)
done (took 61.497704581 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.97258564 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.972627782 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.973108547 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.974407397 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.972081769 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.972893159 seconds)
    (7/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.973832697 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 1.972684882 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.973407855 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.97288721 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.973522532 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.97372969 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.973008166 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.974127943 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.972558026 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973380367 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973222189 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.973690399 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974918387 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.973535276 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.97407627 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.973839818 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.973026117 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.975625115 seconds)
  done (took 49.263603691 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.974359569 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.974875534 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.974144745 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.973792287 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.975698312 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.974417071 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.974334908 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.974615118 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.974694177 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.975475662 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.974185971 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.974618856 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.973881799 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.974343256 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975379969 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.974523036 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.974030086 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.974734743 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.974975145 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.975949056 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.974654247 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974531175 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.974673944 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.974686457 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.975971964 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.974930371 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.975347566 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.965403253 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.952230587 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.976309404 seconds)
  done (took 61.114195161 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.969116295 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.976042796 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.975944589 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.975279847 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.976023119 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.976422666 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.976553596 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.975971504 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.977616146 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.975910656 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.976038213 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.977015507 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.975788961 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.977175949 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.976132756 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.976802342 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.976998842 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.977141536 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.977373778 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.976934649 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.976991929 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.978534987 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.977600141 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.979246671 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.977614628 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.976780012 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.977330705 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.977214437 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.979064175 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.977191092 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.977095783 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.97739915 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.977290298 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.978915458 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.978324176 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.977715754 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.978008441 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.977696487 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.979155257 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.978021631 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.978152949 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.978079966 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.977954758 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.979130784 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.978764506 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.979877088 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.978892733 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.978387069 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.978682078 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.979456204 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.978826238 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.978308791 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.978852919 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.979083523 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.980830289 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.979165278 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.979228265 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.978508096 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.979989795 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.980370575 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.979169799 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.979521128 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.979244936 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.979430107 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.98061476 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.979911124 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.979031094 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.979956181 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.97957626 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.983298704 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.98085622 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.980187141 seconds)
  done (took 144.320981362 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.979812022 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.981224415 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.980207994 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.979556904 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.979404288 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.98020666 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.980561416 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980606729 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98081982 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.980755629 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980696551 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.982179199 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980722435 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.980105056 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.981358489 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.980516323 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.982495643 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981535491 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.981251954 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.981734801 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981454485 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.981803363 seconds)
  done (took 45.486656572 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981159565 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.981193069 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.981950092 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.981719083 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.981732352 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.98226399 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.981632047 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.982547459 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982565785 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.98183151 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982568291 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982202097 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.982187266 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981441618 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981406243 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.98214041 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.983134924 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.982431371 seconds)
  done (took 37.584693621 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.982740593 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.982877351 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.982060961 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981974058 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.984095402 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.982441827 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982913247 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.982099229 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.982410668 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.984380331 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.983375968 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.983149714 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.983265477 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983460201 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.985117328 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.984097286 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.983262729 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982602121 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983737368 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.985019815 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.983920602 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.983607889 seconds)
  done (took 45.543314713 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.983905048 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.984158822 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.984196175 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.984232584 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.984150184 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.98400144 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.984071982 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.984870046 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.984432934 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.983516451 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.983508416 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.984477248 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.984532736 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.984560335 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.984850297 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.973640699 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.984438539 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.984474403 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.98484555 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.985028716 seconds)
  done (took 41.58722258 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.985106542 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985640872 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.985367893 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985875372 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.985647087 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.985451103 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.986579749 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.985925684 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986704783 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.985909907 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.973541148 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.985279751 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986649829 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.986722002 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986067581 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.985951816 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986416257 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986232508 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.986377524 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.987444245 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.987435406 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.986655259 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.977059456 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.984521033 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.986769073 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986896262 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992437016 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.987225275 seconds)
  done (took 57.510104668 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985927288 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.985992501 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.988337292 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.986917033 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.981864589 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.959110866 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.987501946 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.988300829 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.98685377 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.987389083 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.987376057 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.987003291 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.991078714 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.987029921 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.987268916 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.98628285 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.986839422 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.988686862 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.987817328 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986966218 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.986998726 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987463542 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.989791303 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.988272057 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.986985287 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.987662158 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987981665 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.993432746 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987033924 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.987554366 seconds)
  done (took 61.511599357 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.005724843 seconds)
    (2/2) benchmarking "in"...
    done (took 2.010535874 seconds)
  done (took 5.930684503 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.98794295 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988228731 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.988125201 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.990836243 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.988292105 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.988341237 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.988013281 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.988380579 seconds)
  done (took 17.822879844 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.988183757 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.992269459 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.989258952 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.988620044 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.99220021 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.996703734 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.990322887 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.990379602 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.99121686 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.994114037 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.993651425 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.9938537 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.997323435 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.983914596 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.991768769 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.990486291 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.990915155 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.992168137 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.990500641 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.990752946 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.993072613 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.990788614 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.989943084 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.990474409 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.990211219 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.992864462 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.00030145 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.991762148 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.991387452 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.991140254 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.997452782 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.990985593 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.990592286 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.992601935 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.99111131 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.990727639 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.99808939 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.992073596 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.991882335 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.991716746 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.993764533 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.994138569 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.99491578 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.998725345 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.992133075 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.99392035 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.991345238 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.978895044 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.991811296 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.995768418 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.002735633 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.993188728 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.992425175 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.992481852 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.994362108 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.993339962 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.992485593 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.995016744 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.999285182 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.000427615 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.996116419 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.014731356 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.001456085 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.988982655 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.992824132 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.990297408 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.016901996 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.994235566 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.994880764 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.99334006 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.000188423 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.993205416 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.993423502 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.992149125 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.007326026 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.002759044 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.993977203 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.992873196 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.993526891 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.9939369 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.994926357 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.994068838 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.993950144 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.994708988 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.003986487 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.01814144 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.994278377 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.9942395 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.995560197 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.994545457 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.999306503 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.997135579 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.99410048 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.994165357 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.996047728 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.997261124 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.994992453 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.994778713 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.993930324 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.003336838 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.993177822 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.993295683 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.996590366 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.001349259 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.993416467 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.995564587 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.994759103 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.993760475 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.001351508 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.994022864 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.997758784 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.993065341 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.995242274 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.998331019 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.993274174 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.998329917 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.001330278 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.002157409 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.995488976 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.998197401 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.998159545 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.996982742 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.004118537 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.017361051 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.994117579 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.998684533 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.000563355 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.005959971 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.997765403 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.99510035 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.998847336 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.993212026 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.995127475 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.9972014 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.97438211 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.984129918 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.994893486 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.995684126 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.994833299 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996007505 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.000286415 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.997648752 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.998232485 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.996758905 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.999719802 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.998477012 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.998911076 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.003746995 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.997051575 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996414845 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.996423221 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.998577205 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.998098701 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.997128212 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.996435916 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.997856162 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.996049073 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.997178014 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.999035781 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.996308408 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.99745835 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.997208694 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.000864195 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.996742042 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.996745352 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.998801872 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.996744026 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.997272976 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.998709994 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.998822578 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.999833127 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.99726536 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.002129086 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.99639426 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.996983612 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.998096909 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.997259156 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.996751341 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.001304074 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008144858 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.001875262 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.007354798 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.997918741 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.005345765 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.997921432 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.000282394 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.999353063 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.997666988 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.997578456 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.998143263 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.998133515 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.001460255 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.019876281 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.008793251 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.000652714 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.000401505 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.00346549 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.001720862 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.003809261 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.999339086 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.000684056 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.000512049 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.998211989 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.999055078 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.99792147 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.003534574 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.999343528 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.999513328 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.003043673 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.999787221 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.999824697 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.999759538 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.999530599 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.001185186 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.999040471 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.000730819 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.00039204 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.002704948 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.007810607 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.002876697 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.000597658 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.000552995 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.981281356 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.986956379 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.000598746 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.002413069 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.003219974 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.000007298 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.001950868 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.007451968 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.00296999 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.001150547 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.000741032 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.001097383 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.004209446 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.001329869 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.004155009 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.009113675 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.00414546 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.000750699 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.007458467 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.00096703 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.00397069 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.001752029 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.003249161 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.002876211 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.002823085 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.002759384 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.000917221 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.007749912 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.001871315 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.002395573 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.001898566 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.004629707 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.003233862 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.005283641 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.001852143 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.005588883 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.009887816 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.008032296 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.00420157 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.00561313 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.004653303 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.003474421 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.006345662 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.00515992 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.017166389 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.01194725 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.002927321 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.003252447 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.0045458 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.005446697 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.003176109 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.00288373 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014228292 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.992658945 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.004363814 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.007781051 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.002864705 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.003495446 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.011912587 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.990916169 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.006983244 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.005358484 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.005285311 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.00605112 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.003723639 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.006627197 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.004297276 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.005722932 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.005142773 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.003883449 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.004847366 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.003925038 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.01267464 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.006501935 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.005510376 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.011726983 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.006583817 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.005645777 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.009058253 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.005365918 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.006206786 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.006878226 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.005025041 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.009070342 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.004997553 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.00891489 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.015364707 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.008427019 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.015740539 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.007247463 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.015358304 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.005801455 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.004723506 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.007306214 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.009125955 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.013647037 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.005369244 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.004595687 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.013086749 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.006207515 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.007724595 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.997587795 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.006204163 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.00604719 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.006350151 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.007841957 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.011269986 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.010845257 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.005833784 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.005653484 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.006168102 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.006974536 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.010039701 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.009023417 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.007612519 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.007806178 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.007034074 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.008006422 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.007279983 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.993378416 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.006722552 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.005994862 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.007849865 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.014533531 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.007997175 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.008753015 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01125321 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.008528112 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.016618688 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.008127518 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.008914524 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.009298476 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.009255772 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.011429001 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.007972526 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.008880875 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.009973745 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.008594695 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.010649323 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.020783855 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.015890925 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.012330358 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.010868274 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.008525337 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.009820981 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.019866857 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033168213 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.010887677 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.010746032 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.012711986 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.016080748 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.997602222 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.018002657 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.013657043 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.018640002 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.012204417 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.009788914 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.014751323 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.019852981 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.010765835 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.010015227 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.00967909 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.017497569 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.012850075 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.010427617 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.011383579 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.013855558 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.015581166 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.02252454 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.010024501 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.012215688 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.011087651 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.012115861 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.01136055 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.011336923 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.012827986 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.013499272 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.013249229 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.011974153 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.013985714 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.017230092 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.011983404 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.018754429 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.022062141 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.011973337 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.012103098 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.014250775 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.013529819 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.014828665 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012092516 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.011858483 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.015393566 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.014346999 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.013261887 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.016355105 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.02180237 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.015069314 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.013890613 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.012425242 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.017358565 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.013127838 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.013520929 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.016030844 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.021198834 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.002801476 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.024339058 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.022685386 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.014754816 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.00069065 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.005014829 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.003081492 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.01396319 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.014760107 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.013674441 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.015995916 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.015755312 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.001486562 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.013087111 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.015793084 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.019875352 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.999895137 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.014722223 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.00139124 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.014323877 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.016829098 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.017136417 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.020204747 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.01502988 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.015861706 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.014534713 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.016532198 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.016339321 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.006047074 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.014593258 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.002816843 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.01699861 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.004513186 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.020859775 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.014950423 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.015376204 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.01746665 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.015648559 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.015243403 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.016497633 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.016125115 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.015415563 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.020713783 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.02618168 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.016900005 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.018675544 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.017327072 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.021633203 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.018045645 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.016853061 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.016236244 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.015590496 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.024560306 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.016866518 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.016412557 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.017642757 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.017330306 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.022011979 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.018637383 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.021162169 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.017722052 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.017733087 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.017098103 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.021218792 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.026409353 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.021920192 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.02077263 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.024724827 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.022620869 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.019396547 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.017580944 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.01774264 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.01702441 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.018828727 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.021562511 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.019959206 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.020695688 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.018392306 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.020107612 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.018425152 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.02018128 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.018070895 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.018540613 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.022497967 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.027678881 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.027521675 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.017937518 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.020263519 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.01965011 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.022427146 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.030907916 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.019339004 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.018833121 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.018814261 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.02053896 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.020496504 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.026903852 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.028513521 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.023135805 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.02007619 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.024096049 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.037567906 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.021572826 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.029819887 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.050579443 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.021861156 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.020347143 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.020285284 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.021327684 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.020237333 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.022672712 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.020363204 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.026653697 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.021520416 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.020179434 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.028653106 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.020109888 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.019619934 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.021457217 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.021857332 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.02694178 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.02163085 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.027298068 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.019772862 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.021380556 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.0214153 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.023434119 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.020659152 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.021330128 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.0210979 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.023919336 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.020777855 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.020867565 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.029976791 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.020723171 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.022692482 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.035469123 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.507271184 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.992125773 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.021524766 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.98704415 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.026900857 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.025474657 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.021398297 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.025405112 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.030300322 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.026644156 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.029865914 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.024113598 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.023846417 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.023508323 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.022662826 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022081982 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.036591104 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.033147951 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.02346512 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.025862585 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.029902711 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.023032707 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.02976806 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.02840494 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.026305689 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.025692745 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.024421184 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.023041778 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.022580469 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.023634991 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.027868248 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.031332348 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.024483955 seconds)
  done (took 1198.871752392 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.022904375 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.022561251 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.023101182 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.022606631 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.022585336 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023225016 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.023448983 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.023809479 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.023485993 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.023526654 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.024333195 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.023424687 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.022806075 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.024136308 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.023267721 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.023630825 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.003482543 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.009625068 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.024190108 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.024416041 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.023189675 seconds)
  done (took 44.406086564 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.023656224 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.023605081 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.024322717 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.024288939 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.025393284 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.024148916 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.0249763 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.024951367 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.025122299 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.025556448 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.02523082 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.025143162 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.025107042 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.025115122 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.024650226 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.025377746 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.025167211 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.025522944 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.025440774 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.025182345 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.025514706 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.025770551 seconds)
  done (took 46.499636932 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.026163834 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.025387996 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.027045319 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.025618695 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.025285715 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.996997875 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.025624422 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.027256693 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.025650833 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.027587468 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.033684256 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.033856299 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.026413966 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.029357334 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.0267351 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.026616927 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.157700528 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.027217925 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.027270058 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.026534294 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.027089616 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.03390064 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.026767658 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.026936866 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.027469103 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.02736475 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.026674185 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.027767472 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.027688536 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.030206432 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.032167983 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.028182395 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.02909339 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.030831059 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.028612778 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.028864703 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.032806736 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.028558361 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.027191143 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.027940411 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.038154065 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.051867801 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.028021709 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.028537066 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.035483776 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.028501632 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.028408652 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.032642265 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.036339881 seconds)
  done (took 101.483682391 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.028758572 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.028189862 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.028867181 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.028987775 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.0290198 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.029348842 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.027802108 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.027649873 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.028632519 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.029088064 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.030267596 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.029112677 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.029747858 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.029847585 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.028981341 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.029605274 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.029374506 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.029452543 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.03066566 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.029533409 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.029830513 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.029464474 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.029820933 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.029372608 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.02959724 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.029719717 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.029678343 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.029989727 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.029628844 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.030364051 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.029772791 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.029540251 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.030001604 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.031619775 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.029813667 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.030589487 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.03006932 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.02909241 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.03102994 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.030572491 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.030517336 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.030727624 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.029749051 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.031182251 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.031477458 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.030638935 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.030749561 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.031202745 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.031251199 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.031461026 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.030715876 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.031243524 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.032057075 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.031020049 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.031329037 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.031303067 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.031185682 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.031616026 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.03160766 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.032117589 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.032331695 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.032172529 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.03309512 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.031994013 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.031467912 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.033055667 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.032615865 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.032161023 seconds)
  done (took 140.0198741 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.033193917 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.0337398 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.033119205 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.032514898 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.033602441 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.033739849 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.033136467 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.033802917 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.033601847 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.034153765 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.033824837 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.033424682 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.03339504 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.020308898 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.032904733 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.033547416 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.033852291 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.033479014 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.034441251 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.034112886 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.034082674 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.033675101 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.034038631 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.034576029 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.034770278 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.034390537 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.034503428 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.035135131 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.035346269 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.034894816 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.03452117 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.034647628 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.03526785 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.035334106 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.035817855 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.034258452 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.034523257 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.03493973 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.035504687 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.035172392 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.03439271 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.035872882 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.035938807 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.034705714 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.035260693 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.035771492 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.035005891 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.035630715 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.035973586 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.035528447 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.035795389 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.036062799 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.03740251 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.035710792 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.036158391 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.034996075 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.035953986 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.03613111 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.036150591 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.03719197 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.03716604 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.036372909 seconds)
  done (took 128.102057083 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.013250442 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.031032486 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.036166971 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.036235859 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.035768647 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.036661838 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.036292607 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.036595739 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.036432177 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.036650072 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.036901798 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.036387719 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036649563 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036877933 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.037005611 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.038110445 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.036490344 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.037470381 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.036574582 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.037395103 seconds)
  done (took 42.666220752 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.036600688 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.038027915 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.036713643 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.03748703 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.037051117 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.037937744 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.038158152 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.037187868 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.038217194 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.038270724 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.038358773 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.037827766 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.038534494 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.03816377 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.038401108 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.038591827 seconds)
  done (took 34.567845721 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.038718025 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.038879767 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.038314637 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.038449631 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.039930204 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.038778336 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.03906549 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.039120135 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.039903773 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.03903736 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.039655103 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.039703074 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.038852845 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.039403425 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.038924535 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.038816185 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.039484075 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.039757942 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.03930611 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.039845551 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.041232621 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.038853376 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.040002781 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.039971238 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.040237538 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.040682328 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.040588209 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.039890122 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.040673587 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.039862497 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.040234152 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.040692672 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.039993421 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.04120195 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.040763159 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.040150525 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.041245164 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.041293067 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.040579371 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.040768941 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.040509397 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.040863231 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.041801274 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.040851865 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.041316312 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.041845035 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.040714223 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.041308529 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.041589634 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.041116432 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.041867464 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.042587568 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.041489593 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.041999359 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.041423902 seconds)
  done (took 114.179447948 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.041955989 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.041511772 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.041727525 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.041594855 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.027518999 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.027011927 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.042226207 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.041114919 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.04159807 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.04261442 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.042641944 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.041668254 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.042827356 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.042262662 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.042901515 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.04257254 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.042518699 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.042781444 seconds)
  done (took 38.695607777 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.042381068 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.042928357 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.042912146 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.043652166 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.043531977 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.041933082 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.043142043 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.043238109 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.04249799 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.043384674 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.043837517 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.043341843 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.043803153 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.043999159 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.0436508 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044227993 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.044239306 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.044316762 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.043742082 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.044103235 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.043729852 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.044344823 seconds)
  done (took 46.924347609 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.044023797 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.043780739 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.060679665 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.066589867 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.064939447 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.080542619 seconds)
  done (took 14.329825154 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045085733 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044523786 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.046274521 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.043892642 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.044942522 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.044793575 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044573445 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044245063 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044095922 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.044876865 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044108505 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03212061 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044685474 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.045659822 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045312267 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045911098 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04539258 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045101254 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.045956589 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.044842148 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04544701 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045131034 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.013308013 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.043831737 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04520058 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.044998328 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046092239 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046185873 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04570836 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04623575 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045699165 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046300598 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046405708 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046259749 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045595143 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046141517 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045796956 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046686561 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046847413 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046539321 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.046501866 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046818928 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039986332 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040511361 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.03702331 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04246371 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047234152 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047179602 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.046577424 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047586003 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046405329 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046917231 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047256501 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047343986 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047240266 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046801231 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047550717 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047810352 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047837212 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048464238 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048556415 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047715804 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04804409 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047709417 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047458899 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047970651 seconds)
  done (took 136.944534589 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048090133 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.047526687 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048452625 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048483477 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048538964 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048704335 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.047892979 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048362681 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048831598 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04880795 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049021133 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049046278 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04896602 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04980537 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048254896 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049102726 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049692241 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048582685 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049314635 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050842567 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049290202 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050519526 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050239391 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050557047 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050406271 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.04922173 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049102484 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049827563 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049277489 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050014131 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049545014 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049535073 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050296934 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.050335716 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050184863 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050800907 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050225776 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050442906 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051250337 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05027454 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05073422 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050386725 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050261169 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050684641 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051867246 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051488815 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050584068 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051153587 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051148813 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05060427 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051479408 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051228415 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051655011 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051222288 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051196104 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051118112 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051578498 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050895048 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05158226 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051413046 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050929347 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051892758 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052135747 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052243528 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051601077 seconds)
  done (took 137.284671449 seconds)
done (took 2794.56358853 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.097343812 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.176107124 seconds)
  done (took 16.248787302 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.216487056 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.102080924 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.240555639 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.169531641 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.057743285 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.07021267 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.055427407 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.054475176 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.146682005 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.055054147 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.079634473 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.055247948 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.054906662 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.055480325 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.055488097 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.055681306 seconds)
  done (took 55.51852627 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.057261259 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.059012704 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.056396857 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.055992565 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.066317636 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.130411397 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.07702992 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.059769513 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.068463773 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.089936512 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.073410068 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.062462863 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.063892005 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.061082914 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.145792298 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.102975645 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.115345413 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.132808451 seconds)
  done (took 39.455657571 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.136777137 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.067968089 seconds)
  done (took 11.190213233 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.070183219 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.06232072 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.067542079 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.060630289 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.077839628 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.091876538 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.079897782 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.082453155 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.082697259 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.079147242 seconds)
  done (took 72.769256955 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.059158432 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.059561223 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.361099232 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.067086 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.064515813 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.081065012 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.057938029 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.087320923 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.060056088 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.055824315 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.067489224 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.365350805 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.069763145 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.057134696 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.403538836 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.071293028 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.063829889 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.089205008 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.089125942 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.062510532 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.064956333 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.060853816 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.220499342 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.749795389 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.060536401 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.062171506 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.0657872 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.057394068 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.056543523 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.058690996 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.060081923 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.058164912 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.061643762 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.058821716 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.065374721 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.062625894 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.551667802 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.077262826 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.065559856 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.132905096 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.106534764 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.066423194 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.852477117 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.061746924 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.057973616 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.065048079 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.743116805 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.121217915 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.061618353 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.220366729 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.405710037 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.075258183 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.229403682 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.213535849 seconds)
  done (took 143.206217659 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.058440547 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.292289021 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.209709435 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.059565202 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.317598961 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.270276305 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.05948344 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.103676263 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.059890196 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.260578891 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.310343196 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.162648032 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060648359 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.05878206 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.060098963 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.057468264 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.203056084 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.12603609 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.062455708 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.057300621 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.083023705 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.259760827 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.180948553 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.061109166 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.085550888 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.265694266 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.180107839 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.160637598 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.876473023 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.058810112 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.120773089 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.062035367 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.05819909 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.059048673 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.21136389 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.151993291 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.147328465 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.0609502 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.06020104 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.058925352 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.731616566 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.260684618 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.154517416 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.183400739 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.306632169 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.279349734 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.673221607 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.059187496 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.686817833 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.227293926 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.265463681 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.267790908 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.179968936 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.063436347 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.614108258 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.059134511 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.059258733 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.281637172 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.279866557 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.162642882 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.063282456 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.061190677 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.06044317 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.297176352 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.063908037 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.152339892 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.063439588 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.06037152 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.153681562 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.162379462 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.273636438 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.283355863 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.079197913 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.384368403 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.549333231 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.263186741 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.126833015 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.280958021 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.065444925 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.061933916 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.140780422 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.899962957 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.317463865 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.305789552 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.259748167 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.09163769 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.712746131 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.061451641 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.248639806 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.25256241 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.294730111 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.30324563 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.2988685 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.438670815 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.062824572 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.062191072 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.397431526 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.178832674 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.01258589 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.418244705 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.291208922 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.553514911 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.088220325 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.408170769 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.191901235 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.068468381 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.708723578 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.062244869 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.268577853 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.101585741 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.064769266 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.063996614 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.252467729 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.970708892 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.062416617 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.085565056 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.123411411 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.067581482 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.267753719 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.068116801 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308002586 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.068036774 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295661761 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.687378674 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.094438043 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.290538923 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.305386535 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.701241905 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.304032867 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.306884176 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.179211304 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.330816803 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.066885629 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.06602382 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.325417749 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.066789439 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.065983449 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.232760658 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.068701707 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.207417949 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.069746664 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.330452915 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.085969657 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.295148001 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.069001267 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.302696205 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.06257523 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.114732263 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.068533938 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.195616933 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.066659722 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.992804133 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.222578533 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.066851181 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.066222025 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.807137885 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.066140875 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.214384603 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.289880518 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.086944929 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.135396659 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.631169186 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.063811748 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.154708351 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.088013388 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.339661758 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.0662236 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.317454401 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.05079256 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.544666803 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.066521474 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.30083806 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.30457503 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.06836832 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.067233893 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.909661999 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.067043145 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.066868267 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.223744382 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.516236235 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.975936208 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.26523878 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.069442852 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.19517253 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.071785978 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.145915123 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.41153388 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.067897604 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.068272675 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.068334532 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.067347732 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.069399982 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.328471522 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.094947943 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.500582189 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.205151232 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.325737741 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.375165166 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.264392015 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.110190844 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.070959793 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.290950036 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.07050351 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.131643338 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.070186008 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.088823498 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.296176552 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.074134948 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.273279199 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.27031603 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.119232273 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.115155963 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.072574428 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.070275401 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.040150936 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.214497137 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.158659588 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.071847555 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.069559443 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.182952506 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.190278385 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.252576627 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.907196182 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.244573908 seconds)
  done (took 945.330244967 seconds)
done (took 1285.698541016 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.069313935 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.072072757 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.073463481 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.072807561 seconds)
  done (took 30.282149313 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.071676642 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.071859269 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.071805747 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.072393631 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.071826139 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.072281331 seconds)
  done (took 14.425680605 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.071675322 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.071894413 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.072716818 seconds)
  done (took 23.21095848 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.495552505 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.475933943 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.145002794 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.213786533 seconds)
  done (took 11.325138209 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.075691885 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.072413452 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.072158433 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.072913605 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.073578762 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.072938515 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.073817121 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.074259401 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.073674928 seconds)
  done (took 20.664208953 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.236352058 seconds)
done (took 106.14132112 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.771715795 seconds)
    (2/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.174943474 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.141758774 seconds)
    (4/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.082194734 seconds)
    (5/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.402747403 seconds)
    (6/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.076311658 seconds)
    (7/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.393796806 seconds)
    (8/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.174594476 seconds)
    (9/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.232587014 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.256906998 seconds)
    (11/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.917678671 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.456058391 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.076102557 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.180012692 seconds)
    (15/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.264119695 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.088294698 seconds)
    (17/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.388282545 seconds)
    (18/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.302007992 seconds)
    (19/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.528908917 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.089928109 seconds)
    (21/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.075136067 seconds)
    (22/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.085492887 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.088612737 seconds)
    (24/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.277148346 seconds)
    (25/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.076886921 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.816825253 seconds)
    (27/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.478415759 seconds)
    (28/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.456371998 seconds)
    (29/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.188256731 seconds)
    (30/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.087848566 seconds)
    (31/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.840647811 seconds)
    (32/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.382117129 seconds)
    (33/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.222751714 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.175721648 seconds)
    (35/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.170101705 seconds)
    (36/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.29049131 seconds)
    (37/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.736662586 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.945886202 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.167066031 seconds)
    (40/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.555412896 seconds)
    (41/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.472094527 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.409224301 seconds)
    (43/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.178120681 seconds)
    (44/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.077133878 seconds)
    (45/341) benchmarking ("perf_sum", Float64, false)...
    done (took 4.264508839 seconds)
    (46/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.383320296 seconds)
    (47/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.078060958 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.519163054 seconds)
    (49/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.291382715 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.848498771 seconds)
    (51/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.09025355 seconds)
    (52/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.251621399 seconds)
    (53/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.161077526 seconds)
    (54/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.27317723 seconds)
    (55/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.38220691 seconds)
    (56/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.400927747 seconds)
    (57/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.368731622 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.331471231 seconds)
    (59/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.163241202 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.204142356 seconds)
    (61/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.154223533 seconds)
    (62/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.47327963 seconds)
    (63/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.303933589 seconds)
    (64/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.15596775 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.465899553 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.425908755 seconds)
    (67/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.779788222 seconds)
    (68/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.467170488 seconds)
    (69/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.076328603 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.102162773 seconds)
    (71/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.07472603 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 3.734832744 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.481048854 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.089535792 seconds)
    (75/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.441070105 seconds)
    (76/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.013171405 seconds)
    (77/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.375228588 seconds)
    (78/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.389483082 seconds)
    (79/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.080234757 seconds)
    (80/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.924964384 seconds)
    (81/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.500244895 seconds)
    (82/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.155796399 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.212727777 seconds)
    (84/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.329569153 seconds)
    (85/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.078998251 seconds)
    (86/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.251683224 seconds)
    (87/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.172748422 seconds)
    (88/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.143404693 seconds)
    (89/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.163988777 seconds)
    (90/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.152077275 seconds)
    (91/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.330807691 seconds)
    (92/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.612320315 seconds)
    (93/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.353493009 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.828397181 seconds)
    (95/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.098107149 seconds)
    (96/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.090704618 seconds)
    (97/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.176542337 seconds)
    (98/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.080749185 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.998557664 seconds)
    (100/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.163104099 seconds)
    (101/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.136684153 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.47353995 seconds)
    (103/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.230231786 seconds)
    (104/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.994648633 seconds)
    (105/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.270217122 seconds)
    (106/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.27478955 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.053793934 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.420604148 seconds)
    (109/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.0593333 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.322933741 seconds)
    (111/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.286455614 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.090151356 seconds)
    (113/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.089565188 seconds)
    (114/341) benchmarking ("sort", Float32, false)...
    done (took 5.708943068 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.996167628 seconds)
    (116/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.251167115 seconds)
    (117/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.549854919 seconds)
    (118/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.533706399 seconds)
    (119/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.844751621 seconds)
    (120/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.527799672 seconds)
    (121/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.977985113 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.696039604 seconds)
    (123/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.111565145 seconds)
    (124/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.081500573 seconds)
    (125/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.43197544 seconds)
    (126/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.163898713 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.368801949 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.381739077 seconds)
    (129/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.212101218 seconds)
    (130/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.338389852 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.084821606 seconds)
    (132/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.297368447 seconds)
    (133/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.097717073 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.242260798 seconds)
    (135/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.169799547 seconds)
    (136/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.081269527 seconds)
    (137/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.40916013 seconds)
    (138/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.197495537 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.162774559 seconds)
    (140/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.276410089 seconds)
    (141/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.805697845 seconds)
    (142/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.189009577 seconds)
    (143/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.341342926 seconds)
    (144/341) benchmarking ("sort", Int8, false)...
    done (took 5.052838615 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.109257579 seconds)
    (146/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.092449557 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.435834096 seconds)
    (148/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.167527661 seconds)
    (149/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.052134703 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.288118418 seconds)
    (151/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.082919832 seconds)
    (152/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 8.620203923 seconds)
    (153/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.256381835 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.336017466 seconds)
    (155/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.193287464 seconds)
    (156/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.248929041 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.384449137 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 2.300342247 seconds)
    (159/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.349255984 seconds)
    (160/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.513330196 seconds)
    (161/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.107015141 seconds)
    (162/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.093630143 seconds)
    (163/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.213908619 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.083639415 seconds)
    (165/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.395074526 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.95663269 seconds)
    (167/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.29891046 seconds)
    (168/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.187872112 seconds)
    (169/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.390690878 seconds)
    (170/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.308139942 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.197401788 seconds)
    (172/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.084512413 seconds)
    (173/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.150584508 seconds)
    (174/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.121375069 seconds)
    (175/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.200041356 seconds)
    (176/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.10002753 seconds)
    (177/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.099356258 seconds)
    (178/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.162441899 seconds)
    (179/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.824986822 seconds)
    (180/341) benchmarking ("sort", Int64, false)...
    done (took 5.854523646 seconds)
    (181/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.305278152 seconds)
    (182/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.09596142 seconds)
    (183/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.402180405 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.39598403 seconds)
    (185/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.306798541 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.97794555 seconds)
    (187/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.112939361 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.167964943 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.297185971 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.224430043 seconds)
    (191/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.155125919 seconds)
    (192/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.123136309 seconds)
    (193/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.245102219 seconds)
    (194/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.077928986 seconds)
    (195/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.061171591 seconds)
    (196/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.282145678 seconds)
    (197/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.10126553 seconds)
    (198/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.166534133 seconds)
    (199/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.243504965 seconds)
    (200/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.182625477 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.23596485 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.787980586 seconds)
    (203/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.181484576 seconds)
    (204/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.086645573 seconds)
    (205/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.148541461 seconds)
    (206/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.102986781 seconds)
    (207/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.097331127 seconds)
    (208/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.32361077 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.091020603 seconds)
    (210/341) benchmarking ("sort", Float64, false)...
    done (took 5.819330513 seconds)
    (211/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.306781089 seconds)
    (212/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.866568602 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.288786171 seconds)
    (214/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.007714197 seconds)
    (215/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.222492574 seconds)
    (216/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.255324605 seconds)
    (217/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.089777433 seconds)
    (218/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.167961422 seconds)
    (219/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.205776465 seconds)
    (220/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.29058407 seconds)
    (221/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.386305532 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.107638204 seconds)
    (223/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.980516712 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.404456063 seconds)
    (225/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.517938876 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.236609395 seconds)
    (227/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.192696672 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.111039787 seconds)
    (229/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.100376407 seconds)
    (230/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.487444381 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.218472231 seconds)
    (232/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.290640209 seconds)
    (233/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.377741081 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.384857745 seconds)
    (235/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.510726744 seconds)
    (236/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.563058924 seconds)
    (237/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.105010352 seconds)
    (238/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.097951381 seconds)
    (239/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.088144682 seconds)
    (240/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 8.555298194 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.770744068 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.388168323 seconds)
    (243/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.483341769 seconds)
    (244/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.107378391 seconds)
    (245/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.328446218 seconds)
    (246/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.093645521 seconds)
    (247/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 3.963059579 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.505272635 seconds)
    (249/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.10562418 seconds)
    (250/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.956815726 seconds)
    (251/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.495318256 seconds)
    (252/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.090228509 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.185832304 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.167848719 seconds)
    (255/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.797056866 seconds)
    (256/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.705398188 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.16762193 seconds)
    (258/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.409824686 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.495617202 seconds)
    (260/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.381124542 seconds)
    (261/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.517482448 seconds)
    (262/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.115672183 seconds)
    (263/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.164271359 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.230806648 seconds)
    (265/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.097496427 seconds)
    (266/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.917955862 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.106918126 seconds)
    (268/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.315828169 seconds)
    (269/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.405399668 seconds)
    (270/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.374498943 seconds)
    (271/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.410378373 seconds)
    (272/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.231734461 seconds)
    (273/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.889394864 seconds)
    (274/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.833527296 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.207089694 seconds)
    (276/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.034878272 seconds)
    (277/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.222663124 seconds)
    (278/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.213935666 seconds)
    (279/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.334918157 seconds)
    (280/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.220289046 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.115553832 seconds)
    (282/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.173009971 seconds)
    (283/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.748223294 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.412451446 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.226102529 seconds)
    (286/341) benchmarking ("sort", BigInt, false)...
    done (took 7.094089394 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.857324605 seconds)
    (288/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.499567841 seconds)
    (289/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.099046462 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.174627533 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.983819779 seconds)
    (292/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.104589857 seconds)
    (293/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.859560993 seconds)
    (294/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.205260984 seconds)
    (295/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.038718956 seconds)
    (296/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.366754967 seconds)
    (297/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.433386637 seconds)
    (298/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.08273047 seconds)
    (299/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.187393826 seconds)
    (300/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.102667876 seconds)
    (301/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.227985925 seconds)
    (302/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.528239936 seconds)
    (303/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.903393559 seconds)
    (304/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.262869299 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.244243759 seconds)
    (306/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.370241486 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.103765348 seconds)
    (308/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.297399479 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.346925684 seconds)
    (310/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.103052923 seconds)
    (311/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.517805614 seconds)
    (312/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.097997789 seconds)
    (313/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.096362788 seconds)
    (314/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.238717107 seconds)
    (315/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.096166099 seconds)
    (316/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.18305619 seconds)
    (317/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.157533033 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.097170038 seconds)
    (319/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.00832612 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.345616856 seconds)
    (321/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.174952462 seconds)
    (322/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.223572507 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.077839552 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.987936589 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.472397148 seconds)
    (326/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.698312872 seconds)
    (327/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.226758941 seconds)
    (328/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.188017338 seconds)
    (329/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.393502699 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.329586435 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.224740961 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.978039467 seconds)
    (333/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.23791676 seconds)
    (334/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.36953882 seconds)
    (335/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.214382272 seconds)
    (336/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.406451375 seconds)
    (337/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.110888917 seconds)
    (338/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.405074879 seconds)
    (339/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.549367639 seconds)
    (340/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.225191626 seconds)
    (341/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.535939924 seconds)
  done (took 1169.558560004 seconds)
done (took 1171.652793225 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.122149009 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.103647448 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.622082286 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.116747782 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.101891991 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.104517394 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.636832674 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.135462669 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.119983588 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.636024157 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.114821832 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.102451798 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.116735137 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.138693749 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.114966121 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.11589704 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.107740502 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.127124014 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.139447561 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.108005258 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.153339898 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.108603016 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.101910789 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.152999461 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.104554202 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.120100198 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.123316515 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.153945462 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.15407894 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.107560687 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.108557603 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.473535426 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.164748241 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.107361408 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.116158037 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.117417427 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.110554628 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.118482083 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.123140683 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.118835393 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.105545613 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.113164279 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.107702896 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.108571874 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.103049261 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.103008357 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.106027646 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.2312354 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.11833018 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.455021347 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.170246047 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.123577433 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.156018487 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.108558653 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.106353215 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.109066199 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.155559412 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.111392016 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.109369037 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.456060813 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.204930572 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.121796362 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.456762932 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.174610853 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.115615801 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.115867717 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.104791915 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.124272579 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.474871923 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.68545435 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.138717165 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.127104507 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.112659527 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.108064292 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.118942527 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.638857236 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.122054065 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.707094541 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.13672225 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.123661046 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.113982135 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.108114369 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.108262422 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.125519277 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.126907507 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.105955003 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.11298819 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.11475987 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.121152925 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.478647532 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.155863095 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.628711484 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.117453287 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.12736694 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.126252211 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.708760858 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.139126279 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.12609108 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.111498477 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.475923131 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.155086045 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.127958943 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.109437139 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.120236088 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.224000776 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.12723183 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.127851976 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.108011688 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.132018912 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.114400708 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.110613846 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.121603086 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.130168573 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.144989938 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.126300981 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.107917663 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.117704641 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.11627345 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.127606428 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.117363208 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.114399299 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.121939682 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.11024315 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.160663446 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.128053947 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.124475014 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.22575249 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.115719282 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.23663086 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.127548344 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.115973692 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.108186575 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.460900008 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.164070286 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.133070748 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.116108543 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.132335277 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.134099316 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.12868079 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.111570675 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.125490264 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.11419169 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.161737518 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.113464849 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.136152974 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.161400919 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.124953873 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.118057151 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.12918497 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.146393065 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.133195527 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.114869614 seconds)
done (took 332.275178274 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.158913005 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.106564846 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.183639412 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.108610667 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.177145903 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.169619442 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.108213176 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.108084183 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.10778574 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.508735077 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.109636515 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.112365911 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.107746064 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.109019643 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.158440208 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.110196041 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.108122456 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.348791904 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.110054644 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.157089608 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.10823927 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.109312068 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.108680586 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.510677905 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.109993345 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.088091137 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.170458753 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.109395318 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.356603807 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.109735773 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.112325944 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.373790293 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.172019941 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.123571367 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.117412936 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.117798205 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.184775761 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.120115493 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.168728173 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.160589849 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.186919326 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.144014674 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.108596596 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.112174838 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.114683439 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.111399402 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.110573845 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.143194967 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.113329954 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.11591507 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.349419875 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.119377502 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.115976552 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.112106226 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.112905595 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.126854467 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.112505779 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.112441959 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.176169625 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.113274421 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.164846631 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.511795948 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.528682352 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.114885319 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.112816778 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.116953972 seconds)
  done (took 199.894182005 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.179914344 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.198424135 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.181444646 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.119568926 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.165183747 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.179229901 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.120138491 seconds)
  done (took 17.17816261 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.120091969 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.114398912 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.137517771 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.137264619 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.113774945 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.251958406 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.125982864 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.11913435 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.139524945 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.114037245 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.449118714 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.138071648 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.122224147 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.114581782 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.126321283 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.14254379 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.116828725 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.115261389 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.212526858 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.192955331 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.120368563 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.12135227 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.143445437 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.126058296 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.115727111 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.115318284 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.11563993 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.122716045 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.114874229 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.11504731 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.118027247 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.128788046 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.116044995 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.115712621 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.116035907 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.114941061 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.114900632 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.116802454 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.113990222 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.113943358 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.115315397 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.114511385 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.11465437 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.114174349 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.118052793 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.138692399 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.115412321 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.115050208 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.115184284 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.119667857 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.143468678 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.115511001 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.116191262 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.12597976 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.155727387 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.123113674 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.115723628 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.115831923 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.117779359 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.116294656 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.116428201 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.196388722 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.139652437 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.118344602 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.138799492 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.153498346 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.115961938 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.117014607 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.116532792 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.14226748 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.115769696 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.140095939 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.123284826 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.216739133 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.117210188 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.259156647 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.140432196 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.125545388 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.120251823 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.11590054 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.125486407 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.118320166 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.118877246 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.124442999 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.127635136 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.117405365 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.117372059 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.119031738 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.125358049 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.123441436 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.16431824 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.119349158 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.120722184 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.218555102 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.120249929 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.217045426 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.145506462 seconds)
  done (took 229.100623585 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.128209529 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.120954879 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.133802385 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.120941088 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.120030623 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.129361177 seconds)
  done (took 14.793703419 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.122935833 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.124182057 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.123397749 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.119782365 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.12120719 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.121138851 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.121851454 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.126342502 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.125646464 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.121324889 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.121525781 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.122112797 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.126612164 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.120597596 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.121691879 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.121066619 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.12144338 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.094059583 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.120241816 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.12232595 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.325187629 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.123927689 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.1208122 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.125231857 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.126435149 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.127244831 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.130457196 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.121985677 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.121930971 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.127668707 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.131977584 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.122015316 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.125737051 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.128217269 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.12679386 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.12960649 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.126552977 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.122965309 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.121911814 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.123002741 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.123575701 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.122457829 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.123223487 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.122913491 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.124545091 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.131381053 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.127370992 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.131563651 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.122574127 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.122930538 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.123531846 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.12281618 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.123719257 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.123538933 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.127724734 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.130854025 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.128597067 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.123188316 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.123952566 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.128140465 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.128199431 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.12325569 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.125742497 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.13015752 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.131030354 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.123618262 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.12809495 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.128570981 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.123742609 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.1240756 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.125131223 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.1237637 seconds)
  done (took 156.195726678 seconds)
done (took 619.194187919 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.241757433 seconds)
  done (took 9.286554722 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.173244495 seconds)
  done (took 9.317562647 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.967405132 seconds)
  done (took 13.012488701 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.138315532 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.152771923 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.142831149 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.131925329 seconds)
  done (took 30.622904494 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.380884074 seconds)
  done (took 9.426133691 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.138423194 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.122210436 seconds)
  done (took 16.376148539 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.157451558 seconds)
  done (took 9.203289632 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.614551235 seconds)
  done (took 9.677960027 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.145356214 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.142381436 seconds)
  done (took 16.355424874 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.127175953 seconds)
  done (took 9.172123109 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.945150936 seconds)
  done (took 10.085744254 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.138462798 seconds)
  done (took 9.203614787 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.144956709 seconds)
  done (took 9.191185579 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.347845646 seconds)
  done (took 10.392993424 seconds)
done (took 173.371525541 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.13432761 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.124072865 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.124044088 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.125252736 seconds)
  done (took 30.553229389 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.1609937 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.161124359 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.168938068 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.161311058 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.151612031 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.151183661 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.161346378 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.161968856 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.152639741 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.160796398 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.161802744 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.158793342 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.161107201 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.169759054 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.170114816 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.159107334 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.160929674 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.162183317 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.152151963 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.171347703 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.158805007 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.162106521 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.12751533 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.127695774 seconds)
  done (took 53.841178042 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.317669282 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.192982123 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.281577666 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.174393973 seconds)
  done (took 11.014060809 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.127360919 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.191243417 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.179236368 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.173312841 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.22157692 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.230182287 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.180438328 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.340235685 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.243684223 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.254433858 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.135645895 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.149348685 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.152958359 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.175504205 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.230474548 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.128133059 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.128705295 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.245247214 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.19007334 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.338357243 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.127710795 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.182524788 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.215014507 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.181502181 seconds)
  done (took 54.77110012 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.129035298 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.137779747 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.13686116 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.130130793 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.130449775 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.130477695 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.137757871 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.13058629 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.152682804 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.131147812 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.129938582 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.13046718 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.13661853 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.130392525 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.129751915 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.143080723 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.144399396 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.130659251 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.134841311 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.136290292 seconds)
  done (took 44.742140092 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.129322744 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.97544474 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.476147948 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.381350129 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.129078728 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.129833181 seconds)
  done (took 33.271037903 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.143365452 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.150099299 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.13691551 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.155792038 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.179670907 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.137857063 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.192219876 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.294788004 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.141850101 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.189484145 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.152244457 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.137961152 seconds)
  done (took 28.062567973 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.137210075 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.132279886 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.131949024 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.142729911 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.138442549 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.139523454 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.138498099 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.12942588 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.144977277 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.151676849 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.139971298 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.142982817 seconds)
  done (took 47.720942545 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.345707673 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.357760321 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.35154042 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.827898373 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.45262784 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.114540155 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.417446417 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.343787243 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.898489908 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.929399596 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.424581631 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.11480833 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.063232055 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.057411695 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.048974778 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.374495122 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13360628 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.987794362 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.385850479 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.180598543 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136192792 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.132408643 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13553696 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437876792 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.459845134 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132203351 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.345057868 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148283651 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.132229215 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.392389985 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.71273427 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.192590418 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.335678706 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.389259407 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.471486639 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.179300648 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.246935942 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.396252592 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.183276065 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.16866792 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144283098 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.14332735 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.674644393 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.145657699 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405248592 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134783987 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.143636646 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.231560759 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060121265 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.509100923 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.253945482 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.139330053 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172217917 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.567840453 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257317923 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.379746261 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.140534643 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.394498034 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198051487 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.445451043 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.219663946 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.247005936 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.348335784 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062742788 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.538508291 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.267598396 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.139144717 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.12789502 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.8385261 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.378264343 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.217799831 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.520679735 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.901479435 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.136217266 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13356022 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.174532602 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.221497461 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.127511751 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.421268853 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.122936346 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.052725569 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.228375372 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.518894971 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.129320222 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.122777861 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129530566 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.966577 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.046670594 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.216221863 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.432939544 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.469927001 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.138911517 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.139378702 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.160524304 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140962665 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.085645393 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.790663794 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.210746161 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.066001895 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.704020277 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.662225437 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.112302397 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.688676396 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.187976111 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421836675 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.298666809 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.546038635 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.346909438 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.384987992 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.673834582 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140129406 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.749369338 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.216947247 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212732023 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096579084 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.696914011 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.395112705 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.496626317 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.261674717 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.139844293 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.062237996 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.147316697 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340714655 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.667917475 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.196290403 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131036859 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.136023145 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.130103495 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.130231496 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.23979509 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141751315 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.420084465 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.201996667 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.124146736 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.058383432 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.127995878 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.409337247 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.935142595 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.182252976 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.380066316 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.388220527 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.818576117 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.711954444 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.064778175 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.385728847 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.188470324 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.18902487 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.704608776 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.24701577 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.207541703 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109367297 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.235750108 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.087053766 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.107310973 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.651163244 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.520014116 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.530125081 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.150511698 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100170553 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.055141314 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.358241307 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.35086944 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.201646935 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.167889098 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145433266 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.223820547 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.368348014 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.143775776 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065398986 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.395301064 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.388542148 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.441148213 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.551965585 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.249848151 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.218047437 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.154025811 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.356153865 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.224505902 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.815826399 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.689164348 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.36864656 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.788505383 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.11194902 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.7806481 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.498905086 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.53516983 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159160403 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.59697654 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.401135447 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.914640323 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.181212399 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.669939401 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.070121978 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149704715 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.489841233 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.108246725 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.46401444 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.210586234 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18879512 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.146543241 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.14577312 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.152531159 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.115629254 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.253063849 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214181417 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217828225 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072309697 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.875246229 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.191949627 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.147096525 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.145533322 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.5808631 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.008025411 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.100628379 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.146156797 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223006268 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.891583649 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.697605426 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.150947749 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.149364885 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.750297538 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151841311 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.842889852 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.146037924 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.069284532 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175989009 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.500694996 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.861463063 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.447113774 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.227842627 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223616588 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.147204389 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.147675747 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.848573488 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.155348839 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.847991299 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.437074462 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.426130259 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.606338117 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.217573923 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.357397199 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.163055381 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.147932501 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.695482686 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.176376916 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149410354 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351328674 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.667562656 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.57554825 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.80197923 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.23304754 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.149099628 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.428411585 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.15670549 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.700609357 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.853258007 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.163336005 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.148881823 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.394477677 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.833712486 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.150345773 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.059475407 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157100836 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.36115737 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.352798963 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.428790339 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.457870258 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.601870311 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.076009651 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.154707298 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.175552602 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.392549069 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.14979659 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.18470558 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.598106954 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.280002685 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.57951606 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.442002052 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.641263154 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.793553373 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.420599376 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.219937368 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.162078478 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.811832724 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.294178635 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.085215608 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.269028182 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.0770705 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.95393529 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.444217053 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.169119481 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.425818278 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.137045943 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.499328023 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.453157402 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.508499685 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.208680673 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.180021706 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.151521499 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.198400185 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.151807233 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.417082094 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.272781329 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.157774079 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.774724298 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196588736 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.199272465 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.157534515 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.703655278 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174530589 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.155414651 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.845660308 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.177462511 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270766881 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223758663 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.95850584 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.719473648 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.183857131 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.105205154 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.805231606 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.427209411 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.213663126 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.61071436 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197697406 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.557434747 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.153040295 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.365334564 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.158005216 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.817746748 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20525869 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.440405473 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.116342942 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.365741987 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364885147 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.187901864 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.159594346 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08045745 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.260932482 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.066307785 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.138009494 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.15639065 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.83558227 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.649703946 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.450252176 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.653642911 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.980333745 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.156946553 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.58483403 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.569217232 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.87653118 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192167076 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156091064 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.545034784 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.282409751 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.547329323 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.421404786 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161000906 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.170545127 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.367689603 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.281098374 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.060766753 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.635904736 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.738816284 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.856449549 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.167067052 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.354222339 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.552911076 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.536518139 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.196106063 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.22875536 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.560275171 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.424224874 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.227220624 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.081869296 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.157020484 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.551522739 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.560425381 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.253542638 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397024643 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.478831039 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.952587174 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.719046599 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.670797353 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.614236778 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.612966301 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.568374583 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.376401953 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.530944804 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.484298958 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.039410949 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.56919526 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.370217591 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.249646896 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.441317911 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.033329203 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.867751035 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.401338257 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.163191411 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.086341473 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.364828901 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.167897899 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.723312896 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.742882165 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.406494675 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.481754676 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.629697742 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.697871392 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.427677499 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.187527544 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.124163601 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.182690861 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.179661842 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.158604692 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.652607197 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.450333635 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.172519101 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.101070648 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.832027902 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.086662645 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.372331104 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.430571562 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.195141319 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.71603371 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.482591779 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.267596368 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.464050368 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.496251059 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.199224456 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072100986 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.945205475 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.111588279 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.273239031 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.589540524 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175893848 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.163826491 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363910858 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.089366879 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.205904899 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.165883042 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.3724331 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.747399724 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.434034586 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.288955058 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.411028562 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.468007549 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.086040009 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.193468395 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.433126644 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.088131168 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.867325462 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.869168104 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.20155341 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232476441 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160905748 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.164725879 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432810259 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.568597621 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.262791476 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.820229636 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.198003004 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.185439981 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.561597864 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.258782772 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.164572822 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.166938377 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.763372197 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.398540285 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.162993548 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.124904494 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.375226989 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23504409 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.357893799 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.23762379 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.677279186 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.167615547 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.07383852 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269499076 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.11543443 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.162660759 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.977085853 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.224498784 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.163409789 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.433911149 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.820895296 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.366487725 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.556814131 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.075016236 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.441017712 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207267643 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.167064842 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.169178481 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.553622856 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.469562711 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.163684628 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.432157839 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.213241178 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.169311846 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.8258469 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.133066058 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.164716821 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.87790831 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.082306824 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.896146369 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.55813118 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.179386019 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198382365 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.167988287 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.092509013 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.150533376 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.329953533 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.15791202 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.168166256 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.540764226 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.536134663 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.258417127 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.171373061 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.16598092 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.172096947 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.378079632 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.679469286 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182137258 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.866279918 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.368930947 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.174209281 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.659786329 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.621150832 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.510582825 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.212397569 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.440280611 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.419232813 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.708829408 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.451762137 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.141206446 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.392785693 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.133105964 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.438849575 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.440727002 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.167016813 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.379501547 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.722443418 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.458266772 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.522072941 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.469300461 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.234662545 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.457575726 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.054970563 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.171953521 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.167921793 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.430666149 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22396633 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.167039955 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.176225381 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.721973826 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.9550598 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.63507028 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.327801614 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.552844617 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.039294887 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.923032064 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.170012087 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.094056636 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.168404839 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.194813252 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.171507939 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.094960296 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.882997937 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.891924484 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.380535685 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.478642878 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.094978873 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.372142088 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.714871534 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.09533356 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.138500448 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.169021596 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.417252021 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.097337032 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.172850106 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.123200417 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.507018642 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.980136471 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.441160084 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.1701423 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.113970356 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.174723739 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.172160777 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.168790279 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.255062517 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.170472083 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286927864 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.433710082 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.59536995 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.279655953 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.809771924 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.885594212 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.108476251 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215812281 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.728126913 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.739871998 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.503495152 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.303401136 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.882698861 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.115474649 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.172683024 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186424189 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.407652758 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.176417894 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.1735244 seconds)
  done (took 2256.659376026 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.176316699 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.24442764 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.252434807 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.209645599 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.3176357 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.286910176 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.245543705 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.257175195 seconds)
  done (took 60.079879476 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.190120002 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.20646875 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.18375086 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.172565673 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.171969775 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.225844498 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.371331581 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.204241466 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.172754037 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.176603997 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.172898369 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.176258861 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.172189463 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.173049386 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.187001501 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.491243335 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.200750148 seconds)
  done (took 81.821275289 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.231099854 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.014515156 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.174426854 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.871705291 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.230077561 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.516928279 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.17512143 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.175097566 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.295259544 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.476132035 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.221289246 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.192571179 seconds)
  done (took 93.694303187 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.174882183 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.174348174 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.17511732 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.174119484 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.173974861 seconds)
  done (took 12.964942951 seconds)
done (took 2811.308160039 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.497297896 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.27235559 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.249358068 seconds)
  done (took 6.615010112 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.317599596 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.365575289 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.473303407 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.484865038 seconds)
  done (took 11.741330572 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.461906397 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.549129752 seconds)
  done (took 7.104678592 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.553866578 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.18870536 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.569602222 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.175823636 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.180518872 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.179836825 seconds)
  done (took 23.634992253 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.163548992 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.153581553 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.176241634 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.175949178 seconds)
  done (took 10.763528892 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.17602657 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.917631938 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.175103224 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.192233653 seconds)
  done (took 22.554309327 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.318672863 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.389616316 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.952259983 seconds)
  done (took 13.754402532 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.845542797 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.626655699 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.789962899 seconds)
  done (took 10.356651723 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.999808811 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.994612267 seconds)
  done (took 8.089707877 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.319879113 seconds)
  done (took 4.414576603 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.008912564 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.48917192 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.645729936 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.696689224 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.760812403 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.396744844 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.509051853 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.458880892 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.578294763 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.587042203 seconds)
  done (took 28.226020148 seconds)
done (took 164.160073993 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.613436215 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.201021449 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.38054576 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.556171289 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.414392138 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.381711384 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.474861508 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.544596803 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.229043894 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.211221238 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.554577845 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.414247149 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.42722457 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.193097638 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.431885087 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.194482425 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.409763227 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.633806282 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.22976274 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.473408367 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.485349606 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.198309546 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.399042262 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.2168585 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.412191289 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.333709366 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.80328495 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.196637536 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.382935079 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.819291408 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.336485577 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.61602683 seconds)
  done (took 179.265290993 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.057276037 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.180198013 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.180689403 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.178624557 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.501191708 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.17974745 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.179158339 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.179704908 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.390568386 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.369785194 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.179897259 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.497017356 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.180207719 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.180060815 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.182461591 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.180227074 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.502696669 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.098329823 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.180078384 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.18056326 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.181283886 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.374203217 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.181333043 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.388947503 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.497175298 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.180597785 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.181457428 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.180962087 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.180903015 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.181537687 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.181223169 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.181888283 seconds)
  done (took 217.748999164 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.180910049 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.183186276 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.180859606 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.182766058 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.181613995 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.18490744 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.183270268 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.181285359 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.980455095 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.967697985 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.182570327 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.182512524 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.181380124 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.168216838 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.183959336 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.181684893 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.181057773 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.182044194 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.161055489 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.181601918 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.185134954 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.92108083 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.183702328 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.959534274 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.152809258 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.186936291 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.182907607 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.187274868 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.186445418 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.181896308 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.182424188 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.183143334 seconds)
  done (took 230.987756363 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.421457708 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.184506565 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.184774359 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.196879484 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.170723042 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.184114952 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.190802009 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.429764647 seconds)
  done (took 22.065566785 seconds)
done (took 652.181284661 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.545110272 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.909066069 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.319098057 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.209510868 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.425784963 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.253483104 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.202832377 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.263629761 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.86274253 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.282181368 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.617477835 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.212551628 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.943052953 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.23600332 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.317671444 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.260914344 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.571219025 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.822591993 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.342087692 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.856159899 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.419891727 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.12973286 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.28615404 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.906696448 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.625449453 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.148960627 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.226190544 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.575784992 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.210039399 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.447231154 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.875192564 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.466642827 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.223465192 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.207610509 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.258722308 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.24843648 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.406747197 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.219353861 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.320117215 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.922246788 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.854402182 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.733558507 seconds)
  done (took 113.269274631 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.195512125 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.191827393 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.191310573 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.192320062 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.201403474 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.191655007 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.192130879 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.192582528 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.191986386 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.192401402 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.193260663 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.201125972 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.192538144 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.201662295 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.193196725 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.193200529 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.192763129 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.201454386 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.192601649 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.192234101 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.192940099 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.193484217 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.187943594 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.193291441 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.192661759 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.193558012 seconds)
  done (took 59.153474549 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.155442647 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.377022101 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.480862625 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.223739546 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.190422451 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.192189774 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.218885351 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.196931406 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.192450363 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.190932577 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.29012571 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.164418586 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.202371507 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.479337281 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.223024184 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.190036994 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.188906877 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.189424752 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.389165713 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.205899692 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.220721604 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.197763355 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.220385013 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.206216947 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.191979442 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.190780839 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.193819943 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.656959472 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.204229815 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.292948545 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.234777957 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.22379382 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.585989879 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.490536364 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.262053491 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.200988722 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.190261199 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.33817005 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.206293865 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.191506984 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.221024324 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.200266726 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.485197722 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.72093493 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.208374265 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.191662261 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.65115828 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.34914219 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.227660244 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.206293018 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.494718946 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.225484616 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.192013234 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.193298 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.2296266 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.207703111 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.191902343 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.474819181 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.209561463 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.22168037 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.200328727 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.187568164 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.365606664 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.203458574 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.383492224 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.203439856 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.199696622 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.194144492 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.488173774 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.227542308 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.716908441 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.209366686 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.193052908 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.294686574 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.38992649 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.680962814 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.208986391 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.398657812 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.605696977 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.232621 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.205591838 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.646589652 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.236653331 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.20515203 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.193335 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.193493688 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.193458709 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.237118371 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.220918006 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.631500051 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.713823731 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.49569438 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.238059222 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.208058956 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.19573377 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.47775947 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.209031342 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.194369572 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.481531204 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.743097034 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.210296704 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.201281542 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.697087643 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.211445306 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.224721694 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.207903522 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.502394724 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.228826285 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.238342794 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.195687081 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.201712832 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.200481546 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.225974331 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.206704315 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.195362083 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.685575393 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.357026466 seconds)
  done (took 271.150937855 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.199079783 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.195103293 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.194854091 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.195422968 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.193797197 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.195971689 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.194400551 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.194000873 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.196583526 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.194498473 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.193979778 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.193768738 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.197019533 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.199601838 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.240084559 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.19787004 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.692017181 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.196531605 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.195639158 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.197629873 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.762676203 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.205547293 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.195405637 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.197434235 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.195424287 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.196466356 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.20515596 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.232122364 seconds)
  done (took 176.768959878 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.196778974 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.245848169 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.212662003 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.244958993 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.213210808 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.19756983 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.219068756 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.21350203 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.204280045 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.198603162 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.185575672 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.224437381 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.207254548 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.237645705 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.229241956 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.229588918 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.276852265 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.206872206 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.19874418 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.198314276 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.247070398 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.215801424 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.226327448 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.257314723 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.212589627 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.247039925 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.213913333 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.198998918 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.198846801 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.290238512 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.224118141 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.227997078 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.236495903 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.219328555 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.29368773 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.299506054 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.281871972 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.23028724 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.203816963 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.20021919 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.200245187 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.202161773 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.248004528 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.214813883 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.201506081 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.292814824 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.225624348 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.20001817 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.220531292 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.200420834 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.211702459 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.217145871 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.235514538 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.303004139 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.254838226 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.227030986 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.223129648 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.219716907 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.202223246 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.274831128 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.210696557 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.292144073 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.226141326 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.169583991 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.202624489 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.205222846 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.25074406 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.239507102 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.283276549 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.210372816 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.277308507 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.259102642 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.218311386 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.202388126 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.202028062 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.250940141 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.290561068 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.259408192 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.267181489 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.241479688 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.213480667 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.202044446 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.205002658 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.230391771 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.210448677 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.293419393 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.300609307 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.210694279 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.202247629 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.202553149 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.203504123 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.226624374 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.261337238 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.248532925 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.28868657 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.239967977 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.243071903 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.212937653 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.215864158 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.208375866 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.234673531 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.212017914 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.215363269 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.545221419 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.239677879 seconds)
  done (took 236.586151684 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.564312684 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.248829599 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.259391285 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.45540712 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.595107732 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.085296162 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.243968783 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.256892142 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.265229563 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.369160866 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.321342812 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.298700738 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.241608038 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.227262736 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.247389815 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.263666838 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.279158037 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.547405453 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.344783178 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.718550116 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.247666059 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.484773588 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.543617 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.600264512 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.291404588 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.635356147 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.877808947 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.347164144 seconds)
  done (took 71.988231318 seconds)
done (took 931.022786444 seconds)
SAVING RESULT...
DONE!
