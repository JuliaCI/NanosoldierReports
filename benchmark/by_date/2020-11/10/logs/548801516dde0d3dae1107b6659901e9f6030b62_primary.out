cset: moving following pidspec: 16596
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.981283333 seconds)
loading group "shootout"... done (took 1.128847057 seconds)
loading group "string"... done (took 0.668716079 seconds)
loading group "linalg"... done (took 8.675663751 seconds)
loading group "parallel"... done (took 0.17095876 seconds)
loading group "find"... done (took 2.977331005 seconds)
loading group "tuple"... done (took 2.119015075 seconds)
loading group "union"... done (took 15.139765328 seconds)
loading group "dates"... done (took 1.45045972 seconds)
loading group "micro"... done (took 0.221772777 seconds)
loading group "simd"... done (took 4.8219965 seconds)
loading group "io"... done (took 1.062847221 seconds)
loading group "random"... done (took 9.640913155 seconds)
loading group "problem"... done (took 1.514337714 seconds)
loading group "array"... done (took 25.350250524 seconds)
loading group "misc"... done (took 1.81021383 seconds)
loading group "scalar"... done (took 44.167990383 seconds)
loading group "sort"... done (took 3.346188489 seconds)
loading group "sparse"... done (took 12.897033837 seconds)
loading group "collection"... done (took 18.807335777 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.536833472 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127543453 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.132287064 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.125233641 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.193703901 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124241726 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.133154794 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088820137 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.835382416 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.14014021 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117134749 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.439849849 seconds)
done (took 5.412713947 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.171405128 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.095980205 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085100161 seconds)
  done (took 1.372278436 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07426981 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062416397 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069240271 seconds)
  done (took 1.398587083 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066511916 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138946408 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068902391 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068510483 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068505437 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067964255 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068027818 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.071344169 seconds)
  done (took 1.74636892 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.0740992 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069836727 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067702863 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069719777 seconds)
  done (took 1.47705702 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068285196 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125604126 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067213793 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066756198 seconds)
  done (took 1.520400335 seconds)
done (took 8.966413182 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143797212 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.833824064 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.767846826 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.127082226 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.25192602 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.448576976 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124443604 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183484692 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090031472 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075844584 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.12474549 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080688747 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.612562699 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.404434451 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073315683 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171758964 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.646039919 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087040827 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132565933 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.461835171 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074444592 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.08809042 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084611919 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071751709 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.34323999 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154029285 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.671967427 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.178181064 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06911739 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096916464 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070976513 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078420093 seconds)
  done (took 11.05253436 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.096353007 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.094338097 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071039929 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126810984 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097143018 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07291354 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077560232 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069970977 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091622379 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.127032212 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093400778 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101554545 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068822651 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071662637 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076903737 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.205893454 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08072232 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083501927 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069747151 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083352516 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108455896 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079287662 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.081502254 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.08049106 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132495406 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169982204 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097326924 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099112056 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066103307 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081292027 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.117612205 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125630986 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067684079 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.070614564 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122937827 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097495433 seconds)
  done (took 4.705434537 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.904642078 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.098098228 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085525402 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076376422 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109650032 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113960661 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121203955 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126681233 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.102713344 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07082868 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.117606467 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.157268438 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.653211377 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.154878814 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071902018 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120910319 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.368478255 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.077535587 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071465451 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070097567 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073224926 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072141827 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.115391168 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067616469 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.179967964 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.589802068 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070880566 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069812132 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09924905 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067633587 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142205113 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094558111 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072196914 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.554715485 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065920638 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065062291 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090186539 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093327107 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067494131 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069152703 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079386492 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06720909 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110181454 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079270389 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.48259642 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069182598 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.557218439 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.222356875 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073926439 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07262568 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101254277 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064436429 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068120793 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.034404859 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.121261835 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067258904 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273052843 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066588805 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068698905 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069228596 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.098903455 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067222323 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068572511 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073049559 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097185735 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.869685883 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086549145 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097492771 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067417504 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.477373734 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073892589 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.067344302 seconds)
    (72/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063104394 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067297431 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.080069172 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.10519293 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064198563 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065243387 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.103893711 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.086076301 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.084864158 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.067871552 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.064320771 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.063816881 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.330565081 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.150094514 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064433638 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066276915 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.472243466 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064340434 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066610207 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068510044 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.089891223 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067792828 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064615042 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064999558 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.1004263 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067187822 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.883561561 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070009374 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.495863811 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.072304064 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.107639227 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.125537754 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070860202 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.100303789 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.072287686 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.071247522 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.077408236 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.069046212 seconds)
    (110/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.068240429 seconds)
    (111/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073116974 seconds)
    (112/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.069731751 seconds)
    (113/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.067847707 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.068138477 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069354242 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072381914 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071741703 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070817311 seconds)
  done (took 23.330996494 seconds)
done (took 41.194675616 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.323687531 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.083208237 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.082999292 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.083517829 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.083522169 seconds)
  done (took 1.92416095 seconds)
done (took 3.310722711 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.138922049 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.099149831 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06767484 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.105630119 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.071959893 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.106070666 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.113531429 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.109035008 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.072063655 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.071913394 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.072057925 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.107310418 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.109334438 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.072399816 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.102571007 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.108589326 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.072021394 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.067657676 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.072024867 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071697445 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.074894257 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.067126998 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.072356216 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.072292247 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.10331301 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.072128294 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.067681929 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.103178102 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.072479284 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.102886808 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.072109626 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.072060465 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.072126264 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.104387468 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.072409488 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.103673405 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06752114 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071933973 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.072017993 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.072107546 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.072057998 seconds)
  done (took 4.78782623 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.074777511 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085380082 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08736653 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.065509778 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074676429 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086287459 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064700164 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085502059 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092139289 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08596515 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086160381 seconds)
  done (took 2.207578615 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073674588 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.086466359 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087824652 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06482558 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07661434 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.089447255 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064870114 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086481052 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089329529 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086996756 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.087062593 seconds)
  done (took 2.190910675 seconds)
done (took 10.476473283 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.101256638 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06879038 seconds)
  done (took 1.448968672 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.228155236 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.643490069 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.283515094 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.095946855 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.075930284 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.089986679 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.208743962 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.070505605 seconds)
  done (took 8.168609444 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.103220332 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.0731873 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.071266127 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.071177522 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.076830129 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.073332294 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071639614 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.071374662 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071757802 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070803611 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072796493 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.070525882 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.07093489 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.072121749 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.071261938 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.072462703 seconds)
  done (took 2.576722938 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10758787 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.072547138 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.103139587 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064595956 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.075189887 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.065825927 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.07436716 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.076334594 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.073917603 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.074880981 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.076022497 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.075269396 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074687415 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.074606713 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.076404062 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.076803025 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.076676369 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.074175867 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.076131892 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.077407654 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.075811638 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.076784546 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.076637324 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.074933049 seconds)
  done (took 3.267290647 seconds)
done (took 16.761787387 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.183299622 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.077956374 seconds)
  done (took 1.54856827 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.071894139 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072655479 seconds)
  done (took 1.450624868 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.077398199 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.063708431 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.082369808 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.073809166 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06430424 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063742131 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.081574717 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06454512 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.064275643 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.064395329 seconds)
  done (took 2.005233104 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.066507989 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071931314 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.069694741 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.068171741 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.070174159 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.065398515 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.068446791 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.065841364 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.072750371 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064959398 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068855608 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086852915 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.0691778 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08734876 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.068159888 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.069483475 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.070942009 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.068274099 seconds)
  done (took 2.58258893 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.065132377 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.064834513 seconds)
  done (took 1.439464218 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.068308845 seconds)
    (2/7) benchmarking "second"...
    done (took 0.065279284 seconds)
    (3/7) benchmarking "month"...
    done (took 0.067683941 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066761967 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.064842482 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.064263025 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064434275 seconds)
  done (took 1.767325486 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.438257901 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.128524153 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.356288811 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072742744 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.080568219 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.266012556 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.066903497 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.071732688 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.072071608 seconds)
  done (took 2.901909347 seconds)
done (took 15.019131576 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.086305925 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.1900879 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.09167403 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.41834207 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.095951363 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.070544976 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.116964922 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.181687174 seconds)
done (took 2.584867022 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.220961334 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.207611318 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.381609627 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.130040277 seconds)
  done (took 3.032755714 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.345733645 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.081638741 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.080537696 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.070416051 seconds)
  done (took 1.909422459 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.068462701 seconds)
    (2/2) benchmarking "read"...
    done (took 0.074358542 seconds)
  done (took 1.4663651 seconds)
done (took 7.962077861 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076483041 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.100696097 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064818747 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.06618782 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.066858846 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064696008 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06747575 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.066828474 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.077816152 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.067408105 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064593486 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.066986256 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.067065391 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067233516 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06724241 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066812954 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067202858 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066966236 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066992923 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067455553 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.065114262 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067873322 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066467847 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06685794 seconds)
  done (took 3.005144493 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.083908629 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.068273123 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069845277 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.070007772 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.070578681 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.070425961 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069845784 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068561493 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069785021 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.068396415 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070781214 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070108849 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.068222815 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.07074879 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068687702 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070667118 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.070214591 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068591919 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068950091 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070484323 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.070020474 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069141622 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.070549088 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070020602 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.070314087 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070404073 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.068888711 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06860108 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069968431 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070073625 seconds)
  done (took 3.446539829 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.069779505 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.062234203 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062984873 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071976186 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.06117621 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061541946 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062210249 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061418156 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.063167469 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.064571435 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063564896 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062660169 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063883671 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062567313 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062568873 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06329611 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067772133 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082717289 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062266777 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061682768 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065805209 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061388565 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062483332 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062344672 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062716314 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061203779 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061064126 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061693827 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061637487 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062276922 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061560126 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065869828 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066641517 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061157172 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071146351 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06635324 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061154508 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065578218 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062540961 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06136213 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062673928 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062907275 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.063314833 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062741895 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.07320253 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.063556212 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063853518 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.066407956 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062711199 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062906138 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.063000839 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.065697024 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069004775 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.064476895 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062572497 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.064170042 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062505374 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063448284 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062261759 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062967689 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062638462 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066519884 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064650569 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063640647 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.083259134 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.064901612 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.073239443 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062807575 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063972535 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066490792 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.063425638 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.081222522 seconds)
  done (took 5.997780182 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.075808595 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.076274762 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.082581052 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073897646 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067975447 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063967738 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068586829 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064468366 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074351103 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068862013 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064147604 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06778617 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073813518 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068730311 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065616218 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073995841 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068146065 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06754978 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.064443304 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068452428 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065558906 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06817391 seconds)
  done (took 2.890115591 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.141254289 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069153709 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.110598496 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.078471866 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071730932 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.078440693 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069244742 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06907798 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069328484 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069830147 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069559887 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069327688 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071712728 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069844499 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070225214 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069419153 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069134897 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069700477 seconds)
  done (took 2.730810472 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.08097199 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.069177117 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092889755 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068874567 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06918951 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068582688 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.073046307 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.073102749 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.068481756 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.069238283 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.073370601 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068829772 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068732384 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068960054 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068493966 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068680135 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068673016 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068959213 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.073072168 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.072496255 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.07251469 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.073007276 seconds)
  done (took 2.92793862 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080892731 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068558428 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083677941 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069132705 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063116184 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063085223 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068981155 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.068490645 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068990104 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067381355 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068218602 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063019784 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.069553425 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06854136 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.070078909 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068138395 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067989158 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068064326 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067693353 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063415643 seconds)
  done (took 2.720935224 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.09037381 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065680002 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065928299 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.085640772 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066282796 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065990315 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.086120624 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06611333 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06613692 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087991684 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066397635 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066215026 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.086448407 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.085980592 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066093408 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08584555 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.085679265 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.085869512 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065962612 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0661455 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.088972474 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.066007718 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.08590926 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.067189319 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.066157636 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066731748 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066158401 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.086058597 seconds)
  done (took 3.447882344 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.068238844 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06572281 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.066179623 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065995233 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06690934 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066380657 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066383746 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066381274 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069816043 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067049123 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066801189 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066882137 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06707347 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.067094288 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067079008 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.066506887 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06709936 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.067238645 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066774706 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067353414 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066812565 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066481061 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.066571982 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066988884 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067279475 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.066759546 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066918466 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066916604 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066296637 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066823521 seconds)
  done (took 3.358531163 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.077269044 seconds)
    (2/2) benchmarking "in"...
    done (took 0.075443887 seconds)
  done (took 1.504843926 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.065734788 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.081463608 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.063255628 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.075864024 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071224484 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065617861 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07137785 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070149356 seconds)
  done (took 1.909943278 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.070597002 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.094989818 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.065473191 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.065301659 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.068509066 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.136073516 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.078223795 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076833879 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079525855 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.067971772 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065618162 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.077770984 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06475014 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.078628808 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066393775 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073867103 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072474638 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082817187 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.0782277 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.063243818 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.077300073 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065980435 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.063664836 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065995537 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064551846 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.072022328 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080869236 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077896826 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073597768 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062916112 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.08453721 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063786752 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064752084 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073704919 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.068631443 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063733544 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.10193427 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.064776513 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06911835 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.063702494 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.076695185 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.085209423 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.079175173 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.082296672 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.066112109 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065968592 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.063068614 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065988846 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.067599971 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073428508 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06407355 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071267957 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.063177603 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.065712869 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.075238561 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.064167347 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.069420047 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.073524634 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077813904 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.075180754 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.073118323 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079830645 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.073181225 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071960901 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064786721 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083751683 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06577087 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.078080671 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079691793 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064913231 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077903171 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.063595531 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.06219244 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.063585817 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.098161602 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065724482 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.065471649 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.064579757 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.064049122 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.065475957 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073639518 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.069690917 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071937512 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067857117 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079906159 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072720102 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062929187 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069160634 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081092005 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.067654669 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.064305228 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.081793116 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.068077113 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062429615 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.082416242 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073703595 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.065523464 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.065165398 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.067868104 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07753444 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.065236885 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.062557075 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072433553 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.065424677 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.066572966 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.068268461 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071766981 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.064008611 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.074343769 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.068630953 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.065189997 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.062386723 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.068309919 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.064483827 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.062337459 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072701564 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062847973 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077785724 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.069756826 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.077638736 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077838195 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.074094564 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079150586 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062802741 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061310387 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080797849 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.075270853 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.203084459 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082361991 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.065240715 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.076769085 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064680617 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.066376848 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.074504806 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.063746885 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066602552 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.064874189 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.070108661 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.065701013 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066268123 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.070036723 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.073452066 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07669696 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06547917 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.073234679 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.064758613 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.080705748 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.074768335 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.068781777 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067491803 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.065352637 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.076833081 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.071170567 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073962999 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.063341627 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064476496 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063926982 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.074638208 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074451419 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065648475 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.072014335 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.069168677 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.065009861 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.064469836 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.065509413 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067741051 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067902985 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.06555087 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07304751 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.073407999 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.078603695 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.072106963 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.073466809 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.06294334 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.063723612 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065770812 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.063463891 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.068363104 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.073680203 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.08026758 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.076512155 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.085683534 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.064628317 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.0743641 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065799548 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.081295952 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077947952 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.065111067 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.069094184 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062868493 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065726548 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.073974274 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076504619 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.078261628 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079404587 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.068731255 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.068426463 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.063607398 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.079388432 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.064748672 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072835248 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.073753413 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.068922099 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.064219603 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06582272 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.073605613 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.069111821 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.06392971 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.080251762 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070383832 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.063573269 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.078815537 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.064805196 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.075143342 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.063353293 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.067714781 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.069293272 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.066090436 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.073598688 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.080054626 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.063142051 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.065125987 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.080287539 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.066490596 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066187741 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.072725526 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.079581066 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.069216636 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.072136957 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075060368 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.074544593 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.068854617 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07400477 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.065005594 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.073551006 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.067134529 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.075791776 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063891499 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081676301 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.0622356 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078375174 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062420573 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072523874 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063243426 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07323877 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.064143902 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.081148175 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.06457616 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063814449 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.075024546 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061945905 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.072623592 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062440629 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067626818 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.069341916 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072378017 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06462621 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071845754 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.207794499 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073316674 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.070345173 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073686311 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.075233205 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.069757867 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063842541 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.073391171 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075714854 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072855243 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065697893 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.066044985 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.065035422 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.074283347 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065570962 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.066296334 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073086562 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.069001574 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.069630707 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065953585 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06620048 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.066106503 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073315361 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074360342 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082749823 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07297431 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.07156779 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.076579121 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063476003 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079938404 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063986831 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071384022 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.063114637 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.070114891 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073280248 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.064480704 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083915631 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.065681626 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.072365662 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076684728 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0732252 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067793221 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.084198372 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.068396047 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072784212 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.07221833 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068447553 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.071044743 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.066190797 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072941104 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073994283 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.075357854 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.065103862 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071810033 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.073263979 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065752611 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.072126877 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.066337171 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.073260567 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065751394 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06329972 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.068482993 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075937142 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068634551 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.069207017 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.064622213 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.063293798 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.064807645 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.07156233 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068731433 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.073426182 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080065178 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062515876 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.065287514 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.064142708 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067438334 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082553381 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07412037 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.07221397 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068842183 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.063209408 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065675318 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.066400221 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064736049 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.068095082 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.063157778 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063902991 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075031243 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.066275823 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.068625645 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064473398 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.065669353 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073923066 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.069454479 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064671469 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070533997 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063757529 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.069075964 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.063124609 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.066052117 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.068754775 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.063102935 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06742966 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.075097143 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.081053593 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.071077781 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.073206161 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.065223688 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.072052209 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079293276 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070960865 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064906286 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.073451242 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.063113685 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.08242306 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.07222414 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070183533 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071366288 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062686262 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078465913 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065817998 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071668334 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077611709 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06208905 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068755909 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062571495 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078624888 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.067318694 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.062571292 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070758577 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069167834 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066549608 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072751822 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.206708024 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071665151 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068038779 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066776282 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065071687 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064215601 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072105375 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078546254 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063514434 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06689013 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070625076 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071779336 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.068035391 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076489254 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.073085594 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065110087 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.066495243 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.067329351 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064927521 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.076318816 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064272386 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.068818928 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068949564 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.064116883 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.071520916 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080667287 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.074065394 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073639551 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063343959 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.063026151 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081995552 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06734171 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.06835949 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072579132 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.074119561 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077241181 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073555656 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081022946 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.065177483 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069604801 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077071411 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064977952 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.064032871 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067548595 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06613725 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.073113494 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074113884 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071653798 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066523297 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070547777 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077707946 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065222663 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.069037432 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.071768146 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064315091 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074562934 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.072470632 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072551479 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.065093078 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063328581 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.067542246 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.07288846 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.07163621 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.073468075 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064796134 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070782184 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.078315652 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071719606 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067723699 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063604398 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067340039 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073216143 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068937802 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063415433 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068890284 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067794973 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.071354528 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.074080074 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068398075 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.064132054 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.081413688 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.072404778 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073780064 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.066378735 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.066519733 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064569235 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063812271 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075456879 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063497268 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.065948584 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068764989 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065841079 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.082395034 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.072743557 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.080703017 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065102172 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.068829629 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063581073 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073732631 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068637873 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.064574544 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074873273 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.063438966 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.080054649 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.076105679 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.069913188 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.064083187 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.069336697 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.094555851 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.079386147 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073901877 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.073294792 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.067349849 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074039251 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06577185 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.0751248 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.063328201 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.062761382 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.074592695 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072325642 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076193411 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06303685 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073357625 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064800262 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071365622 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070789718 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064244468 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064128289 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064411823 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071737569 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066777569 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071615443 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.212246288 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080763091 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.066367278 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.076352993 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073683845 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075789357 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078757586 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07652699 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.072570028 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064827598 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071879324 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071871159 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.065175706 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068732744 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067704985 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.086454389 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.066023709 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.066081336 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078795738 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070970152 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.064494294 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070628897 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068859368 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.075050504 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.065613206 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074677458 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06807723 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06478354 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.068975308 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068697344 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.0626914 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.063323295 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.0639255 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073911469 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068649193 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.064098792 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08380672 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06535827 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.073158465 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07539272 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070559595 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065707273 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062736915 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064989123 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077333554 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07939946 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067500092 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072663172 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06555067 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.073627297 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062655016 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.073407625 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.072205652 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072416777 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.064316743 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064279209 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078937375 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07979612 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.068979592 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.073624804 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.073568683 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.065923372 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.086326113 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.073121883 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065387539 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.075073865 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066561744 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.06332857 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062948712 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.066098998 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.076216058 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.06339632 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066659288 seconds)
  done (took 43.924667122 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.103605761 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064421019 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063478085 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063583875 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074662999 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064507798 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063400219 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.067953185 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064637487 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066584211 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.06390309 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064364055 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075182878 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077656324 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074941074 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067967283 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064089596 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064921728 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063788038 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064630393 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074018942 seconds)
  done (took 2.921516128 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06768729 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.068040125 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068336882 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068279931 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067221481 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06346949 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067998045 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064213756 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068460841 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064330156 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068926354 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064020072 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064325521 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064036824 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064221099 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06571166 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068660866 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067419476 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063703409 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06819097 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065583816 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06796806 seconds)
  done (took 2.905311561 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.066100519 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.064114738 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072680411 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.0626679 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.063262235 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066872774 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.06266031 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067765714 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067683135 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067989265 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072543775 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064010198 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062987501 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068569335 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062977469 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063734188 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.107755431 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064221014 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.064614345 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.063630112 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066362003 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072581053 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062841662 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063248724 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067039755 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066513255 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.063235088 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065892042 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063806149 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067895472 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064750093 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.063009332 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072276304 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.0723287 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.067788803 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.068072704 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.065215129 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064537682 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062970432 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063152039 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072163868 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064586817 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063259163 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065311507 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072951567 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063265526 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062802585 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.075734919 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.063191203 seconds)
  done (took 4.731350371 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.075129487 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115744744 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067576236 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095395321 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074855821 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068023 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068045361 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.098515982 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064661775 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.065205097 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.078286416 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07804568 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066660462 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068181365 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069671078 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06629896 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067262746 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065300957 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068967596 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065612398 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.069367899 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.070407357 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.076327793 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076959364 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067439356 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065958566 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066163621 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067583738 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076732283 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.070111273 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06800573 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068635841 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.077111669 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.071380361 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065930488 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065864094 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.078211123 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066949262 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066931896 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.065027849 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065810092 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067823486 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070335347 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.078363567 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066376356 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.071168947 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066340303 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064395436 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.077003873 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066846361 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.071077525 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.078709793 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067802863 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.067105928 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06800539 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.077022536 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066335127 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064988912 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.069843782 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076887162 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064433329 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06717433 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.078140832 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065617583 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069877124 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077724642 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.071070796 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.067921211 seconds)
  done (took 6.445330548 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.074702496 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.099651052 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075178291 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075130513 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073509887 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.074719599 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074435823 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074162485 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074028613 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074879083 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074941138 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.115100527 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070701433 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079496937 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074957508 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074569922 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074890315 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074160887 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.074407155 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074448134 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.074096336 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074747972 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074635661 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074783695 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076999721 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070556607 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.074181664 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07469446 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07506465 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074276181 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076815487 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.075236497 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074755196 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.075219645 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.077352156 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074781302 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064639402 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074274167 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074705276 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.074530584 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070573454 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075468367 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073883272 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.070860021 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074522758 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074098176 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074373467 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076770095 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.08170051 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075566946 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074325763 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.0751233 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074409417 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074440631 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075333182 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.08166031 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074911848 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074765649 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074698906 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075387621 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075187243 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.081475783 seconds)
  done (took 6.18904092 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078469826 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.071007424 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.083283769 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063656245 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063120038 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073138897 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063588936 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063808662 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070995662 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.071003422 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072681995 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073728579 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075537501 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.07256944 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073719924 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075781984 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073260788 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073979753 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071576664 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.074040328 seconds)
  done (took 2.920642226 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.079548599 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.083349702 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06909715 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072881974 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.069233487 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.073186179 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068638552 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069323059 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069754209 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069253166 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074334478 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074428343 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070505045 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073515712 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.07490454 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073162291 seconds)
  done (took 2.630741486 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068185096 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.072380896 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070835846 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.065290875 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066993494 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064189468 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065075383 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063282108 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066087195 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078988208 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064531606 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06768925 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.065047483 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.064011743 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06443633 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067731499 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06639579 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064681852 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064855722 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069173306 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07314625 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065223722 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067326075 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064057193 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06517748 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071722724 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064281431 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065225748 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062842352 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065762616 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065698407 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070860748 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.067052721 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065021043 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063708543 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064551704 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.06513835 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.070743227 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067357918 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.065097883 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063033585 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067065973 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.065372925 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065740987 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.0664212 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.067551648 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.066306041 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070435164 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064908801 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067234373 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06500435 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.067255417 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065275019 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071945378 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.067205644 seconds)
  done (took 5.136616033 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.082585581 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069191326 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063654395 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063894459 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.069351719 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069338951 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069504053 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069257119 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069746551 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063374869 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069496532 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068456247 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069719492 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069760054 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069450526 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06904511 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063451932 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069116023 seconds)
  done (took 2.717587288 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.076747116 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069114245 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.073874334 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.069128879 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068752349 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068365172 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063849073 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063854302 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06396944 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068652176 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068455847 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06837121 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064292338 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067970318 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068349165 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0682375 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067988549 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06374287 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068598969 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063434931 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068432489 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063628692 seconds)
  done (took 2.958895789 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.092286133 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08735568 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.132823097 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083383188 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.092214668 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.075292217 seconds)
  done (took 2.035453607 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.098259755 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.109082795 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068388333 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068706454 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078530815 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072016468 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07253139 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072374559 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077685552 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076241057 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072569994 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077793483 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078042056 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074330607 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077818722 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080596217 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072751702 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07235207 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068985293 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08024886 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072667732 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078005288 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072324322 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072037674 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072475601 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073755752 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080681461 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076442785 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072154936 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077772688 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.08023017 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071734265 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077553007 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076599243 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069037951 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077774912 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072504151 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080804581 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078043244 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07425556 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068793551 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078100172 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07761128 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074191157 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080466325 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072531117 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074089675 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072213887 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072509943 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082479809 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077870833 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07376883 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077994858 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080448406 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080559537 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083021433 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076240607 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074245374 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078173871 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076205544 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073924429 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07838376 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074287553 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076517453 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080528347 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074352829 seconds)
  done (took 6.523097113 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106057468 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069919446 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072276773 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075961658 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07205511 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070144388 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07036748 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070935099 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07213448 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069485584 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.109765174 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072955651 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074304034 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074273517 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07258867 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072831031 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07224451 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074084921 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069581797 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.083054862 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072481306 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074096553 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074262155 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074219303 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07947581 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080373169 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072684195 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072239774 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071990651 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072069414 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073657486 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072203326 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073897209 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068992493 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073779123 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072293787 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072161375 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073912482 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072105981 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077876653 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073597572 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080440927 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071908143 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072244407 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075952721 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072133517 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072062047 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069093211 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072118745 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069101387 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074676154 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074205969 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074031854 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071534177 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07000746 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070557685 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07210625 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072627788 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072280184 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081180767 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073946934 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072095933 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082745832 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072419326 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072721859 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074729728 seconds)
  done (took 6.415467439 seconds)
done (took 133.722890951 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.222236435 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190323235 seconds)
  done (took 1.875750115 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.078538826 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.170775036 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076231389 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075699183 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109946442 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108704102 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076695578 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07345536 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076198053 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074587498 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142426453 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076923498 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07404261 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072682356 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072971537 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073779046 seconds)
  done (took 2.918185582 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.112407635 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.191484404 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085393191 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.073419317 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.118513026 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080405168 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075038115 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07705242 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077651058 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071424593 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108165577 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082514166 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074877433 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077987639 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073323227 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074666797 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076131677 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.080116039 seconds)
  done (took 3.098750016 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.102477217 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.090560894 seconds)
  done (took 1.689875653 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.16585705 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107348905 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147143891 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.332116577 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130539479 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.128581791 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133563068 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129285232 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.116639706 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12448573 seconds)
  done (took 3.003165903 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.111382674 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.109285152 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.314420547 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106400497 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.084830342 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079660066 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076177414 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080992104 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07672734 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077473368 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122681019 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076392285 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073647808 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124654732 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099729719 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107702338 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.07348237 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081123847 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082524566 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073941999 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079058258 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.08327247 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.184480311 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.08134435 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.104370753 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076951227 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077915247 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075104986 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074917791 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079416786 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079425907 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100611608 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078583007 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083820496 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07775087 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097772815 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073001194 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099497603 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075040888 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072891427 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076420063 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079956497 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072993441 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078731133 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07619332 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07823633 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080607167 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071533433 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077986998 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077451177 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073751993 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076791671 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077033431 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078054719 seconds)
  done (took 6.371221233 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.113268667 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107285984 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071069566 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115556575 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106528339 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071229245 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.10543162 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101669618 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.111042666 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071447972 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070669981 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071982984 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.083728139 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083076385 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117869209 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10943487 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072760325 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071257254 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.1097475 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108267448 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069975958 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103013954 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10371581 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110554848 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069344433 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070716517 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071225975 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072300379 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075528423 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076039025 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069957159 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076530776 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082712505 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07612378 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069384679 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069399259 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069436241 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076121575 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077044321 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077115526 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07523644 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068643022 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069101718 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070833685 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071741815 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070999644 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.078106591 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.079144357 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078054696 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071422643 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07169434 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071181174 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07110178 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078265028 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07780854 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077889184 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077071097 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069856978 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069581134 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071507217 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078082695 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077690688 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077021818 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070758885 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078287192 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069710922 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078972329 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082096711 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069489755 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070045577 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069713495 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069661509 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070170324 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075379304 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.076382046 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070089039 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069809825 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069621821 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077370407 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075291921 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069713762 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075028406 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069115387 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069716154 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070423926 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069810705 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075215969 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076789994 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070248685 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069282669 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069581106 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070227325 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069138264 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075674743 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076635725 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07618643 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075383269 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069425561 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076619849 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076115302 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069556617 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.07564024 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068699127 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069186008 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069378171 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074599955 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074276288 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075579685 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06850632 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068350565 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073993556 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.213901682 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071237852 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076744984 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078612074 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077252828 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070098535 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079571813 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070319861 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078499617 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070450983 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078356142 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070479619 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076377559 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070338206 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069776346 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070188171 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076253693 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070472406 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069695383 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070412739 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070008387 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076373923 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080126359 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070365933 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075880793 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076344412 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07035681 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075685097 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069682965 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077214876 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069826149 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070500393 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069424137 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078790904 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069511586 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069604585 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069869238 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078362035 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070167402 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078211277 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075553517 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069666267 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079665864 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077770201 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075684459 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07806139 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070564353 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070192004 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069737482 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069444844 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075427343 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076531013 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070450923 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069967578 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075306468 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077623471 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069600062 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074932906 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075375673 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075646662 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.072441111 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069976728 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078812625 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.317841496 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075878971 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075412789 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076037948 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069616771 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075009008 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075555552 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069473978 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081414829 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069456962 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080107685 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075965286 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074742902 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076143163 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077128219 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078100135 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078247716 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080582274 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069143033 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069422904 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075796017 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06965132 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070174126 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075748128 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070185801 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069935712 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080495659 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069574681 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078207008 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068707271 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07670855 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069355581 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069687282 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080289467 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069164932 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069702882 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075650853 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069958345 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074911951 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077792024 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07533179 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06944259 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069523246 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075670088 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075842019 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068468955 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068634239 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068924185 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073343002 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073147583 seconds)
  done (took 18.849535917 seconds)
done (took 39.315947996 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.176215924 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117641802 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208707583 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198316336 seconds)
  done (took 2.304258078 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.106338098 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067469052 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.082641935 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091662831 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066283247 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.0772776 seconds)
  done (took 2.034762365 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.205848339 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175815507 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.24182529 seconds)
  done (took 2.15828277 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.373579043 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149892243 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.217862413 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.505914066 seconds)
  done (took 2.89047442 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.11226152 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101631007 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078465162 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112643837 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086276846 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06400725 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.135062365 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070863868 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101301039 seconds)
  done (took 2.460553692 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13108356 seconds)
done (took 13.550012304 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.110295546 seconds)
    (2/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.073886062 seconds)
    (3/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07599797 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.239705589 seconds)
    (5/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078994791 seconds)
    (6/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.217944696 seconds)
    (7/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.17081815 seconds)
    (8/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.188986635 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.15685123 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.120418008 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.077741455 seconds)
    (12/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.167049394 seconds)
    (13/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.213043044 seconds)
    (14/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.145610297 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.096438977 seconds)
    (16/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.253867178 seconds)
    (17/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.182769991 seconds)
    (18/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.122972054 seconds)
    (19/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.189848596 seconds)
    (20/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076683686 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077616178 seconds)
    (22/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.217640258 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.09279764 seconds)
    (24/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.222511147 seconds)
    (25/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.162561587 seconds)
    (26/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.150397397 seconds)
    (27/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.221890864 seconds)
    (28/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078635464 seconds)
    (29/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.091423421 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.08162155 seconds)
    (31/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.128809159 seconds)
    (32/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.161515677 seconds)
    (33/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080524973 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075764167 seconds)
    (35/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074661656 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.175274686 seconds)
    (37/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.11319762 seconds)
    (38/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.07830847 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073992692 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.088689072 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07400702 seconds)
    (42/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164233515 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089094915 seconds)
    (44/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.195663978 seconds)
    (45/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.075382199 seconds)
    (46/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.174570179 seconds)
    (47/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.201963015 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073999143 seconds)
    (49/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.074468256 seconds)
    (50/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.15584621 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080099108 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.15490915 seconds)
    (53/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.188932402 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079842543 seconds)
    (55/341) benchmarking ("sort", Int8, false)...
    done (took 0.154003064 seconds)
    (56/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.202811153 seconds)
    (57/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.156054143 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083175858 seconds)
    (59/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088267431 seconds)
    (60/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.20002591 seconds)
    (61/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083132351 seconds)
    (62/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.196818662 seconds)
    (63/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.14313874 seconds)
    (64/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.142338385 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.095360174 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087966823 seconds)
    (67/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.067421034 seconds)
    (68/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069357163 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067365264 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.06558001 seconds)
    (71/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.194073165 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.19684426 seconds)
    (73/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066728508 seconds)
    (74/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077685608 seconds)
    (75/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066653916 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073539715 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.255458576 seconds)
    (78/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.253947434 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07726636 seconds)
    (80/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.211427647 seconds)
    (81/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068432958 seconds)
    (82/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.077947557 seconds)
    (83/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070721895 seconds)
    (84/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076066258 seconds)
    (85/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154972265 seconds)
    (86/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.198171852 seconds)
    (87/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.086557512 seconds)
    (88/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.081667891 seconds)
    (89/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.069696581 seconds)
    (90/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.18096502 seconds)
    (91/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.173232572 seconds)
    (92/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.07454582 seconds)
    (93/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074862376 seconds)
    (94/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.145327984 seconds)
    (95/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065554332 seconds)
    (96/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.157319923 seconds)
    (97/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.0809933 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067634953 seconds)
    (99/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.168410915 seconds)
    (100/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.066383231 seconds)
    (101/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078719413 seconds)
    (102/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.068987034 seconds)
    (103/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.099178415 seconds)
    (104/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.144138751 seconds)
    (105/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.14047611 seconds)
    (106/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.082249115 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.070628312 seconds)
    (108/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.14639777 seconds)
    (109/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.244400503 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.077362489 seconds)
    (111/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068445932 seconds)
    (112/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.080239679 seconds)
    (113/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.078294887 seconds)
    (114/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.166550682 seconds)
    (115/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.069161519 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.151637013 seconds)
    (117/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.077301842 seconds)
    (118/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.220536981 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111728493 seconds)
    (120/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.201510987 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127961455 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076973161 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069846114 seconds)
    (124/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.188566771 seconds)
    (125/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.143787675 seconds)
    (126/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068801845 seconds)
    (127/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067093992 seconds)
    (128/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07426075 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068042084 seconds)
    (130/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070258256 seconds)
    (131/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085848859 seconds)
    (132/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090467846 seconds)
    (133/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078160581 seconds)
    (134/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069885043 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075939421 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066338405 seconds)
    (137/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06706253 seconds)
    (138/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074849355 seconds)
    (139/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075527524 seconds)
    (140/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.199732639 seconds)
    (141/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067038034 seconds)
    (142/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066803652 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066453633 seconds)
    (144/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067040612 seconds)
    (145/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084179596 seconds)
    (146/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067185229 seconds)
    (147/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.090039326 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.088412357 seconds)
    (149/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.23542444 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074140471 seconds)
    (151/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066300519 seconds)
    (152/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145866068 seconds)
    (153/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.066550153 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075963553 seconds)
    (155/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.163210931 seconds)
    (156/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.083944542 seconds)
    (157/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067480231 seconds)
    (158/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074912702 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.088557236 seconds)
    (160/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.073238008 seconds)
    (161/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076597075 seconds)
    (162/341) benchmarking ("sort", Bool, false)...
    done (took 0.143004764 seconds)
    (163/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.069683883 seconds)
    (164/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095828395 seconds)
    (165/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.06804749 seconds)
    (166/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075253812 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085250211 seconds)
    (168/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065998209 seconds)
    (169/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073036013 seconds)
    (170/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075293989 seconds)
    (171/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066089955 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 0.067578419 seconds)
    (173/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.065915489 seconds)
    (174/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066053132 seconds)
    (175/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065741584 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154032794 seconds)
    (177/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.064768941 seconds)
    (178/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078286811 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064970219 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082025645 seconds)
    (181/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065334572 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.088945326 seconds)
    (183/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066220551 seconds)
    (184/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073800646 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065316724 seconds)
    (186/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.227383857 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078184081 seconds)
    (188/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.183712063 seconds)
    (189/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183354649 seconds)
    (190/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071915433 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066192304 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.175468187 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089432853 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068945671 seconds)
    (195/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.143715564 seconds)
    (196/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093246935 seconds)
    (197/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118142293 seconds)
    (198/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.070014069 seconds)
    (199/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.071685397 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137576375 seconds)
    (201/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.08501889 seconds)
    (202/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.231816215 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150831668 seconds)
    (204/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067668284 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088251736 seconds)
    (206/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068761472 seconds)
    (207/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.163997462 seconds)
    (208/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.082289927 seconds)
    (209/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.068394917 seconds)
    (210/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.071153982 seconds)
    (211/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126349231 seconds)
    (212/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.237421907 seconds)
    (213/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.073326818 seconds)
    (214/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.067896602 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093924993 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065758471 seconds)
    (217/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067243642 seconds)
    (218/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066231759 seconds)
    (219/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068373983 seconds)
    (220/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.138920931 seconds)
    (221/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073667785 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074612307 seconds)
    (223/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.223769559 seconds)
    (224/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068270183 seconds)
    (225/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069345104 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073953551 seconds)
    (227/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070264569 seconds)
    (228/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067610265 seconds)
    (229/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.081417986 seconds)
    (230/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071559092 seconds)
    (231/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067189227 seconds)
    (232/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066560531 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068976201 seconds)
    (234/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066290183 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090007646 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152833402 seconds)
    (237/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077284934 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078430198 seconds)
    (239/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067143374 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077017622 seconds)
    (241/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073342963 seconds)
    (242/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067491687 seconds)
    (243/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.06921593 seconds)
    (244/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.146215536 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074153565 seconds)
    (246/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.0668957 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068412132 seconds)
    (248/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.068171525 seconds)
    (249/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073886256 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069967932 seconds)
    (251/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067084445 seconds)
    (252/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066826373 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067745479 seconds)
    (254/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068277095 seconds)
    (255/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066576617 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065065049 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092060527 seconds)
    (258/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.074249877 seconds)
    (259/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.152020373 seconds)
    (260/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.085074704 seconds)
    (261/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066953203 seconds)
    (262/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.082574908 seconds)
    (263/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074226946 seconds)
    (264/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.200021781 seconds)
    (265/341) benchmarking ("sort", Float64, false)...
    done (took 0.137947209 seconds)
    (266/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089142005 seconds)
    (267/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074946619 seconds)
    (268/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08153212 seconds)
    (269/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.06680897 seconds)
    (270/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066084522 seconds)
    (271/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067012006 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065973298 seconds)
    (273/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066785269 seconds)
    (274/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.066378318 seconds)
    (275/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.0671726 seconds)
    (276/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066255888 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066513629 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064897788 seconds)
    (279/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067543279 seconds)
    (280/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068619875 seconds)
    (281/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.192515049 seconds)
    (282/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067308643 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066874686 seconds)
    (284/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170410346 seconds)
    (285/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066639606 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066050555 seconds)
    (287/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069509679 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.06696109 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149782157 seconds)
    (290/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092043164 seconds)
    (291/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070294992 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129917557 seconds)
    (293/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066194301 seconds)
    (294/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.075250907 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092324739 seconds)
    (296/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09171897 seconds)
    (297/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066598682 seconds)
    (298/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075828341 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150915981 seconds)
    (300/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066202615 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121269068 seconds)
    (302/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.066140627 seconds)
    (303/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065408883 seconds)
    (304/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064320792 seconds)
    (305/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.064261806 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138774499 seconds)
    (307/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070913265 seconds)
    (308/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065798508 seconds)
    (309/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069748846 seconds)
    (310/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.245746168 seconds)
    (311/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.070352959 seconds)
    (312/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.068712746 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.149378214 seconds)
    (314/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.07126705 seconds)
    (315/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076807384 seconds)
    (316/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071607068 seconds)
    (317/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076916834 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.135446982 seconds)
    (319/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068912804 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.08058144 seconds)
    (321/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.067024266 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135224398 seconds)
    (323/341) benchmarking ("sort", BigInt, false)...
    done (took 0.275098855 seconds)
    (324/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.071904201 seconds)
    (325/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.070521054 seconds)
    (326/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.069455217 seconds)
    (327/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067094989 seconds)
    (328/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066378491 seconds)
    (329/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067732071 seconds)
    (330/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066523892 seconds)
    (331/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067075551 seconds)
    (332/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067818458 seconds)
    (333/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06720191 seconds)
    (334/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075208638 seconds)
    (335/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067600527 seconds)
    (336/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066746411 seconds)
    (337/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.068083567 seconds)
    (338/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074987189 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067868557 seconds)
    (340/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067549238 seconds)
    (341/341) benchmarking ("sort", Float32, false)...
    done (took 0.139950509 seconds)
  done (took 37.132348241 seconds)
done (took 38.688857381 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.094365391 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082823817 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081022846 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076345387 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079420551 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077240375 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078037956 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076639123 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077566333 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077310805 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077092872 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066139051 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07509825 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081301676 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075252622 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081633912 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078888635 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082015956 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067077228 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080981917 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093097852 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.0785289 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075432924 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080461326 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067124888 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075724664 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090281584 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.088013438 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073275123 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075976721 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074126061 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082015953 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074211064 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073079579 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.07604111 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072467491 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075872297 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073798491 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089609231 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072237901 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066947995 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078809751 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076965138 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076382138 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077944157 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.08090846 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074524195 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.083002077 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068083478 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078809018 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090345814 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071501024 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072873938 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075032845 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071758302 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075642791 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07265166 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077701567 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072505327 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080233764 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.079735241 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077058684 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066785962 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074866305 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073438219 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073885631 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065233759 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071184513 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066338649 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066161687 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065475813 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074883909 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072980281 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071361412 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065824742 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066207244 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06568851 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078248803 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072108553 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075740051 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06642813 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071697782 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071125958 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066450922 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071170025 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078086702 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065142207 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066383269 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065294664 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080544939 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072667986 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06621364 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077694367 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071144561 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071141755 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066149972 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065606177 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07089562 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074565633 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066144217 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065573377 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071205921 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071469866 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075342682 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067141462 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071392386 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071128436 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065349268 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075250654 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073825166 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075658732 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07952325 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075268483 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077962522 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066820859 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06552699 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075691161 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066701942 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071466604 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074703977 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071293283 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074500775 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066934266 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065944041 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071158052 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072323564 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066638172 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067176897 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066494747 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075097013 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073173176 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064802086 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065554491 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074782276 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074522737 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06488185 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06469766 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074520006 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065645478 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071858833 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071472959 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073677199 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064952467 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065830883 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.064835597 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.0650557 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.064481576 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071101686 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07055639 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066370968 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.074274105 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.071557995 seconds)
done (took 12.798921939 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.07459696 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109865254 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076843368 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083446245 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079788428 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068135742 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.07072606 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083555789 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070906574 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08640183 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094554308 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088263437 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093222458 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066161671 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067259893 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068381445 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065968558 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074920486 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.0819806 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091123029 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098010551 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069266052 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078877688 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086328066 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081021856 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086074107 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069916058 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070193568 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.072298902 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.12627418 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092235564 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066713422 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067725046 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080167748 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081210618 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073979122 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068134599 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071636002 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069236029 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068369112 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.070887484 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084358446 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073922492 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073925288 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.070116475 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070410799 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069944241 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073435743 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082287125 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.075256174 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076148702 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.07971536 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069096441 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06767636 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.06775768 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073767215 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069457876 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070209698 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.070146845 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069328469 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069380698 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.07218549 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070058134 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.07017486 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072834718 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07106111 seconds)
  done (took 6.675806978 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.085975785 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093224882 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082570022 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08248551 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067184652 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067706567 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067743486 seconds)
  done (took 2.223645952 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070975601 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078146784 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.082554964 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082349993 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.091894501 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07920346 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070248386 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.10238198 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069115575 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078535758 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086383563 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083512491 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072944364 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081895564 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070191601 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.081921257 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070548696 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077162218 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077964342 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083917878 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074199107 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100319466 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083601198 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.07043188 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083763959 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077807271 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071239195 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068182596 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068156936 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067839689 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06767762 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089790157 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074045311 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079521519 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068116281 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066702886 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071971172 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068209272 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071726724 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076376929 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071085122 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067667478 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067800693 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067785422 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068559605 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071850548 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069085688 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067464956 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06717696 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074673532 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066457222 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073951314 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069763963 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072686777 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072449519 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071631275 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074606949 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067795509 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075199355 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073888593 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067449595 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.0809964 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079264644 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071400908 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079673025 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076267233 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07389739 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070692194 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067144899 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066800577 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068410362 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078759052 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070152915 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069857093 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068295029 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072442414 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.07130699 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082518135 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082420481 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080468869 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.06982578 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.0674507 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071075381 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082128326 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07257478 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067292316 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068009963 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066769112 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.07276695 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067169405 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071808507 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067675412 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074039084 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069936764 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069612911 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075437371 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067335428 seconds)
  done (took 8.838769857 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.073189325 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072438761 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070987293 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.071075269 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070320439 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.07066483 seconds)
  done (took 2.137054187 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.095068084 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069823393 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082886473 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.069374752 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090184625 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074638928 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074477464 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069516781 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084173518 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078192932 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074111002 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077086554 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074419077 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069728716 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074414319 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06900377 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073835785 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070659931 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077751917 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070286386 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080694221 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069596611 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070151754 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080185736 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071113396 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069089423 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068926514 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078275256 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077590444 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069488333 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.0719877 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070769956 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076230434 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069254857 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074301247 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076310533 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067681445 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073293531 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070599642 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070871868 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076473244 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069674632 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070009731 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073409702 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069759178 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076201808 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073658754 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072080152 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074137429 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073260541 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073186484 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068551399 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072712527 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075708289 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078569016 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071098872 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.0741633 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073545784 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069418479 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076563291 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067670736 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070673133 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069161682 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070690996 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072567877 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073506713 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076257283 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069516086 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069999155 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067629544 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073195462 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068372204 seconds)
  done (took 6.95801645 seconds)
done (took 28.532929085 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.556279174 seconds)
  done (took 2.207668548 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.590721416 seconds)
  done (took 2.27544855 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.361036435 seconds)
  done (took 10.047501093 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.299979723 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.318658022 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.726034152 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133724332 seconds)
  done (took 3.1998104 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.756762247 seconds)
  done (took 2.459780976 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.235673575 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223592956 seconds)
  done (took 2.169123006 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.341524386 seconds)
  done (took 2.032485364 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.133080218 seconds)
  done (took 2.818197142 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.233825148 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159938113 seconds)
  done (took 2.090330065 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.541516091 seconds)
  done (took 2.231386956 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.305455673 seconds)
  done (took 6.002305141 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.245229748 seconds)
  done (took 1.977180301 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233440012 seconds)
  done (took 1.933945912 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.054180217 seconds)
  done (took 3.746479157 seconds)
done (took 46.895666997 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087402202 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087106835 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086873737 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08208779 seconds)
  done (took 2.009418428 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077841693 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071647809 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075034121 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074665722 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072294609 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072748868 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073806917 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069236212 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071847521 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071432575 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069812086 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070540189 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073293285 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071229842 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073586029 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074842523 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071028945 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.07089083 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.07314287 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070909833 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073557154 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071017858 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06954669 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070460989 seconds)
  done (took 3.42690265 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081404823 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074384005 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077380311 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073187956 seconds)
  done (took 2.008787671 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.079377158 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078659044 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087663674 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091177977 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07749173 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077970393 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085051234 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085258848 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06608944 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087642473 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068965342 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06740915 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067659988 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086449162 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083862702 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063288029 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06491273 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07778565 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076930665 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080542131 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069495205 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066294386 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078458731 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077770343 seconds)
  done (took 3.546541746 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083358197 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.068970355 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082463407 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093639336 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.09498584 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068252091 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080757357 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093379223 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128353838 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066581446 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072294311 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066484395 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105136396 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06625984 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.08105688 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108838008 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112023092 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070073976 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099660424 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066272729 seconds)
  done (took 3.419414333 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079563622 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071774475 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072808192 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068302929 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077842754 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073685591 seconds)
  done (took 2.157936987 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071702429 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070331153 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06819522 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073418956 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068997115 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068605313 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068318472 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066633511 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066935839 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067687279 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067605197 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068171482 seconds)
  done (took 2.530706626 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.161606081 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071633209 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071220072 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066662073 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072226099 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067797587 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08223229 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069477694 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084897827 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067941268 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067664233 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069629273 seconds)
  done (took 2.660320805 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103223166 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101971868 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146576959 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118024853 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116964102 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097017733 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119952436 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095204929 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161345041 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.139002806 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119799207 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096655725 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090046257 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071551767 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102484705 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102376836 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136011285 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073290234 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11368414 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165244125 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11521416 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113039113 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122292436 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117597954 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081744616 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12241294 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09473822 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105954164 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127258681 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113551492 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12217184 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098523209 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072821454 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.07206798 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149980295 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101738992 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107911218 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093603513 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100626912 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089059584 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107917341 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070087804 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.08949679 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.108369244 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086240987 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117767909 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08963531 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104293277 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081509209 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132097006 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107045667 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099168585 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086068864 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104683919 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130676854 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095641444 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111342386 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107385793 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08245156 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117478758 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101062892 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.251663382 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095878701 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081952089 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162971401 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09039169 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113392884 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114812914 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083727479 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090519226 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103887723 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132481037 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10779563 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108333994 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11565796 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096749145 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112295092 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093494337 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129595645 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0942965 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074122539 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105509907 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129345704 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08602087 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100923341 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130520273 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092767295 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077829733 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093080957 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119309663 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081495193 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096911057 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070571903 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098329583 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107661606 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098228795 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113020061 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107629146 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079109752 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125610509 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109777703 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074260267 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119953205 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101192356 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156902631 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09798992 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077024779 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100486435 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094483124 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148490509 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086217506 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081227235 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099973741 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142873718 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094650886 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171040655 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096796772 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130119629 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098202436 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08900447 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075715608 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090386649 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101360367 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107563276 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101476866 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08858523 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077375832 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086801269 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.253321641 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093965343 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082651664 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115295735 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102329848 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075893644 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090069749 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077526318 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126419401 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078879551 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110368034 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12581022 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079713751 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105935779 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099097896 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109070607 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098761174 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108023316 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144361006 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116803324 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080897614 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.08524008 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109351543 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143599461 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114553463 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086678268 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077682764 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10109624 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111897698 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098504204 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107713004 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101140323 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110282598 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098755737 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142217327 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118598764 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091835682 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096104092 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097684884 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124302945 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077648174 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156561561 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095287342 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119268881 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085711574 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142694268 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114280499 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091264612 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085781865 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096826478 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106354166 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10652796 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144606233 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097044134 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073403403 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094305576 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13286797 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077314695 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100430254 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091471754 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094328134 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119430577 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.083923437 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082329574 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068526482 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101768732 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135149746 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069888479 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.275527289 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.115215134 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104838713 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.10616322 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071312895 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100756653 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138761608 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106761432 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142423438 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117538336 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102512905 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120082645 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100159724 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107141125 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081077796 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.12657149 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135321319 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098370692 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091903014 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136552137 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118560454 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135839189 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.098034187 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115998822 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10627726 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102174321 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10523931 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.104211312 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145876208 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121563524 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125818861 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087163037 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107206111 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109704252 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13768643 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083437698 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117822044 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076396259 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113310242 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078617307 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108638356 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080556646 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112262161 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080631332 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101193971 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070723241 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075019958 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142870369 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113545807 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090499067 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08837515 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138034958 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132087362 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08124562 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10241693 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104765158 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101599487 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101032425 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10817062 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085574268 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094375636 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.273305456 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081086901 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083242901 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10071876 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096013643 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108738164 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085251893 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076081051 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137929342 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105443552 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096321832 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078755087 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096006548 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122568775 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090908941 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088823578 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106698621 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10511768 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142905242 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092439212 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099957034 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119239529 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081176163 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092968441 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.07218781 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086778556 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07741916 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110546732 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077546027 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109366108 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069935623 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132395207 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088279426 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09353883 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103626262 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098974568 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129518294 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093429752 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130183093 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091563925 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103097096 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109280689 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095582033 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081148099 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1052041 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097023487 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113561799 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096938861 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106720258 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110972589 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094618568 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14259863 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091118093 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121433545 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106588711 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108731779 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104743974 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117717758 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138990746 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113905369 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113040996 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076156861 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084084539 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106730467 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10068463 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144942865 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102289429 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072641431 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086217124 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090875681 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.254663257 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107282415 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084386415 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144217996 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088242383 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088248272 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11486598 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090810527 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099075047 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077429207 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097448914 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102510924 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095486268 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095558929 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108958466 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118708941 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114968667 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133565215 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100329593 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094329252 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120086693 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111865822 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113523095 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087369818 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087868417 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125619258 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103936352 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128923725 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101664713 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095628581 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103148395 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092046674 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100935159 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09863242 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.111177182 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081900454 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077261942 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069606807 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073537554 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119380041 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110373314 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100234456 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099422642 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073102392 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105252738 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100911165 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073390748 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088417188 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09547026 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100175807 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084706665 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093096189 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114927077 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092625395 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104561711 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100824688 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13047538 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101762346 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090391036 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145037282 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129697719 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089239712 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094791079 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072797864 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080202142 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102977778 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144569727 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117980881 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077881519 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.24362209 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079651495 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089146211 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07310041 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089957049 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090562601 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105960616 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094079907 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113552976 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10499383 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077189187 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104474037 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098569848 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093285502 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102486696 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103362272 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106682825 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125166886 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102105731 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098799526 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077895448 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081779808 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077163027 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08113074 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103241301 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079982314 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078781673 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134422145 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095131255 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109196709 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112969233 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086319754 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075831609 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134098482 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.07045362 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135406808 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072039276 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083373298 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081902934 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081407314 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095951369 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10645288 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098680243 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115097458 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106780857 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106225432 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111736567 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157253466 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072302815 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144571205 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077294812 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07658476 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077139943 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112736585 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091288921 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106364849 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142400076 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090860582 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093876586 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078542401 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12965068 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099727081 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104816118 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086709103 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080183801 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129484837 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080439794 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072347167 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087850652 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111704146 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072669198 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104227991 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.246726071 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081867486 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115433235 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632676158 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092115316 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077317692 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090363976 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.144125876 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13050862 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08500848 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110037497 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120065142 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091200159 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085016149 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108942456 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.1838671 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075687463 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096166389 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104697528 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099779634 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093474966 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093086476 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08905727 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093274709 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087205822 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081590668 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110013853 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089736855 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092931063 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098830757 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08449751 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082011618 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132348195 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105533032 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083782772 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090359568 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102452387 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089010278 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092723607 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070802538 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115197109 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093007065 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103008995 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.091653469 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109174593 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122639102 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090155072 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114340114 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089807746 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110761348 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085777869 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079794106 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103180205 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079825841 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078983036 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118344271 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085590011 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093728591 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105838041 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096482442 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115368695 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119017941 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112094922 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098874844 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080560282 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08746534 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088485764 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076127607 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078630013 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074924998 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076785715 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.271011101 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08769938 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085692751 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116558652 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083559631 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105492667 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102757765 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110303243 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084999705 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102077705 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10970726 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0919183 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104337442 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101921584 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130009173 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146739741 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100458884 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125171011 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135570069 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078217775 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076831279 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069799235 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116049646 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080536746 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082168859 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082709149 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134421837 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083561188 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096168552 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232639206 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081947 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083284542 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098165108 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071156309 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084325565 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110674892 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08737949 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085144826 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101409211 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084919036 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118735757 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113401832 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090694882 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08430355 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082393061 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095048725 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105405123 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129402809 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090809406 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076499892 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107823155 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104449489 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12538944 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074377667 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082041142 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131113953 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092719405 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1049933 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081465552 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121243583 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134072026 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09170267 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135329677 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07207457 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084386886 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090564547 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127432052 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075733183 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088762499 seconds)
  done (took 65.460774094 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.157215732 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143694714 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.084116581 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098763827 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189046293 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198262015 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.121107515 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.09705318 seconds)
  done (took 2.983628582 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071860374 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083843517 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084491078 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.209418209 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109385204 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068360402 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07437729 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.083193295 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.0686126 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067880914 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103117119 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068275652 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069701866 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.371647509 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.068618036 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072450582 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069010053 seconds)
  done (took 3.589830208 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.3335233 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.422180483 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.220054011 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.654531633 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138050296 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485682924 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077628913 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083822146 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627362698 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.374917575 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131219544 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088873169 seconds)
  done (took 18.493514052 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.082500765 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.084499407 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.083567915 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.080008189 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.079578611 seconds)
  done (took 2.332770866 seconds)
done (took 116.341483063 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.089592346 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.181360191 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.073187118 seconds)
  done (took 2.143985424 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.088569683 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.086600647 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.086458851 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.08327345 seconds)
  done (took 2.207925338 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07976197 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.081608282 seconds)
  done (took 2.015028636 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.231061623 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.180142632 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.094629772 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.087850849 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.084894266 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084861195 seconds)
  done (took 2.127497702 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.07642345 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.076139397 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.0764647 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075074062 seconds)
  done (took 2.15930041 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071159426 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.069150543 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070667336 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072823141 seconds)
  done (took 2.139038932 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089950818 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086731092 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116407555 seconds)
  done (took 2.148184326 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087867592 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086119718 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082026691 seconds)
  done (took 2.117602246 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.116325369 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.102659606 seconds)
  done (took 2.076133007 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085236664 seconds)
  done (took 1.947644528 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.095264259 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102838918 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.145771275 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.110008363 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.1425191 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.13282413 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080962075 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.082198011 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07838556 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07739376 seconds)
  done (took 2.9073038 seconds)
done (took 26.437448948 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085296834 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.380820101 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.365524257 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.091448482 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.6773451 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.36273407 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008973306 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095463008 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103190562 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070231736 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087042904 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652225765 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.001535141 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.332255097 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.982501416 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331728454 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653477656 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070547762 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070267803 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070431973 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.991475293 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069424464 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070172896 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070552113 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652939004 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37687286 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070989365 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331435649 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070307684 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072489396 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358622037 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071174096 seconds)
  done (took 16.526611174 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.074618647 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127209163 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078164533 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086944888 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072401325 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071480919 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073400575 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070897779 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112942299 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070559366 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087921107 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069952267 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074273019 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071797598 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089972844 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070258498 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071576529 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071505401 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070891049 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071036381 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088588692 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069713707 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070892601 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070868478 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070852157 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083418966 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071203727 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070410122 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073191018 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073095993 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07433287 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071581757 seconds)
  done (took 4.348716197 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.126481845 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129413382 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075098293 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111795965 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120528991 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072854063 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154700295 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.095518099 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117217506 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070697292 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088539882 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071334611 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106773029 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073073272 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091306147 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070319298 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071946718 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070829144 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070544566 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071248349 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089561864 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069963608 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070824191 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071555435 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070758819 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085820436 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071364447 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070311303 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070602705 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073290395 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074832541 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07185895 seconds)
  done (took 4.623757401 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.074033713 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073818841 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082556285 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08387803 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069419508 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071327895 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072888189 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069177914 seconds)
  done (took 2.472238031 seconds)
done (took 29.848630441 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.083347619 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070847895 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073403378 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090140809 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076839411 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072363064 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066738488 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.0767869 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073655467 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073676756 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075279125 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069554318 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072397882 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067301787 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074798136 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068730019 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075000689 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072997333 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07274457 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074458213 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070709676 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074216129 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077050955 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.07307777 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072663528 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072503117 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077295599 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074167474 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068437172 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071118795 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070371252 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082697811 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074549717 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074318016 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068061676 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067936947 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072834576 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.07039741 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074781721 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077660544 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070588975 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077552544 seconds)
  done (took 4.928330962 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.092581429 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096517099 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.089333333 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084048919 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109052385 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083952025 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092503728 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081183034 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079730884 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.09182955 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076565484 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081577444 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082878391 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077441098 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080796142 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077506447 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082032822 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075528429 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081192656 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.08055474 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092736194 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.074124805 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081037826 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082148025 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07598055 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082294295 seconds)
  done (took 4.074108723 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.076791168 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091275319 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.095197506 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144830182 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112156374 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084770464 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084560547 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.106500851 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.104239714 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070860064 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074168649 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096273339 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098984018 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077656657 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108573905 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088665423 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.08281975 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071971702 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076644518 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105633917 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093327914 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089094624 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10291531 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090670276 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069421016 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079400035 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077142827 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085766747 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077864449 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082280435 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074543548 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07379874 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071033326 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082734154 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074617247 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068171814 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092085781 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082933227 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085723078 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109038958 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.081063847 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.074172482 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.104736101 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.139868321 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.075351889 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074597336 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.076788346 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.085659572 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073804644 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100368925 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088913867 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069273997 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088531984 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070966607 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071190997 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086660001 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071362044 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071606563 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082106465 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.076751513 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090403786 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074760202 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090684439 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.07021936 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081301752 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071637756 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071698429 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068418493 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106191676 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077323877 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12298589 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070927953 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067836233 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081951643 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080885371 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076393782 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069436518 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089186915 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081898177 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.07340561 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08155114 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072924281 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072988138 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105690449 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069188363 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067764949 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067925199 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072109433 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073170474 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.07044239 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083412366 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069106441 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073255326 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085503823 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069578327 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070447135 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072330311 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070582012 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069137255 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080357727 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073416942 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071809053 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082000964 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070594464 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072887223 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085029629 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.0791938 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069204114 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070608783 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072143607 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071802257 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074358173 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073336816 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072423839 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076799592 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077008064 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075394933 seconds)
  done (took 11.449992455 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.170904283 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.157398669 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073463295 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151586385 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.079706855 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074853622 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151939204 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.093543278 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073921013 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.075084021 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.072654547 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.101881102 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.097316451 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.111985416 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.075374177 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071736725 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.09678885 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104104766 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.154901977 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.152269999 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.097936454 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.08148571 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.075969617 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.074919435 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.074237728 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.082606169 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.093661357 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081512286 seconds)
  done (took 4.730335429 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080708036 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.086678708 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.075086856 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094407693 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089229061 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071221431 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072676532 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.07195259 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087595493 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077777591 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070477908 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075274162 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074469322 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071425687 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071500383 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077061161 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077293648 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069685187 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073752873 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075138071 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081549254 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096015525 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.075075977 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070877807 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073330912 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070640876 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077148371 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080213259 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070383111 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100630226 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067607041 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075580318 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085295636 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.072705481 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071324901 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071070573 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.072035677 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072608859 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.073433289 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.070347794 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068764715 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.0755674 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069554027 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.077389851 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084854076 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.079351941 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.074712674 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075917438 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.076197112 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.069412733 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.075625195 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074330433 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.07311994 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078731179 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074301812 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073049251 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071401423 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.102447192 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076058408 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069767296 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069388891 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068603462 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072612649 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078192973 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086932343 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072047187 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068356033 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070247723 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075244772 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084475234 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069494989 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075604171 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067464135 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.07034475 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072464319 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072996076 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071904927 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068504604 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070058856 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070528078 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070076587 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069950456 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069798697 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072938962 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068547675 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068773807 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070747209 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071859792 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076535228 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.0690167 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073338582 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071644126 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069228892 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073336118 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07585321 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073019359 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090302203 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078834088 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.07093683 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068566972 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084501346 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.073257629 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070510732 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075912254 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075080611 seconds)
  done (took 9.79961173 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.097493526 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.074359765 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092481108 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097294692 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081560189 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076559131 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085185795 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.072549085 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086853819 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069596758 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079837587 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068708867 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084124539 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079979931 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072572837 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.08377613 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.075931233 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.094470378 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.088537826 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.071681822 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.083273354 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.085389686 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.084828474 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.089023853 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088194186 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089256501 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082609431 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073567104 seconds)
  done (took 4.246084628 seconds)
done (took 41.095823072 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.951539063 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.124731845 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.948718438 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.170355559 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.003068047 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.067777116 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.061148529 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.945761505 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.035528461 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.973190504 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.261881566 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.396528567 seconds)
done (took 68.888194863 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.974932403 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.098526835 seconds)
    (2/2) benchmarking "String"...
    done (took 2.170087822 seconds)
  done (took 6.15083733 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.553878054 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.952940324 seconds)
    (3/3) benchmarking "different"...
    done (took 2.000650451 seconds)
  done (took 8.387032855 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.036374705 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.987838024 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.20501436 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.95310505 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.953266121 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.3406929 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.78075826 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.41536949 seconds)
  done (took 32.517585765 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.259956106 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.19830324 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.710087698 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.730245514 seconds)
  done (took 16.830375019 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.560821186 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.215927258 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.215184559 seconds)
    (4/4) benchmarking "different"...
    done (took 2.207968138 seconds)
  done (took 11.140446619 seconds)
done (took 87.014300976 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.955709002 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.158643264 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.961960078 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.10554801 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.984467079 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.984264938 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.961151749 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.99187309 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.952932331 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.954455972 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.404441485 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.950011809 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.949832782 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.987074165 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.951683481 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.961860238 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.550718103 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.969367401 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.972695841 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.504261902 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.447139442 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.963447911 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.962040184 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.009659552 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.05889248 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.970090856 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.547790222 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.960483103 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.573367629 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.967672145 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.952330082 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.958754361 seconds)
  done (took 210.465994029 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.953781488 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.982020505 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.085055857 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.97796059 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.47173464 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.148115611 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.10424292 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.525381665 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.958631272 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.975551492 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.149374923 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.955821082 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.178937902 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.908817251 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.95016182 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.961251974 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.155541919 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.191560566 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.954899615 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.143704367 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.958170773 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.052661248 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.997259548 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.131709354 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.958215102 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.049829705 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.977601308 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.974791919 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.139909502 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.119867466 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.975914576 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.997418251 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.142668719 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.817491847 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.98097399 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.962971404 seconds)
  done (took 176.856236514 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.128855066 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.965221142 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.019630069 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.088825709 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.703375033 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.687121857 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.957389584 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.956210625 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.956928059 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.965677261 seconds)
    (10/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.957321007 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.958765166 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.027053229 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.266980181 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.968031377 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.954741401 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.958146414 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.596858205 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.150356861 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.955856635 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.957335245 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.0328542 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.327567875 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.18661962 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.958302976 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.967917405 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.097128334 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.962599858 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.955535469 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.094567885 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.959563767 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.037256818 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.092646968 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.966926718 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.039661985 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.963339735 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.453402804 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.955950303 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.958747145 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.961831944 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.021393342 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.956370785 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.049823625 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.047238941 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.955776705 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.969701158 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.153085779 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.646067212 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.959854902 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.958836712 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.959332283 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.959559547 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.960492018 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.81946911 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.959815046 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.985383615 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.590436106 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.956181331 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.959839092 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.960937762 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.96032673 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.960792244 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.967480751 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.99431296 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.767991483 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.997358946 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.346011185 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.764464951 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.95683425 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.924484244 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.015164791 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.964550996 seconds)
    (72/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.96008445 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.039355694 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.957042834 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.960628479 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.960877665 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.961711246 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.093892427 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.055060372 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.958415245 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.099971699 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.962079989 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.965081362 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.22576169 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.40486709 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.957591595 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.975160491 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.014720758 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.960232874 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.9615925 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.96791759 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.061564233 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.958672232 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.961293162 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.960057944 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.061998455 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.959711037 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.535709369 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.184848947 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.032396908 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.213606496 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.203614681 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.962485811 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962698155 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.978710863 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.965446237 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.963466177 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.973513306 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.959809155 seconds)
    (110/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.96307484 seconds)
    (111/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.96470476 seconds)
    (112/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.967485367 seconds)
    (113/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.963435824 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.96328043 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.962906516 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.965456106 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.977076738 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.959455711 seconds)
  done (took 431.410943212 seconds)
done (took 822.794678731 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.637491504 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.709906409 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.551249547 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.586810255 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.551394036 seconds)
  done (took 14.929988751 seconds)
done (took 16.819974177 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.994787856 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.981371616 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.969536467 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.024976779 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.986501098 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.977194646 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.011152791 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.011869416 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.997118731 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.977659355 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.020213605 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.983451175 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.994704745 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.000651308 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.043937863 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.004787366 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.983546507 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.974511241 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.023688283 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.981515946 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.981696628 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.979001816 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.97847535 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.020741731 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.053847049 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.99108056 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.978718778 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.015928408 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.990715023 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.016427077 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.022807869 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.001470851 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.013678412 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.044739902 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.027797349 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.05016944 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.988728587 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.037045215 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.983950032 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.053592291 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.022524849 seconds)
  done (took 84.089451677 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.976505091 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.11039261 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.181573067 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.007450858 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.975855982 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.183227448 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.032348274 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.100318473 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.109819728 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.190643162 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.190189265 seconds)
  done (took 24.957124991 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.976372723 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.111776049 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.187353589 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.009909101 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.978190672 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.190540495 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.036713497 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.106130404 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.113163162 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.189610615 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.228204459 seconds)
  done (took 25.033216358 seconds)
done (took 135.973175272 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.343156367 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.997993699 seconds)
  done (took 6.236657601 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.972264893 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.98911903 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.124975784 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.971858501 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.96988828 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.971540548 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.971302108 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.971530027 seconds)
  done (took 17.84007441 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.970539271 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.970563558 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.969810956 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.970367775 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.970913138 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.972591695 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.971025598 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.97075286 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.970610861 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.970923167 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.970880574 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.971485161 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.970566613 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.972263669 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.971838604 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.973620084 seconds)
  done (took 33.436101722 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.973401668 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.97377421 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.971618738 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.973217874 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.973628681 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.972410233 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.973671528 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.972515013 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.973832719 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.972114688 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.972340035 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.971210073 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.973197474 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.972176157 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.972537325 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.973483743 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.97298576 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.973268259 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.973228793 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.972687481 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.972477096 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.97393957 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.976512541 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.973551861 seconds)
  done (took 49.251331333 seconds)
done (took 108.669663458 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.143680893 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.505556713 seconds)
  done (took 8.54722864 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.978304442 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.973040106 seconds)
  done (took 5.913565086 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.973615684 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.971825521 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.972853495 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.973456083 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.973722999 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.97397401 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.974933064 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.974051993 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.97313051 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.974470669 seconds)
  done (took 21.635461506 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.974347645 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.973569512 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.972813863 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.975185212 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.974458276 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.973555082 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.975020313 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.97360188 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.973760778 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.973883526 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.974374606 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.97474174 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.97525331 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.975084437 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.9746282 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.976804646 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.976306826 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.974252466 seconds)
  done (took 37.440674309 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.974318711 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.974543632 seconds)
  done (took 5.849267545 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.976489526 seconds)
    (2/7) benchmarking "second"...
    done (took 1.975165935 seconds)
    (3/7) benchmarking "month"...
    done (took 1.975902363 seconds)
    (4/7) benchmarking "year"...
    done (took 1.974997712 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.974479721 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.974804081 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.976385884 seconds)
  done (took 15.72832146 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.97661985 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.121535986 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.179316096 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.613403672 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.976959769 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.979549918 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.864380484 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.979606049 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.98181286 seconds)
  done (took 21.574625833 seconds)
done (took 118.586668316 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.824730495 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.977264224 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.198839496 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.107926406 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.992596483 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.272460312 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.980154042 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.514133388 seconds)
done (took 43.76961232 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.037085291 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.974888173 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.000998537 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.002159489 seconds)
  done (took 22.879676337 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.984646258 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.30577946 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.991353521 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.864468374 seconds)
  done (took 23.065966242 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.356365862 seconds)
    (2/2) benchmarking "read"...
    done (took 2.322801454 seconds)
  done (took 6.586368079 seconds)
done (took 61.473560517 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979631718 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.980509759 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.979881391 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.980016923 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.979080782 seconds)
    (6/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.979866064 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.977924545 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 1.979946209 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.978949357 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.952886889 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.980134854 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.97942665 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.980387659 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.98109778 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980401269 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979563806 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.970062614 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.980746381 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.978712675 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980413345 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.980747507 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980762759 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.981044746 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.980045966 seconds)
  done (took 49.384885287 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.981522933 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.980763104 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.978898278 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.980243674 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.980633506 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.980825801 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.979806045 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.979822617 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.978507408 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.980777786 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980003343 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.980525846 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.979934201 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.980346888 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.98097852 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.981297432 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.981285591 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980069855 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981885682 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.980626284 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.979871899 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98124026 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.95415052 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.974744263 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.981152802 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.979765697 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.979694364 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.980342985 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.980401784 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.981788723 seconds)
  done (took 61.287397581 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.97977036 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.980361562 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.98012206 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.979958175 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.981529961 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.983609875 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.981358934 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.982411049 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.981229674 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.982884573 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.980465487 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.981392193 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.980955597 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.981771704 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.983010704 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.981653056 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.980271049 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.982143566 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.981943945 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.983375548 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.982646071 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.982453454 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.982932651 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.981840088 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.981067389 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.98206272 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.983153917 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.98270934 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.981435315 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.982899171 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.981046718 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.982847345 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.982493634 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.981696249 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.981716259 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.982090467 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.982565335 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.983290778 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.983901544 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.984354029 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.98302838 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.983871922 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.9828112 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.982973747 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.984481044 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.983846183 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.983641464 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.983607757 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.982653677 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.985119099 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.982931285 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.983799163 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.983673145 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.982729799 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.985041018 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.983792827 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.984510081 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.985144834 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.98485078 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.983899214 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.984944775 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.983688384 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.984134613 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.985752386 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.985123049 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.985203301 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.984328726 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.984882155 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.984015659 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.985230035 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.984868965 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.984465252 seconds)
  done (took 144.67958234 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.98657618 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.985025034 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.985984743 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.985706213 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.984645767 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.984551556 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.985355654 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.984758925 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986345325 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.985680846 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.984934536 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.985739076 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98566607 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.985572139 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.984938736 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.985309985 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.986704052 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.98571398 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.984384721 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.984444243 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.98545891 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.986969333 seconds)
  done (took 45.591277475 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.989174587 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.986000847 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.986064113 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.985309308 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.98622177 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.987393232 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.986664081 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.984915624 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982996983 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.986739266 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987371296 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986726428 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.987043255 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.985428147 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986934314 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.986509598 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987509505 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.986939567 seconds)
  done (took 37.668648999 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.988079103 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.9861139 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.987638205 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.987940566 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.988600377 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.988777965 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.974337438 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.988615941 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.987627763 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.98677979 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.988054839 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987045304 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.98825617 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987050823 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.974663478 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.98843379 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.987331279 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987321556 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988580385 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.98810441 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.98794473 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.988239731 seconds)
  done (took 45.617997132 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.987836311 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.987304727 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.986753963 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.987054292 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.988267636 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.988990905 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.988870608 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.987011691 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.988464441 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.988581041 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.988582933 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.986741306 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.98775461 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.989168507 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.989339292 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.988689625 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.988775767 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.989035429 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.989866186 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.988223628 seconds)
  done (took 41.679817798 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.988511202 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.989235233 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.989491524 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.988811021 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.989259069 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.989796199 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.98983305 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.990170901 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.990550262 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.989457018 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.990978049 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.990573317 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.990765367 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.991391802 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.990903206 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.990916757 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.990688003 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.991695554 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.991138015 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.990861969 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.989737256 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.990854857 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.991585966 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.99136891 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.993008903 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.989122047 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989634686 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.991766692 seconds)
  done (took 57.647211798 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.990344824 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.992972672 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.992054455 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.990769707 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.991808324 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.991437229 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.991358171 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.992207088 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.990639156 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.990886499 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.991488985 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.992411724 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.993600187 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.991783315 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.99153252 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.990461998 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.991569862 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.993405575 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.993076631 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.994333705 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.99310484 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99235088 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.992796366 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.993300734 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.992022083 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.992721993 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.991432078 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.993676575 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.993941012 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.992442931 seconds)
  done (took 61.682245685 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.0103545 seconds)
    (2/2) benchmarking "in"...
    done (took 2.013342043 seconds)
  done (took 5.941124505 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.996137978 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.99304378 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.993450623 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.994244977 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.993525203 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.993826898 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.994142707 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.993981035 seconds)
  done (took 17.870521873 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.995937009 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.996782057 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.994156373 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.994810748 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.995404091 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.00097787 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.995410865 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.994059257 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.995605979 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.994833402 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.998721376 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.998252643 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.004094631 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.999466063 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.995009446 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.994492465 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.996580609 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.998686919 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.996087929 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.994632658 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.997271726 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.995358917 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.995751483 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.994269689 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.994926682 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.995620956 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.004066161 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.996003777 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.994799597 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.994305279 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.00172305 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.996040226 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.994700998 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.996614781 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.995620476 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.995118299 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.002236614 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.994534596 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.997267739 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.996655703 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.997769531 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.998960895 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.998343406 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.003312255 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.997307478 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.99734886 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.997946353 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.997898808 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.996480389 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.998741156 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.005683489 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.997743336 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.998655961 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.999393016 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.00029342 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.998791844 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.998137468 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.999403334 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.004266159 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.003886865 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.000230699 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.018740194 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.006968464 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.996466245 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.997953007 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.008206233 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.024163247 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.997809643 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.998007491 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.997417122 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.005528505 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.999487854 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.996643858 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.996046828 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.010910536 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.009120112 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.997922427 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.998880311 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.99655967 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.998486269 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.997661591 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.998227454 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.998343381 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.996966935 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.008146823 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.026132033 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.997889955 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.998378751 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.000185816 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.000497117 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.002508439 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.001443811 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.999436087 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.997476262 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.999954899 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.002056698 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.999266806 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.99941638 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.000013692 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.008071635 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.998846957 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.999447147 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.002467474 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.009693601 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.998514238 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.000811978 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.000250313 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.000776935 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.007010841 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.999894289 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.999864211 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.999815739 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.002379872 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.005232087 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.000559383 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.003945365 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.009283905 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.008324331 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.002056955 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.004581684 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.003279393 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.002714088 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.010126744 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.027562858 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.001092048 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.003361945 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.005130842 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.01516068 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.004596706 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.999668208 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.002332319 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.001729647 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.001432158 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.001824826 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.00384103 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.001804754 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.001675642 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.00283288 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.003247502 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.000439558 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.004453101 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.001733444 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.003005798 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.003063693 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.00647615 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.001462496 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.004198219 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.008680212 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.002336732 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.002683829 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.002057456 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.003227855 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.003831724 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.002367255 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.002237301 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.00214163 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.001424809 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.002689765 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.004541361 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.002377269 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.002025783 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.004200272 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.008147511 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.003276126 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.003013623 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.0023893 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.003199207 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.999900087 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.003660971 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.004784638 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.004974561 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.003357896 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.006920592 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.003738031 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.003076429 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.003805231 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.004519136 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.002171617 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.006304197 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.01757413 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.006630555 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.013799054 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.005447373 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.012484976 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.003831383 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.004629291 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.005108715 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.003244857 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.003464465 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.004155006 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.003587409 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.006886321 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.02675706 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.016107708 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.006473756 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.006915162 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.012274574 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.008875455 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.010450553 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.006616611 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.006395321 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.007319902 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.004925156 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.00519692 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.006521419 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.008652127 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.005938759 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.006252835 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.009847775 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.006761432 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.005325931 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.005847342 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.007142448 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.006521236 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.005736281 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.00657039 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.006606624 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.005396017 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.012728744 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.007533553 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.007643572 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.006231152 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.008763214 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.006848182 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.006901178 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.007012246 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.010190487 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.00623005 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.006203989 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.01543174 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.007049635 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.006243515 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.006541029 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.006584471 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.009062925 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.006224679 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.010696379 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.016718041 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.008721001 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.007214067 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.012858368 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.008150035 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.012690426 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.006980391 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.0085789 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.00768359 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.009159958 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.0076652 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.006559878 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.015157284 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.009088663 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.009576867 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.009866039 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.012169939 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.008813435 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.009908792 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.009471499 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.012527309 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.018193454 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.013475158 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.010806613 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.014101058 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.01077122 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.010235872 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.014143135 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.00991505 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.024388405 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.020728838 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.011453132 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.010524472 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.00955501 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.013827009 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.00942026 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.011379816 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.016930255 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.012370145 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.011467869 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.016510816 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.010204158 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.009726808 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.015562071 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.011467047 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.012726096 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.012047429 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.012051958 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.011412904 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.010251783 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.012957277 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.011095273 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.0119989 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.015874498 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.011549961 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.011628641 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.011933206 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.019461688 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.01150929 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.011372154 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.018493511 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.012613109 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.012003265 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.012847001 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.01283606 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.012624185 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.012952209 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.011882448 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.011839197 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.01109364 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.014084963 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.024175363 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.015530745 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.020323287 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.013648478 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.022427706 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.011522648 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.011489983 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.0117496 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.015948845 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.022183657 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.012381519 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.010631981 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.020621506 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.012957554 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.012660181 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.018134938 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.01176591 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.012974919 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.013580856 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.013174075 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.018079056 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.015832417 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.011661432 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.012457518 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.013417214 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.011997658 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.017529271 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.014649087 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.012546703 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.013672516 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.015417973 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.015967219 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.014033498 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.014256286 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.014071611 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.012239628 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.013874882 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.021744152 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.013235158 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.015194012 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.019021837 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.015177112 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.022691388 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.014769316 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.015001579 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.015416765 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.014237232 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.019120015 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.016268591 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.015922307 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.015441342 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.016545166 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.016497324 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.027452845 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.022724165 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.019778853 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.018356999 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.019013891 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.016332299 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.026197665 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.044085743 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.016367101 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.017631243 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.022656548 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.022778364 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.017950751 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.021931259 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.020315266 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.026711319 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.015242033 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.006123082 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.020203334 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.030295087 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.016072184 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.016932206 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.017083502 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.020778254 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.018967528 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.017699669 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.017667879 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.018853466 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.017938497 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.030202235 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.015669456 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.019602025 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.018197468 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.018431434 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.016629473 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.018674097 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.01996588 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.018363367 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.017220766 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.017082655 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.018698292 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.023309051 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.016600049 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.01970328 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.027881911 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.017349339 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.016795533 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.019867066 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.018184193 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.020890567 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.020044617 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.019191108 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.021080269 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.019574916 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.01920218 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.022777785 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.030126073 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.020635601 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.019766211 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.019627097 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.022560167 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.019046631 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.020119856 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.020226535 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.028853588 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021713674 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.032699625 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.030031147 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.020247789 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.019713102 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.02789017 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.028111208 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.018814019 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.018093472 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.021338177 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.021636111 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.022397359 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.019645236 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.02046296 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.021230756 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.02603252 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.020213804 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.020549678 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.019931911 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.019335343 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.021504697 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.022152915 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.025234654 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.020425372 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.020446972 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.019381839 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.021076503 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.020731266 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.023680894 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.020968068 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.022253561 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.023089694 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.02308157 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.026417958 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.019227955 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.022536761 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.022238077 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.022611433 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.021169749 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.021904939 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.022781686 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.022873048 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.023995171 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.030835498 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.021859083 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.022675221 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.023016838 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.0254795 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.021488853 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.023507615 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.022646969 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.023305272 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.029330077 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.023771793 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.023644679 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.022723731 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.023809688 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.027143656 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.021993058 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.026205089 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.021212829 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.023526619 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.022464677 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.027756462 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.034571348 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.026697917 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.027713855 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.034456368 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.026587674 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.024980761 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.024793996 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.02234843 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.023688367 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.023358661 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.026901205 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.024516745 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.024174602 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.023566158 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.024706753 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.023666008 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.026060565 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.022928037 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.025203151 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.029038766 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.034155681 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.030734153 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.024537397 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.025714777 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.023907688 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.026893917 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.037626036 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.023605835 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.02562987 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.023038961 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.024744236 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.024967456 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.031911145 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.033574237 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.029309314 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.025690049 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.028549135 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.045299287 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.026574453 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.036050438 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.06113174 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.027714623 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.025152103 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.025004519 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.026585801 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.025001318 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.029512102 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.025877912 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.033321048 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.025882972 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.026373691 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.03448009 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.02804512 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.026329419 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.027786656 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.027560391 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.03324996 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.026233001 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.031858334 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.027410022 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.026613052 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.027059921 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.029390754 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.025377717 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.027474187 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.026388006 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.028754367 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.026469313 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.026981766 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.035358273 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.026897319 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.027499524 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.530032542 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.039951811 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.026121138 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.028198061 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.028353583 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.032685545 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.031825857 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.027350302 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.031197941 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.038960581 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.030160494 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.037879076 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.031681416 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.028537467 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.028903646 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.027532907 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.025337027 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.039853026 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.041609312 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.027860312 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.028191068 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.034685129 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.027505745 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.035309237 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.033818439 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.028399257 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.030601546 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.029069861 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.029077885 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.027806053 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.028865271 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.030976089 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.038497873 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.027980855 seconds)
  done (took 1202.689754992 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.028552652 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02917321 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0302522 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.027944022 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.029402463 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.028647176 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.028964461 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.027267091 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.029373419 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.029592687 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.029355426 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.028303748 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.030050913 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.030163281 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.028913266 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.029944041 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.031604848 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.02925982 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.026870122 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029927885 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.029896732 seconds)
  done (took 44.564490377 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.030391798 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.029454442 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.03030027 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.031567255 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.029363919 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.030663426 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.031048919 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030081053 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.028667809 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030993859 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.030070668 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030882023 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.030678006 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.031112689 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030057031 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.029288884 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.030904583 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.031379973 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.029896546 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.030790823 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.031436347 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.031368603 seconds)
  done (took 46.623209097 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.030320295 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.030795543 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.033573201 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.030662002 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.031276567 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.031239496 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.031830241 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.03226865 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.030928034 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.032709174 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.038638459 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.040682404 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.031650616 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.03431222 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.032362336 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.031494599 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.177748019 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.031193771 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.033063047 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.031871395 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.034093637 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.036475997 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.032510145 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.031835626 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.031693392 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.032938663 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.032344541 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.033604182 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.032729105 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.033949277 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.037639329 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.033712602 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.034074275 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.035603896 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.031359648 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.034268577 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.037675722 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.032186992 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.032774894 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.033052882 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.042466311 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.061255885 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.033883143 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.032199531 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.040716868 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.03468325 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.033129391 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.036975113 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.043378737 seconds)
  done (took 101.788398793 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.03254265 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.033386779 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.03328187 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.034895706 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.033946587 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.033936865 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.033669174 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.033293205 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.034114375 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.033678081 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.033536739 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.034669776 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.03273353 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.033311975 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.033058709 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.034019361 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.0334313 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.035535528 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.035012485 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.035070008 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.034225311 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.033495259 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.033733492 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.035181664 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.034911132 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.035613771 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.035125511 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.035336362 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.034353968 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.035882487 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.035001412 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.035191951 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.034920507 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.035345617 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035973763 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.035273848 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.035260747 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.035955256 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.035227884 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.036472428 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.034900639 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.036207292 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.035065749 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.035636399 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035590589 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.036494613 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.036090562 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.035048649 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.034236078 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.036314766 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.036817582 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.037532099 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.036803987 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.035908495 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.036402956 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.035708527 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.037260161 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.036792236 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.036100981 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.037384407 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.0376415 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.035885193 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.037414016 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.037272272 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.036305322 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.038803321 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.037957246 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.038146596 seconds)
  done (took 140.359856721 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.038847209 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.038464376 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.037483348 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.037724803 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.037123049 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.036642888 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.037638589 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.037385525 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.037397962 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.039447436 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.038284782 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.038297945 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.037360444 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.039040924 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.037821211 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.038668079 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.038039419 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.038353722 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.038700843 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.037956594 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.037820247 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.038120158 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.039235286 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.039984444 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.038849586 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.038820478 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.04009065 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.040065447 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.039033411 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.040121922 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.040657355 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.038428069 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.039815462 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.040081786 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.040272036 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.039554593 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.038674405 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.039415382 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.039828947 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.039787829 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.039170247 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.041074971 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.040995479 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.040783165 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.041166589 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.040303237 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.040164521 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.041265961 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.040124294 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.041134426 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.040746455 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.041117113 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.040840372 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.04105031 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.041326057 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.04170097 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.041352457 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.041594886 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.040776231 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.04148143 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.038538485 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.041995098 seconds)
  done (took 128.411572296 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.041794028 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.041847986 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.041220103 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.041034066 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.010385077 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.042528893 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.042717525 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.042541329 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.042353238 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.042281368 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041594818 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.040743005 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.043508185 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.043270632 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.042282859 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042601472 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.041118248 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.041972493 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.040913462 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.042797043 seconds)
  done (took 42.773707438 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.043009261 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.041333539 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.042494634 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.04264987 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.042713383 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.042923854 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.041255554 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043304139 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.043328077 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042924876 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.043986619 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.043597536 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042160159 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.042490865 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.042862086 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.042458646 seconds)
  done (took 34.648693334 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.043985707 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.043714092 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.043338058 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.043926076 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.043724463 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.043235998 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.044078089 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.043708119 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.043643662 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.045179834 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.04256353 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.012432387 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.045481475 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.044553205 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.044053822 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.04256758 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.045192568 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.044339848 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.044873318 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.044250731 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.044909066 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.045488828 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.044832329 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.046241654 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.044627111 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.045434207 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.045898477 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.045318713 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.046142279 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.045786191 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.046462743 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.04671899 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.04589609 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.045505903 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.045935181 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.044469487 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.045490186 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.045709395 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.046728809 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.044472587 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.045917442 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.045928065 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.046853077 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.047288096 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.04661643 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.045509874 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.045376109 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.045849515 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.046400065 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.047096449 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.045736885 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.046242867 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.046178789 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.047106805 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.047890793 seconds)
  done (took 114.424296976 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.045670179 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.046193047 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.046576877 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.04735287 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.046296072 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.045869304 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.047995168 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.047688385 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.047128711 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.046963634 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.046250639 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.046846856 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.047197236 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.047105277 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.048063647 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.047882466 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.047902757 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.047276682 seconds)
  done (took 38.814677933 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.047558441 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.047303582 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.046989324 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.047996926 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.04772743 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.048433082 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.047157355 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.048673523 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.04903579 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.047906432 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.048484432 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.047880241 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.048371289 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.048629595 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.048809184 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.047865971 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.0491485 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.048719345 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.04845054 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.048458963 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.049423713 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.049566133 seconds)
  done (took 47.032837075 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.048860548 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.048799026 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.064881299 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.074220633 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.069854133 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.090169621 seconds)
  done (took 14.367517333 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049281694 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049027535 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.048775353 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.04850074 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048972977 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048868479 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048690909 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048886878 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049164137 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049766664 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049646889 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049164337 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048692632 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049587407 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0506438 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050366594 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049730929 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049696112 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051233312 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051070388 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049704977 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049423187 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049283732 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050401475 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050163282 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050592746 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051274044 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05308446 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051829902 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050192614 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050484062 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049573899 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050895013 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050413202 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050947059 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051380938 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051239571 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051221206 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052672851 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052142259 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.051695194 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051425167 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051295709 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051424989 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051618143 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050405367 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051728822 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051211995 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051347833 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050914796 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052259749 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051381396 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050950086 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051204241 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052101484 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051972175 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052199972 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050998199 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.05264805 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053112082 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051955538 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050827167 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.052786351 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052221866 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.052453126 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.052631082 seconds)
  done (took 137.324046433 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05171647 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.052791024 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053611082 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053027012 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.054036618 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052247983 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052214098 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.052904347 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052972139 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052284669 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053658353 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05504728 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.053960361 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.053346827 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05334786 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.054287074 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.053367663 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054176273 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054154314 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054742606 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.055320195 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053734651 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054257862 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055808983 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054947131 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054661781 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054137504 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.054547125 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053682863 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054755571 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.054241949 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054079198 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054201889 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.054819543 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054507107 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053796123 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055169688 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.055882576 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055273732 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.055624316 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055383034 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.056325091 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.056850182 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055849097 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.054757199 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.056039189 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.055316228 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055892651 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.055382781 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055319386 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055865424 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055650014 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.056947209 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05687213 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056457472 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.057663506 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.056547063 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.056391826 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056577202 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.057169902 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.056359614 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056607415 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056208956 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.056266464 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057638432 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057581931 seconds)
  done (took 137.603335679 seconds)
done (took 2802.38680808 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.161430284 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.087100536 seconds)
  done (took 16.227054982 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.219695585 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.122140667 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.240148023 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.175018244 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.085134711 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.062103673 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.055420774 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.060045164 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.150693175 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.060138917 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.08187853 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.056195827 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.060697841 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.059963485 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.06004124 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.061716049 seconds)
  done (took 55.604108507 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.064342442 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.064848311 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.063896948 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.060759442 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.074052394 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.139041626 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.086985087 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.067449643 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.077128578 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.092725932 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.082447276 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.067529297 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.071510193 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.069366635 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.153844887 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.110806267 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.124773282 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.140848674 seconds)
  done (took 39.592714959 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.145230718 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.072217489 seconds)
  done (took 11.208676599 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.095311867 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.077101432 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.083085577 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.064269224 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.087104993 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.07038939 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.092398649 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.087217217 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.073013123 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.056237299 seconds)
  done (took 72.797901226 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.064082024 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.064989982 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.326182768 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.072723209 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.071692721 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.089361103 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.062000674 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.095158687 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.065542398 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.061098504 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.070580264 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.332131642 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.077352689 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.062251565 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.485714364 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.076533452 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.069370719 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.097774721 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.100619946 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.067524044 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.069105332 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.068846671 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.225759301 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.774524415 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.062518785 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.06536163 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.069774218 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.063688786 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.061022012 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.064544223 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.065849283 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.061437227 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.071169434 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.054464382 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.066599387 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.068058038 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.563431035 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.084907069 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.071164162 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.160953915 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.110195795 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.071166978 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.875027256 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.062560713 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.062486271 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.073283364 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.768835151 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.150639833 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.066936752 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.228052873 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.417894248 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.076315038 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.234011868 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.223174353 seconds)
  done (took 143.611134794 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.061782579 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.305943453 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.214842667 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.063055945 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.318282103 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.273430457 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.061366074 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.109166687 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.064381594 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.264737145 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.312407811 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.169254694 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.062360785 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.063039729 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.06027249 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.056516599 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.21039239 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.13330394 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.06153076 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.060139808 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.088672015 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.268492421 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.18276441 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.066490865 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.085517998 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.27196826 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.185669555 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.167399376 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.013453991 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.062978365 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.127355126 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.061658899 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.06420209 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.058930383 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.21685047 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.161721777 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.147834357 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.063446295 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.064406695 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.064919192 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.743222836 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.26514766 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.158335954 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.187186148 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.315983364 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.282442057 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.75579618 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.063449796 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.707097929 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.219992328 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.270078184 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.275646872 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.179223521 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.069318935 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.379742299 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.064433195 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.065186759 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.283949145 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.283820293 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.167381096 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.062763278 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.066100596 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060762973 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.30496842 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.063921261 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.153531958 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.065803114 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.062321436 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.155871502 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.16315941 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.291512542 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.289917044 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.093597265 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.392931483 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.590007302 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.26979555 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.129126459 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.2842342 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.065307386 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.064944016 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.149553212 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.919268199 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.317617383 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.311026129 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.262957314 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.09355231 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.729860374 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.067007018 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.252986603 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.254505018 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.29903691 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.31101331 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.305455416 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.642503608 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.067182825 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.066707249 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.500547139 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.180745603 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.060537228 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.419622373 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.293335104 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.566135122 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.092692085 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.352550382 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.194094566 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.071757809 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.715691657 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.068086516 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.271028311 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.105415715 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.070028402 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.067224669 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.253825673 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.977737711 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.070261278 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.802702554 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.128468812 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.067750609 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.269495808 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.068898935 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.310247345 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.069196793 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.301330681 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.724329605 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.091399903 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.238164885 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.308695998 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.729468881 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.354706628 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.304601063 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.17462788 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.287430962 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.926312301 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.063296615 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.326456812 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.06343059 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.063342081 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.232791622 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.066052712 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.203428381 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.068214066 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.330272585 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.082293484 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.292948924 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.068069348 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.30328844 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.092875499 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.11450559 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.065373679 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.185400358 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.065474822 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.906322374 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.222635544 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.069809733 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.061389236 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.660355341 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.066453004 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.215709344 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.294095629 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.082651095 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.136344098 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.628640904 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.063868792 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.151405875 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.083600787 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.681575272 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.064819884 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.314916987 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.063168712 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.541983927 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.064277056 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.300719595 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.249003486 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.067313971 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.061458319 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.907180555 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.065626621 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.065681955 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.221043864 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.075161598 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.001860188 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265476544 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.065748641 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.191030117 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.066081177 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.408246339 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.408067484 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.061833831 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.060908828 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.067175762 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.066794369 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.062027033 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.275989838 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.091469809 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.500486424 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.202863922 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.323780766 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.370726754 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.267482411 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.104749691 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.070684176 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.28731754 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.067843497 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.126815145 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.067003558 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.087347094 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.299253919 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.068826669 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.270442373 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.304658328 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.952103579 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.115864743 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.070259408 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.068308328 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.97694539 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.211964631 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.157243467 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.06743228 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.067856638 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.18366431 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.189476038 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.253490245 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.914100963 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.212429512 seconds)
  done (took 946.282550543 seconds)
done (took 1287.304473939 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.070226069 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.070434921 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.071024135 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.071242059 seconds)
  done (took 30.272979578 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.069042722 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.069322167 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.070285037 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.07099549 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.070441956 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.069430433 seconds)
  done (took 14.413601726 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.069264653 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.069303883 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.068676421 seconds)
  done (took 23.19841294 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.509338484 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.479564517 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.143339942 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.214112854 seconds)
  done (took 11.341286969 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.075876716 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.071136306 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.070189996 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.071493701 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.07323266 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.071779558 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.073252902 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.074590499 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.073029159 seconds)
  done (took 20.65995299 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.232088458 seconds)
done (took 106.109645174 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.474628009 seconds)
    (2/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.146455151 seconds)
    (3/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.080789355 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.103036688 seconds)
    (5/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.873515405 seconds)
    (6/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.841777146 seconds)
    (7/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.593218925 seconds)
    (8/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.692484967 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.206838205 seconds)
    (10/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.014501379 seconds)
    (11/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.314581106 seconds)
    (12/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.182085668 seconds)
    (13/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.185285264 seconds)
    (14/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.174404065 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.668237516 seconds)
    (16/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.099104402 seconds)
    (17/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.182626632 seconds)
    (18/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.080136715 seconds)
    (19/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.178172627 seconds)
    (20/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.084134181 seconds)
    (21/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.082016859 seconds)
    (22/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.411652265 seconds)
    (23/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.183640957 seconds)
    (24/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.069180897 seconds)
    (25/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.345230139 seconds)
    (26/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.065881446 seconds)
    (27/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.080374217 seconds)
    (28/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 3.68117094 seconds)
    (29/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.790037074 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.079646237 seconds)
    (31/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.065989685 seconds)
    (32/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.11502476 seconds)
    (33/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.227054988 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.076678574 seconds)
    (35/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.07710205 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.163749655 seconds)
    (37/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.871525379 seconds)
    (38/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.714471084 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.15973449 seconds)
    (40/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.308013514 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.295238797 seconds)
    (42/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.177325964 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.082457787 seconds)
    (44/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.333104647 seconds)
    (45/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.225154018 seconds)
    (46/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.510565665 seconds)
    (47/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.389342625 seconds)
    (48/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.20131675 seconds)
    (49/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.148591842 seconds)
    (50/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.966729947 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.492484729 seconds)
    (52/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.059534296 seconds)
    (53/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.558529708 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.608624408 seconds)
    (55/341) benchmarking ("sort", Int8, false)...
    done (took 5.03057306 seconds)
    (56/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.237897181 seconds)
    (57/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.70981357 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.332312566 seconds)
    (59/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.390624361 seconds)
    (60/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.44194648 seconds)
    (61/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.339240456 seconds)
    (62/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.378561424 seconds)
    (63/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.444441964 seconds)
    (64/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.144284125 seconds)
    (65/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.072015637 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.941713977 seconds)
    (67/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.075002234 seconds)
    (68/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.147983414 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.6541199 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.394078554 seconds)
    (71/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.271204583 seconds)
    (72/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.26349513 seconds)
    (73/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.47962858 seconds)
    (74/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.066106654 seconds)
    (75/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.346128008 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.078336593 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.055707766 seconds)
    (78/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.477213682 seconds)
    (79/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.071943282 seconds)
    (80/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.824860478 seconds)
    (81/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.460753034 seconds)
    (82/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.14645507 seconds)
    (83/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.276930652 seconds)
    (84/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.069990902 seconds)
    (85/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.060833619 seconds)
    (86/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.390731803 seconds)
    (87/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.070727429 seconds)
    (88/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.063233433 seconds)
    (89/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.129591119 seconds)
    (90/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.11037457 seconds)
    (91/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.055287318 seconds)
    (92/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.323718914 seconds)
    (93/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.133099117 seconds)
    (94/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.129806084 seconds)
    (95/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.15375055 seconds)
    (96/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.052850965 seconds)
    (97/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.531931188 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.106883009 seconds)
    (99/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.036066758 seconds)
    (100/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.058718147 seconds)
    (101/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.068150633 seconds)
    (102/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.23955496 seconds)
    (103/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.055334532 seconds)
    (104/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.179034652 seconds)
    (105/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.050995831 seconds)
    (106/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.725322913 seconds)
    (107/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.050855007 seconds)
    (108/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.337564678 seconds)
    (109/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.285565725 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.188234255 seconds)
    (111/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.236617443 seconds)
    (112/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.181493734 seconds)
    (113/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.826055633 seconds)
    (114/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.238390969 seconds)
    (115/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.361644711 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.0704528 seconds)
    (117/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.057305536 seconds)
    (118/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.360191818 seconds)
    (119/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.172633996 seconds)
    (120/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.278614313 seconds)
    (121/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.926878587 seconds)
    (122/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.446160861 seconds)
    (123/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.324866316 seconds)
    (124/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.273927575 seconds)
    (125/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.306411099 seconds)
    (126/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.86806048 seconds)
    (127/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.323850671 seconds)
    (128/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.178703047 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.04054533 seconds)
    (130/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.103549626 seconds)
    (131/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.41057118 seconds)
    (132/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.917153932 seconds)
    (133/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.047302725 seconds)
    (134/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.289266989 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.066761723 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.392797889 seconds)
    (137/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.310719062 seconds)
    (138/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.050315232 seconds)
    (139/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.810150996 seconds)
    (140/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.415093737 seconds)
    (141/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.346101452 seconds)
    (142/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.514889983 seconds)
    (143/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.355340509 seconds)
    (144/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.453247049 seconds)
    (145/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.242306523 seconds)
    (146/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.804292722 seconds)
    (147/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.034169022 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 4.063715047 seconds)
    (149/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.994181576 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.239085009 seconds)
    (151/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.273053312 seconds)
    (152/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.037588762 seconds)
    (153/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.495772603 seconds)
    (154/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.291619166 seconds)
    (155/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.158787255 seconds)
    (156/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.31734797 seconds)
    (157/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.258592372 seconds)
    (158/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.048556156 seconds)
    (159/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.371619215 seconds)
    (160/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.286434269 seconds)
    (161/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.332893765 seconds)
    (162/341) benchmarking ("sort", Bool, false)...
    done (took 2.25153248 seconds)
    (163/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.170603531 seconds)
    (164/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.081924769 seconds)
    (165/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.06950082 seconds)
    (166/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.127905644 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.938765776 seconds)
    (168/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.336643527 seconds)
    (169/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.050580035 seconds)
    (170/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.049187903 seconds)
    (171/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.524189562 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 5.649099827 seconds)
    (173/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.575081663 seconds)
    (174/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.163544025 seconds)
    (175/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.358658236 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.80406598 seconds)
    (177/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.126903817 seconds)
    (178/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.936873057 seconds)
    (179/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.253389283 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.171092838 seconds)
    (181/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.462399486 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.911201705 seconds)
    (183/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.479847337 seconds)
    (184/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.045377331 seconds)
    (185/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.371025091 seconds)
    (186/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.166532481 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.051579909 seconds)
    (188/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.251532161 seconds)
    (189/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.035688769 seconds)
    (190/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.053274122 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.181129139 seconds)
    (192/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.033948185 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.160950746 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.130618787 seconds)
    (195/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.404579636 seconds)
    (196/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.912697267 seconds)
    (197/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.256502331 seconds)
    (198/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.030900849 seconds)
    (199/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 4.883296866 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.155252501 seconds)
    (201/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.162464855 seconds)
    (202/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.342437886 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.032464326 seconds)
    (204/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.349341106 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.94045848 seconds)
    (206/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.432314471 seconds)
    (207/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.182309873 seconds)
    (208/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.506085362 seconds)
    (209/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.34581641 seconds)
    (210/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.145662105 seconds)
    (211/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.037642738 seconds)
    (212/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.068649503 seconds)
    (213/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.286003458 seconds)
    (214/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.152573485 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.810064435 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.065508361 seconds)
    (217/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.215893901 seconds)
    (218/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.44102008 seconds)
    (219/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.195931455 seconds)
    (220/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.227828195 seconds)
    (221/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.051337175 seconds)
    (222/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.178441031 seconds)
    (223/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.038990472 seconds)
    (224/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.095217671 seconds)
    (225/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.15857963 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.053236484 seconds)
    (227/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.096323007 seconds)
    (228/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.460038966 seconds)
    (229/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.340410616 seconds)
    (230/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.123224242 seconds)
    (231/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.167112935 seconds)
    (232/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.433941591 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.261754551 seconds)
    (234/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.190089411 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.399117416 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.059410949 seconds)
    (237/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.038713378 seconds)
    (238/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.791191003 seconds)
    (239/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.247170433 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.332477035 seconds)
    (241/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.038843888 seconds)
    (242/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.142007705 seconds)
    (243/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.757843779 seconds)
    (244/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.202813643 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 4.068023649 seconds)
    (246/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.258735175 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.040938699 seconds)
    (248/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 8.430377988 seconds)
    (249/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 3.806547518 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.131275984 seconds)
    (251/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.118037202 seconds)
    (252/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.454167001 seconds)
    (253/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.034373103 seconds)
    (254/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 9.60888351 seconds)
    (255/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.305050051 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.124786779 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.694714142 seconds)
    (258/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.136063137 seconds)
    (259/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.009143118 seconds)
    (260/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.434354882 seconds)
    (261/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.693684325 seconds)
    (262/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.116355712 seconds)
    (263/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.064575551 seconds)
    (264/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.853077242 seconds)
    (265/341) benchmarking ("sort", Float64, false)...
    done (took 5.749244656 seconds)
    (266/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.056257452 seconds)
    (267/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.042513055 seconds)
    (268/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.836418869 seconds)
    (269/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.202984011 seconds)
    (270/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.743909545 seconds)
    (271/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.141078674 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.153276287 seconds)
    (273/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.354376166 seconds)
    (274/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.351570536 seconds)
    (275/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.463876156 seconds)
    (276/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.331753283 seconds)
    (277/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.437984169 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.05593659 seconds)
    (279/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.348958231 seconds)
    (280/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.18526406 seconds)
    (281/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.039360015 seconds)
    (282/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.819679791 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.435730193 seconds)
    (284/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.954017887 seconds)
    (285/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.37871863 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.447773418 seconds)
    (287/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.110330157 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.039001087 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.042335275 seconds)
    (290/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.821346187 seconds)
    (291/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.309802879 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.165816116 seconds)
    (293/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.235855501 seconds)
    (294/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.189210063 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.657912412 seconds)
    (296/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.06133688 seconds)
    (297/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.040509763 seconds)
    (298/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.955650299 seconds)
    (299/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.152702056 seconds)
    (300/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.202029206 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.976712583 seconds)
    (302/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.148438905 seconds)
    (303/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.326864339 seconds)
    (304/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.122245889 seconds)
    (305/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.14505873 seconds)
    (306/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.165210408 seconds)
    (307/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.168096214 seconds)
    (308/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.241336948 seconds)
    (309/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.128251926 seconds)
    (310/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.146888619 seconds)
    (311/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.479667838 seconds)
    (312/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.339059667 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.184998323 seconds)
    (314/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.023479144 seconds)
    (315/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.067000726 seconds)
    (316/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.138246139 seconds)
    (317/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.052798631 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.16471773 seconds)
    (319/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.044398708 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.966578133 seconds)
    (321/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.328515196 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.140445568 seconds)
    (323/341) benchmarking ("sort", BigInt, false)...
    done (took 7.042325149 seconds)
    (324/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.950135018 seconds)
    (325/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.045384839 seconds)
    (326/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.080300613 seconds)
    (327/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.135293234 seconds)
    (328/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.35841557 seconds)
    (329/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.428039361 seconds)
    (330/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.237521671 seconds)
    (331/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.044462629 seconds)
    (332/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.982120287 seconds)
    (333/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.565488248 seconds)
    (334/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.05410433 seconds)
    (335/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.173884124 seconds)
    (336/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.263255125 seconds)
    (337/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.362339586 seconds)
    (338/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.04762083 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.341232984 seconds)
    (340/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.164249033 seconds)
    (341/341) benchmarking ("sort", Float32, false)...
    done (took 5.731100991 seconds)
  done (took 1152.961690344 seconds)
done (took 1155.047130358 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.07457582 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.048543395 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.55093276 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.055373084 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.04557034 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.04750257 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.562639294 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.074802081 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.065053097 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.563274858 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.053456678 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.046158801 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.061548919 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.082299814 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.058706308 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.061206166 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.051356032 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.07122412 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.083873949 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.05165559 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.098460419 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.051333144 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.04534222 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.097824626 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.047804004 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.063442866 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.066104688 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.098930702 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.096970416 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.050963937 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.051933668 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.40731444 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.098302966 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.051101568 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.059606702 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.063081249 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.055418549 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.062651866 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.066992209 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.063590501 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.050477494 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.058532975 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.052812736 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.052444465 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.047990378 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.0476781 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.049325031 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.176827136 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.062369199 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.393922006 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.106827851 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.065125715 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.098979342 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.05217103 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.04971001 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.052004829 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.097613544 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.055597522 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.05298727 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.393111355 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.140757763 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.065711006 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.393049612 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.111388812 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.058313708 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.05723026 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.046187782 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.066594461 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.409554765 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.604355618 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.076760067 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.070482827 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.049593354 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.05099727 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.063703963 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.565434566 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.060881258 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.631313551 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.07117305 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.065190057 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.057029526 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.050815194 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.051527227 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.068989743 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.069243338 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.049994714 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.055479452 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.056706528 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.06344183 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.410634249 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.093822204 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.555937879 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.054054909 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.070124836 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.072988369 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.63240649 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.072212899 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.066541441 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.055475385 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.410755057 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.089942673 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.070159257 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.051209664 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.06334565 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.166980726 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.069343134 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.068856796 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.050217603 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.073701484 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.056536156 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.051973024 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.064826781 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.072598966 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.087213729 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.068974937 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.049773281 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.059268658 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.058214263 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.067262888 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.059789499 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.056716123 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.063609102 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.05181718 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.102467352 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.069638306 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.066102877 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.167908923 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.05812659 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.178450544 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.068814011 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.057380933 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.050531014 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.395947508 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.097607956 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.074113899 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.058557625 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.074918457 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.0755669 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.070553084 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.054931945 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.067299221 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.056546101 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.071381463 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.054300782 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.077009326 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.103865293 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.061483546 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.051579707 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.071331315 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.090278898 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.075988941 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.057782909 seconds)
done (took 323.208460327 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.098175671 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.050473392 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.127522186 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.05229578 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.120348427 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.1045416 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.052991857 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.052677812 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.053063317 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.435069479 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.053026575 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.059011761 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.053864765 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.053685962 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.102009392 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.053824861 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.054455639 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.285224299 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.054179465 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.111511518 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.052920857 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.054240151 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.054567886 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.440203908 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.052815146 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.054051728 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.113617315 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.053861285 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.296144827 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.05309484 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.051894555 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.293946369 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.112700263 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.067838827 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.064494591 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.060085508 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.121929366 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.063713569 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.09906604 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.101648012 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.128513855 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.08998558 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.054831042 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.054637477 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.058865571 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.05691743 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.056032952 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.086477339 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.054170402 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.061585536 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.287474974 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.062868221 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.059425679 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.05684062 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.054559636 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.071082267 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.054281555 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.055837994 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.114516057 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.055665312 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.102007771 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.443219943 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.438210311 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.056099868 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.056499765 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.056782115 seconds)
  done (took 195.993464206 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.123830529 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.132003934 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.121463608 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.059912327 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.103936926 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.125246092 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.059469274 seconds)
  done (took 16.70311707 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.06155528 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.056195645 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.078966496 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.077957855 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.056856123 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.196058424 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.067754092 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.062271497 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.081825468 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.058294947 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.393144373 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.079553292 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.064119299 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.058403653 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.067892763 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.086224646 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.058045115 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.05752846 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.154839416 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.136619589 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.061993699 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.065016316 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.086739864 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.068076262 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.058225577 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.058802584 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.058020717 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.064909589 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.058985346 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.05781713 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.05827381 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.071973307 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.059110456 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.056067469 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.059302969 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.058312213 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.058627094 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.059145997 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.057845975 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.058683902 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.057971734 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.05914921 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.058105231 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.058320037 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.059376367 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.081426662 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.059897912 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.057857758 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.058089901 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.059088002 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.087153233 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.059607394 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.058666469 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.064640084 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.100007378 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.066670238 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.059257222 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.058745754 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.058987615 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.059966166 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.058688913 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.137158667 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.082617465 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.059969927 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.084702063 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.09708586 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.059759042 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.060515927 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.060012597 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.083432889 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.060296958 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.082245818 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.061287684 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.158831938 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.060253768 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.201567943 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.084847227 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.065250333 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.064687763 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.061129024 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.067281125 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.062668103 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.0614085 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.068127746 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.067058827 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.061886907 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.063528374 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.063748726 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.068194462 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.061702722 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.109445258 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.060321596 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.062516367 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.157580135 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.061911107 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.159132034 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.08710426 seconds)
  done (took 223.480511103 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.067389997 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.063592406 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.076264627 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.062706487 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.063182822 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.067505343 seconds)
  done (took 14.384048364 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.064035275 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.067121785 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.063207683 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.064210392 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.063070781 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.064182209 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.063918312 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.064918611 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.067132468 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.063739055 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.063831798 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.064304905 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.06385038 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.062428055 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.063647868 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.062878818 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.062802772 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.063571118 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.063260161 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.063442406 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.264669154 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.06397156 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.065718485 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.069147445 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.068748396 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.064028954 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.070952199 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.063912342 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.062726332 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.06977672 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.068100038 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.063818262 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.068883572 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.070666486 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.066712832 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.067010559 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.066333178 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.063968941 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.063768021 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.065217869 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.065155417 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.063954103 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.063952692 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.065135896 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.065160687 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.071814738 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.070378914 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.072059399 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.064999352 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.06605468 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.066036027 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.064130309 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.065643969 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.065710713 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.069634137 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.071183349 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.068586298 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.063773072 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.065052201 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.069896678 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.069478465 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.064268796 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.067357769 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.070418812 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.073817708 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.066044547 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.068689231 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.069492549 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.065141311 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.06582696 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.06737569 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.066406145 seconds)
  done (took 151.945863239 seconds)
done (took 604.479813898 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.132319634 seconds)
  done (took 9.118417363 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.103275254 seconds)
  done (took 9.184490385 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.529409585 seconds)
  done (took 12.518408277 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.101553034 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.077229686 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.082915329 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.062012633 seconds)
  done (took 30.323134403 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.264390849 seconds)
  done (took 9.25231324 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.079487785 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.060090678 seconds)
  done (took 16.192868499 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.102104251 seconds)
  done (took 9.089143545 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.504450047 seconds)
  done (took 9.524196651 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.087899983 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.084495417 seconds)
  done (took 16.180944064 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.069352238 seconds)
  done (took 9.056555502 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.877490313 seconds)
  done (took 9.953477073 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.074519539 seconds)
  done (took 9.080035552 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.148868172 seconds)
  done (took 9.137766767 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.024862234 seconds)
  done (took 10.013790102 seconds)
done (took 170.612991364 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.075071969 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.065922712 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.063550912 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.063204867 seconds)
  done (took 30.256376559 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.104394465 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.103626168 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.11131723 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.103469302 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.095614203 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.093851675 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.104626191 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.104184651 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.093979906 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.101649853 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.10306829 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.099870512 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.103236824 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.11206535 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.111102914 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.101349707 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.104779194 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.103047362 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.093208901 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.112508402 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.100874612 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.105267438 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.069931384 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.070034266 seconds)
  done (took 52.395661743 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.260503548 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.134388761 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.223051312 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.115426153 seconds)
  done (took 10.721556261 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.06970984 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.1344368 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.123063582 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.116643382 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.163981186 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.171897623 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.124817381 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.317965221 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.185575124 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.195561227 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.076692961 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.092345221 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.092610064 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.115019456 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.176431248 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.070499368 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.070985599 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.185544293 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.130832071 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.281366052 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.072083455 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.125056946 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.156812396 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.122812151 seconds)
  done (took 53.362252298 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.070975212 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.078583495 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.07819854 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.071364359 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.072896008 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.070103848 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.077589738 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.073130445 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.093219373 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.071710285 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.070722281 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.071379522 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.078880691 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.07302415 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.071259103 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.085252059 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.088053158 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.072600196 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.075440074 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.07900543 seconds)
  done (took 43.512864979 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.069749324 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.916432792 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.416950574 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.321236188 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.068838938 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.065785188 seconds)
  done (took 32.85033176 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.082335301 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.087434707 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.077175529 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.092912637 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.118443921 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.075677138 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.132501762 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.204361136 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.076081763 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.128972985 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.086750013 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.079340956 seconds)
  done (took 27.234398756 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.069306192 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.071104186 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.069925495 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.082855713 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.082679271 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.080203198 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.078192293 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.069521418 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.082077912 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.091466986 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.080649214 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.084318213 seconds)
  done (took 46.933093975 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.286036667 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.29740701 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.292435552 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.675116069 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.38657222 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.053166041 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.358071922 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.285811949 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.736752828 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.779867582 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363402254 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.05101448 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.015536717 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.995469231 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.966706086 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.316499065 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.071278903 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.936444184 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325508806 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118233586 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.072656745 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.073381246 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.081504725 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37795969 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.397794106 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.073127959 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.289207474 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091313281 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.072310363 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.328873679 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.547868295 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.126147949 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.273816052 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.330229851 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.411130973 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.205756162 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.072164844 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.244213871 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.113938995 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.110482884 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.084966835 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.084902684 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.614683443 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.086802207 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.347724864 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075692333 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.153261712 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.059279667 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.998146323 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.373918678 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176686223 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.080158408 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.109128295 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.508101059 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193039862 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.316274392 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.079572813 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.250284849 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1279989 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.323661128 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.257937085 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.074491034 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.290983279 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.998793865 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.40658968 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18681271 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.077901118 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.081463965 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.774220501 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.320197205 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.160217824 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.416580226 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.827556608 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.075212484 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077749272 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.130115165 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.17879473 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.073066781 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.389552408 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.072881811 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.99820277 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.174823598 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.577936985 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079700088 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.075268288 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.082621038 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.924619407 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.001361301 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.172989866 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.3215575 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.391733526 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.080066522 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.076728434 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.098755148 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080126837 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024714254 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.641700677 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.141609145 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.003244384 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.641810559 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.548850897 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.040524253 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.538543139 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.115120039 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364084953 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.237138338 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.483160422 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.288914275 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.322027309 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.614924192 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.081703644 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.696663237 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158259428 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154367175 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.079409976 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.670860288 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.255659545 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.358799856 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182762411 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.077753132 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.006525287 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.091792735 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281290851 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.552345209 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132128403 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.074181918 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.08501414 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.076136885 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.080586107 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.194969323 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095340018 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.368985898 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.148743148 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.080192853 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.017608538 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.079930109 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364583836 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.749654147 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.135254315 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.331289071 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.343475259 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.852371691 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.681252939 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.086707653 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.353249469 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.155801421 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.155258505 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.688819419 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.215310207 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.180478214 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060813272 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.214907695 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.091946444 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.084831958 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.493170325 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.602293574 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.513338434 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.127383518 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.084143734 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.036807922 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.256391153 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.322702096 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127296171 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.102899803 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.086601781 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.15741023 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.309112972 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.084476488 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.008219043 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.334510108 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.331541792 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.374820352 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.499796378 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.130830996 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.149852807 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.093504119 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.298186885 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.168898064 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.742288356 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.645515265 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.302813527 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.647642335 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.04602477 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.72107669 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.328794693 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.455304943 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.100311237 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.533696337 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.257488111 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.777582854 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.11165228 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.61347699 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.008855847 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089194667 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42142461 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.041939719 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.393771915 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.139744888 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.095100008 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.084704692 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.084115117 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090884477 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.981293046 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18975426 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152806819 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158278841 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.012024516 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.723554788 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.124137581 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.086969102 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.084708483 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.398528233 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.853849357 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.040688254 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.08362072 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.1609981 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.852849264 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.634556436 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.084876304 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.089527149 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.694091928 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.091814635 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.002079187 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.187828658 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.826074657 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.109466639 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.332732121 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.783675971 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.388281433 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.158433763 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159881748 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.086868575 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085662631 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.787748054 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.096496442 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.786248169 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.369336577 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.359970874 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.536234008 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.146189649 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.29619695 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.101806601 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.087348721 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.555512095 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.10755391 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088758082 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.291262034 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.604969548 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.401525044 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.718774852 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.175895819 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.088820581 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355186749 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.074710231 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.562245935 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.774048692 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.087711692 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.089662171 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.337376545 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.774019262 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.089304947 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.00641807 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094205244 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.302911544 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.290541906 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.363845718 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.386928613 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.539007396 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.018413638 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.094483646 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.148156743 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.332267241 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.089881602 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.126211644 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.600948096 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143371193 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.512599353 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.373370842 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.456920361 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.711906274 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.354737517 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.152642496 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.102289973 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.742317308 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.216075523 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.018319584 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.209395612 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.015780047 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.754043607 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.377562751 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.106336455 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.354193591 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069368746 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.423937877 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.385517928 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.345385879 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.128580872 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.11785459 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.092347244 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.138437116 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.090320019 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.283012978 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.204137564 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.095106545 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.622400733 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126705691 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138104697 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.097596058 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.584790064 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.10868972 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.09312205 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.859567655 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.112922033 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.209894219 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163865906 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.829288721 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.589711475 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.114807172 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.049315232 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.744077474 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.356482932 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.146181727 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.552340037 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131467293 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.49656913 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.089029651 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.306871863 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.096460514 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.68059132 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.132879247 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.366020032 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.052338989 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.303166421 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.296140628 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.121600447 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.096130423 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.019464996 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.202790813 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.989714827 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.07682151 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.096485404 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.784921021 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.484725334 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.2969423 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.516383861 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.908082524 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.094937018 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.428653931 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.481505979 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.719954746 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12221839 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096557781 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.390419675 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.217379794 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.371667114 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.375090648 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.105439245 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.122077987 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.310595685 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221545806 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.015091423 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.584653165 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.680785982 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.796405996 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.10458947 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.300617338 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.39601152 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.37551511 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125450495 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.166771851 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.501550415 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.356473582 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.163809398 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.019087295 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094891641 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.497973857 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.509062489 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.19242446 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.338922086 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.425183103 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.738445172 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.581345258 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.542888238 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.438441062 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.586071396 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.512890995 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311048318 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.469390665 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.424727923 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.982859345 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.511401623 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.308305297 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.196967285 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.376245231 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.968236973 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.803582002 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.343310388 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.10328811 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.024983934 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.305671017 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.108118872 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.600932026 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.72747182 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.347442467 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.346424475 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.600930183 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.638395158 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.283080618 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.116068909 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.064795128 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.119739562 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.117845683 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.096073523 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.588023075 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.384700607 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.10900405 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.038771259 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.764396278 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.021545694 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.310076203 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.281591803 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.130397496 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.665334845 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.32110048 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.186280953 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.391041392 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.329432294 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.128280967 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.023182561 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.826924188 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.040875153 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154634171 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.518916133 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109606425 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.098810961 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301162996 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.024069767 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143144892 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.103139908 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.299246546 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.693633804 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.364064104 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219946596 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345377749 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399698376 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.934865011 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.11529205 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.36944185 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.025906647 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.716868968 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.809028399 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.139653683 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165451282 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.097814732 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102044315 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368414389 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.391565921 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.180810044 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.681729434 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.129573793 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.121303688 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.405104868 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.178245019 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.102650541 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.105117109 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.589298603 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.329888053 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.099776006 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.075197293 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.313396396 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175041097 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.298269866 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.176847368 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.614924018 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.106934894 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.912110305 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18723407 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.040941807 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.095841491 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.790453864 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.160544251 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100773775 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.370705913 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.759903955 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.304015593 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.500928208 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.996556758 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.286880553 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14145172 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.102572108 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.234300999 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.398252723 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.398510202 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.10092286 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.372939871 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.142322478 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.106366719 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.771610271 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.068736485 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.102363142 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.763599362 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.996248341 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.835370664 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.498431185 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.107753231 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.101755737 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.106690265 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.028789671 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.104819649 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.281065888 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.076388913 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.222803715 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.36848151 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.375508795 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180002565 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.109068903 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.101635552 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.109450864 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.318004097 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.616687616 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118204701 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.804044597 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.306200109 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.111897638 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.597422093 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.544523398 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.36024779 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.139183857 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.285984433 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.344739685 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.754185753 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.300156024 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.073287924 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327351932 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.105487726 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.374144585 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37754912 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.105601946 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.318857924 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.584341615 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.386553746 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.467614599 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.41830491 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.163252678 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.30029253 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.000107637 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.104735039 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.111054687 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.370383931 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154352984 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.104737296 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.113310205 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.749837446 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.766224791 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.573210046 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260675224 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.3918298 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.843994199 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.848420011 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.106942497 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.031645334 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.102639676 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.126727775 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.108186259 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.031942272 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.842293577 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.822670532 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.320694811 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.413908664 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.033582902 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.309444045 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.714477453 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.027574977 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.077066143 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.106314285 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.360248877 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.03594988 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.108626085 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.065596715 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.347893669 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.810752842 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.372053436 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.104593186 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053167459 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.10875896 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.111166703 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.104849068 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.195118095 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.108013163 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.224651208 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.373538875 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.441073621 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.199616995 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.763501204 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.819330873 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.039003284 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146928747 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.728453323 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.677525027 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.364453503 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.22790536 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.818649873 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.047281179 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.114201296 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124403112 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.337095175 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.107363628 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111367806 seconds)
  done (took 2212.897715539 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.160790206 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.167798307 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.154826338 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.151178066 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.176504262 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.241465977 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.169260114 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.162502585 seconds)
  done (took 59.412579103 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.115192836 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.097367776 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.115035815 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.110619248 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.107221405 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.119716384 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.30582368 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.135746338 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.11110331 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.136706675 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.121547808 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.112966324 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.111045816 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.108306957 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.11304645 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.417785606 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.130452883 seconds)
  done (took 80.523601941 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.173606383 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.955875566 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.110154913 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.859336042 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.110342941 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.464899916 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.110275552 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.113323799 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.23507369 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.403905844 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.11045688 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.120123151 seconds)
  done (took 92.823948651 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.112463791 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.112649682 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.111263829 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.112188245 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.111570299 seconds)
  done (took 12.590799424 seconds)
done (took 2757.562893023 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.421115418 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.205276284 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.181320402 seconds)
  done (took 6.416127454 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.254959599 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.306373032 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.417149656 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.423658743 seconds)
  done (took 11.439056751 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.393460575 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.480024113 seconds)
  done (took 6.904470822 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.481042919 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.117274849 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.504099073 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.114634455 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.113881286 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.114500246 seconds)
  done (took 23.38021956 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.114624147 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.113938799 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.115442685 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.114805908 seconds)
  done (took 10.490678923 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.110419062 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.892588607 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.112954205 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.122690313 seconds)
  done (took 22.261543447 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.330803234 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.148634351 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.885888747 seconds)
  done (took 10.397662597 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.739845451 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.569024098 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.723627102 seconds)
  done (took 10.064594693 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.257382676 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.098942432 seconds)
  done (took 8.38881157 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.253081318 seconds)
  done (took 4.285706038 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.953224316 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.425197725 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.596980533 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.637797605 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.700244113 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.330593694 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.431840906 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.381868562 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.511126659 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.5178055 seconds)
  done (took 27.51878949 seconds)
done (took 158.103295849 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.536681436 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.132808435 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.322793486 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.491217747 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.349190869 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.322984585 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.41129907 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.480611964 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.160398234 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.145734863 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.488240764 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.345682924 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.361790955 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.131216956 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.364309263 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.132416227 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.347849872 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.55527776 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.163335631 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.40572678 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.418538172 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.133660066 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.332111857 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.145449419 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.3450607 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.273101608 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.718690312 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.13045379 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.315458912 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.729814002 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.347818224 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.56204478 seconds)
  done (took 177.136143321 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.106546744 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.113673349 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.113776768 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.113716851 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.371856623 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.114166308 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.111698377 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.114191974 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.42139625 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.408579382 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.114547146 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.363300465 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.113686755 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.114831611 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.113833885 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.113249129 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.539154796 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.113105324 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.113687428 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.11479986 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.112310796 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.235725003 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.115202472 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.269195974 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.5267918 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.114175511 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.114134306 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.113664551 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.114836871 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.114476741 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.114612571 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.11422269 seconds)
  done (took 215.900134454 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.11979659 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.116254245 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.116440443 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.115509483 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.11448391 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.117572732 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.116920185 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.115134587 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.982649723 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.974341962 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.115593034 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.115503346 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.116736959 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.115237072 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.119087543 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.11629362 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.115679103 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.116779258 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.116856187 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.122136076 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.112545635 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.773266959 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.117355497 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.816342742 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.112017672 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.116042787 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.116963388 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.117157926 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.116889621 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.116472809 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.119196679 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.117380891 seconds)
  done (took 228.848979735 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.36076012 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.12091018 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.123835141 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.132683053 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.122881899 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.122654107 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.125450424 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.374463264 seconds)
  done (took 21.522814043 seconds)
done (took 645.452761444 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.478118288 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.847063747 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.252922318 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.142600596 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.382469662 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.184256277 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.13906615 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.201854981 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.790182179 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.20750276 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.549219652 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.144985365 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.854305493 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.166630483 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.254963277 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.193820876 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.504389822 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.787947659 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.270465482 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.804685104 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.340378656 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.07050507 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.213410319 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.819647796 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.563585376 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.107597267 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.165582729 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.507213858 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.143691859 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.37110651 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.782990161 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.403401765 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.152472773 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.141041746 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.191767034 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.174968974 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.347044065 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.149150559 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.251639238 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.85848953 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.781009807 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.669634472 seconds)
  done (took 110.403353727 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.13032725 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.128379703 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.129356109 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.128180039 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.136932294 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.128246837 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.128062942 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.129067651 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.129503262 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.128203158 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.130027294 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.13650536 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.12868582 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.138106758 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.130786519 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.127523493 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.129960052 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.139253695 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.128757162 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.130282654 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.130361886 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.129436746 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.125900326 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.130893743 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.129932569 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.12943159 seconds)
  done (took 57.443014196 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.126029493 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.304968739 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.399390321 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.154766305 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.124873224 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.128710134 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.153549373 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.130674944 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.129510594 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.127788679 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.242203078 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.12792081 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.138719467 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.399357775 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.152209292 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.126473608 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.126049104 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.126672216 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.315704845 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.138911951 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.154894264 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.130730731 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.155970863 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.140122208 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.127291824 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.12739906 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.129331208 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.585707358 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.135396723 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.242077432 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.170877082 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.156010181 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.51489596 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.406671588 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.190548775 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.13077359 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.127519942 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.288787051 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.135077022 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.128140102 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.15624593 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.132891042 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.405493737 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.650705891 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.14102158 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.128029306 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.585217491 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.297194154 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.172524623 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.142415124 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.415934996 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.157384018 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.127987173 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.129788403 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.167863951 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.141331022 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.128860646 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.41256016 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.141258586 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.155519326 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.133756345 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.130255566 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.31263042 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.134056562 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.310792637 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.136181628 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.135689569 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.129870146 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.402169411 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.15682021 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.655042365 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.141498644 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.129351277 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.245099971 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.313513728 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.608213019 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.140893782 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.322221789 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.529890729 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.162443504 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.139039445 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.572795439 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.166907573 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.136971868 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.130540924 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.130914679 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.130127052 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.174348248 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.156183085 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.567411953 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.648627349 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.427141378 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.166908039 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.139980797 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.132617338 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.413802699 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.137865043 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.131206196 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.400873368 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.676018317 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.144108451 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.136952746 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.632217922 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.144029702 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.159887929 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.139636845 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.42078002 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.159317265 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.175367505 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.131978507 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.138279622 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.133337803 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.160365384 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.138950019 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.131574043 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.625843047 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.304712936 seconds)
  done (took 263.37766467 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.134569337 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.127746942 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.130505729 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.128548249 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.13014142 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.131458566 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.129741244 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.130774784 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.13185449 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.130385712 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.131463865 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.131347224 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.134309965 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.133578062 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.168233717 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.132328799 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.619291456 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.130307115 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.13222492 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.131369563 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.702487445 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.137005282 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.131988468 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.130828704 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.133231145 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.131908576 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.142239437 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.167500869 seconds)
  done (took 174.88414406 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.135891083 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.187633348 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.142746245 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.180420352 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.143177037 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.134726177 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.159252573 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.14807818 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.138713013 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.135624589 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.136447154 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.164186066 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.139195542 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.231092371 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.159826681 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.166584133 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.234291684 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.13600842 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.135217874 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.134607597 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.18046933 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.144721102 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.16435571 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.192876356 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.143210772 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.18922356 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.14515591 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.137109234 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.136445002 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.24675843 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.150649142 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.165981474 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.167295285 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.154115695 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.249877864 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.246209564 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.232531314 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.161435329 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.138141567 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.135440807 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.136082892 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.138178018 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.190057276 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.14617179 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.137069755 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.251094871 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.151317249 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.136098327 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.156541638 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.138023983 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.148149806 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.151442482 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.169898015 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.259317181 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.179352907 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.160750163 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.161381118 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.153562543 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.137008872 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.232052507 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.139068359 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.250453968 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.154358707 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.138724679 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.138682662 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.143846956 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.18362487 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.171434294 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.236072697 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.140878482 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.232365152 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.187208592 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.148052515 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.139125283 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.138335191 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.191595146 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.243804557 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.187672172 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.194178709 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.170080225 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.14310806 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.137805717 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.13901861 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.165324145 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.143416519 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.249784124 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.247957767 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.140380568 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.137958116 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.138905445 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.139415884 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.162562886 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.195510669 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.1750162 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.239996185 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.170383727 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.267835892 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.143713146 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.151032972 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.141237157 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.170917595 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.145286987 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.150392547 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.469577744 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.17558161 seconds)
  done (took 230.086283808 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.510078849 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.176620828 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.204963999 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.396091492 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.520959399 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.039650302 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.173923357 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.184504595 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.194878446 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.309828208 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.247646639 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.23019379 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.17323455 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.156332003 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.180015165 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.195671683 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.215337999 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.488431403 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.278003174 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.701690462 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.177276828 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.434177797 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.472706693 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.536227439 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.223535251 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.609506661 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.793826874 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.276643424 seconds)
  done (took 70.163042 seconds)
done (took 908.39733331 seconds)
SAVING RESULT...
DONE!
