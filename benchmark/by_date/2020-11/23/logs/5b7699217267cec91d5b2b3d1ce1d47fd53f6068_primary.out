cset: moving following pidspec: 17496
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.981033325 seconds)
loading group "shootout"... done (took 1.102357215 seconds)
loading group "string"... done (took 0.667109243 seconds)
loading group "linalg"... done (took 8.594664879 seconds)
loading group "parallel"... done (took 0.169533916 seconds)
loading group "find"... done (took 2.866968089 seconds)
loading group "tuple"... done (took 2.0638105 seconds)
loading group "union"... done (took 15.110899628 seconds)
loading group "dates"... done (took 1.476511679 seconds)
loading group "micro"... done (took 0.22085603 seconds)
loading group "simd"... done (took 4.796799817 seconds)
loading group "io"... done (took 1.078624586 seconds)
loading group "random"... done (took 9.540334474 seconds)
loading group "problem"... done (took 1.512798546 seconds)
loading group "array"... done (took 25.154050699 seconds)
loading group "misc"... done (took 1.890311878 seconds)
loading group "scalar"... done (took 43.219148361 seconds)
loading group "sort"... done (took 3.283250317 seconds)
loading group "sparse"... done (took 12.972179579 seconds)
loading group "collection"... done (took 18.505867784 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.532130339 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124079017 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129258974 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121614923 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.181086619 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122060267 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132785947 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085944593 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.847740851 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138902816 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116235877 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.436923163 seconds)
done (took 5.429254759 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.172777469 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.094538799 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083472458 seconds)
  done (took 1.408816095 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.073009993 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061408279 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067718056 seconds)
  done (took 1.436856777 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065671796 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136122023 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066901654 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067315109 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070739776 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067000288 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067149407 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.06657572 seconds)
  done (took 1.783137698 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072973531 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068077953 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066345203 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068134395 seconds)
  done (took 1.513828679 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066311215 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123320434 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065427943 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065857193 seconds)
  done (took 1.558105822 seconds)
done (took 9.195723809 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139997046 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.828789929 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.759906105 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.124469599 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248979505 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450356032 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124924615 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183762859 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089499399 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075438855 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122530456 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078487625 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.451579768 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.402021958 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071639146 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.177791368 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650302841 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087375383 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133217598 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.454840623 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074031485 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088205597 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085441185 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071977984 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.320332244 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152698927 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.66792795 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100413353 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069085469 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.09521212 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071289484 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078792464 seconds)
  done (took 10.804388177 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094302708 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091227057 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070118269 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.12453792 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094365215 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07044864 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076128021 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068801009 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088999844 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124391897 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090209556 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099750294 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066812654 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070083832 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.079692732 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197315706 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080594593 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082177585 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068244444 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081612522 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106034607 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078234533 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079248865 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078426881 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130340928 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169302075 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097433945 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099465754 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066969065 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079327347 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118490246 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128020548 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066952584 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065937048 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119976187 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095983172 seconds)
  done (took 4.691014085 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.895008896 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096204807 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083665225 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07517102 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106348672 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113728606 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122191982 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123058611 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100030411 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069930365 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152980511 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.645745569 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.15630582 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072228694 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120948201 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362504137 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.116238898 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.0753383 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070789501 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068004597 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070867681 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069971614 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112369073 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066998477 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175647426 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.582977826 seconds)
    (26/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065344306 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069814864 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070745127 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097237053 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.068817572 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141362915 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093140278 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070586426 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.556013953 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06643627 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064984813 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089405934 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093337424 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.178150685 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068556183 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079570893 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067429018 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109280621 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079858966 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.492513183 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070503066 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.565052347 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225236279 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073635226 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07230337 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102868801 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064848903 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068200393 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.934290904 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.121431229 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067149152 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272832679 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068109654 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068523703 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06937401 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099662509 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067598158 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069138351 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073804161 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096509703 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.875805216 seconds)
    (67/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.070722103 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086696627 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066851968 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097541647 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.402240049 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075643525 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069770111 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069791907 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083897161 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111458506 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067235115 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066948814 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.106937366 seconds)
    (80/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064839922 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089025613 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089694484 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070134635 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067751911 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066623137 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.335636064 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.178336076 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06727492 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067606239 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.482763497 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064791507 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06700399 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069032791 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.090090935 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067333665 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064389283 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065460698 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099595084 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067579494 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.449198106 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067681078 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.458294239 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069222505 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105837836 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.1199139 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068339375 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095241689 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068538469 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065188876 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074334094 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066176798 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064576819 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069688003 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066375966 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06647273 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069127443 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068655741 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067704847 seconds)
  done (took 22.840347313 seconds)
done (took 40.474693703 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.312340699 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079307555 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.0787926 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079378688 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079000467 seconds)
  done (took 1.915952363 seconds)
done (took 3.296074189 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132796479 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076000887 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064495649 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101656278 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069552 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102212126 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108677502 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104637009 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069426166 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068842789 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069037765 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102708765 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105341074 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068972878 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098431058 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104391626 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.06923301 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068093018 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069059218 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069273611 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069118979 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065061418 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069004566 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.0691141 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099480099 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.06998784 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064771554 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09967449 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069162287 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098674196 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069171099 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069112264 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.06945124 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099624975 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069222654 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099766312 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064685813 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069975051 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069572965 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069148627 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068891827 seconds)
  done (took 4.647377309 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071444229 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082451559 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08430716 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062504093 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072352887 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082322289 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062956841 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082109506 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088696927 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082701761 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082435203 seconds)
  done (took 2.189634938 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07050035 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083430241 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087514217 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062930939 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074050218 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083742344 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062470594 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082650015 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085871034 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084130935 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084182519 seconds)
  done (took 2.177395734 seconds)
done (took 10.322044278 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097479046 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06616378 seconds)
  done (took 1.460002568 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224138152 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.625705812 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.306962043 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093488108 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072890213 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086183622 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.204134442 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067797805 seconds)
  done (took 8.167119695 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.101673189 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.072973464 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067693207 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069397398 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068326937 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068632869 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068244022 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068968409 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070255664 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067961358 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069576936 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068035561 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068026742 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067935122 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069719126 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068557816 seconds)
  done (took 2.549420194 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103576123 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070059474 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09972037 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062618693 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072440544 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062722641 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071385058 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07349026 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.07025753 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07168193 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.07263462 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070891778 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071690002 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071577416 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073529709 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073214436 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.07318133 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071089428 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072899652 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073625174 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073182344 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073169422 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073872221 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071812305 seconds)
  done (took 3.205808936 seconds)
done (took 16.69477196 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175909849 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074823815 seconds)
  done (took 1.558934476 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069563662 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068966302 seconds)
  done (took 1.468157632 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073885089 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.06152477 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079134934 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070753962 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062138013 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061681261 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077177364 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062124389 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061897769 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061848995 seconds)
  done (took 1.995622759 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064334835 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068996228 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067635303 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065345019 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067304898 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063072489 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065615538 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062776028 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069429823 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063127983 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066631541 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084160191 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066465601 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084787865 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066053323 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066634802 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06824221 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066427198 seconds)
  done (took 2.552237915 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062368771 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062474779 seconds)
  done (took 1.45980816 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065498184 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062640261 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065245746 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064999917 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062470386 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061927359 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062607729 seconds)
  done (took 1.771428893 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422697921 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.12304529 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.340532021 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068946593 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07688398 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254977288 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064112581 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068806062 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.0690081 seconds)
  done (took 2.860556884 seconds)
done (took 15.001940866 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083687055 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182076945 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.0877257 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405972023 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091573352 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06743384 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113343101 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.17742521 seconds)
done (took 2.561611533 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.224721121 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.242684102 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.391631544 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12407345 seconds)
  done (took 3.092642452 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337226724 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078491898 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07715194 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067290891 seconds)
  done (took 1.906094412 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066092381 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07177419 seconds)
  done (took 1.479934525 seconds)
done (took 8.05389587 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073563442 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.092244311 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062261869 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.067088819 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.06421432 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06444334 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065536767 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.074375023 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064309118 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061882035 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064494516 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064217494 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064807417 seconds)
    (14/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.069611831 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064334521 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064573064 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064686843 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064546067 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064309648 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062006502 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064297481 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064501677 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063388679 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064898635 seconds)
  done (took 2.962648585 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080629733 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066518684 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066803595 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067559633 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067692456 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067029048 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067470909 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066115403 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067472922 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065406183 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067252621 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.0674193 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065436438 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067706233 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065526737 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067369492 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06708808 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066092163 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065984284 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067994855 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066923594 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065936463 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067548082 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067276945 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067777218 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067337776 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.0658397 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066587649 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067250417 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068042973 seconds)
  done (took 3.379836944 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067730582 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.06073425 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061236519 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070225589 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060607072 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061172391 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061038274 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060138777 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060668749 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061907383 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061118496 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060145251 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061343424 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060425538 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060460387 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060928169 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064832507 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079215427 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060816092 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060231031 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065223615 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060843543 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060544717 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060896689 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061388863 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060618811 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060019214 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.061228794 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061197261 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061060983 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.06025926 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064619122 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065457975 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060222407 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071036693 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065609535 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060242519 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064854369 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061179789 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060447164 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060097999 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060013092 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060410223 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060184542 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070619094 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060659346 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061750604 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.06143783 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060720194 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060378442 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060708233 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062332387 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069361606 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062346266 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06051305 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061467574 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060443301 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061051714 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060386938 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060759154 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060396571 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063994556 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061747629 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060974621 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080319426 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062226025 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070601334 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060685846 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061350073 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064200731 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060934045 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07825724 seconds)
  done (took 5.878166438 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.073665349 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072551591 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079139792 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070503637 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065189209 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061460137 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065327091 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061753041 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071272447 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066040731 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061732649 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064984237 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070769273 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065495666 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063498094 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070546867 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065523163 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064824514 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061617451 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065638416 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062624363 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064798537 seconds)
  done (took 2.840377182 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137033196 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066610761 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105550477 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074748023 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069316469 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074617291 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066383709 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066561163 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06625478 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067039289 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067429711 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066629446 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068952268 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067125629 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067224045 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066657853 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066693239 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066534619 seconds)
  done (took 2.691172185 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07794955 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065944483 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089194603 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066418898 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066051955 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066000912 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06967673 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070088372 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065892401 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066353293 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070144219 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066005537 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065812254 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066296964 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065965277 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066128057 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065737336 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066188579 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070884228 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069780308 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069847217 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.0702099 seconds)
  done (took 2.879718926 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078731718 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065638034 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080611931 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067200371 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060764874 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061228849 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065949581 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065531218 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066148371 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065004199 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065720352 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060985455 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066730809 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065404067 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067000776 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065677966 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065135142 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066040936 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064955371 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060822997 seconds)
  done (took 2.690479792 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087701813 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063274336 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063475277 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082439323 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063403978 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063623091 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.083031964 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063625521 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063439151 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085206697 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063511967 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06320987 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082530149 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082170972 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063492959 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083019297 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082247177 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082504063 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063424833 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063780135 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085766022 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063349667 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.08255701 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064118654 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063982988 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06343306 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06335239 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082897507 seconds)
  done (took 3.383577844 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065670473 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064157627 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064455303 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063679239 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064011102 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064788918 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064766899 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064592686 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064254857 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064453738 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064433179 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064423235 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066970928 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063926504 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064023232 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064161306 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063996244 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06509744 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064714103 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064538867 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064008017 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064135276 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063676002 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064877422 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064730778 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063964735 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064439405 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064491795 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063771937 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06430307 seconds)
  done (took 3.302956776 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074702568 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071689518 seconds)
  done (took 1.51631334 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06432497 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079006534 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060968734 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072744159 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069280936 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064206813 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069961265 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069083699 seconds)
  done (took 1.912870588 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.069117374 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091020375 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063262464 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062598902 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065923441 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131926999 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07478336 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07454552 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0764006 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064829037 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062973377 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074417417 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062711458 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075404276 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064407158 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071549136 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06972264 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079893894 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075126335 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061170474 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074520925 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063712503 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060892965 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063488672 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06205335 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069042857 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077598228 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074670461 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070902115 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060571868 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081036751 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061317176 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062272114 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070792655 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065522496 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061201183 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098077118 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061831167 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066581992 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060764081 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073820773 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082683582 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075500299 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079075243 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063400783 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062806377 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061002417 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063396113 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065231983 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070802757 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061429968 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068552477 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06062502 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062744839 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07212242 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061980978 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066750191 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070328759 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074951148 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072089737 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070494164 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076762127 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070983837 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069285443 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062134215 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081519858 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062907518 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074352546 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076172785 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062633451 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074375203 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061300658 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060315188 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061254686 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094542606 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062825526 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062411817 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061177458 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06123415 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063106022 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071073505 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066708308 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068751038 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065402236 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077499815 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070729111 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061946211 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067968102 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079246409 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064984261 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061402414 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077640844 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064282376 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060291676 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078888613 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071202419 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062706186 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062065263 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064682584 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074548512 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.0622844 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059594246 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069462891 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063017136 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.06302663 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065159149 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068618777 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060899571 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071104419 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065346936 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062420309 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059594288 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065373727 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062021259 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059660917 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070288697 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061109811 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075514236 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067584548 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075941622 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075527785 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071157602 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076181375 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060365794 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058970159 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077651469 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069773683 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.200565928 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.08103521 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062342943 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.07361726 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064631146 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063357127 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071528914 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06097497 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063191183 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061414467 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066503392 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063113846 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064009254 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067182557 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070280734 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073407093 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06289058 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070959318 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062233271 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077569524 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072312373 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066280924 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065180304 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062964301 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074090049 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06917408 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070851853 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061144952 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062126923 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06139476 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072136408 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071321618 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06319194 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069011452 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066035509 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062716039 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061611559 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062828306 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065039412 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065040885 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062776278 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069236328 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070612359 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076135926 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069436782 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070684397 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060513559 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061107923 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063192729 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061644358 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066162812 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071328265 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077421617 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074036593 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082345104 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.062031221 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07145764 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063568591 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077938684 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074811174 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062425126 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066204588 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060486893 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063071546 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071213309 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072927722 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075065015 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076119963 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066422381 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066081665 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061330357 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07636892 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061922199 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069735917 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071061735 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066423066 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061711713 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062956949 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.07071577 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06588659 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061211515 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076781747 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067594881 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060946916 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.07607047 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061902879 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071955127 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061685453 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064823644 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066315178 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063605124 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070711995 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076642597 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060108827 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062156678 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077104136 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06361417 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0627828 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069510651 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076991584 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06573282 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069258827 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071984613 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071292372 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.0658135 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071126488 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062419373 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070284134 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064376659 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072464122 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061127671 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078983788 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060036973 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076163945 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061583791 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071378005 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062004408 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070172903 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06191211 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077715946 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062266342 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06127001 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072340038 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059720219 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070005504 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060798844 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065731278 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067257097 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069986272 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062341194 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070212721 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.203273815 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071730922 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067037715 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070473244 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071588017 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066494575 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061441049 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07106161 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072772077 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070151171 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063325053 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063498329 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06231721 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.07126353 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063702705 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06341911 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069979313 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066632037 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067264826 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062901269 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063518516 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063366315 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071011158 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071451153 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079594523 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070418533 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069747307 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071734816 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061118415 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077106637 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.0616834 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.07186476 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06057997 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067557662 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.07039221 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062059987 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08113153 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062982826 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06972801 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074211165 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070135702 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065333117 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081526877 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064983433 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069859127 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069515931 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066326389 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06797343 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064446146 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070443655 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071212942 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072273763 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062711067 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069099535 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070740672 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06294599 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069339405 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063462394 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069832444 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063436034 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060399617 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066184673 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072645486 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06589325 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066733511 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062051201 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060532089 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061695936 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068243952 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066237221 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070497475 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07741338 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060585209 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062737466 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061061227 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065196197 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079273096 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071565439 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069921529 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066637272 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060993261 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063359317 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063289559 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061652754 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064593677 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060399817 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061244423 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07242834 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063465342 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065669009 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061688106 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062803903 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071436524 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066456815 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061954443 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068131973 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061706821 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066315858 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060750059 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062834801 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065975736 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060989224 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064791692 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072007455 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077532101 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067951297 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070667448 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062453872 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069146119 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076506997 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068758915 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063126541 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070648911 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060826162 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080072411 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071103871 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06940658 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070736294 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062009924 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077120665 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065535632 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070925902 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076887379 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062526583 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067229114 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060335961 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076600513 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065500241 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060643983 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068509446 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068557821 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066580335 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072051595 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.207567277 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070665402 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068508403 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065907053 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064130373 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063333057 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070812966 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07776098 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062809213 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066715161 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070091993 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070349544 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066169883 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07413147 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069944658 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062878519 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063343819 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06525632 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062753585 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073963625 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062252839 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066602534 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066265326 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061289704 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06867819 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078226293 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071655583 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071373284 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061356426 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.06085877 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079475046 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064911592 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065457127 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069896195 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.07180783 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073928919 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071324981 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078872686 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063201982 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06721324 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074254431 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063266832 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06186995 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06575596 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063189535 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071078053 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072160801 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069191881 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063764109 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068132867 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075320868 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062968189 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066011512 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066846438 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062204033 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071949637 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069603217 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073351203 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063124819 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061053005 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065441644 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.07067727 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069633055 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070895287 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062795704 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068592927 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07555744 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069781053 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065214791 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061510158 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064895944 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070557858 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066417391 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061430261 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066520667 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065247522 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068886439 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071290179 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066231719 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061518189 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078831521 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069488192 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070531502 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063407442 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063563817 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062138783 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061553174 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073019697 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061834166 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063295102 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066206703 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063440206 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079122154 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069780807 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077249102 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06273531 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065742798 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061613727 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071334522 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066043825 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061923014 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071889883 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060602718 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076856068 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073277466 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066682511 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060817055 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.086736351 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069368059 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07640036 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071504356 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070261452 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064542967 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070903194 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063586797 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072214013 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060979727 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060405851 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071172603 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069609302 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073426573 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061085168 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071208979 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062833837 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.06905507 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068925908 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062896496 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062769684 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062435291 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069689898 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064516213 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.06946217 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.208822846 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080100722 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064342358 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073550721 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071011421 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073031759 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075976346 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07392949 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069839921 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062589745 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069377271 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069623214 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063419143 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066615453 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065461158 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083352769 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063651496 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063528112 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076116248 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068155845 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062755317 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068558385 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06648299 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072014812 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063087146 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072596474 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065918962 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062301051 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066377405 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066335292 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061084014 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061653671 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061536189 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071616419 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066136127 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062146757 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080453474 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063413875 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070959356 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073183221 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068279975 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06300756 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060561891 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063592547 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075197547 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077174901 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065265037 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070218943 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063787517 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071080968 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060275155 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070336151 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069799611 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070428481 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.06109056 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0619635 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076692489 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077333349 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066118046 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071134182 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070822527 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063193264 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083353925 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070860391 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06267728 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072922749 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064095563 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.06087917 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060533087 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063150436 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07308714 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061333161 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064403347 seconds)
  done (took 42.42991351 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100440488 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062201995 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061150906 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061702952 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072688866 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062295769 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061381863 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06235394 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062818483 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064192511 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061880146 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064634457 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072761401 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074367678 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071910949 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065260505 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061242752 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062706807 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061531203 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062322517 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071610244 seconds)
  done (took 2.881092687 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066392166 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065704831 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065948613 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065881654 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064743422 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061257607 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065558846 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061910795 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066088726 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062105421 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065828518 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061581605 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062281391 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061682682 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062258742 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063403421 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066499531 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065036828 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061874422 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06511177 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063340874 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065836934 seconds)
  done (took 2.865845924 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063132616 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062201476 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070209044 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060658993 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061215571 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065248004 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060975407 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.0655438 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066012708 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065791385 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.0700357 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062197619 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.06086883 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066973243 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061253502 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062490569 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103731368 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062301875 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062529057 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06109026 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063901931 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070330979 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060924568 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061345518 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065320827 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064718671 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060643844 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063503185 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062015979 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065405752 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062438248 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060507985 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069969889 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069327583 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065318184 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065829628 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.06262165 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061818559 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061108241 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061144735 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.06943061 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062667412 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062095785 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062452028 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070741753 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060753596 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060793765 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070325549 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060936084 seconds)
  done (took 4.631173162 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073045391 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113530238 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067147577 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095107821 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073842158 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066993856 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067104145 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095467193 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062216204 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063435381 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074755192 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075139211 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064551412 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065734031 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068225856 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064173923 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064947801 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063165756 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066667204 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063754668 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066559014 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068026428 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073415927 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074245943 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065107946 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063294215 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063481195 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064932419 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074377448 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067024278 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065662073 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065855358 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074548095 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.06886951 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063912753 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063692235 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075171736 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064139998 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063630991 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.0622352 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063842838 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065354379 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06810995 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075388378 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064334122 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069061236 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064133445 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062807423 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.07457181 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064164373 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068117387 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075399429 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064687314 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.0649 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065323258 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074366378 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064849135 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062718476 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064045314 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074147391 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062341377 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064761877 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077554202 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063492799 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067345674 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075276048 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068614581 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064968438 seconds)
  done (took 6.292402822 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072072447 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.095956844 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072710842 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072203336 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071968136 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071731932 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071701243 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071731962 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071978276 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07243676 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071803149 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11179044 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068800097 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076418284 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071665762 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071817717 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071795073 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071793862 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071842635 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071462362 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07210428 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072641667 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071808529 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.0721229 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07438872 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067918078 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071609669 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07183897 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072119999 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071661178 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074032743 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071917734 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071992841 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072465875 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074094291 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.072050075 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062073803 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071732157 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072076273 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071326163 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068781665 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071959228 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071794094 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068149206 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072221725 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071652498 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072126525 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.075008437 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078570628 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072410324 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072104969 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072557187 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071855469 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072081039 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072034442 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078679606 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072353171 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072084969 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071685485 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072161839 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07249002 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078501029 seconds)
  done (took 6.033601827 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07623288 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068101742 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080209169 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061522366 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061062917 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070394241 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060953419 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061351311 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068256374 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068178814 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069661412 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070668461 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072801614 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069638971 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070326192 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072836657 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070119279 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070371419 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06780492 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070618316 seconds)
  done (took 2.871962562 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077698778 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080426878 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.06664673 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070318723 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06699097 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070902934 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066824997 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067265223 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067441037 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067558496 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07161338 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.07154216 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067393761 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.071036813 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071479551 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071028515 seconds)
  done (took 2.604326165 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066148588 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069244532 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068299828 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062336618 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064223033 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061942269 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063676607 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060893999 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064081675 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07538062 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062296456 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064979975 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062494172 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061724963 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061707103 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065015821 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063705441 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.0622971 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062616801 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066207096 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07041954 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063057586 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067556331 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.0625174 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064307414 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070943924 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063540798 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064331088 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062614095 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064998707 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064541449 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.06924108 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064924838 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063095305 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062169073 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062925781 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063052555 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065297417 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064708516 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062879633 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061199238 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06857112 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062600412 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063228632 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063842311 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065075245 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064038679 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06803144 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062627712 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064851121 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062764025 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064111289 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063068476 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069108953 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065043177 seconds)
  done (took 5.033489964 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079347522 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.0666223 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061420579 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061231541 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066302077 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067064813 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066816983 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066928822 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067176008 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061768991 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067042126 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066222785 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06771654 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067249792 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067173492 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066701635 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061240391 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067251319 seconds)
  done (took 2.689713748 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.06847663 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067209724 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066364644 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063717153 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063419367 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067747145 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061519904 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062896224 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063260699 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063477575 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063130695 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062995137 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062721238 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06276382 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067040324 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063252561 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062518545 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061612583 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063285972 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061388907 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068230946 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061723086 seconds)
  done (took 2.895332243 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089340176 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084266346 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128023192 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080436171 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08907578 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072215976 seconds)
  done (took 2.031283468 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095242465 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.103990692 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066050356 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065981803 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074739619 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069270042 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069475556 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069553463 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074720352 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07331609 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069602806 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075663937 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074948507 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071565876 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074770804 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077240237 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069512606 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069593679 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066687028 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077388513 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069532054 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074784872 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070093997 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069480944 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069788333 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070947729 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077244232 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073241633 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069123392 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074813015 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077998199 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070314099 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075201585 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073525848 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066510124 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075199243 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069725179 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078040624 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074935392 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07113654 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066903669 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075489015 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075110509 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071426926 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077877536 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070518631 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07147434 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070440779 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070227794 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07975223 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075251237 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071431887 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075360197 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077709549 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077535073 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079838519 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073446485 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071557219 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075246638 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073259528 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071449919 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075330264 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071458335 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074124651 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078151663 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071459088 seconds)
  done (took 6.353016986 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101320672 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067163416 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070030719 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073907612 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071259963 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069665403 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07037419 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069878762 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070129133 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067415019 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105078733 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07028438 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071698005 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074772555 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070400568 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069854196 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069710248 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071733514 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067386411 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079934252 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070152646 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071723745 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071898234 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071473809 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073743961 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077174903 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069606936 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069821881 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06956485 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069630829 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071505723 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07002931 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071495344 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06686469 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071709992 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06984224 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069424891 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071322325 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069710892 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075269469 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071728716 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077693738 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069702671 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069663952 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073738167 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069900648 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069995398 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067537759 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070054562 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067242896 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073734046 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073982126 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073706519 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071656456 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069984175 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070416057 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069884022 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07013127 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070729512 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078117459 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071628642 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070041539 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079956638 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069732621 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070107199 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071351255 seconds)
  done (took 6.277752142 seconds)
done (took 130.673458538 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219835695 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190665079 seconds)
  done (took 1.882754997 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.077187689 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166688858 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07580303 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07577632 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109406804 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108850994 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.077023431 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072805105 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.07568003 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072768823 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140268621 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076900677 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072863916 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072879016 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072788873 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073484134 seconds)
  done (took 2.922430426 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109749404 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186486646 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.083126852 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071459945 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115406692 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077415702 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07271188 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07571613 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077791684 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071056455 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.10810899 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082484221 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074383174 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077220521 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073401096 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074542401 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075716809 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077518863 seconds)
  done (took 3.091621867 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099748026 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086652089 seconds)
  done (took 1.696992434 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.157353476 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105974259 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145465015 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.331415166 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130356428 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127273895 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.131252459 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.127852807 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114488915 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12220729 seconds)
  done (took 2.9945064 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.108272242 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105751312 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309849525 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102865386 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082745423 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077375818 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075477428 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080184306 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075921591 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.07724936 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121939724 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075826806 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072669084 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123927897 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099179812 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106984612 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.07205773 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079226938 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080756368 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071656998 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076666528 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080258868 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178817152 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078403031 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10008604 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075478986 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077810989 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074921735 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075135289 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07865074 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079252316 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100267297 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079144916 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082902706 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077198071 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097284471 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072166454 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099511415 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074873471 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073416184 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075718683 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079249707 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072732436 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078646697 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075566668 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077835734 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08064134 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071575497 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075622019 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074734952 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072811297 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077091448 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07736298 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077827928 seconds)
  done (took 6.321572895 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110512704 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109454734 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070563055 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115027628 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106186251 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070627593 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105358369 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101063045 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109429189 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070063517 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069665885 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069878399 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077320724 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.08012549 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116746176 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108363759 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072184859 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070528673 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107833216 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107578719 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069014897 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102262065 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100552329 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107079729 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069435902 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070837284 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068934891 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069562185 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075129974 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075839606 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069391336 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075871626 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08140447 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075951748 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068879271 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069225559 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068968523 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076143613 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076927667 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076841008 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075129965 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069001027 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.0691704 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070047278 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070093254 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068886394 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075261931 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076199139 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074799232 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06931352 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069569137 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069058182 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069663787 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075566237 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074457452 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076452869 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076553515 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06917665 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06924804 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071257393 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077391454 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077900629 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076305251 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07039879 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077213192 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069155336 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078304663 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081779803 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069065622 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069651164 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069427298 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06970726 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070049106 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075430836 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075676907 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070114281 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069207906 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068895355 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077140017 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075363537 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069304839 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074686914 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068500679 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069266979 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069756236 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070078143 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074837181 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076397841 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069755679 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068655703 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069352304 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06984667 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.0683178 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074574103 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075573447 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075701347 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075217653 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069470492 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075228876 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074894746 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06930215 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074841174 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068908575 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069574483 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069243373 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075099548 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073843173 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07587928 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06816454 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068015494 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073839422 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.215076792 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071117261 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07637381 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07876353 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076492124 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069753055 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079225223 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069980814 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077836046 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069626945 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078426848 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069786411 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075770922 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070183628 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069496564 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070210877 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076012002 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069775865 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069408893 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069850598 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070349952 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075975934 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078821748 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070038371 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07629428 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076015234 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070197474 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076212787 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070084002 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076635519 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070577095 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06994353 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069312656 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078662129 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.0697159 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.07021605 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069631338 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077254866 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069508567 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077746695 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075177021 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068957585 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079490498 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077936072 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075524934 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078509826 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071089982 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069789492 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069638581 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072172843 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075528942 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076131111 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06981465 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069750702 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075114695 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077777012 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068948498 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.0757115 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07544396 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075353503 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069430325 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069260783 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078537789 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077494041 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.307706975 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074962446 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075841194 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069260692 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075255038 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07563999 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06944081 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081549552 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069920381 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.078729089 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075720158 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074516841 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075947099 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077374709 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077952259 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07739894 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080003364 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068967507 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069114955 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075763439 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06958812 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069896352 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07565825 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069750851 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069499823 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080585634 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069619927 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07760998 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069216282 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075728759 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068610933 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069971721 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080267984 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069085454 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069389883 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074921687 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069570448 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074465169 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078002819 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074671037 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06907317 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069261575 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075137667 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076084349 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068989921 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069042043 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068697981 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073411481 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073073185 seconds)
  done (took 18.739319485 seconds)
done (took 39.166090416 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172020926 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116293551 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.208565573 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199565418 seconds)
  done (took 2.314588679 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102359105 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065778543 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081827993 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091029939 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066141783 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.077047624 seconds)
  done (took 2.034184224 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201845362 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174665512 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240057113 seconds)
  done (took 2.160220372 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367301726 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149503053 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216849618 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.506506502 seconds)
  done (took 2.889666776 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110399074 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101363053 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078332096 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111631118 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085738724 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063407664 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134520641 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070945001 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100242051 seconds)
  done (took 2.46848599 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130691422 seconds)
done (took 13.582864439 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.21860347 seconds)
    (2/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.102609765 seconds)
    (3/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.079582623 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.237068462 seconds)
    (5/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.18948713 seconds)
    (6/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081729927 seconds)
    (7/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.229936736 seconds)
    (8/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066462788 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.12336082 seconds)
    (10/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079741161 seconds)
    (11/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.2184063 seconds)
    (12/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.075321959 seconds)
    (13/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070761595 seconds)
    (14/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075228472 seconds)
    (15/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077362086 seconds)
    (16/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.074070791 seconds)
    (17/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075823027 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076840859 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.184485935 seconds)
    (20/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.078696573 seconds)
    (21/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.241442797 seconds)
    (22/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.222345267 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.079104635 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.07887661 seconds)
    (25/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.260303411 seconds)
    (26/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.077106331 seconds)
    (27/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.088798245 seconds)
    (28/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.197748264 seconds)
    (29/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.204490555 seconds)
    (30/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066024551 seconds)
    (31/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.144142456 seconds)
    (32/341) benchmarking ("sort", Float64, false)...
    done (took 0.138242589 seconds)
    (33/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.192656354 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075768813 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.175714702 seconds)
    (36/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075357692 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.092634431 seconds)
    (38/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.076316282 seconds)
    (39/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.143899677 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073548406 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077473495 seconds)
    (42/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.173597271 seconds)
    (43/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.222871338 seconds)
    (44/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074791414 seconds)
    (45/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.070074084 seconds)
    (46/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.074952544 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.128234042 seconds)
    (48/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.143290315 seconds)
    (49/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.17120773 seconds)
    (50/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149966679 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086098327 seconds)
    (52/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078326049 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.088554451 seconds)
    (54/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.189035264 seconds)
    (55/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.245127574 seconds)
    (56/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173038219 seconds)
    (57/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.139626505 seconds)
    (58/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066745766 seconds)
    (59/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.083625612 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083219649 seconds)
    (61/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.162366253 seconds)
    (62/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.185095302 seconds)
    (63/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071173 seconds)
    (64/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074843694 seconds)
    (65/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075851096 seconds)
    (66/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075050238 seconds)
    (67/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.208950997 seconds)
    (68/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.066753711 seconds)
    (69/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266202788 seconds)
    (70/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.06637402 seconds)
    (71/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.141898968 seconds)
    (72/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.188917624 seconds)
    (73/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.113806412 seconds)
    (74/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.167409789 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067078219 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073229294 seconds)
    (77/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.178102454 seconds)
    (78/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073050657 seconds)
    (79/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.309145554 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077184506 seconds)
    (81/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.204996659 seconds)
    (82/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.167515424 seconds)
    (83/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07511986 seconds)
    (84/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.06768929 seconds)
    (85/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076265293 seconds)
    (86/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.076479352 seconds)
    (87/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.139298636 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.07236627 seconds)
    (89/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.074244601 seconds)
    (90/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.085789245 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.088968977 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.118391933 seconds)
    (93/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070863731 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.0923638 seconds)
    (95/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.198397535 seconds)
    (96/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070676445 seconds)
    (97/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.0704299 seconds)
    (98/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.201302086 seconds)
    (99/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.145429894 seconds)
    (100/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.168575784 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067322969 seconds)
    (102/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.06715931 seconds)
    (103/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.164329531 seconds)
    (104/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066456532 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066736815 seconds)
    (106/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.15898345 seconds)
    (107/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.067615309 seconds)
    (108/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074877342 seconds)
    (109/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.096035595 seconds)
    (110/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.202401126 seconds)
    (111/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069611401 seconds)
    (112/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181476725 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067684699 seconds)
    (114/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.093735877 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085563951 seconds)
    (116/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.240786799 seconds)
    (117/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077335396 seconds)
    (118/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.182239961 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.147507669 seconds)
    (120/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065668244 seconds)
    (121/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.067473286 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134388209 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.094405482 seconds)
    (124/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077635441 seconds)
    (125/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.069042804 seconds)
    (126/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06668969 seconds)
    (127/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070133708 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124943939 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076678814 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069745244 seconds)
    (131/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.1937675 seconds)
    (132/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089646847 seconds)
    (133/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066416263 seconds)
    (134/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078175481 seconds)
    (135/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074595605 seconds)
    (136/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.165283311 seconds)
    (137/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.085793771 seconds)
    (138/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068673951 seconds)
    (139/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074139149 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075838044 seconds)
    (141/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.142297436 seconds)
    (142/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07426544 seconds)
    (143/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068879859 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088496066 seconds)
    (145/341) benchmarking ("sort", Float32, false)...
    done (took 0.138760555 seconds)
    (146/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068533118 seconds)
    (147/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177142762 seconds)
    (148/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066840085 seconds)
    (149/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066525803 seconds)
    (150/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.076168221 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074096789 seconds)
    (152/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.18954894 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07642947 seconds)
    (154/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.154969466 seconds)
    (155/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066023607 seconds)
    (156/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078038984 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095472843 seconds)
    (158/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.1010214 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076597292 seconds)
    (160/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143649261 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 0.142293889 seconds)
    (162/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073927012 seconds)
    (163/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.143447247 seconds)
    (164/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068672228 seconds)
    (165/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067138528 seconds)
    (166/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068911434 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.086158502 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.140205245 seconds)
    (169/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067130077 seconds)
    (170/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065267175 seconds)
    (171/341) benchmarking ("sort", Int8, false)...
    done (took 0.150838487 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074824232 seconds)
    (173/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072415276 seconds)
    (174/341) benchmarking ("sort", Int64, false)...
    done (took 0.066632464 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066370609 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.1312265 seconds)
    (177/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.073142591 seconds)
    (178/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065483596 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065469507 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.152981198 seconds)
    (181/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.0814505 seconds)
    (182/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.068628054 seconds)
    (183/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.232814829 seconds)
    (184/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.068493179 seconds)
    (185/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.203838323 seconds)
    (186/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067891825 seconds)
    (187/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06793516 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.083037734 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084935706 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153844743 seconds)
    (191/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.086369231 seconds)
    (192/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.067327926 seconds)
    (193/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.233114825 seconds)
    (194/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067489674 seconds)
    (195/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068667885 seconds)
    (196/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075925844 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067937606 seconds)
    (198/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067883914 seconds)
    (199/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077153759 seconds)
    (200/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067936607 seconds)
    (201/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081158786 seconds)
    (202/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065286931 seconds)
    (203/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094801424 seconds)
    (204/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065445083 seconds)
    (205/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066747897 seconds)
    (206/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.07489732 seconds)
    (207/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.164417814 seconds)
    (208/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068963021 seconds)
    (209/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067201992 seconds)
    (210/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192859183 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148128377 seconds)
    (212/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067712144 seconds)
    (213/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.146440851 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.069542877 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.122671179 seconds)
    (216/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073811939 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153443615 seconds)
    (218/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.066968206 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124727499 seconds)
    (220/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067748302 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066859445 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095067218 seconds)
    (223/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067071769 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065449726 seconds)
    (225/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.154828518 seconds)
    (226/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075879008 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075210447 seconds)
    (228/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.068783816 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074332856 seconds)
    (230/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066715755 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132052541 seconds)
    (232/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.067792075 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068001048 seconds)
    (234/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154316179 seconds)
    (235/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.224280352 seconds)
    (236/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.067253788 seconds)
    (237/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066716639 seconds)
    (238/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069274233 seconds)
    (239/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.237377611 seconds)
    (240/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169912063 seconds)
    (241/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067288679 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115393475 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087945818 seconds)
    (244/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.152054972 seconds)
    (245/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067369593 seconds)
    (246/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066998666 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086225273 seconds)
    (248/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069392693 seconds)
    (249/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087599867 seconds)
    (250/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066890005 seconds)
    (251/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.082836114 seconds)
    (252/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079054981 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076973213 seconds)
    (254/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078068399 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07421406 seconds)
    (256/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073523189 seconds)
    (257/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066580932 seconds)
    (258/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068189094 seconds)
    (259/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068363646 seconds)
    (260/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.09318467 seconds)
    (261/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074046005 seconds)
    (262/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.06977774 seconds)
    (263/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070480784 seconds)
    (264/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066998765 seconds)
    (265/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133124143 seconds)
    (266/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.066361935 seconds)
    (267/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065260585 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091399616 seconds)
    (269/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068955291 seconds)
    (270/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.067003586 seconds)
    (271/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.148170092 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066803025 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.132663118 seconds)
    (274/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066872691 seconds)
    (275/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066971961 seconds)
    (276/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.228746731 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.08888164 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06601531 seconds)
    (279/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066854508 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065502556 seconds)
    (281/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067753129 seconds)
    (282/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067390705 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.066401059 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065811007 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064745543 seconds)
    (286/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066517874 seconds)
    (287/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.066861814 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085706872 seconds)
    (289/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071573832 seconds)
    (290/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073263983 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150759469 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092371851 seconds)
    (293/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091208416 seconds)
    (294/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067674007 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073426948 seconds)
    (296/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.069076887 seconds)
    (297/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073923339 seconds)
    (298/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.065425685 seconds)
    (299/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065252991 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065442809 seconds)
    (301/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.081138468 seconds)
    (302/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094031317 seconds)
    (303/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065417629 seconds)
    (304/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065749811 seconds)
    (305/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077275436 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065418894 seconds)
    (307/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.065039615 seconds)
    (308/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.065109607 seconds)
    (309/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.246752362 seconds)
    (310/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17709871 seconds)
    (311/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.068939514 seconds)
    (312/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.067272061 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.128590729 seconds)
    (314/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.084334479 seconds)
    (315/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079394503 seconds)
    (316/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067870439 seconds)
    (317/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067193109 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.15342157 seconds)
    (319/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.069295463 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078779184 seconds)
    (321/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069761394 seconds)
    (322/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.069782732 seconds)
    (323/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066953066 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092282267 seconds)
    (325/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.06523465 seconds)
    (326/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067550005 seconds)
    (327/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.068255385 seconds)
    (328/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067717939 seconds)
    (329/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068177134 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067024125 seconds)
    (331/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067386651 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112144245 seconds)
    (333/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067185873 seconds)
    (334/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073841382 seconds)
    (335/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067509423 seconds)
    (336/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081296978 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066951573 seconds)
    (338/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067035079 seconds)
    (339/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.067185693 seconds)
    (340/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09419064 seconds)
    (341/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070235285 seconds)
  done (took 37.0702555 seconds)
done (took 38.635649487 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092180361 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080536705 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079057104 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075523906 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079413537 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077606036 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078253978 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076591466 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078445779 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077933428 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077442455 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065969826 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074553323 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081649071 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075142305 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081989318 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079185899 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082153429 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067188225 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081508158 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093734441 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078714777 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075853682 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080320346 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066930073 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075820328 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090418294 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.088003733 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073500157 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076100525 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073809497 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084711875 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074079263 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073162658 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076459306 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072832279 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076199126 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073170058 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089883849 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072610482 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066562871 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07922743 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074333551 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074700449 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074733849 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078846399 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071892377 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079736903 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066117658 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076986222 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089478133 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07122652 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072883951 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075106891 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07174044 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075583526 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073166668 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078243648 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071514149 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.07873314 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077512668 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075257513 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06628029 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.0753015 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073462942 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07416471 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065225429 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071102408 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066396404 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066642993 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.066217276 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074812099 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073449753 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071684817 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065548006 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066500706 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065722906 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078517922 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072077724 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075414371 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066746459 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.07157208 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071463093 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066721897 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071512302 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078193011 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065448665 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066672651 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065679158 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.08059229 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072667285 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066121564 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077704857 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070900082 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071275839 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066165257 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065999711 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071374587 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074627665 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066958804 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065292031 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071358929 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071100792 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074988117 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066649591 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070831037 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071065776 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065537538 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.07499098 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07336941 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074827092 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07932654 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074779751 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077711418 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066424526 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065337374 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075688109 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066390745 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071173106 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074363307 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071640402 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074300181 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066458132 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065366078 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071152219 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072766788 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06628208 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066918853 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066398409 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075504208 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07343169 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064883652 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066001541 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074903211 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074598495 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065687377 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065234627 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075076202 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066000172 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071264494 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07101245 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073975193 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065675824 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065825284 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.213571096 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067221519 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066578189 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072254673 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071754683 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067777651 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075550025 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.07281043 seconds)
done (took 12.952270899 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068928468 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105828832 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074373081 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082980442 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079268976 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.0685635 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070638303 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083378043 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071161705 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086424938 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094820499 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088282207 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09410587 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066570161 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06768926 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06828263 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065354399 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075195475 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081634068 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090462122 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095727554 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067252453 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075763686 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083881037 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077327885 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083179114 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068261595 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068116772 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069779379 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.123080514 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092702888 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066643736 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068074244 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08118758 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081482127 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074419971 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067929217 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070962374 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070618955 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067312312 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069043208 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08104284 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070699001 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070648004 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068190041 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068230204 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067876913 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070092142 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080430874 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070316617 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07496797 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078669458 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068693384 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067264684 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065268181 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071117507 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067231729 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067988368 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068272823 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.0672399 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067463542 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069514509 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067966891 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.06811826 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070819105 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069747238 seconds)
  done (took 6.593767913 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.08484622 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093221543 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081977179 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082357978 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066733629 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067745408 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.0675774 seconds)
  done (took 2.225087153 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06938263 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075500773 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079994061 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079968249 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089229345 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07696675 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067995188 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099311203 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066627236 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075938449 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083028846 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081174991 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070764737 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079328087 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068266484 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079464356 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067623114 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075065575 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075051148 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080894468 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071907764 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098056833 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081226654 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067875524 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081263527 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074852411 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.07011799 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067920977 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068400809 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067290716 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067389597 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089731012 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073940337 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081953779 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068016572 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066554567 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.07179915 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067955644 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071655192 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.073843714 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071066272 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067891581 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068022361 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067541843 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068403562 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071872171 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068663453 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067155538 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06726286 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07494471 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066563365 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073958106 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070412977 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072652638 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072094151 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071887722 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074285717 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067444515 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07508414 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073408488 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067220664 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079913972 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079006884 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070899025 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078775797 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075645784 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073986179 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071101618 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067100483 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066695341 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.06769873 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.0790887 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070668549 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069587506 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068722443 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072734431 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071778116 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082268967 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.08239112 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.08078933 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069847391 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068108667 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071321757 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082858071 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072429787 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067446404 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068570758 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067467998 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.07241621 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067664756 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071860803 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067143969 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074184537 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069929091 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070040864 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07565882 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067135901 seconds)
  done (took 8.775956496 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071762138 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069560903 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068985061 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068546918 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.06901604 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068936719 seconds)
  done (took 2.134181752 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093166368 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068167984 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080526453 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068267151 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090326519 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074485095 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074850642 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069625616 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084454241 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078250565 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074994569 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076885082 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074206543 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069608313 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074444098 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068946795 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073925213 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071300411 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07811169 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070108302 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084037109 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069788828 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069846886 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079529013 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070946628 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068446787 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069134627 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078248651 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077278215 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069501559 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069530219 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070459194 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076248969 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069404387 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074129014 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076110933 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068044223 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073315996 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070484976 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.07060704 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075946118 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069526257 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070034508 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073201745 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069167053 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076830857 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07355448 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071742664 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073625069 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072951899 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073320914 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068505654 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071346522 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072937303 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.077015145 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069256996 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073727571 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073903854 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069350421 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076279951 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067851107 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.0708781 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069575299 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.07078545 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072499541 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073659883 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076536035 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06957063 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069743421 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067655093 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073325635 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068192882 seconds)
  done (took 6.947579661 seconds)
done (took 28.341428111 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548451484 seconds)
  done (took 2.197713842 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.591099951 seconds)
  done (took 2.282437389 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.377088589 seconds)
  done (took 10.066279471 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.309978618 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.330154825 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736732064 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133442414 seconds)
  done (took 3.243203923 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.765437596 seconds)
  done (took 2.46455989 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.232748501 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220075241 seconds)
  done (took 2.159314811 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339324803 seconds)
  done (took 2.030843395 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.149967362 seconds)
  done (took 2.833636405 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.234218502 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163729854 seconds)
  done (took 2.091003806 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.542157177 seconds)
  done (took 2.229327018 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.267346833 seconds)
  done (took 5.970357715 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.23645337 seconds)
  done (took 1.975076322 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23216927 seconds)
  done (took 1.927803464 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.046131842 seconds)
  done (took 3.740926196 seconds)
done (took 46.907802476 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086014227 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087384579 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087332339 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082361817 seconds)
  done (took 2.004009045 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076447658 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071373174 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074284415 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075047302 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072896445 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073958105 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074298024 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070993184 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.07261474 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071427311 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069593277 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071250117 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073874757 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070929899 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073863104 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074631668 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071580587 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071470003 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073150386 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070993548 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073573886 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071344471 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069163947 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070860804 seconds)
  done (took 3.430491957 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080417014 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073115152 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076934475 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072177766 seconds)
  done (took 2.012225498 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.079111897 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077624767 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08691938 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091708109 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078013175 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.07801584 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085713241 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086166315 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066582501 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087806806 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069040288 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067767969 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067891696 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087229517 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08421888 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.064079664 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064870881 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078124291 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.07736801 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080706244 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069469005 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066927186 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077797027 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.07826942 seconds)
  done (took 3.557993616 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.081842543 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066467891 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079275361 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.09212346 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093412376 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.0669631 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080177764 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09338933 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128863363 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066840957 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072845069 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066352952 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105414272 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067016769 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081953225 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109545577 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.1126255 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.07013956 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100011005 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066304743 seconds)
  done (took 3.4146991 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078613328 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070804287 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071560072 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066947056 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077698249 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073620349 seconds)
  done (took 2.15630151 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070723531 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068847211 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070828961 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073218407 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068918771 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068580212 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067708933 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067221651 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067402796 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067838117 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067712113 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067979387 seconds)
  done (took 2.533453824 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156696494 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069752588 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070649702 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066807153 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072437138 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067878392 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08213562 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069309403 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085635777 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067804397 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068039867 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069721193 seconds)
  done (took 2.658711164 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102720514 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101835576 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146928509 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118617607 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117320503 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097661843 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119731761 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095476857 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16088504 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137725798 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117533232 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094008657 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087607505 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070273442 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100889688 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102655952 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137390446 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074006816 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11367674 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164803388 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115497585 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113465892 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123103346 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117237079 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081618652 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123043749 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094818633 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103033186 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124814563 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110187491 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120037848 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097883163 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072886804 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072047231 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150645651 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101338325 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108328433 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.0941184 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100855394 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088931764 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10807677 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070608448 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087767053 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106594769 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084918134 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117251335 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088289865 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104098177 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081380191 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131674593 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106753884 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098922626 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085849999 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104410413 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131022253 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095761267 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111516024 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107355296 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08273053 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117885794 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100083212 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254584911 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095730997 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0821975 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161076306 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09091817 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113329328 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114263281 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083398234 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091186637 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103672267 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130963462 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108029142 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107791193 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11509859 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096078081 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11140312 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093008824 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128897185 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094589328 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073743348 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105220384 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130050871 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086364926 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101375203 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13111438 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093559944 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078732151 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092809777 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.11946737 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081679383 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097426317 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070758483 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098230412 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107619617 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098073998 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112567151 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107712654 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07924164 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125320998 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109587307 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073900293 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118149258 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099350754 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153240923 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096346179 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077300499 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101134259 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094679669 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148809613 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085933868 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080984383 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099142892 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142135344 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095012141 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.16989016 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097212922 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129507088 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097798679 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089779102 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076174936 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09023216 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103024387 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107084303 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101738454 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088950032 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077119433 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086969482 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095658429 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.254134149 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08266495 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115963566 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103244678 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076486285 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089851358 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080381169 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126675941 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078886674 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109836148 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126379679 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079807994 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106629141 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09891916 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108570971 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098251416 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107979109 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141683683 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116558614 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080389478 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085175979 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109474229 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143059632 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114589063 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086518573 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077455107 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100502397 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112290849 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09797851 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107469028 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1008043 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109793598 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098232286 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142514958 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118719349 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092329941 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096463091 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097578454 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124145896 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078068891 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156852435 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095229763 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119322255 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08629789 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142422247 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114421822 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09091511 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08585177 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096731752 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105898016 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106396789 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143933375 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096555322 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07336791 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094224974 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132981882 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077394592 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100795546 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091164533 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094089181 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119168758 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084449791 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081772121 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069186363 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101231775 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135069106 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069984493 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.27671669 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.115427098 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10406793 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106403938 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071049954 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100455546 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14001508 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106383945 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142213793 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118953317 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102122252 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119289066 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100088519 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106307684 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080577931 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125965825 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136402744 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097341078 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091688841 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136638927 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118217709 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135870883 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097217351 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11570972 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106204665 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102259562 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105094021 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101826642 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145660849 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121415377 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126142806 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087149256 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10727454 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110023801 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137558997 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083601005 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118000897 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076393026 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112847292 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078946933 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108214709 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080286324 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112538902 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080535166 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100520266 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070488894 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075403261 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142793182 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113193748 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089772901 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086925087 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137679022 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133762554 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081865277 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102296443 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104706147 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101642262 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101439736 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108351075 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085606287 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094464347 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.273008895 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080561797 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083026918 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100216688 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096048702 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108873697 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085290233 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076141659 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137690003 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10563653 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096550532 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079216085 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095462636 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121684632 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090499455 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088362214 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106649341 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10503527 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141051489 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091317593 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098353423 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118229319 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08158662 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093183752 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070471279 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08586898 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.076692326 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11027946 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077410136 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10982037 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069962025 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131738118 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089280359 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093873821 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103318643 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102203532 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129514689 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093338701 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129397889 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091243962 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102767467 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1092636 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095397695 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081229729 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105136913 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097377409 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110680544 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097082472 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10637747 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111368279 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095206905 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143101525 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09108465 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12156149 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108018281 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108162345 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104846952 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117085667 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138563809 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113608017 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112977555 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076492348 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084583198 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107034526 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100851588 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144899392 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101848778 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073020325 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086331447 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091001306 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.256656688 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107005811 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084965796 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143374648 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089035508 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088638643 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115039237 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.09089879 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098705549 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077584237 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097334403 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101991686 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095767725 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09658307 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108560479 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118457422 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114676942 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133573857 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10040934 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.0937954 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120299332 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111781027 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112057255 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087558017 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087530213 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125060201 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103755047 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129112904 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100999366 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096075882 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103463249 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092098293 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101265563 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098144021 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110733078 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08180036 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077311564 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069459414 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073879981 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119069525 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110266519 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099824929 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099536687 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073747157 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105507451 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100866926 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073251792 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088713575 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095192149 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099904751 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084721043 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093361032 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115313491 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092331406 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104519803 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100679574 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130103679 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101529561 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089909468 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144446408 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12883879 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089882387 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093818829 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07288109 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080371462 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103549122 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145695834 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117218978 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077297951 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.245834109 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079608477 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088869997 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073085189 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089577753 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091056896 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105012392 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093829842 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113766664 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105454769 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077265403 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104700345 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098044569 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093119431 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09801278 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103275197 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106302614 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124743052 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102075282 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098968287 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077914487 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082005242 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076886774 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081347421 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103530156 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079164015 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07767057 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131450758 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092553632 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105873845 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11043706 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086230845 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077448762 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133942267 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070734127 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135407254 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072918153 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084206167 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081826923 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081132282 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095384778 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105889179 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097643687 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114951379 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10711038 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106268998 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111583982 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156693921 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072237189 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145075072 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077516598 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077348204 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078249628 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115990298 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090914752 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106602009 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141656309 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090485553 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093864869 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07796198 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129690419 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099310191 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10448427 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084227826 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080230934 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12987995 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080813619 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072762759 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08763814 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112581965 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073639743 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104111976 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.248688738 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081849974 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115428909 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631958447 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091866314 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077461126 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090873428 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143577257 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130057704 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0848001 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11029737 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120704787 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090942448 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085128893 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108883219 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183571263 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075433545 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096775204 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105281937 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099574607 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094034134 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093685914 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089020476 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093161263 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087403571 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081427527 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108891246 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089443952 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093385907 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098337377 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084437756 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081703641 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132827501 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105741245 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083954081 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090647973 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102205121 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08927056 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092452449 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070386323 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115525097 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092400281 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102681524 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092183419 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109076978 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121148668 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090244188 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113484705 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090460952 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110795661 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085969772 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079730548 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103274544 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079193118 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079243474 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118396104 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085667228 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093942389 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10573673 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096583101 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115155521 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119208881 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112432841 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098784132 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079813757 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087427494 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088122317 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075984345 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079041196 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074890353 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077011797 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.269714808 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08840854 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086985946 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117770222 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08399168 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105280425 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102194283 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110774035 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084413997 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102386583 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10981724 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091740447 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10487659 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101942199 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129443677 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146874276 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100922916 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124600658 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135433044 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078075014 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076570258 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.07037059 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116262128 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080686479 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082013526 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082449347 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133522676 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08346325 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096327647 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232003899 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081536417 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082880073 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098257681 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071238901 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084519742 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109652134 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086005389 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081822515 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099856203 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085154467 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119664118 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113115317 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090928878 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083982304 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082042269 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094656892 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105273621 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129284682 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090803546 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076824991 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107908175 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104907516 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125095549 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073889722 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081967369 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131082504 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093124839 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104495071 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081327286 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121055363 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134123461 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091174585 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134913788 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072372419 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084951184 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09060974 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127110379 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075856964 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089307299 seconds)
  done (took 65.395329974 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154597219 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143474203 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.084021908 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.09886785 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188516643 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.19812465 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120622611 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097220353 seconds)
  done (took 2.964303673 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071390358 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083999164 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.08213615 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208745862 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109393987 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068578345 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074595893 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082931737 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068245359 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06841039 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.10259417 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068486208 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069178593 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.369906649 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067588367 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073048071 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068695571 seconds)
  done (took 3.569191429 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330394841 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.388073915 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.224216436 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.620876657 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.140033184 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486362461 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077879121 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083320946 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.626570303 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373411172 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.1342459 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.089021138 seconds)
  done (took 18.419639307 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.07858733 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079357532 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079511278 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075907851 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075530388 seconds)
  done (took 2.251118688 seconds)
done (took 116.081519553 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086053824 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17340314 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068849472 seconds)
  done (took 2.123694742 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.085092798 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082120903 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081924884 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079742972 seconds)
  done (took 2.17491226 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076579619 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077746002 seconds)
  done (took 1.992782319 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225474056 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176227187 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090984862 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084776045 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081257455 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081770044 seconds)
  done (took 2.097942901 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074369927 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072509414 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073051841 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073608978 seconds)
  done (took 2.130493242 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.075112509 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067600384 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069839325 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072197176 seconds)
  done (took 2.123948129 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088597935 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083792356 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112847384 seconds)
  done (took 2.123312954 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.086273145 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084284173 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079482563 seconds)
  done (took 2.096061128 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.113096251 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098321427 seconds)
  done (took 2.050473362 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083321227 seconds)
  done (took 1.927195498 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093021883 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098573092 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141475956 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108432616 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141259366 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127396143 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077894477 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079137148 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074474274 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073630124 seconds)
  done (took 2.855971382 seconds)
done (took 26.117501985 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.0816748 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369455412 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360769559 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087918189 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672537914 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357628828 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.996953843 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092023018 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100627592 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0692521 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086020441 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649517803 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.995432839 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326383549 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.976168261 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325441754 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651818413 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06952959 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069388441 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069281571 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.983693793 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068776358 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06952414 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069631613 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650767769 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374894888 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070075034 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325671811 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070019809 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071793969 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357613583 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070806465 seconds)
  done (took 16.402994663 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.073071407 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123969505 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075889748 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085238826 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071901733 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071268051 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072411645 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070332257 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111758721 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069603211 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086800853 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069329951 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073043453 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070861886 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089366967 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068897725 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070864846 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073369099 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070188625 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07013665 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087507025 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069001507 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070000974 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070239068 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069650323 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082545565 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071199362 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069633991 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069557723 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071823399 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072732364 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070633523 seconds)
  done (took 4.300808858 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125565508 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12779389 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074647926 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109919749 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119712215 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071112437 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152157519 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093466821 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11525934 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069641637 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087217475 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069551566 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105347392 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070839004 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089943384 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069693018 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07123114 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070617872 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069543442 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070035923 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088655118 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069562224 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070383919 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070104593 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07040111 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084395887 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070843324 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070149744 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069519684 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071692965 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073814852 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070997937 seconds)
  done (took 4.575163409 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072834802 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073263458 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081232379 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082385347 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068470288 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070432683 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071568224 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068554731 seconds)
  done (took 2.450681518 seconds)
done (took 29.589232729 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.08224054 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069256818 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072619541 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088732184 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075726797 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071727695 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066372259 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075868056 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073130896 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072785393 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074734126 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068160378 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071263036 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066232471 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073563601 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067790065 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073775808 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071202979 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071748168 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073532636 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06928751 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073282449 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076018263 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.07164002 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072359596 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072168154 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076437205 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073416554 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067499029 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070608624 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069674766 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081494752 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073706767 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073774829 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068152735 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06729709 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072429785 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069119018 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.07376452 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.0766566 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069478574 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076569521 seconds)
  done (took 4.876058056 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.091376504 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095795631 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087238602 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08398237 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108692543 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083037952 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091531529 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080327515 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079295827 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.09101304 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075301709 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080004171 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082575973 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076296901 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079590328 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076024391 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081513196 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07470245 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080217201 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080037916 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091869364 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072916695 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080235086 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.08142366 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074888563 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080553225 seconds)
  done (took 4.031225997 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075750383 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08933902 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093750577 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.14315317 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111011507 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084555311 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083717274 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098635523 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102153291 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069535826 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073470786 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095693433 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097574239 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076061056 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109624671 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088588031 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082353019 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07110109 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076165627 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104080814 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091865816 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087932971 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102345303 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089108614 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068633287 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078398544 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075733996 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084588324 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07668658 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081258435 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073425889 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072539068 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070161176 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082049796 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076037691 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067529406 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091191949 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081796647 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08465457 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10741858 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079154358 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070942432 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099989762 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134736346 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068761124 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071714357 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073178027 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081764055 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070952906 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099254619 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087857476 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068875949 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087956683 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.07049783 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070460736 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08651247 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070484469 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071190369 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081561221 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075566238 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089784744 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074520634 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090302509 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068927096 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080152886 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070750026 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070711105 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067949001 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105664643 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076506801 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121811938 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070250686 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067128113 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081216969 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080279432 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075866903 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069308292 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088266231 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081051629 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072885319 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080788357 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071530322 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072072517 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104398011 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068157023 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067077696 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067143296 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071520688 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072463188 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069308192 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082565205 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06822391 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072275141 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084701167 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068753312 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070109325 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071480243 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070318333 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068045831 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079547676 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072832202 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070712514 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081304739 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070143092 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07231548 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083810459 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078368677 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068324992 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070100124 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071602133 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071025371 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073254808 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072342973 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071182333 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07595007 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076449509 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074489823 seconds)
  done (took 11.298703753 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.167989465 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154664535 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070706433 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149574075 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.0778249 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073690219 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151804573 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088939597 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069716355 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070574642 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068776199 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097886504 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092738146 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.10462101 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073762548 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070064393 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095180708 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102441962 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152981972 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147164636 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092730201 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077132128 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.07205429 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070728564 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070864078 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078544932 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086138545 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078065957 seconds)
  done (took 4.619617545 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078180691 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085274792 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073839729 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093656532 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087898962 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070596125 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071377003 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070601413 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086435113 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076409492 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069673213 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073984788 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073702937 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070728856 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070831371 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076512689 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076014559 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068872177 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073435816 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074687914 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080280018 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094837365 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074016554 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069587044 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072297233 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069948143 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076296706 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078925375 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068997271 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099026174 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06685405 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074534454 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083765415 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070729947 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069742103 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070294018 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070079636 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06996672 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069799104 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067841242 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067498633 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07457682 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068360397 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075751495 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083975578 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07732733 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071165697 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075666659 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072063335 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066659417 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072599402 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073037094 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072362228 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07777733 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.0736608 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.07232153 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071449601 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09954656 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075478414 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069150582 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068494311 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068128784 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070997635 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077413574 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086460352 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071303963 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068277121 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070077446 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074597212 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083645891 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.06905057 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074806612 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066207541 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070096401 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07207763 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072326156 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070708766 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067672928 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069130626 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069638492 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069599961 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069204968 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068876573 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072056079 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06758123 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06812781 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069890746 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071168237 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075875428 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.06891799 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07240469 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070751294 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068559053 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072649294 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075180724 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072687811 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089820624 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078662605 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070190417 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067655478 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083691267 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071262645 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068950986 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075446298 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073976317 seconds)
  done (took 9.669213178 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094789167 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071567758 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090130768 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096494688 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.08014774 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074811304 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084051111 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070864991 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085695323 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069131849 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078453609 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067984055 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083142374 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079192247 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071166924 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080041697 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071814785 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.0908458 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084334651 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068215752 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078559742 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.08234404 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082165944 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087236807 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087329166 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087893058 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081471206 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072670786 seconds)
  done (took 4.172660061 seconds)
done (took 40.521047133 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.951262863 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.108750633 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.933387905 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.138521267 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.217558281 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.077031437 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.071429411 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.930684902 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.108769559 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.963423757 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.251950969 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.318065372 seconds)
done (took 68.999059541 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.019803024 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.07697588 seconds)
    (2/2) benchmarking "String"...
    done (took 2.140372107 seconds)
  done (took 6.079630865 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.535391668 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.930972047 seconds)
    (3/3) benchmarking "different"...
    done (took 1.981447845 seconds)
  done (took 8.307942837 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.033957353 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.598571896 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.186784308 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.93233866 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.937806661 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.346060297 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.758102261 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.400518849 seconds)
  done (took 33.023896279 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.217542231 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.156209152 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.713208768 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.745946988 seconds)
  done (took 16.751541757 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.54288857 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.196913752 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.19732471 seconds)
    (4/4) benchmarking "different"...
    done (took 2.190336669 seconds)
  done (took 11.057089231 seconds)
done (took 87.242742634 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.936096168 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.5687524 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.94702764 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.088184567 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.009431515 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.961250831 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.944772849 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.97355447 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.934096021 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.936609292 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.371984932 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.933451995 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.934738417 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.974425399 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.935369037 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.94033827 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.260333983 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.947003566 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.941023246 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.542555934 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.404629549 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.944981733 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.943738863 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.984793134 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.020235792 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.96140292 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.487980921 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.944796186 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.552420672 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.946666376 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.116950227 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.938353305 seconds)
  done (took 210.189419283 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.936199966 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.034586467 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.13357482 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.972929711 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.431291728 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.128050979 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.084916412 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.491630575 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.940575236 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.9405973 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.06497993 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.934373419 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.0646394 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.883716145 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.934233633 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.941066575 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.212012084 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.082120363 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.935583155 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.125703185 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.962995592 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.870629774 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.849649312 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.050260019 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.966361672 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.967491736 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.945472166 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.94564184 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.126626984 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.192326366 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.957263393 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.941427208 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.141606695 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.807978316 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.952868195 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.951624938 seconds)
  done (took 175.769000128 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.116129144 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.947803326 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.999700176 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.071854898 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.682361571 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.673262572 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.937957861 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936555224 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.936950722 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.944936734 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.939806563 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.005996337 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.523189644 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.951475364 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.939388133 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.939517247 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.937494956 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.551764459 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.943280986 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.939281503 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.939715781 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.002906509 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.311627964 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.072943563 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.940054827 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.949935073 seconds)
    (26/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.939837742 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.947847173 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.073258274 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.938317199 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.073746746 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.940377183 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.017679897 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.075478441 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.947743369 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.020321349 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.945008552 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.423091638 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.939874496 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939459984 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.94132567 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.001533343 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.938061971 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.038045086 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.031413058 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.938293827 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.954262842 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.134309267 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.626365392 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.941672026 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.938870918 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.940893489 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.941141911 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.941925225 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.000819632 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.94024277 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.967738333 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.543662038 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.941473597 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.942782435 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.94174213 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.940934116 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.94176561 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.949347327 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.977510507 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.748682745 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.957310825 seconds)
    (67/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.942726888 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.328439443 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.941382779 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.749062284 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.776184664 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.996675242 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.943748739 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.021626169 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.940477045 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.94270912 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.942626265 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.942535694 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.03664354 seconds)
    (80/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.941740006 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.024399616 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.941253635 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.077181684 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.943006596 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.940880676 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.055416255 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.465863998 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.931253444 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.958676619 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.010461266 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.954018779 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.959196868 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.968892715 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.026885183 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.953988098 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.963626012 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.954647709 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.050475314 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.956661607 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.973275181 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.177014556 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.020794195 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.19633038 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.177350272 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.954597823 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.954025212 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.971686628 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.961160186 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.958500567 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.973860493 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.965113468 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.958872305 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.958858111 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.955671501 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.958016773 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.95895775 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.967744999 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.953750922 seconds)
  done (took 427.811386509 seconds)
done (took 817.807510174 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.569012247 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.647682081 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.545668791 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.589742031 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.552438437 seconds)
  done (took 14.789153506 seconds)
done (took 16.681715014 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.988999786 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.970710094 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.959753851 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.016388821 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.981505679 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.963737196 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.000094608 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.001028665 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.980779802 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.96378035 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.010456935 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.972543141 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.987546774 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.988250374 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.043163416 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.995129255 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.975991553 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.960582766 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.030226238 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.968565629 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.974704301 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.967493388 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.963830046 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.013679711 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.047781788 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.974179758 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.966392718 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.014893486 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.976786938 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.011806688 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.030148784 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.997690581 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.006221896 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.041330621 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.023841709 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.049724057 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.972682984 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.040283617 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.974306977 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.048441199 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.017063105 seconds)
  done (took 83.754980766 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.97377115 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.097631721 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.176390223 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.96526176 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.958466694 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.182474869 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.023022064 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.080045787 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.098457931 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.173121131 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.180724205 seconds)
  done (took 24.798539408 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.96775305 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.1003245 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.173048254 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.997859641 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.969482634 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.178086798 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.03496387 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.095499469 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.103130192 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.178560112 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.189697055 seconds)
  done (took 24.885895838 seconds)
done (took 135.331604727 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.334582844 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.987663213 seconds)
  done (took 6.206735529 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.961551532 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.980322824 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.114141131 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.96808353 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.961643959 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.959945453 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.966311063 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.962080429 seconds)
  done (took 17.758043659 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.961196947 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.959447652 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.963023807 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.961919901 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.96865045 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.955962802 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.956476963 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.967463831 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.958661702 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.965275473 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.959556132 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.958139033 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.960422886 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.963105948 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.959688928 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.958862935 seconds)
  done (took 33.262325617 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.966491551 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.962319105 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.958100258 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.963234145 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.960911933 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.958561318 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.958560643 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.961136922 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.960825032 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.960891738 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.958626464 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.961151857 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.961673025 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.960700204 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.963980448 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.97179818 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.959615103 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.964708998 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.966100142 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.968667415 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.96266043 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.961942619 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.971887103 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.959592383 seconds)
  done (took 48.988970542 seconds)
done (took 108.115190314 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.154066587 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.760223425 seconds)
  done (took 8.802972069 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.968700482 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.961954359 seconds)
  done (took 5.892735074 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.965315639 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.962334413 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.962967002 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.960436334 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.970947529 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.964873887 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.965750544 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.968721722 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.964791706 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.966871685 seconds)
  done (took 21.54101827 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.970851112 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.961753748 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.960769525 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.965567228 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.964093859 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.967817107 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.963207649 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.961393663 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.964432664 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.961036257 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.962041881 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.965159012 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.964888128 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.965555213 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.961735721 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.967141235 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.969253691 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.962101737 seconds)
  done (took 37.246800646 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.965611329 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.962825111 seconds)
  done (took 5.817196842 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.963391381 seconds)
    (2/7) benchmarking "second"...
    done (took 1.966903035 seconds)
    (3/7) benchmarking "month"...
    done (took 1.965097835 seconds)
    (4/7) benchmarking "year"...
    done (took 1.958834666 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.967422571 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.962639708 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.964059767 seconds)
  done (took 15.63652531 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.967832201 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.120014123 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.175042941 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.5752695 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.961680207 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.968721658 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.818663121 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.967685087 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.971335952 seconds)
  done (took 21.418125702 seconds)
done (took 118.244943561 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.833805454 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.96830074 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.186026885 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.044625675 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.038697398 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.265036342 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.000643579 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.517962531 seconds)
done (took 43.752712507 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.033718309 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.964362006 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.994998471 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.993574381 seconds)
  done (took 22.847639572 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.971169163 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.308749072 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.004080195 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.955888024 seconds)
  done (took 23.145802667 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.358293125 seconds)
    (2/2) benchmarking "read"...
    done (took 2.334494624 seconds)
  done (took 6.603901835 seconds)
done (took 61.53100342 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97956803 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.979819431 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.977425189 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.979076955 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.979460964 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.977611715 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.978387222 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.980134097 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.976397057 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.979011349 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.979084523 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.979898024 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.98052593 seconds)
    (14/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.982700916 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.979461517 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.98081589 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981516615 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.980645269 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980767718 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.982439128 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981016211 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980447595 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.982200336 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.982489218 seconds)
  done (took 49.427423694 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.982561665 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.980022485 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.983760696 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.981491458 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.980549385 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.980609354 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.979110114 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.978517897 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.982290158 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.980907328 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982295029 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.981330674 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.981648603 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.980646782 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981643466 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.982624686 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.981550066 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979292025 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981704539 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.981571725 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.981304942 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981871495 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.98397627 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.98143212 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.983601866 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981863588 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.984061757 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.982357642 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.983430854 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.983464949 seconds)
  done (took 61.35702594 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.982926415 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.983763323 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.980067609 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.983400962 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.981886879 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.984344876 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.979135355 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.983405388 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.98019226 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.982794997 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.964201282 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.979092297 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.979411271 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.980551713 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.985143501 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.981560844 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.982038532 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.982006861 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.982254287 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.982624298 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.983681567 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.984056207 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.984652638 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.984198069 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.982078216 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.98361634 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.984808096 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.98462231 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.983257874 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.987584516 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.986724372 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.983204944 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.984067303 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.985485185 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.984638157 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.983597953 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.983350777 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.983044415 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.985195205 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.98664846 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.984509184 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.986833732 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.985174052 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.984111236 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.985251813 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.986680838 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.985204221 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.98361309 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.983614846 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.986239648 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.98546802 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.986845041 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.984170863 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.985324093 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.983881703 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.98638647 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.984277175 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.98644685 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.986684211 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.98394557 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.986652039 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.986978358 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.98640589 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.986166072 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.98467135 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.985668794 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.987760375 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.986895052 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.985161915 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.988019156 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.988020075 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.987455646 seconds)
  done (took 144.750296176 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.986217396 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.98666932 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.985622874 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.985525568 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.986914819 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.987752223 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.987336546 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.986094676 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988589044 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.985918241 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986903877 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.988691445 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987664597 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.985736906 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.98612844 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.986764891 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.986156351 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.985610922 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.985437975 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.987940853 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.988699514 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.988864058 seconds)
  done (took 45.623936964 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.988291332 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.985949668 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.987497326 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.985668959 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.987665204 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.988478 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.977826484 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.98648843 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.986227779 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.987229603 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987779983 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988792698 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.987087549 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987869375 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.989015505 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.985575143 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987813971 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.988038318 seconds)
  done (took 37.675411511 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.989408733 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.988673901 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.98926932 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.989983234 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.98918568 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.991257891 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.988210541 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.988326381 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.989572238 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.987147005 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.987556522 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988821198 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.987577602 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989643434 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98831043 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.987906611 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.99183769 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.990670888 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.98892915 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.991134798 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.991093619 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.990210824 seconds)
  done (took 45.680786969 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.991032598 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.989367079 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.990665692 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.989720911 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.991535575 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.992250564 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.991816914 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.988174163 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.989274112 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.990234356 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.990608855 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.991048454 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.989690735 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.991736531 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.991544032 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.992506394 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.992198231 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.992689005 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.991375264 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.992527243 seconds)
  done (took 41.734013889 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.992949778 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.993089689 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.994435081 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995714922 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.994572172 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.993404174 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.992662098 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.992826531 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.992014692 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.996098425 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.992916785 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.993402175 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.994792083 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.99473044 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.994594027 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.995184832 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.992496399 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.995748262 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.995400071 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.995961775 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.995880482 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.985489507 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.988307954 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.996596578 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.995717288 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.99519767 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.995127386 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.99406545 seconds)
  done (took 57.749707265 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.992547898 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.993351551 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.993036895 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.995499377 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.992625694 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.992886118 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.993308585 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.991942449 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.993949993 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.99265546 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.993364836 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.995171504 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.993517065 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.994673084 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.994795597 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.994985287 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99370061 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.9950294 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.994544559 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.994421738 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.996535555 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.992362206 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.957972212 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.994295673 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.960038241 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.993965292 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.995030755 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.995102108 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.993629731 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.996999426 seconds)
  done (took 61.671391253 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.013372814 seconds)
    (2/2) benchmarking "in"...
    done (took 2.015749326 seconds)
  done (took 5.949907551 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.995276658 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.996234534 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.996122459 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.995292716 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.995786739 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.995566326 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.994715502 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.993751722 seconds)
  done (took 17.884470402 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.997378235 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.999443619 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.994725364 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.997287377 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.996886969 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.004251224 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.998865908 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.999291141 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.998409608 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.998685887 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.005150164 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.002325376 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.008038226 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.003127241 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.998222446 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.997224607 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.000678178 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.001777885 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.001247367 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.998457816 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.984132345 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.002523916 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.997879794 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.959425714 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.996716545 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.999776621 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.009868678 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.983303384 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.999780309 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.956517177 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008219199 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.999241628 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.999080172 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.998775651 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.982972174 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.000063894 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.992023552 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.002270821 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.000381589 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.996582671 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.001738769 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.002932988 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.003288562 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.007377872 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.000364413 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.99978123 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.001910899 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.999752354 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.999134316 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.003653502 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.010358764 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.002489183 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.997363845 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.997475689 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.00265273 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.000643531 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.002498822 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.002115414 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.007922112 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.009009321 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.003971795 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.023171699 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.011534481 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.002011253 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.001805881 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.01080481 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.031738567 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.003577654 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.003508184 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.001117128 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.009951679 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.003102566 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.001929769 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.999596585 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.014876748 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.011450309 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.001031629 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.998666813 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.999482754 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.004468975 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.002818821 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.005618696 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.001103855 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.00432802 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.012180257 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.030745545 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.002743334 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.003905077 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.004935335 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.004321092 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.009385061 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.005635404 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.004761391 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.000799864 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.004377939 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.005429418 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.002573788 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.00238494 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.000734933 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.010406394 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.004572701 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.998978304 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.007463454 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.01463687 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.001112105 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.00376849 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.005905262 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.006746043 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.012392556 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.966833431 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.004899843 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.003439524 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.003661582 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.009987568 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.001228678 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.007033665 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.014795306 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.012986227 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.003155341 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.009157808 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.008293673 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.007930809 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.015212664 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.033114088 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.003186935 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.010111474 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.011992507 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.019516283 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.009359926 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.004004463 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.006612194 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.005103044 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.002718307 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.005919588 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.003420031 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.00512326 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.004820861 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.006717161 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.001991654 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.005650029 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.00869998 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.007114044 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.008006695 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.008155872 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.009920621 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.002003255 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.998909719 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.013747251 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.005445018 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.005808254 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.004733108 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.008672011 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.007190413 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.00642213 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.005340205 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.003313817 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.007964197 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.004917857 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.007147483 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.007943005 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.004506501 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.006330055 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.010200716 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.007123046 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.006927242 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.007006612 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.005983629 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.008747915 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.00927989 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.009115278 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.009784359 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.007509378 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.015201832 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.005487337 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.009126299 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.008409861 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.00459525 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.006575798 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.009911264 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.023284217 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.011569355 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.019829984 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.007830297 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.013355426 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.005775234 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.009114073 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.011152701 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.00691417 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.009325691 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.00579687 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.006593414 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.009317061 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.033267049 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.022282659 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.013224589 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.009040751 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.015962408 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.008611827 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.008089917 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.00531393 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.008326305 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.009646406 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.007816817 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.011680111 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.007822753 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.012287654 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.009063927 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.009949227 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.013657871 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.011325071 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.00612657 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.010331966 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.007963763 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.012551512 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.011167674 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.005055008 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.00822801 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.011248428 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.016780468 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.013978839 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.008372764 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.010482269 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.010701828 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.011372386 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.007804131 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.011748797 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.013531919 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.009396657 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.011671045 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.017732609 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.01145517 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.006944941 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.010812424 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.00711931 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.013597573 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.009817629 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.012535624 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.017935674 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.013670498 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.011321106 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.016910079 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.011125659 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.014815469 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.013751927 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.014660322 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.01355393 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.977843359 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.000023473 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.010617996 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.017534432 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.011747186 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.012228099 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.008944815 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.014217532 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.01169984 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.014220921 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.011213966 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.014602714 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.024357765 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.017971737 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.013374017 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.017634361 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.016049465 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.013183226 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.016511443 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.014268847 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.023829583 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.022656953 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.012032863 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.011053894 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.014274192 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.016752924 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.011504256 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.01043232 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.020179907 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.014926952 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.013816022 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.016292592 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.014183269 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.012781347 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.018474318 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.016573991 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.017344012 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.014788295 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.014502167 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.014789752 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.01102827 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.015821094 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.016059353 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.016614056 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.017121 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.014474935 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.015004368 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.013023152 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.022629366 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.013939304 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.015473247 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.02013566 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.013232475 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.013401247 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.016882289 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.012025908 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.015704435 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.017761344 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.013431562 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.0164393 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.015818662 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.018319552 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.030027443 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.020478046 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.024924088 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.017047577 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.028748476 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.017777925 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.013279881 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.014996914 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.020108913 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.026175793 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.017383098 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.012579455 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.024336631 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.017197988 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.015778146 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.0214802 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.012715775 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.017517592 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.016460579 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.017117181 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.01938389 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.018240963 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.017677036 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.019127119 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.014683026 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.013392726 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.01816241 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.018096007 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.018681185 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.016172109 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.014553429 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.019874686 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.014550671 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.016379043 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.01555014 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.011701862 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.012374882 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.023811112 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.017994654 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.014958214 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.023010749 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.01785968 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.027192215 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.020176186 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.018016737 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.019832352 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.018353481 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.020178683 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.017706932 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.017387279 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.017674796 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.018200888 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.01917655 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.032832302 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.025340446 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.022022077 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.018832113 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.020945414 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.021660349 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.028387069 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.045535349 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01901735 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.0222622 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.023059816 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.025447727 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.021725696 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.02679882 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.024232319 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.030410101 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.018750258 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.016170824 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.023639265 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.033858075 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.021244726 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.020014707 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.015890622 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.02545516 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.021561143 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.019106555 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.021326343 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.023183129 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.019563243 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.032870723 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.02007091 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.021450893 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.02151196 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.018518715 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.021321473 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.017986524 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.020766527 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.021681044 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.022843197 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.020638974 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.024516312 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.026173139 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.017752488 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.025361962 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.03103635 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.016034022 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.984878084 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.023463262 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.021679748 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.022626209 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.021588999 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.020072356 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.017465714 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.010821543 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.019755686 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.027877507 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.031763001 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.021998405 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.01849654 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.019832351 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.026238268 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.022419773 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.021946324 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.026416489 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.031441783 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.025487517 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.037583683 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.02988361 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.023891656 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.02304035 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.026112391 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.028926622 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.02266983 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.022391373 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.022667788 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.024786027 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.022539535 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.022827166 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.023541811 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.02405147 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.031336052 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.020432667 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.021539445 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.024512557 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.02049306 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.025624801 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.025275057 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.031904573 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.022381426 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.022204522 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.022167721 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.021855469 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.023612806 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.026577134 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.02422445 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.021473673 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.024559472 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.02351774 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.0260697 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.021840951 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.024021177 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.023878565 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.023670931 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.021120595 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.022380105 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.026445097 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.023399011 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.028998659 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.018179012 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.021596103 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.024956653 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.024538539 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.030147867 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.027138321 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.01200679 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.02313628 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.02297296 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.034871622 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.02479215 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.023990209 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.022328734 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.021212226 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.027380857 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.028701322 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.026971499 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.026559267 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.025089352 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.009642426 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.029235182 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.035734912 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.029646461 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.027675732 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.030213092 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.033111669 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.027907305 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.028014403 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.023083387 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.025663195 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.027998551 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.030295442 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.02808363 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.028356745 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.029166464 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.02803672 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.026463894 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.029019985 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.022818716 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.024325555 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.031118678 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.034458127 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.035617067 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.025684931 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.028881444 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.027584297 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.032106975 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.035585518 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.027960909 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.026534494 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.023460618 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.023776771 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.025204444 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.031349984 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.036972862 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.031677269 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.027213139 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.033432283 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.043942065 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.030708993 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.03909906 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.065273959 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.030185385 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.031099497 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.025401882 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.024753128 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.026331292 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.026613277 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.027881033 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.034748077 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.02695804 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.027789786 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.036289104 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.02857228 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.027887067 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.030031654 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.03158798 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.033156494 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.027852458 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.03322936 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.028358061 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.026944759 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.0270712 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.028979849 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.027099841 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.025056058 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.027775704 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.030677442 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.027070435 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.029235492 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.038966121 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.032480503 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.03414789 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.043151755 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.531757693 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.030328789 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.030105034 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.026785287 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.033681248 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.034155191 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.028645457 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.033572853 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.020953268 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.011788542 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.026784796 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.003447468 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.02548312 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.031287553 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.0293198 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.028737414 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.044436642 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.039365199 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.029688011 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.029800934 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.034778605 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.031763368 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.034990577 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.036107042 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.031535135 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.032617246 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.031823817 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.028410305 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.03007582 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.029117382 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.033515472 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.039196038 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.033101559 seconds)
  done (took 1204.04306993 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.025601766 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.027531377 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.029650138 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.029275549 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02838128 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.03249348 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.027997219 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.025417152 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.026063761 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.025611654 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.028251209 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.025408974 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.026272502 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.025949353 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.027206924 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.026859245 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.024505927 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.023538837 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.025820985 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.025678932 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.02689361 seconds)
  done (took 44.518691874 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.017780594 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.028002765 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.026677629 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.027431857 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.028649537 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.027247919 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.026453775 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.019195536 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.02720745 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.021749174 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.022070497 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.020634579 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.020050802 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.021705932 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.021851154 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.019732219 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.019323014 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.023071443 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.022595284 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.023469935 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.023571485 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.022197317 seconds)
  done (took 46.452802721 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.024701548 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.021988716 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.020170897 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.017579994 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.01872325 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.023021518 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.020986098 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.021880035 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.018796108 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.022001877 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.030789932 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.028560113 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.02013792 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.023225887 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.019507387 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.020657239 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.165476972 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.019805494 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.020784406 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.01907514 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.022939977 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.025354394 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.017395028 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.01662202 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.017118646 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.023033445 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.017748617 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.019231902 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.016473902 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.019363277 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.024807534 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.016324817 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.019373553 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.023110027 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.020126089 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.019565774 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.023292209 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.018798505 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.015198717 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.017245881 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.029567971 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.043315828 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.017062447 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.018609092 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.024253767 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.016267508 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.017327999 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.023853614 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.025228166 seconds)
  done (took 101.134644975 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.013580283 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.01604972 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.015067526 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.013428574 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.01620177 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.017557987 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.014746881 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.017731711 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.017543807 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.020064776 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.015592289 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.014839022 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.016503595 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.014855312 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.016260564 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.012486171 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.014711096 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.017458377 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.015815198 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.016832077 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.012042869 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.0115666 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.013866363 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.012184909 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.01531221 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.00679721 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.007677809 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.009411682 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.009929219 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.008530404 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.002653986 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.004220497 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.004144744 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.00251919 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.00320157 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.003745895 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.003580991 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.004622882 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.003901289 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.004243601 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.005780762 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.006984815 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.002996893 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.004922429 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.004631532 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.004081467 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.004653849 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.003843492 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.005932899 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.005561862 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.005114798 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.005579777 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.004588596 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.005202638 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.003046376 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.003858573 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.004591916 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.005616984 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.007713596 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.005708003 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.004966013 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.00274254 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.005873723 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.005866511 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.005320025 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.005812982 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.005613363 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.008591844 seconds)
  done (took 138.549022495 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.00740716 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.005320925 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.006552205 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008639684 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.007944946 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.007110584 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.004946293 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.004700969 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.007101308 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.006296634 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.007654674 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.007492241 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.007427525 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.004663154 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.006185511 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.008888496 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.007085947 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.006409302 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.007885998 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.006853223 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.008062632 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.006187963 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.006895679 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.008592202 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.007412898 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.00923881 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.009186696 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.00693238 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.007398934 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.008564386 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.008714482 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.005706267 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.008042223 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.994536555 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.005529402 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.008506357 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.007199944 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.005824409 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.007186506 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.007623127 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.008458405 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.003594379 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.006357418 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.004736291 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.005964862 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.006055269 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.00662653 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.003483569 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.00649906 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.003792938 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.005461497 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.002774777 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.004206984 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.004161951 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.001696044 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.005730837 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.00326718 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.006332123 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.005285927 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.002608121 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.006628717 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.004770383 seconds)
  done (took 126.318487757 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.003531184 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.00290943 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.003917195 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.000095518 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.000966977 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.000359874 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.001244395 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.99947049 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.000331678 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.000607517 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.998229535 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.000564913 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.001991557 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99841212 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.00065054 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001106555 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.998913971 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.00075282 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.997591472 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.999350428 seconds)
  done (took 41.937594745 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.989245468 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.005247548 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.000903351 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.000098565 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.000688179 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.001059822 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.001888571 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.999057319 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.000614276 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.998697164 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.003559157 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.00233472 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001602114 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.003167096 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.000694303 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.999457603 seconds)
  done (took 33.932973926 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.000582019 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.000711197 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.000838338 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.00133583 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.00095512 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.000928218 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.999698518 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.000482113 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.00064819 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.998295075 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.998626944 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.997382157 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.000523319 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.999660232 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.999619722 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.001453988 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.996893545 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.997830978 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.998570413 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.000129716 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.995058375 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.997575167 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.999377783 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.996827581 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.001639231 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.000622328 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.994964868 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.999524493 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.996771488 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.999235782 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.998751941 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.997525217 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.995666012 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.00010806 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.999041809 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.998930394 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.995949139 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.99781527 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.000166593 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.998510126 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.995060017 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.996880785 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.998404014 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.995993574 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.996957037 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.997911295 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.997584039 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.996542347 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.995916176 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.996079382 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.997363222 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.996873882 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.998224819 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.995819154 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.99887812 seconds)
  done (took 111.837783449 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.999527683 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.997351737 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.996224204 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.999516109 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.996821972 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.997509935 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.99756673 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.997107787 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.996991775 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.996986278 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.99732929 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.998028441 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.996734569 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.9975578 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.996259816 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.998057743 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.996921547 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.998207515 seconds)
  done (took 37.877021929 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.994548516 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.994827717 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.99665157 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.99352247 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.99537633 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.995815648 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.994405269 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.996651682 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996614511 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.996267109 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.995385709 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.994986243 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99620721 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.997692526 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.997553925 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997693213 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.995348459 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.994628081 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.995521011 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.998349694 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.997285482 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.996286186 seconds)
  done (took 45.836769684 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.997254112 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.996296752 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.00865962 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.016662888 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.015696854 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.030303502 seconds)
  done (took 13.986672484 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993597742 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994261813 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.994843492 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994631895 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99603864 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99386581 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993434218 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995397594 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.992255151 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998527211 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.99505993 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.993629734 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994709743 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996071073 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997271353 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995349247 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995930972 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.994966783 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995228764 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.994293732 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998076327 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996559223 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995924901 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.995897568 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995026517 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995775382 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994289702 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99413514 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.993916157 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99484139 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99678882 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996065727 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994867287 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.993412513 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996220908 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996410805 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.993473966 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994689659 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.996982048 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.992122545 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.994935587 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.99470816 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.993814508 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997325615 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.995326202 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996432925 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99483072 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.995289813 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.99537411 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996036175 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.996046985 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.994205969 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995548487 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.997035366 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.995703892 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.998782146 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996440086 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.996224575 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996689718 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997905579 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.99720181 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.99665314 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996696915 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.994536001 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.994194165 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.99428857 seconds)
  done (took 133.618595375 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998962358 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.995998869 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.996337326 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998496993 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.997939176 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997238563 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997162389 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.995529946 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.998027218 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.996292532 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.99884029 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.997277419 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.994374425 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999076059 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.99849756 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.997786172 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.996586934 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997998368 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998403099 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.996714193 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999916115 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.997717244 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.998655365 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.995502787 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999486298 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998384024 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997872035 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998266798 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.000315017 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.997412614 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.997194317 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.996536041 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.999794189 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.99710474 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.997015627 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.000122756 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998123138 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998532917 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.001472855 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998952366 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.999556369 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.998359119 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.985547633 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998073651 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.999918029 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970211855 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.986508165 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0006231 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.999761898 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998444625 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.99901961 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.998733695 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000111739 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.999667038 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.98581853 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.998811146 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.998134304 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.997554908 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.005709411 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.004075806 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.000583042 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.000564148 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.999965051 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.000815638 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.00223303 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.000220678 seconds)
  done (took 133.772405426 seconds)
done (took 2785.235557349 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.058278419 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.120526404 seconds)
  done (took 16.104094275 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.164607275 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.044108 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.185596748 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.116703973 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.012816021 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.015507393 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.002870346 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.001283613 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.093808619 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.002959387 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.039938181 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.003498475 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.002548209 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.005112407 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.002370701 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.002402027 seconds)
  done (took 54.626912257 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.008153794 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.006414408 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.00608665 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.001468815 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.019990789 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.083407948 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.031113133 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.011951082 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.019440064 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.039454269 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.024745278 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.012719236 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.01427037 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.010974874 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.097875425 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.052101695 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.0634438 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.081658274 seconds)
  done (took 38.512694574 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.088792328 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.015432444 seconds)
  done (took 11.038816854 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.026400954 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.005064425 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.003040006 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.001120869 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.010358318 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.031861295 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.025461382 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.029616252 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.997852605 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.031104482 seconds)
  done (took 72.093308872 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.99802045 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.998698867 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.313782997 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.008758421 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.00652597 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.025169749 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.99676528 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.029744838 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.000887142 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.994760176 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.007573831 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.322699371 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.010484063 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.996452758 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.415880586 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.010563028 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.00475054 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.029713699 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.034938092 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.000090431 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.003709253 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.003354793 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.159601233 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.70149224 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.998952111 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.00327361 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.003015458 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.994476791 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.99586662 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.996966685 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.998949313 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.996369433 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.00284964 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.997662362 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.004033881 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.992900759 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.503238366 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.021912707 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.005234081 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.098334448 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.045911473 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.004496332 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.847532467 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.004278729 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.999012851 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.01064212 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.682887925 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.06735422 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.003290908 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.158986662 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.330453363 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.017098993 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.160579974 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.160407418 seconds)
  done (took 140.108007806 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.996214536 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.237545899 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.150101736 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.999404227 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.256792888 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.206684563 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.000701015 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.044572686 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.002387502 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.202528695 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.247876844 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.10153453 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.002467882 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.003100492 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.006055344 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.003378644 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.146669452 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.072891876 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.005324808 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.00299609 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.028422049 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.204001548 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.127385317 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.007137254 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.031660634 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.203784708 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.123132015 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.105377663 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.789668286 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.003081724 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.067817776 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.004785317 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.003794694 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.000915659 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.154327281 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.095767242 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.08598991 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.00403497 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.991770047 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.002463628 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.678458347 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.200905036 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.097030284 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.124335141 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.24819476 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.218423573 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.614479483 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.001761037 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.630545142 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.167410711 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.205424769 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.208602768 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.117746827 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.003344289 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.552726096 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.001799922 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.003723949 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.222965779 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.216365163 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.09813958 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.002594128 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.002839074 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.000928607 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.241278063 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.003338811 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.089562599 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.005735648 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.999995499 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.089886845 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.100478953 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.222695574 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.219047705 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.029886059 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.324205985 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.487726553 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.199477851 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.063807478 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.218752869 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.003659934 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.998740125 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.08577046 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.837709564 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.254081947 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.242569642 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.197663645 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.029635239 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.651619512 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.000379743 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.185895688 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.190653698 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.230344792 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.244809676 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.232163594 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.346735585 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.999189064 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.999686455 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.343179439 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.114216452 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.935617036 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.358523716 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.228308947 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.49732816 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.025455493 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.344278189 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.128901996 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.002489706 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.646329182 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.000512684 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.205476311 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.03797143 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.001628238 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.999375506 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.19111741 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.902770188 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.999546875 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.950770832 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.061275056 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.00258172 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.20496386 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.002961375 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.24440188 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.985142309 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.231513757 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.62625533 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.03124249 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.226252689 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.244068368 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.6362859 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.231911367 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.239851139 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.114354468 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.269566761 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.00150312 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.988944978 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.261259427 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.003584947 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.997527218 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.168760797 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.005880278 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.144252782 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.003887193 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.266412513 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.021214633 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.22975163 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.003738482 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.240500546 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.032578719 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.052019478 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.001136545 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.131152653 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.006499496 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.849155623 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.159308515 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.00797818 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.002028057 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.797222023 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.002545998 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.148150196 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.225986941 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.021033524 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.071346219 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.568496379 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.995678625 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.090184173 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.021630314 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.634337348 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.00244946 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.249011687 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.96548786 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.489483629 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.001954889 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.23869225 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.239335775 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.007338095 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.003462065 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.844482665 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.003739188 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.002787566 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.157857369 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.050022721 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.910887317 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.201977801 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.005746145 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.131023625 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.006859726 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.082380081 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.347133532 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.002747623 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.001896767 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.003047237 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.003546428 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.005644165 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.266369758 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.030009499 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.437879853 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.142903118 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.259548711 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.310159602 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.197918044 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.044945656 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.009402295 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.226332266 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.006301775 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.067507611 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.006739333 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.023708701 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.234298581 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.00880443 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.208865519 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.23937134 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.05468717 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.05180205 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.007030333 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.005894156 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.920386427 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.14977521 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.092429225 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.006287627 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.006461441 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.120193402 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.125895179 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.184709727 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.827826851 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.126150756 seconds)
  done (took 932.090742877 seconds)
done (took 1266.504303362 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.005528399 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.009334028 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.011712487 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.009259086 seconds)
  done (took 29.969946652 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.00853927 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.007724451 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.008519295 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.008980981 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.007970021 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.007904341 seconds)
  done (took 13.983945483 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.006203004 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.009380748 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.011772908 seconds)
  done (took 22.96214963 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.432671577 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.412228141 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.081795565 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.151034221 seconds)
  done (took 11.011980613 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.013482239 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.00889521 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.010027442 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.008893606 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.010401129 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.009664445 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.012938029 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.012974447 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.0110832 seconds)
  done (took 20.038741331 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.24732355 seconds)
done (took 104.14923541 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.299229731 seconds)
    (2/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.106982942 seconds)
    (3/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.087575082 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.094954396 seconds)
    (5/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.015086066 seconds)
    (6/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.012178352 seconds)
    (7/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.419812676 seconds)
    (8/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.151309718 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.395263952 seconds)
    (10/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.172432881 seconds)
    (11/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.416684966 seconds)
    (12/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.139433818 seconds)
    (13/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.070011205 seconds)
    (14/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.762901772 seconds)
    (15/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.247381844 seconds)
    (16/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.09024701 seconds)
    (17/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.02902579 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.022714278 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.031436166 seconds)
    (20/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.011995927 seconds)
    (21/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.358119785 seconds)
    (22/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.017001316 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 3.434775586 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.025991028 seconds)
    (25/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.009921347 seconds)
    (26/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.106150635 seconds)
    (27/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.358441033 seconds)
    (28/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.408990713 seconds)
    (29/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.223724614 seconds)
    (30/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.12840115 seconds)
    (31/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.24434918 seconds)
    (32/341) benchmarking ("sort", Float64, false)...
    done (took 5.725020866 seconds)
    (33/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.12381147 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.023940744 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.109901124 seconds)
    (36/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.024744522 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.248380658 seconds)
    (38/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.615472783 seconds)
    (39/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.323056643 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.09911141 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.24328478 seconds)
    (42/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.387931966 seconds)
    (43/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.331768729 seconds)
    (44/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.027657094 seconds)
    (45/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.091877495 seconds)
    (46/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.093122781 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.995977484 seconds)
    (48/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.358211878 seconds)
    (49/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.099901262 seconds)
    (50/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.017709033 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.47535619 seconds)
    (52/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.015618225 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.437305196 seconds)
    (54/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.492159076 seconds)
    (55/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.332428164 seconds)
    (56/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.940633926 seconds)
    (57/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.114010569 seconds)
    (58/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.204491895 seconds)
    (59/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.380484407 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.259947424 seconds)
    (61/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.127571857 seconds)
    (62/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.212075767 seconds)
    (63/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.097868529 seconds)
    (64/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.028905668 seconds)
    (65/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.022250239 seconds)
    (66/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.026103529 seconds)
    (67/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.41667003 seconds)
    (68/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.168812781 seconds)
    (69/341) benchmarking ("sort", BigInt, false)...
    done (took 7.021489883 seconds)
    (70/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.150644981 seconds)
    (71/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.100040284 seconds)
    (72/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.548197382 seconds)
    (73/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.986437761 seconds)
    (74/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.47554138 seconds)
    (75/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.714554257 seconds)
    (76/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.029678937 seconds)
    (77/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.230820344 seconds)
    (78/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.030991894 seconds)
    (79/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.975185485 seconds)
    (80/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.031739057 seconds)
    (81/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.398990376 seconds)
    (82/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.106058871 seconds)
    (83/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.150678449 seconds)
    (84/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.423301498 seconds)
    (85/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.032430575 seconds)
    (86/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.013305858 seconds)
    (87/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.090286586 seconds)
    (88/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.09787294 seconds)
    (89/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.15223219 seconds)
    (90/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.099698014 seconds)
    (91/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.644309165 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.184901302 seconds)
    (93/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.271240402 seconds)
    (94/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.872050341 seconds)
    (95/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.236754045 seconds)
    (96/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.077569013 seconds)
    (97/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.076498256 seconds)
    (98/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.4246578 seconds)
    (99/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.105373612 seconds)
    (100/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.085650512 seconds)
    (101/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.37119191 seconds)
    (102/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.149746249 seconds)
    (103/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.165989195 seconds)
    (104/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.296654014 seconds)
    (105/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.410908279 seconds)
    (106/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.189043193 seconds)
    (107/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.197092425 seconds)
    (108/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.13335339 seconds)
    (109/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.017873886 seconds)
    (110/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.434249788 seconds)
    (111/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.083052766 seconds)
    (112/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.018335264 seconds)
    (113/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.019916111 seconds)
    (114/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.12146045 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 4.58138544 seconds)
    (116/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.25314795 seconds)
    (117/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.126762336 seconds)
    (118/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.205588516 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.021021531 seconds)
    (120/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.149603581 seconds)
    (121/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.426138469 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.118308304 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.881217431 seconds)
    (124/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.024500906 seconds)
    (125/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.038811587 seconds)
    (126/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 3.913291079 seconds)
    (127/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.155609461 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.024425428 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.332539608 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.288265125 seconds)
    (131/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.016689417 seconds)
    (132/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.389728629 seconds)
    (133/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.197556311 seconds)
    (134/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.153769979 seconds)
    (135/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 4.862252364 seconds)
    (136/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.312058904 seconds)
    (137/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.489799992 seconds)
    (138/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.778708891 seconds)
    (139/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.054297161 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.035345679 seconds)
    (141/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.292194557 seconds)
    (142/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.315637237 seconds)
    (143/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.121573836 seconds)
    (144/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.969660164 seconds)
    (145/341) benchmarking ("sort", Float32, false)...
    done (took 5.7151464 seconds)
    (146/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.040973851 seconds)
    (147/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.086178825 seconds)
    (148/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.124957854 seconds)
    (149/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.180004812 seconds)
    (150/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.381586953 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.225828555 seconds)
    (152/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.021172107 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.279700932 seconds)
    (154/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.480429075 seconds)
    (155/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.35130591 seconds)
    (156/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.779582923 seconds)
    (157/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.73328487 seconds)
    (158/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.043479817 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.317433433 seconds)
    (160/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.153811972 seconds)
    (161/341) benchmarking ("sort", Bool, false)...
    done (took 2.236009733 seconds)
    (162/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.175421915 seconds)
    (163/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.137475686 seconds)
    (164/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.920037664 seconds)
    (165/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.316654027 seconds)
    (166/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.103332921 seconds)
    (167/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.987480563 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.156936929 seconds)
    (169/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.49088765 seconds)
    (170/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.257728357 seconds)
    (171/341) benchmarking ("sort", Int8, false)...
    done (took 4.95552276 seconds)
    (172/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.037846863 seconds)
    (173/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.033985221 seconds)
    (174/341) benchmarking ("sort", Int64, false)...
    done (took 5.658820877 seconds)
    (175/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.149164758 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.1251121 seconds)
    (177/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.329916533 seconds)
    (178/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.310661966 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.423328245 seconds)
    (180/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.884093287 seconds)
    (181/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.835733968 seconds)
    (182/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.12852572 seconds)
    (183/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.493783582 seconds)
    (184/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.029858289 seconds)
    (185/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.358257245 seconds)
    (186/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.240936433 seconds)
    (187/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.350744276 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.26859729 seconds)
    (189/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.173321351 seconds)
    (190/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.023936051 seconds)
    (191/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.258900936 seconds)
    (192/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.024762206 seconds)
    (193/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.457723572 seconds)
    (194/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.331469005 seconds)
    (195/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.022702557 seconds)
    (196/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.044300113 seconds)
    (197/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.367721019 seconds)
    (198/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.07362015 seconds)
    (199/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.042028387 seconds)
    (200/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.021988294 seconds)
    (201/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.688889892 seconds)
    (202/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.18669875 seconds)
    (203/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.033595225 seconds)
    (204/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.118560061 seconds)
    (205/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.153578764 seconds)
    (206/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.229484916 seconds)
    (207/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.136647925 seconds)
    (208/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.921307784 seconds)
    (209/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.402540074 seconds)
    (210/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.022988415 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.020659099 seconds)
    (212/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.292347359 seconds)
    (213/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.825836778 seconds)
    (214/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.343217935 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.154902097 seconds)
    (216/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.024074916 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.048036108 seconds)
    (218/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.130081113 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.353745182 seconds)
    (220/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.400926462 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.364646899 seconds)
    (222/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.082515131 seconds)
    (223/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.286207116 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.042356889 seconds)
    (225/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.722935063 seconds)
    (226/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.035566626 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.166417324 seconds)
    (228/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.023584982 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 3.881902073 seconds)
    (230/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.240021696 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.153274323 seconds)
    (232/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.777995724 seconds)
    (233/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.025513931 seconds)
    (234/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.12144303 seconds)
    (235/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.025817802 seconds)
    (236/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.256424268 seconds)
    (237/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.185904742 seconds)
    (238/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.358514564 seconds)
    (239/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.029387759 seconds)
    (240/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 8.541750399 seconds)
    (241/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.227684202 seconds)
    (242/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.159843586 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.193599613 seconds)
    (244/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.989192317 seconds)
    (245/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.186034659 seconds)
    (246/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.288857809 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.915634743 seconds)
    (248/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.453082086 seconds)
    (249/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.034061587 seconds)
    (250/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.225400841 seconds)
    (251/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.30222164 seconds)
    (252/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.767101983 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.316835427 seconds)
    (254/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.615628506 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.051916848 seconds)
    (256/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.417221376 seconds)
    (257/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.241238088 seconds)
    (258/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.034207999 seconds)
    (259/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 4.733093671 seconds)
    (260/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.733458338 seconds)
    (261/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.148122135 seconds)
    (262/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.104229511 seconds)
    (263/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.227818154 seconds)
    (264/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.026526237 seconds)
    (265/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.074576171 seconds)
    (266/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.143338452 seconds)
    (267/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.108340471 seconds)
    (268/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.89257416 seconds)
    (269/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.029668948 seconds)
    (270/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 8.345105739 seconds)
    (271/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.052907921 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.342767176 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.153834351 seconds)
    (274/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.2073532 seconds)
    (275/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.226706482 seconds)
    (276/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.42825319 seconds)
    (277/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.893154923 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.369628324 seconds)
    (279/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.349023083 seconds)
    (280/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.149007872 seconds)
    (281/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.029763145 seconds)
    (282/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.356658663 seconds)
    (283/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.344159591 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.369682446 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.044171651 seconds)
    (286/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.487968036 seconds)
    (287/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.032116729 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.191062571 seconds)
    (289/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.124403299 seconds)
    (290/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.039794573 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.026737345 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.76998507 seconds)
    (293/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.049220276 seconds)
    (294/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.716659809 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.146450453 seconds)
    (296/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.13124732 seconds)
    (297/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 5.004619366 seconds)
    (298/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.73362484 seconds)
    (299/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.420403961 seconds)
    (300/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.336825792 seconds)
    (301/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.133061369 seconds)
    (302/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.032294724 seconds)
    (303/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.356286448 seconds)
    (304/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.32947673 seconds)
    (305/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.815677491 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.287277648 seconds)
    (307/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.247571828 seconds)
    (308/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.299314681 seconds)
    (309/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.161660583 seconds)
    (310/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.031142823 seconds)
    (311/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.447123716 seconds)
    (312/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.10718519 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.030319109 seconds)
    (314/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.253808718 seconds)
    (315/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.63634013 seconds)
    (316/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.324391828 seconds)
    (317/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.250907018 seconds)
    (318/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.030202159 seconds)
    (319/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.120020888 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.935254403 seconds)
    (321/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.030065781 seconds)
    (322/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.24549922 seconds)
    (323/341) benchmarking ("map", identity, Float32, false)...
    done (took 3.59408003 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.793974813 seconds)
    (325/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.169329396 seconds)
    (326/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.110550433 seconds)
    (327/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.799222456 seconds)
    (328/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.222203319 seconds)
    (329/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.438798377 seconds)
    (330/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.810795055 seconds)
    (331/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.130087734 seconds)
    (332/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.153937859 seconds)
    (333/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.800593533 seconds)
    (334/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.033245732 seconds)
    (335/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.465791321 seconds)
    (336/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.841026344 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.323680003 seconds)
    (338/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.79323054 seconds)
    (339/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.329081243 seconds)
    (340/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.07008294 seconds)
    (341/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.398340889 seconds)
  done (took 1151.506935572 seconds)
done (took 1153.554512934 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.055411762 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.033181091 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.523230893 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.041941299 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.034066016 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.036138816 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.531016357 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.061825228 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.049923836 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.532058924 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.040131464 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.034820783 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.04812144 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.071675618 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.044524643 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.047674553 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.038854136 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.059720983 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.068895185 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.040003013 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.087085987 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.040041768 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.03379223 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.084130279 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.035670549 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.053922691 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.059478481 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.08652974 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.085839409 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.037544981 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.042824974 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.387511033 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.081463499 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.041921579 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.047617035 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.050834399 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.042136592 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.052285262 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.056767285 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.053282219 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.03549516 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.048830819 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.040645716 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.027585807 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.036805876 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.035280283 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.038672226 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.161312642 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.052102474 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.373406217 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.092265916 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.059484791 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.089838764 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.039545511 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.037802115 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.038920831 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.089430027 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.043876407 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.043399682 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.373840001 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.125079728 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.050438044 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.373862691 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.092852917 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.046135803 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.047122875 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.035366362 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.05726735 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.390063224 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.567288664 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.070389 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.057840071 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.042548506 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.039778564 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.050900016 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.53432181 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.048782442 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.600094452 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.060725253 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.057735732 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.046289984 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.040430794 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.039891493 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.057033095 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.059739854 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.039167857 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.044742364 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.044771304 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.050471995 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.392492011 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.076270987 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.530555695 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.04568825 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.06128792 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.061129033 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.603377744 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.062730777 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.060337213 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.043440253 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.394021904 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.071525459 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.062939553 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.040722365 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.053820331 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.156117679 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.059636197 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.060310297 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.040660707 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.061541204 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.045700662 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.039668514 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.054067374 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.062368319 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.075878613 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.057463474 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.040528396 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.047864338 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.04555592 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.059675447 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.049963465 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.04775986 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.050777172 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.042016068 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.091844621 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.061964699 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.053635946 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.157342578 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.046160037 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.166324546 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.055344187 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.046653762 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.041837136 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.377874673 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.080607547 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.06606805 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.048986329 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.065652761 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.063287497 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.060243448 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.0435318 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.058948073 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.046861442 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.09396241 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.041880873 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.066571504 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.096070111 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.053866789 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.048348542 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.061338474 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.07814868 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.064630743 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.046217377 seconds)
done (took 321.291056379 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.096034579 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.039785921 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.120506832 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.039951588 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.109371275 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.091162795 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.040705353 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.039452452 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.042508442 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.423842285 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.042931316 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.04523241 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.042245286 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.041344409 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.09044146 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.043373869 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.041477426 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.290342298 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.040921236 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.100983058 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.043597612 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.040408517 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.042171299 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.432711901 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.03996916 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.042790232 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.101616641 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.040900121 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.281948261 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.041701269 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.041529661 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.283323517 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.102897005 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.055032719 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.054424421 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.054021625 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.10995781 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.054016081 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.09043708 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.091990336 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.118131001 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.07725212 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.045150734 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.040457392 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.046166834 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.043668778 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.042275833 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.072002504 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.042861775 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.048094272 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.273007105 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.049594217 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.049537892 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.042148127 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.044305868 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.057826834 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.042447716 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.0453256 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.105345446 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.043832971 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.094276842 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.434134137 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.425870675 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.045203122 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.043139202 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.047613775 seconds)
  done (took 195.254467594 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.112940909 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.128385846 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.111737271 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.047376742 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.095548807 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.113250598 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.051028176 seconds)
  done (took 16.627897001 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.054152699 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.046614957 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.069855542 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.070733804 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.045124391 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.184628265 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.057338257 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.053029415 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.072653258 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.049159784 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.389443428 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.069067946 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.053968765 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.042824327 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.060904382 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.077516397 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.052220076 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.04643701 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.14496634 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.126721297 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.05201375 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.055925341 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.076197536 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.058039105 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.047615887 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.048448443 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.049138605 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.055493206 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.048751545 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.049867837 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.05059452 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.06403989 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.047437356 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.047860648 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.04801853 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.051545906 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.050254173 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.046800057 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.046878667 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.048327953 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.048431146 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.047448521 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.045833515 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.047771815 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.04603259 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.073367838 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.033746933 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.050965054 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.050760128 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.05198992 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.077365212 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.050603493 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.049401399 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.054336197 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.088381285 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.055258824 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.046781156 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.050426614 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.050971294 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.052468074 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.050824072 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.127638297 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.071678533 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.050541401 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.072623722 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.086056056 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.051466978 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.048673763 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.048572415 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.074888168 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.050448016 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.072212302 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.051582231 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.150876517 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.048670431 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.192128537 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.076038318 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.054956304 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.054714868 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.049964188 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.059057234 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.048476213 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.051367697 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.055289905 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.05291464 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.048800073 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.049756603 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.052499 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.058614339 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.048627478 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.09572677 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.051700667 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.051223892 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.152430405 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.040290613 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.149633818 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.076938127 seconds)
  done (took 222.482618601 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.056084035 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.054410929 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.065925916 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.051107933 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.053306422 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.055793912 seconds)
  done (took 14.309974472 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.052946728 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.053357902 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.049165226 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.049027884 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.052173028 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.054525719 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.054752591 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.050768423 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.055553965 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.05192922 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.050739254 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.053461587 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.052199078 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.049130628 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.051835652 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.051382885 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.050576026 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.050356511 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.050019899 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.053081866 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.260125084 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.051680247 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.050644844 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.057405552 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.055948567 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.054463987 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.058673014 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.051890174 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.051471822 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.057380265 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.058772474 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.053407918 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.056422697 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.057143754 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.05466838 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.05617617 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.055298595 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.053305168 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.051125655 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.052501408 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.054032045 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.055131229 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.051991517 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.053488669 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.053977563 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.059771221 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.055470858 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.061998606 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.053252579 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.05412463 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.054477665 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.053244152 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.052323528 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.054713163 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.058021415 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.058445428 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.058080118 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.054741305 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.05347691 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.055546488 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.030575486 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.053558924 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.057864965 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.058434405 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.062316618 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.055580001 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.058475581 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.059090741 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.054672841 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.052695477 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.053609924 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.054089372 seconds)
  done (took 151.067110706 seconds)
done (took 601.708268219 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.147020569 seconds)
  done (took 9.123135521 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.173816058 seconds)
  done (took 9.253488454 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.311506314 seconds)
  done (took 12.29033775 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.072355848 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.074521297 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.069234205 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.051666249 seconds)
  done (took 30.2545123 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.391685696 seconds)
  done (took 9.369029808 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.043094729 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.052503099 seconds)
  done (took 16.148111386 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.098381061 seconds)
  done (took 9.077594113 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.526666369 seconds)
  done (took 9.522269712 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.078017738 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.057334314 seconds)
  done (took 16.134667751 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.058656266 seconds)
  done (took 9.036440484 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.808965759 seconds)
  done (took 9.883774148 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.07512766 seconds)
  done (took 9.069882563 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.12797241 seconds)
  done (took 9.106422093 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.940242691 seconds)
  done (took 9.916655304 seconds)
done (took 170.166158995 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.064866642 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.057195771 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.060051673 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.057179537 seconds)
  done (took 30.216373563 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.092048093 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.094353033 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.098116157 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.089040269 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.081717236 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.087038488 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.095885009 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.093297154 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.080888698 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.090183051 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.093914308 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.092482515 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.090036126 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.102625573 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.098904455 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.088822058 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.092040765 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.09459994 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.08091527 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.098825279 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.093170556 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.090965808 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.058669334 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.058554401 seconds)
  done (took 52.115832223 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.250729935 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.126199055 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.2123415 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.102715504 seconds)
  done (took 10.671552406 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.060666309 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.123778965 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.108260948 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.108250499 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.147719604 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.160792539 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.111446171 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.269789053 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.175119913 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.189401363 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.065960893 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.083489681 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.084871184 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.105410039 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.162841694 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.057553242 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.062295985 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.173615307 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.121263553 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.272961073 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.063586506 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.116264025 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.154796342 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.112789353 seconds)
  done (took 53.073501458 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.059762423 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.067501517 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.071438681 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.062191116 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.060850526 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.063652427 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.064717401 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.06260538 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.083832588 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.064042865 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.06345489 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.062713274 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.065721849 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.063187301 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.058742379 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.075980506 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.077865958 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.062924155 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.065465256 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.071992538 seconds)
  done (took 43.306261842 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.060491985 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.909281754 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.408332385 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.314852446 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.061697252 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.064364205 seconds)
  done (took 32.804862953 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.075640292 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.078359915 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.066494444 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.084860105 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.110330581 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.067254454 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.120451367 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.224094033 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.069430184 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.116823236 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.081413604 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.069514978 seconds)
  done (took 27.148491164 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.060386481 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.061742617 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.061139639 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.071783604 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.069483132 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.068489568 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.068314917 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.063533666 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.072308756 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.079009916 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.072885347 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.07171631 seconds)
  done (took 46.804160966 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.27639846 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.287646264 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.287430302 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.501689775 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.37190526 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.048676116 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.349382371 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.277736494 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.837893209 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.855582962 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363536999 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.049445051 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.013959731 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.992568858 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.980137132 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.308225672 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064048966 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.925154145 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325937412 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.11788953 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065235274 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.067205918 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066364957 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.350353957 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392076065 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.072063984 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.276405926 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.078433372 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.065015029 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.293927508 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.393334669 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.10905567 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.26539887 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.321425434 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.40801862 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.120122529 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.177868692 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.088427974 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.101708826 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.105402493 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.07629518 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.05584755 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.583374144 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.075439105 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339215741 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069386014 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.071291102 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.166383532 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.993829241 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.458724721 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183506882 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.066620645 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.103690731 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.499782004 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186496325 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312192609 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.069349225 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.086535116 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11631218 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.392141663 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.180644202 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.170426026 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.284158531 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.995050118 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.462859011 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194741183 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.070064741 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070777564 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.763779709 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.312375539 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.147573861 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.458450472 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.831042546 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.070036241 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.076161151 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.111547842 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161283107 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.067443747 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.364425336 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.073432312 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.994244544 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.164086966 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.474721332 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075657326 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.070290419 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.078015436 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.917001817 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.998301256 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.168813374 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.391149068 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.39548418 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.068483327 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.070073759 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.092678419 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073902779 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.017373903 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.472898471 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.102634978 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.99997893 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.620021371 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.396979322 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.025445299 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.397797094 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102704046 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.352638746 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.213484956 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.475541386 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.281405963 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.311451192 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.602612889 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.074713891 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.63347825 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152778682 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146393704 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.069651274 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.630934648 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.09884033 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.427592668 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189482524 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.074730162 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.997809029 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.080781698 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269864704 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.400040519 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.115565569 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.069490623 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.077256966 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.07458481 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.076040894 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.235734698 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090612305 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.3682064 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.149805916 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.070072556 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.00879474 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.073127986 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.359659155 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.484043442 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.122965621 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329623025 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.339732669 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.768460078 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.667482745 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.118883018 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.343195225 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.147393207 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150416032 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.671968285 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.209696041 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.168246742 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.983524656 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.206024804 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.080252367 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.078934904 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.214770637 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.48322611 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.501397956 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.114835298 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.07563442 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.029273483 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.101234483 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.306366674 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151475224 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.103523256 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.078689039 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.157427159 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301817156 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.074548281 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.998394135 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.327103603 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.322307624 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.366214591 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.482313032 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157897644 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.146510778 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.084176355 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.286381823 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.156925855 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.719465295 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.618894005 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.300586321 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.49438687 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.030582917 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.715568391 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.476538005 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.462321266 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.090724063 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.528000416 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.09999901 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.605678836 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.099145171 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.601546929 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.001582404 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080875121 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.414099047 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.034691608 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.387730235 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.146083915 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114459323 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.074851754 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.075940457 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086970489 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.018144798 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1843981 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142457691 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146748387 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004211987 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.596888321 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.107032559 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.084025506 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.074344942 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.441531038 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.902149758 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032161386 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.076008146 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156859307 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.816979613 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.623657271 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.078684136 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.079064283 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.671325855 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.083109771 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.759954812 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.083100119 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.969032053 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.106299644 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.406790713 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.780956389 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.367492442 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.156570952 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152145531 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.07949306 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.083959346 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.776311321 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.087203694 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.779050577 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.359043859 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.356627962 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.522451734 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.145766932 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.289225091 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.093285605 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.07775403 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.590577676 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.103995144 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077568539 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281388413 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.591178062 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.4720409 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.724938838 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.163171197 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.079874216 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.350271584 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.084954066 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.412431194 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.764373241 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.090789015 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.077868915 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.342827493 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.76320752 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.078943937 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.987205286 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088368783 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.294290767 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.283539275 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355854978 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.38180947 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.53346999 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.00513299 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.084973811 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.105166921 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.324627038 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.08167291 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.113881744 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.522655649 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.15768948 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.50629226 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.362530823 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.533561876 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.713751631 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.347891525 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.147931482 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.094015111 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.738980603 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.217241461 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.009702031 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197387836 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.00369255 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.785750525 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.372913487 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.097918014 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.351313364 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062034019 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.423256342 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.38338271 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.41508495 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.129708179 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.112463203 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.004748118 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132154958 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.079867546 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.124435548 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.190547515 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.086802768 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.473257624 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112667171 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125623467 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.088803598 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.614342914 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105809794 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.082288258 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.772785916 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.102951425 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202615975 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151251081 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.847902798 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.431328842 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.101797749 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.962217468 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.904388436 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.351462403 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.139897183 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.543454802 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122134265 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.488485937 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08345522 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.295063957 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.089064295 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.483018139 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118691702 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.360949247 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043591656 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.291058217 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.290686363 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.104999233 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.08851025 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.009411142 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.190015206 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.94319333 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.068145391 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.086559572 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.767065278 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.542494372 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.138047071 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.56872921 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.906256123 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.085986942 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.488315119 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.480223276 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.554135715 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108821195 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086404418 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.476135327 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.216085956 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.46454586 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.357598382 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.090705531 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.108535035 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.297572522 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.212358903 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.004106696 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.57543156 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.663458616 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.786293281 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.095340167 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.293178509 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.481286937 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.2269169 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.11297912 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.163500974 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.491488536 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.354436353 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.156152612 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.012099659 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089735715 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.477733316 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.481805926 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.180065405 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327606267 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.416203734 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.47429605 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.421524714 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.375160801 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.520537354 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.532168558 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.48715884 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305631122 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.466893807 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.417437651 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.676796943 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.498990327 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.297940579 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182405567 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368945157 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.968484947 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.796092186 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.332118627 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.090714488 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.018157777 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.293770285 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.100482315 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.344141474 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.611458318 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.335986367 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.41581407 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.562795238 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.627107192 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.117669212 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.10920177 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.053183224 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.106308743 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.108066424 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.087815012 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.579062966 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.374017119 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.102688073 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028730063 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.75919078 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.013759517 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.303451439 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.119519081 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.11864438 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.645285875 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.405688641 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.190537739 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.377150274 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.175638149 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.119578632 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.015245964 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.856245186 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.038022389 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171838939 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.514258691 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103295572 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.090754539 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.296172383 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.01785717 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139621901 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.098014151 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295657014 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675175561 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.359869241 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219288225 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.34372649 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399012838 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.994181083 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119875351 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.363528515 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.01479216 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.576375248 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.792168954 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.133858708 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158992765 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.09371463 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.092658864 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.364355242 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.489364418 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.186546752 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.535565308 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.118416917 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.114618334 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.495829382 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.184421788 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.0910697 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.096884594 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.426775838 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.31715231 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.089230634 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.084748126 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.305182119 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167612245 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.286230246 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.167191189 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.60808567 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.096438393 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.986659321 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.193519146 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.042841908 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.007907999 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.881660709 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.151449989 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.078559586 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364569137 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.720009257 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.294531942 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.489472528 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.950759417 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.127691343 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126961673 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.093834893 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.093943245 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.486623045 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.402663341 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.094987935 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.362889605 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.143927991 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.099726634 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.754209543 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.060032773 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.097967291 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.80264753 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.971990524 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.827497055 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.4882173 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.096033165 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.102792238 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.094400161 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.021401701 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.124513952 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.224741134 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.07585442 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.104764891 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.471287971 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.474440386 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.186893507 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094612372 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.098093421 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.097636376 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.308020383 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.608651306 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109835337 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.795323518 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.300400696 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.098534012 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.583992967 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.550594397 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.212452132 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.126401932 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.134314352 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.336858632 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.640063598 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.139391126 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.065895197 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.321778661 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.097180469 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.36583916 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.368356599 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.09633065 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.307582696 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.431136823 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373045206 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.446472722 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.406106437 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.163129348 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.145311945 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.982998096 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.096542169 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.101211098 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.363463151 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15581617 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.094834113 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.105135886 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.649322286 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.86651593 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.57322833 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257448783 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.476900055 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.965150841 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.848132573 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.095607186 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.0238846 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.094606804 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.124415868 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.09917308 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.024270516 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.808417199 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.93633682 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.308182403 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.407218771 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.020477473 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.299164511 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677714785 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.022774161 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.068514634 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.038074637 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.362008979 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026826058 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.098937372 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.054771717 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.450878984 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.683780242 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360212634 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.10052963 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.040277975 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.102035761 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.100358667 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.10376319 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.183618631 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.102310556 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215655083 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.370718809 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.542133719 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.205717063 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.736787937 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.808933006 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.032905335 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140742376 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.655618818 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.664924939 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.450731379 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.228232476 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.809986689 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.041196061 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.097751926 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.11318334 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.357744319 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.099257307 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.098815933 seconds)
  done (took 2203.418266835 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.152749505 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.141299501 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.143936082 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.185632391 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.157449502 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.230834103 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.154629555 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.14843979 seconds)
  done (took 59.332225266 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.095951838 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.064892124 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.10437446 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.098614514 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.095747166 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.091517328 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.287449673 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.120290134 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.098033427 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.10121607 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.097995838 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.099363113 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.097961596 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.094964095 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.102374523 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.403165403 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.619529749 seconds)
  done (took 80.742888584 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.171756725 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.333382627 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.117606559 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.792549284 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.129564115 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.122544777 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.116172368 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.118241939 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.263877319 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.417153093 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.122822077 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.121258475 seconds)
  done (took 92.867214519 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.118719376 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.11742599 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.117655447 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.11793116 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.117316027 seconds)
  done (took 12.625135442 seconds)
done (took 2747.164722716 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.360887455 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.215543585 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.191155542 seconds)
  done (took 6.442775969 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.26175823 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.308770855 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.422139526 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.403281376 seconds)
  done (took 11.438885967 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.430213173 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.497380267 seconds)
  done (took 6.963639568 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.550586745 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.11757975 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.512419631 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.120420403 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.118694378 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.12110758 seconds)
  done (took 23.404613553 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.118753678 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.118789591 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.118025998 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.118829044 seconds)
  done (took 10.514745908 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.11655791 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.887450097 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.117005248 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.129813373 seconds)
  done (took 22.285210297 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.304816646 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.960351982 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.889897004 seconds)
  done (took 13.192895363 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.936581474 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.571792325 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.732100919 seconds)
  done (took 10.27866634 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.952749837 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.935070119 seconds)
  done (took 7.927710789 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.25757119 seconds)
  done (took 4.296273002 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.950777469 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.432471596 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.587986172 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.635026186 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.700981662 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.339336404 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.456275652 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.396760516 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.516262556 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.538088059 seconds)
  done (took 27.592056561 seconds)
done (took 160.917315334 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.561142643 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.147739302 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.32990481 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.506736392 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.364807255 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.328948846 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.414488775 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.493494971 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.185182341 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.164464405 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.48830693 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.360717773 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.363139075 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.144653742 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.368739841 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.143696968 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.355678279 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.583879577 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.177887335 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.395513307 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.405378685 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.12120319 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.344933973 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.162580729 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.365373286 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.279070044 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.749215409 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.147394358 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.329168497 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.764723471 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.283632169 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.541588987 seconds)
  done (took 177.41192343 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.002907129 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.119655234 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.123496488 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.122464242 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.500682329 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.121800173 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.121555706 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.119862038 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.35187006 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.341814037 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.120600226 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.500503467 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.120879536 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.12341796 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.122869353 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.12213968 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.475984406 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.050821114 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.12095055 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.121622436 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.12318681 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.333682244 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.120116748 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.361488406 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.452894187 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.123542149 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.122255604 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.12277601 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.121171556 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.12258204 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.122186374 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.12235659 seconds)
  done (took 216.096959158 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.122292083 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.122610192 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.125860195 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.120921265 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.122440489 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.124986732 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.121731867 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.123971798 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.939993218 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.922463757 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.125000935 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.123586944 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.123334918 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.12314137 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.125566731 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.124577293 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.121627169 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.124325946 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.123860847 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.125249535 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.125400177 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.860380473 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.12403305 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.882590686 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.125427286 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.125901019 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.12491696 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.124525466 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.122838175 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.125066646 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.124198619 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.124686573 seconds)
  done (took 229.122639178 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.366256702 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.124523803 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.126263474 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.138698044 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.098840839 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.12717968 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.128951127 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.36231575 seconds)
  done (took 21.51763077 seconds)
done (took 646.202152881 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.440290566 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.844149917 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.260771212 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.150837407 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.388020388 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.195974664 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.145624128 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.206198101 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.803579203 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.224722665 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.538584168 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.152995634 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.838911061 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.176743621 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.263853719 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.205078683 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.492609742 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.756202859 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.284589772 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.816177685 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.347831643 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.09773543 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.230379848 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.836721722 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.549612841 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.115662391 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.181982402 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.497459516 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.151463747 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.379020206 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.809771408 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.421888909 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.166939988 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.147257686 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.200613585 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.191839913 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.351431308 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.163316411 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.256045072 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.897420551 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.804285015 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.679098002 seconds)
  done (took 110.711034777 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.135835606 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.132568268 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.135291664 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.134261556 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.131074648 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.13430474 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.134656385 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.13360246 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.134325858 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.133740964 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.134207143 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.145568624 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.133088867 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.144199592 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.134746118 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.135242219 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.1346163 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.143939588 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.134089186 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.135260106 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.134859472 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.133799922 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.131592476 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.135772022 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.135427276 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.135060579 seconds)
  done (took 57.57590288 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.129577503 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.28392986 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.415579766 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.165262261 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.130938003 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.133451882 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.160461521 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.138927686 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.13349019 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.133082313 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.227520827 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.135079021 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.142243274 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.414925236 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.162822199 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.130648929 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.132168128 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.133299111 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.293670587 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.148724696 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.161270612 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.137517336 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.161398038 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.147315806 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.132508231 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.132280107 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.134578168 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.553571506 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.147768566 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.230320646 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.192070671 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.168209335 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.483506463 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.428444299 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.205862973 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.141199364 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.132173532 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.253143919 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.144406826 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.134108588 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.162096699 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.142161253 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.417301137 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.652285745 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.148970389 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.132796766 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.550675665 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.284760372 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.182259435 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.148793419 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.429366581 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.167008212 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.1363794 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.135081685 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.172043592 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.146757733 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.133951063 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.41616487 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.152676329 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.163156932 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.142336126 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.136451599 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.299641022 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.145223593 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.290212081 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.130362191 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.141801396 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.135976328 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.422883334 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.168344769 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.645429857 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.150560835 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.135723036 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.231525464 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.294025854 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.576547149 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.14937569 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.301354226 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.500470251 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.173723705 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.147475085 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.538952878 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.178784248 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.143067712 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.124820455 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.132753782 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.136132711 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.179382993 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.16394747 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.558432649 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.646337343 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.432540182 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.176458317 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.148016851 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.137943701 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.413912376 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.149278437 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.135541722 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.419540594 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.675464103 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.152199608 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.142971848 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.626804094 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.153734128 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.167147273 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.147389034 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.435940765 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.171279821 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.177416861 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.136795138 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.145016552 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.138451078 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.168119978 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.147212392 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.135677602 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.619814436 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.293075054 seconds)
  done (took 263.665646166 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.140428781 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.136356984 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.136951798 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.135560015 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.136142938 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.138095656 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.137810613 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.137723308 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.136802374 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.135335839 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.134784338 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.137247078 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.138526339 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.143137006 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.174383523 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.139162893 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.625081194 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.1369526 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.137931034 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.138177162 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.706655547 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.143906211 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.136673033 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.138163395 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.138587783 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.136866349 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.144458074 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.170367618 seconds)
  done (took 175.055741989 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.154812794 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.302167672 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.152233816 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.187161861 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.152073635 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.165210173 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.161404945 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.154597365 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.146088078 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.138759721 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.152049553 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.169966592 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.14745575 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.219179106 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.172856242 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.169074638 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.219133566 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.148196407 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.140299139 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.161328457 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.189339096 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.153524705 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.168238958 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.194858934 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.170035708 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.189217237 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.15354937 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.140684383 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.152024239 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.232259564 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.160570856 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.168457354 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.176385012 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.163061964 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.235397106 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.236841864 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.2230651 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.174893701 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.143736238 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.138233457 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.141012902 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.143864691 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.193756233 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.156289467 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.142220817 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.234919174 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.162117038 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.145921859 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.16199866 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.142929935 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.154766724 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.160438744 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.175042358 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.24466924 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.190082295 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.166035854 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.171960198 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.162082952 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.143606205 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.216839697 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.15001014 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.240781571 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.164622554 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.143029616 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.142606166 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.151089196 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.190929035 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.179861052 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.222260914 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.148944771 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.229282746 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.197996569 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.156193607 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.142323288 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.145581783 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.192670855 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.230497594 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.199126348 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.204180173 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.187279684 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.152206982 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.142961609 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.145034079 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.171254422 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.159912219 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.235127197 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.238769008 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.149656814 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.156240722 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.143334984 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.143777883 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.166106587 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.202512454 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.19668582 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.229377391 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.180209617 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.179280302 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.155090469 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.156977395 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.147847961 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.174998471 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.152060661 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.163657017 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.488638 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.182955414 seconds)
  done (took 230.685514414 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.482530365 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.186869498 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.212170919 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.412133104 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.494531931 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.037727988 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.184062941 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.182885388 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.206280884 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.309737333 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.253137518 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.22813475 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.181895065 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.166025501 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.186861028 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.204389843 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.255032528 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.497845826 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.282127089 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.675701236 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.190731818 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.431925427 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.480713536 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.536253752 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.235601311 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.569028539 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.83323782 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.280014653 seconds)
  done (took 70.265865299 seconds)
done (took 910.007616072 seconds)
SAVING RESULT...
DONE!
