cset: moving following pidspec: 11677
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.900562437 seconds)
loading group "shootout"... done (took 1.239892925 seconds)
loading group "string"... done (took 0.669096003 seconds)
loading group "linalg"... done (took 8.643961463 seconds)
loading group "parallel"... done (took 0.166787508 seconds)
loading group "find"... done (took 3.016418343 seconds)
loading group "tuple"... done (took 2.149460262 seconds)
loading group "union"... done (took 14.987427212 seconds)
loading group "dates"... done (took 1.461880825 seconds)
loading group "micro"... done (took 0.222280964 seconds)
loading group "simd"... done (took 4.810332885 seconds)
loading group "io"... done (took 1.079471811 seconds)
loading group "random"... done (took 9.539610211 seconds)
loading group "problem"... done (took 1.510274051 seconds)
loading group "array"... done (took 25.039177747 seconds)
loading group "misc"... done (took 2.0076345 seconds)
loading group "scalar"... done (took 43.960015847 seconds)
loading group "sort"... done (took 3.348645451 seconds)
loading group "sparse"... done (took 12.853430126 seconds)
loading group "collection"... done (took 17.945812178 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.558222587 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.130895864 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.136660435 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.130242092 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.191652389 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.127420754 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.139431463 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.092368102 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.869394374 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.146703439 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.120352071 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.451508032 seconds)
done (took 5.684869654 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169436434 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.095350185 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085615815 seconds)
  done (took 1.53395626 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.075025086 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063615214 seconds)
    (3/3) benchmarking "different"...
    done (took 0.070482993 seconds)
  done (took 1.562159511 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06784096 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.140316421 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069044197 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.069143311 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.072508057 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068686268 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068854484 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068972564 seconds)
  done (took 1.914153292 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074694188 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070428652 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067694993 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069998733 seconds)
  done (took 1.641366589 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067830718 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.125556993 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067056177 seconds)
    (4/4) benchmarking "different"...
    done (took 0.067113127 seconds)
  done (took 1.683743748 seconds)
done (took 9.946546569 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143007298 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.798966998 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.765986407 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126094997 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.252206352 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.451679815 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.125808176 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.186872383 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.091530794 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.076582379 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.124418495 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079847104 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.613235932 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.406366408 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072651195 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171365291 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.653732102 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088666458 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134311826 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.448547163 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074653588 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088601491 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085649744 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.07242687 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.333751643 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15612786 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.675230298 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.179238267 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.071164513 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096018311 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071527862 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079178161 seconds)
  done (took 11.188641169 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094293209 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.09110744 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069769269 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124699085 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094632726 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.07140731 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076329797 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068914521 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089759374 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124701852 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091142817 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099385447 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067307332 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069840771 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074811436 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.203589131 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081071646 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082226644 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06843796 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081732877 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106516367 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078974099 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078898317 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078599586 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130492001 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169648395 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097581042 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098744808 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068551761 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079775327 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.11859336 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128931335 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067471266 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06647158 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120464865 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096334079 seconds)
  done (took 4.820358796 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.896355511 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096591014 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084039935 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075645428 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106565395 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114537537 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122043109 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123200778 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.101253163 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069631591 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153594593 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.648979375 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.148504637 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072069081 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.12150298 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.363039007 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.062801648 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071334855 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069405004 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072185568 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070866188 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113511712 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066821956 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178103771 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.58565276 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072627531 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069921172 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097474502 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066961551 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.142193149 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.096519957 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070987573 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.558463269 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066288641 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064656712 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089196684 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094563596 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066822416 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067734467 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.226129507 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079637829 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067408063 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109307252 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079995957 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.496580877 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070770741 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.568873604 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226461585 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074212349 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072682473 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102733171 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065145909 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068110842 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.851908166 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.126487207 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068123318 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273349151 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068295396 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06915972 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069929752 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.10027432 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068067672 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069405197 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07367607 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097036311 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.875453989 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.09052133 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100386537 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068606654 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.40242904 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076842931 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070735021 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070389315 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084300093 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111928732 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067159807 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06714334 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107423773 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089301702 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089477525 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070569684 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067891749 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067070246 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065071305 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321703658 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065174437 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.182641657 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067530593 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068109482 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.487613317 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065390426 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067159147 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068905593 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.090523666 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067448162 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064958953 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065379628 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100659281 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069194284 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.449659413 seconds)
    (100/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06576634 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067393921 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.467656324 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.06909382 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.106160784 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119921669 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068432305 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.096065431 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069015098 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065338683 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074100794 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066425241 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065214597 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070151806 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066405101 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067294224 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069911301 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069135513 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068451677 seconds)
  done (took 22.927268908 seconds)
done (took 41.193041882 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.313317833 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.07948835 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079591164 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079225836 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079290199 seconds)
  done (took 2.042493031 seconds)
done (took 3.545360206 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133802862 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.095484925 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06539788 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101556184 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069522393 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102425071 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108842301 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105094926 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069742598 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069299856 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069553675 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102707155 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105344735 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069380622 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098398105 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104420053 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069630843 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.068916755 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069594864 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069527006 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069329373 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064967121 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069640244 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069514473 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.100277852 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069903643 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065645998 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099835735 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069410216 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099145178 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069266258 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.06919328 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069895362 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100403913 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069022345 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.100400328 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065396031 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069275147 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069875417 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070096129 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069521995 seconds)
  done (took 4.807165714 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071950491 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082436557 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083977654 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06281617 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072268858 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083421549 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062776258 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082516195 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08933383 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083243877 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082797694 seconds)
  done (took 2.314988183 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07108548 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083659198 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088210113 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063191826 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074323278 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083769517 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063096707 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083407534 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086077097 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084311653 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084802444 seconds)
  done (took 2.302569267 seconds)
done (took 10.855445561 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.09809446 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066907596 seconds)
  done (took 1.586444657 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.221207046 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.507203936 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.45517361 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.094803484 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.073156697 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.087007046 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.208218329 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068497587 seconds)
  done (took 8.327155972 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.102985099 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070294753 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069555498 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069203276 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070983527 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069193561 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069479894 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068291612 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069181113 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07031752 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070286155 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069493527 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068307621 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069632035 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068630835 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068136519 seconds)
  done (took 2.668245861 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105208463 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.07056574 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.10049482 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063090399 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072905103 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06345041 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071857545 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073840453 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.07094022 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07185165 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073102178 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071661404 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071589399 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071869172 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073620692 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073957036 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073810256 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071563063 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073864578 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074088909 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073000873 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074016792 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074246195 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072127965 seconds)
  done (took 3.339165643 seconds)
done (took 17.359027095 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176914269 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075177642 seconds)
  done (took 1.684906246 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069066447 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070041799 seconds)
  done (took 1.585722815 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074363834 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061918641 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079940986 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071616709 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062153374 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061761664 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078399145 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062593606 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062161154 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062663323 seconds)
  done (took 2.123966897 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063757455 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069892077 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067269716 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065457259 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068153182 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062894024 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.066113108 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06419913 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070232178 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063224785 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06732773 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084341263 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06651398 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084717985 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066017849 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066851925 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068271191 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065956269 seconds)
  done (took 2.680852896 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061959994 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062727101 seconds)
  done (took 1.581376752 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066234103 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062577465 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064945867 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065826831 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062708129 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062014366 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062968891 seconds)
  done (took 1.897926741 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421835421 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.123109814 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.342828277 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069485752 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076792529 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.256958665 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064322331 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069640998 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069206314 seconds)
  done (took 2.988727203 seconds)
done (took 16.005294883 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082752626 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.183670906 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088327837 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.408153139 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091825073 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067891745 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113299177 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.174479839 seconds)
done (took 2.685370582 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215322191 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.175030313 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.371795293 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125904311 seconds)
  done (took 3.135015102 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337922283 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079133557 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077195432 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067059437 seconds)
  done (took 2.033727162 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065448418 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072261085 seconds)
  done (took 1.602743857 seconds)
done (took 8.461356336 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073056231 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.097952999 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062122184 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064463533 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065175798 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.064587507 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063856447 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064834868 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.073458508 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063775435 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.065112509 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064859745 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064789954 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06447384 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064729433 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064983743 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064438687 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064529674 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062947717 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062853851 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064458056 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065119256 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063721169 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064643909 seconds)
  done (took 3.088896271 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080775149 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066103389 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067465884 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067184361 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067722876 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066979171 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06765665 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065970813 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067434029 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065627463 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067881434 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067655423 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065901358 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067985754 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06585687 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067662801 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067129276 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066171453 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065904281 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068016333 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067210698 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066696529 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068225415 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067189821 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067782198 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067825118 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.0664302 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066210255 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06739058 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.0682625 seconds)
  done (took 3.50506919 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066829384 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060849563 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061004336 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070295211 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060625999 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061152794 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061983796 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060584122 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061253224 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062005191 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061600692 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060820665 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061344247 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060955811 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060598259 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061167187 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065256873 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080336166 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060949596 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060946928 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065087498 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060903951 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060610404 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06112844 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061005688 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060707739 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060426478 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060978317 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060563626 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061883303 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060789833 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064619768 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06601104 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060615715 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070410311 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065930719 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.06094034 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064699559 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061604632 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06072082 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060302282 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060302504 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060943387 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060689366 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070871206 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060654754 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061727995 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061321373 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061284405 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06052564 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060774651 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062569562 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069433845 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062411522 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060596606 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061614155 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060726146 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061720984 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061372796 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060142024 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060224773 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06436262 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062206418 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061259273 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080481533 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062209044 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070470104 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060781469 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061917721 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064838737 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061022504 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078076071 seconds)
  done (took 6.01393856 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072107613 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072755225 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079852534 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071298587 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064989589 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062138203 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065818598 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061766116 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071516069 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065989463 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062467875 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065648094 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070986974 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066304439 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063496362 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070720147 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065984404 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065301903 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062158633 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066281337 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063006514 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065303828 seconds)
  done (took 2.969607629 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136710058 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066977034 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106578407 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.075533213 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069615083 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075191689 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067005203 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066960831 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067012199 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067365061 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067123242 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067179038 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068724283 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066868808 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067045983 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067265326 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066800673 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066958411 seconds)
  done (took 2.818201556 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077403539 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066359226 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089814111 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066513616 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066545429 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066619678 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070415623 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070517865 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066029686 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066913839 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070440348 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066279753 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066550479 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066594931 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066536795 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066734163 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066336988 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066720693 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070288905 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070059334 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06963631 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070428199 seconds)
  done (took 3.008025679 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077716733 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065355759 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080550719 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066849526 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061448288 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061556012 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066582452 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065687555 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066727602 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064904679 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065543847 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.0610406 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067101051 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065766342 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067528217 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06648134 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065295938 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065597041 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065386081 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061416403 seconds)
  done (took 2.81410398 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087306447 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063689999 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063828725 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082823466 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063947714 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064016432 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082856468 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06458396 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064024907 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085515994 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063970815 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06384443 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083437301 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083107693 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063639385 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.082934741 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082814681 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083168642 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063688568 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063651677 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085767411 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064119527 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082808106 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063708163 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063886676 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063677966 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063988101 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082848346 seconds)
  done (took 3.514246669 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065031189 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063986916 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064456484 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064875898 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065240304 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064856528 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065058109 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065749597 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06447847 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065081991 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064699353 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06470402 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067103627 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064173773 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064477559 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064109457 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064179842 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064849199 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064795595 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064863707 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064161661 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064415348 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064392734 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064701836 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064810266 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064617651 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065627089 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064574703 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063841317 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064861913 seconds)
  done (took 3.434994243 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073619445 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072105276 seconds)
  done (took 1.638911178 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063214317 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078688705 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060599961 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073195314 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069239254 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064476555 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070230631 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069307849 seconds)
  done (took 2.03728401 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067224348 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090840361 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.06271234 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063243683 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06604968 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131747895 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074973451 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074953446 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076505842 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065013071 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063373439 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074540785 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062268542 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075997379 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063968172 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071282488 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070188897 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080076684 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076070683 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06078859 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075244702 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063514808 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061564233 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063450521 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06289976 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069608195 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078405751 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07489292 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071358982 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060426669 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080821672 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061658937 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062555658 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070902102 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065583487 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061678014 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098575812 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062053679 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066813688 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060840421 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073774733 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082440149 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075789682 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079469349 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063278122 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063492902 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061220398 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06361784 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065505411 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070800272 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061202979 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06883876 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060620201 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062942821 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072219209 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06172826 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06694178 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070984158 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074937492 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072192318 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070848708 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077206193 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071259325 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069580304 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062632114 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081360458 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063511672 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075211755 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076409862 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063092242 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074757433 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061237101 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060740773 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060918894 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095620495 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062883261 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062815248 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061528871 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061376677 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063042349 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071188213 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067468493 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068728123 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065286955 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076964294 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070699808 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061407923 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068561445 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079136888 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06480745 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061679316 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078041416 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065109146 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061158972 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079417052 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071436951 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06387853 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06283391 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065321264 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075820765 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062825688 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059867158 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069515021 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063002588 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063828559 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065903845 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069425727 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061568977 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071596042 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.06638431 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063101983 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060290756 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065475468 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062355323 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060484245 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070636056 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061462525 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075730949 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067736811 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075937343 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076248805 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072222098 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077113865 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061861446 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.06032904 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079308628 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070993345 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.199081289 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080771928 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061793174 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072586655 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064382663 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063139931 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071235049 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061523141 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063671268 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062441246 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067566877 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063407301 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063810875 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067482896 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070562154 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074280684 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063167956 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071516367 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062383279 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077303539 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071763383 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066601399 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065365282 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062535348 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073610422 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069184266 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070810928 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061178261 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062352142 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061542326 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072595046 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071308768 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064256397 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069120406 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065597659 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062184634 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062057061 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062858372 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064833706 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065422767 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062401184 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069796203 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071040896 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075053875 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069016916 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070627986 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060570083 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060832988 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06316498 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060979916 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.0654697 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070915696 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077069963 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073365046 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082656439 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06172847 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071358249 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063159517 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078438004 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074504372 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063455782 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066434199 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060576993 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063565178 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070975503 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073040766 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075171514 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076668361 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066103406 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066044581 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061310461 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076455554 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062482386 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070162379 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071199352 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066126069 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061863235 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063348932 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070785388 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065901232 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061705789 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077018948 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068032741 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060960762 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075616057 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062037741 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07285565 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061075773 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065204844 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067045035 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063535581 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071063504 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076989751 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060854507 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061899344 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077317002 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063383433 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063066919 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069701627 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077553659 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066089301 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069522675 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072382176 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071523593 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066558901 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071520165 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063221526 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070817679 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065597074 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073726186 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061759927 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07913063 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060755902 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076704616 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061907945 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072636372 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062031821 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070852846 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062514428 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078598183 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063310153 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062639334 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072979326 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.06020138 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070813013 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061275636 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066320396 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067295384 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070697845 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063628301 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070623101 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.203100245 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072257726 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06735652 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070211484 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071248515 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066596844 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061177038 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070867447 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073219127 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.069835631 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063376834 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063675021 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062167753 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071523209 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063490546 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06336536 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069926863 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06637755 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067531357 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063658966 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064027512 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063831209 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070731954 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071023544 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07986782 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070539983 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069645153 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071168812 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060920406 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076908875 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061767198 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072227886 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060720688 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.06765442 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071153364 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062014136 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080914347 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063652233 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069418671 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074690326 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070414595 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065584757 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081868755 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065721129 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070732435 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070274772 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066068528 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068707071 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.06361641 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069799645 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070966888 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072313006 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062802344 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069270243 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071194325 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063446493 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069423039 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063085811 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070397249 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063863351 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060455118 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066293235 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07356348 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066633573 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066824911 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062250366 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060719752 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061711459 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068428164 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066440711 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.0705802 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077119686 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060892606 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063065878 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061235661 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06520451 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079662251 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071057075 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070321193 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066174335 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060700903 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063172951 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063407424 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061862692 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065262787 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060639811 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061716165 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07250161 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063382253 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066194096 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062074222 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063077322 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071762175 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066548235 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062284851 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068124895 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061180264 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067177342 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060894702 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063551531 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06615667 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061019432 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065560632 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072276048 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078634144 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068516974 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070749874 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063025795 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069738706 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077249053 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069302741 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.0635062 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071362399 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060991249 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080302738 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071303091 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070041934 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071608341 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062494405 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078309191 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066318714 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071555902 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076935391 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062776676 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068395479 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061171645 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076901051 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066027582 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060964873 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.06926122 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069329225 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067368856 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072720475 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.205965579 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070829157 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067547103 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065328093 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063891607 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063686122 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070618041 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078734791 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063170608 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066133214 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070658524 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070431437 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066243541 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07406625 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070210114 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063383886 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063331072 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065470796 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062588845 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073974215 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061916712 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066275154 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065993564 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061261945 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068448186 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078631535 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071665349 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071380834 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061371185 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060969341 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079557697 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065875355 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065020286 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070388951 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071784466 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074228135 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071672566 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078823372 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062572078 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067500161 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074214835 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062635846 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.0616574 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06525776 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063043791 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071013237 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071289247 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068497123 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063661557 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067758396 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075186469 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062565264 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066330835 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066510169 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062551019 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07171044 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069933028 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073096329 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062968694 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061387084 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064672539 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070459334 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069075501 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071088593 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062721725 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068481929 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074851199 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069463132 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06513366 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061168459 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064836289 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070636825 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066399984 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.06126235 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066216012 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065424372 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06870074 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071319012 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066212559 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061591177 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078566132 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069905222 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070724584 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063648068 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063612408 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062317613 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061537869 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073055692 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061627129 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063896928 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066186655 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063920352 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079169948 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070219608 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077660132 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062891879 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066489449 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061478253 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071507258 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066163283 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062161517 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072163412 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061062765 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077183751 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073500791 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.0672308 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061189781 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066529026 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.089660471 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077180646 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071340611 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.0713523 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066152518 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071465435 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063527196 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072948121 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061389917 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060508441 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07209987 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070961699 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074165031 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061444778 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071824122 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06365071 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070002007 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069324997 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06336696 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062920476 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063567221 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071397746 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066478001 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070918911 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.207725555 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079147804 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063133724 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073321677 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071060822 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073548766 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075767557 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073850527 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070076494 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062838245 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068971664 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069395998 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063536883 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067046157 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065111155 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083157375 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063472171 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063518004 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075965923 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068085861 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062197094 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068330527 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065868842 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.07241047 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062757432 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072302239 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06576593 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062639275 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066517021 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066729266 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06083438 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061446206 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061023567 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071474962 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066393327 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062273371 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080897107 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063861234 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070298102 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073099976 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068389197 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063223975 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060983979 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063041107 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075240337 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076698912 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065176922 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070122876 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063311468 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071073142 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061033948 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070341864 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069914224 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070507622 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061053182 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062012651 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076480974 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077543858 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066487463 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071149659 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071438217 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063937273 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083117475 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070610429 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062857631 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072624139 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064289484 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061184832 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060681773 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063216011 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073358644 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061463344 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064463169 seconds)
  done (took 42.664072138 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099734361 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062413014 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061269765 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061543751 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072316674 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062467034 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061608297 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063036204 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062817708 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06413163 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062147053 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064319778 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072931748 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074652791 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072275589 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065224126 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061222266 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062510688 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061658809 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062474921 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071814415 seconds)
  done (took 2.992609436 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065456402 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065800758 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065397869 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066102306 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065093483 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06180057 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06560049 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062281276 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068150991 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06317852 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066362405 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062080186 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061986664 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.062029356 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06256175 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06336953 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066138407 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065162905 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061783082 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065666812 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063459451 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065727536 seconds)
  done (took 2.983351066 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063325234 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062405393 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070762843 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060766789 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061023389 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064809035 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060859799 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065565172 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065571781 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065698681 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070409486 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062174736 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060899656 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067261705 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061194212 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062088452 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104354573 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062610475 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063132267 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06118507 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063719194 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070263957 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061884058 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061415138 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065792333 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064866353 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060782241 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063845265 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061985096 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065627148 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062611399 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060636991 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070638633 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.06951236 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065467107 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065685044 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064802063 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062013764 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060996248 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061086921 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069768066 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.0625899 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060990591 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062645447 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070286203 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061031616 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061373728 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07009205 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060873402 seconds)
  done (took 4.749166536 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072169182 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114291944 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066972727 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094822582 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074428699 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.06759993 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066941543 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095540666 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062504482 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063318252 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075223884 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075053911 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063967805 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065547098 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.067961462 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064008257 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064962088 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063101204 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067005066 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063734391 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066859106 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067943686 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073710813 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074334843 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064921098 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063500992 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06379289 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065623335 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074542215 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.06763667 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065616523 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066862765 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074386262 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067811271 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06366733 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063545862 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075192279 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064380611 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063870362 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062840728 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.064109084 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065265081 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068438451 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075143654 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064690444 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06858497 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064107297 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061914592 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074577313 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063776997 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068258651 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075813553 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065153638 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064534753 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066047451 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074055405 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064091316 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063089585 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064289031 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074131705 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062228635 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064752858 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.07790822 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063696719 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067126827 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075374905 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068763892 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065122995 seconds)
  done (took 6.407457739 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071328721 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096389288 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072774106 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072741215 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072027429 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071788207 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071986808 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071691404 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072384959 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072779531 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072528005 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11190449 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.06807776 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076411934 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071917411 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072361636 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.0716173 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072193449 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071795694 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07227504 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071858048 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072155781 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071908031 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072667882 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.0741946 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067843802 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071351979 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071900176 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072399136 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071801536 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074256083 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071702325 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072041041 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072136686 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074024051 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071459152 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062369179 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071791984 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071987122 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071620585 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067712091 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072110835 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071547892 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06828612 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071857508 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071640843 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07325098 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074601814 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079086813 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072425083 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072144578 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072768131 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071747515 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071951212 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072814938 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078796661 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072361319 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072600453 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071986142 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072315362 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072366866 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078434548 seconds)
  done (took 6.146525849 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075834418 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06848522 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081017084 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061167299 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060985915 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070567386 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061214148 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061057891 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068542156 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068159229 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069989788 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071040852 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073121562 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070256494 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070816901 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072742061 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070568391 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070568952 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068273536 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070976885 seconds)
  done (took 2.985754565 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076495285 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.08063637 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067675161 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070784922 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066715668 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071065247 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066094663 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06696524 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067331719 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066992806 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072018596 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072200935 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067766486 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070938877 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072190017 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071249359 seconds)
  done (took 2.71639026 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064962211 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069732149 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068206974 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062668681 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064399986 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061844289 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062516341 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061679742 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064258541 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075505795 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062034892 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065379573 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062494852 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062093412 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062031348 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065245849 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064161695 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062314868 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062861227 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066823029 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070505 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063069045 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.065493658 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062346383 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.06523514 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07164799 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063744501 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.06425234 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062751163 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065027072 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064643377 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069018454 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065221865 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062583371 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061623973 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062612281 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062698901 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064922805 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065414664 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062773819 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061310767 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068115156 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062900901 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06350781 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064473278 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.06516029 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064467391 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068222174 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062906353 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064655961 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063251582 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064192233 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06277957 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069546155 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064582127 seconds)
  done (took 5.146909734 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078829523 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066984428 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061647733 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061100988 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066495921 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066713769 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066602598 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067019727 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067008486 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061480735 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067123958 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066157493 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0672999 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06652328 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067421006 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066945542 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061472297 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066961597 seconds)
  done (took 2.799302285 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073474238 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066740783 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071253795 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.066457657 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066639233 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066151399 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061871435 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062015205 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061659503 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066675972 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066865319 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065879101 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061613007 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.066034679 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066363195 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066285603 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.066026798 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061605197 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066361135 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062029431 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066129205 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061583259 seconds)
  done (took 3.036256279 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088818731 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08498655 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128100637 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080600559 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088888528 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073096679 seconds)
  done (took 2.14219874 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094395264 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.105394693 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066494506 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066150616 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074661815 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069659677 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069532156 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06947507 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074911104 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073556274 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069637565 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075154141 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075023088 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071019193 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075178207 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077134661 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069581948 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0693909 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066334383 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077500072 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069513451 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075389906 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069598941 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069652701 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069537256 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071133278 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077562051 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073412931 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069313266 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075033987 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077700414 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06954921 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075095654 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073539745 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066472856 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075062474 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07006612 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077349872 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074830095 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071728708 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066129178 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074768473 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07549627 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071008907 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07744813 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069959626 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071152091 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070078767 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070365265 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079493386 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075524172 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07122279 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07518536 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077775612 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077916335 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079701171 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073641121 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071571446 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075103353 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073733049 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071302101 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075398783 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071392408 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073445933 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077753097 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071453221 seconds)
  done (took 6.466628067 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10122449 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066829955 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069680244 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074018491 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071526144 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070568972 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070136818 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069862424 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069997087 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067392548 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105534913 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070417185 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071518817 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071467231 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070236032 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070171852 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070220827 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07126367 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067372676 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080097648 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069778615 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072173841 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071765335 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071554273 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074024739 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077424823 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069573639 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069530017 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072138374 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069554817 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071196204 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06989951 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071528586 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066692234 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071311807 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069985574 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069465855 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071491359 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069309725 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075182002 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071065798 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077685578 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070077645 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069744952 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073700886 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069513415 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069372148 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066899894 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069651619 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067096264 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07370448 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073836302 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073322088 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071573384 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069800815 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070123158 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069892781 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069928562 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070048598 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078100025 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071479825 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070181195 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079743647 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069547915 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069913268 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071796692 seconds)
  done (took 6.389213797 seconds)
done (took 133.938707708 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219464822 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191072023 seconds)
  done (took 2.002139527 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075173407 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.16667809 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076053125 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075511958 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108947601 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108367256 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076735026 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072770353 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075215284 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072859626 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140109561 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076472588 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072704335 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073331581 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072884242 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072923723 seconds)
  done (took 3.028712394 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108237934 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185770751 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082819126 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070847414 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115201785 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077214558 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073232589 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.0760626 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077322838 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070846091 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108750527 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.081985322 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.074695219 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077201954 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07266364 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074043597 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07558461 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076895592 seconds)
  done (took 3.194885607 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098326746 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086944065 seconds)
  done (took 1.804892238 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156384232 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105352274 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144912622 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.330486569 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130992525 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127609327 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.13011669 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126469273 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110821426 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.123015119 seconds)
  done (took 3.101194648 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107062127 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106057947 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.309328974 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102972682 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083114968 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078118475 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075988199 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080535517 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076031598 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076767505 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122375967 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075642423 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073323491 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124681068 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099512555 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107363049 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071547204 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078791311 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080165417 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071560072 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076400941 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080341605 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179541046 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078535256 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.101021602 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075808798 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07785328 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074738935 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074931262 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078760274 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.07926234 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100436365 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078754823 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082921076 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077166282 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097868737 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071939624 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099486903 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074641256 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072821357 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.07576489 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079406695 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072467293 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078398294 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075755591 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077768787 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08032905 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071292804 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075549296 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.0743383 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072775846 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077399878 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076636707 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077782239 seconds)
  done (took 6.427311938 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108573469 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106423596 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070861141 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114109806 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106327844 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070890983 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105267621 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100974421 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109228561 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070625334 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069559489 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070258172 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077163948 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079892788 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117537442 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10879412 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071762255 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073544577 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108091445 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107806124 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069649564 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102305025 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10088548 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106735164 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068966814 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070530218 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069276939 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069975655 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074452035 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075691121 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069820173 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076460608 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081114951 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076071595 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068804797 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068828214 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069126514 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076042364 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076779414 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076934266 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074752156 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068275895 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068667108 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069280044 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069915166 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068950674 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075328329 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076345881 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075233328 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068989241 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069450151 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069193595 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069677218 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076158782 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074955059 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076755318 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076492467 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069659977 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069398886 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07087539 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077580719 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077563292 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076527243 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070058338 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07698561 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069323315 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078345294 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081256156 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069500795 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069559633 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069344904 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069770298 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069649461 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075628719 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075581538 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070198021 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069401422 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068945642 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077298198 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075622884 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069078363 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074987708 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068633465 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0694729 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069812157 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069550194 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074815683 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076398869 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070354732 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069584202 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069260493 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069586879 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069054961 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074559279 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075773546 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076325262 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075435419 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069512181 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07563679 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075855303 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069714166 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075195894 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06968563 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069565806 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069771484 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075829975 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074864231 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077388236 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069367563 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068832865 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075558145 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214475775 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069462319 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075535048 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077586857 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.075690013 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068839945 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078650014 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069681572 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077703935 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069855259 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077989847 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069917249 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075573777 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069513362 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069143054 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069699812 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075891323 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070418896 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069795444 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069982645 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069675027 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076479785 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078948073 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070085353 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075775358 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075447117 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.0697998 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075568743 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069306359 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076795568 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069602718 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069705027 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068734191 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078338631 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069326937 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069995562 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069710729 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077653097 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069287008 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078005173 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07516925 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069139578 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078768338 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07746637 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075295596 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078734972 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070480163 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069522175 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069238556 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069879155 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07491704 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076428998 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070099342 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06913313 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075135949 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077530605 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068941922 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075107821 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075428598 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075468764 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069318709 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069220514 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07823801 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077775386 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.078005765 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.306397179 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075930988 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069216145 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07462081 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075373093 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069370824 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081092289 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069387814 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079272997 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075464538 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074834048 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076184635 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077046598 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077309813 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077608245 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079280743 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068946443 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069058523 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075413963 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069417972 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069328041 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075581721 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069794933 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070046223 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080135173 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069886698 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077967269 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068872424 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075950275 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068677073 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070187738 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079956306 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069118446 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069557591 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075666556 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069777554 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075260681 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078008192 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.07497612 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068799848 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070247559 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075520528 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076679855 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06959321 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069148057 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070111281 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07534954 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074947909 seconds)
  done (took 18.847254924 seconds)
done (took 40.037442929 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170375492 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116628684 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207425647 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.196783237 seconds)
  done (took 2.408265718 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101593729 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065895725 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.082263643 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09177637 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065912768 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076529395 seconds)
  done (took 2.1452534 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202835153 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175011777 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239891476 seconds)
  done (took 2.271080944 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367877589 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149692573 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216141062 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.504767387 seconds)
  done (took 2.997350453 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110934266 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101590529 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078193418 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112346041 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085912214 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063215993 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134727516 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.07020486 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101475184 seconds)
  done (took 2.578155969 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130227425 seconds)
done (took 14.206986165 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.238171234 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.254097391 seconds)
    (3/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.095492108 seconds)
    (4/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.094183406 seconds)
    (5/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.109928496 seconds)
    (6/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.203624767 seconds)
    (7/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071790805 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.092197188 seconds)
    (9/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.229181837 seconds)
    (10/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.072221082 seconds)
    (11/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.234494997 seconds)
    (12/341) benchmarking ("sort", Float64, false)...
    done (took 0.138446573 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07735052 seconds)
    (14/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.124111371 seconds)
    (15/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.27259466 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.121161068 seconds)
    (17/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.163972166 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078365642 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.092166751 seconds)
    (20/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.206493159 seconds)
    (21/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.073303364 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.092352814 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078518118 seconds)
    (24/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074797762 seconds)
    (25/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.173830793 seconds)
    (26/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.17207041 seconds)
    (27/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.224539892 seconds)
    (28/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.111265954 seconds)
    (29/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.221217173 seconds)
    (30/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078389815 seconds)
    (31/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066653631 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075551397 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.163320435 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067552729 seconds)
    (35/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.143914275 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.181748104 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171610199 seconds)
    (38/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.084819051 seconds)
    (39/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083188613 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073828379 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076704128 seconds)
    (42/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.226346698 seconds)
    (43/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091893141 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135629439 seconds)
    (45/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.14355491 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078940174 seconds)
    (47/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.075699463 seconds)
    (48/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.066120775 seconds)
    (49/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.073167282 seconds)
    (50/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.181792913 seconds)
    (51/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.077470645 seconds)
    (52/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.146255791 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066456593 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.123407462 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.090713818 seconds)
    (56/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.08415831 seconds)
    (57/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.08094832 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.076538175 seconds)
    (59/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.074102453 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066125407 seconds)
    (61/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074097863 seconds)
    (62/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074960841 seconds)
    (63/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074506885 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.096677892 seconds)
    (65/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069746178 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.088217978 seconds)
    (67/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.141378928 seconds)
    (68/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.136766882 seconds)
    (69/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151165842 seconds)
    (70/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.181614216 seconds)
    (71/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.086098649 seconds)
    (72/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074215405 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067749646 seconds)
    (74/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074863102 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087917753 seconds)
    (76/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.188974468 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074500888 seconds)
    (78/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088466384 seconds)
    (79/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069020031 seconds)
    (80/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067911297 seconds)
    (81/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.084115338 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074160525 seconds)
    (83/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077262268 seconds)
    (84/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066249642 seconds)
    (85/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152538276 seconds)
    (86/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.352888537 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.08844423 seconds)
    (88/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074802438 seconds)
    (89/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079026613 seconds)
    (90/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.076459389 seconds)
    (91/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.201755805 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.189315985 seconds)
    (93/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.076231662 seconds)
    (94/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06654611 seconds)
    (95/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067399237 seconds)
    (96/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.230408349 seconds)
    (97/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083319721 seconds)
    (98/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073153761 seconds)
    (99/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.236180061 seconds)
    (100/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093671366 seconds)
    (101/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07428138 seconds)
    (102/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.200082261 seconds)
    (103/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.242916407 seconds)
    (104/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069638489 seconds)
    (105/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068988633 seconds)
    (106/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.196463507 seconds)
    (107/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156160557 seconds)
    (108/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.157108641 seconds)
    (109/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.078712017 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06690477 seconds)
    (111/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178139251 seconds)
    (112/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068204194 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074565485 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066599725 seconds)
    (115/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.1539154 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145361218 seconds)
    (117/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072818348 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.088565083 seconds)
    (119/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.066727771 seconds)
    (120/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067081419 seconds)
    (121/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.087226023 seconds)
    (122/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067141256 seconds)
    (123/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073711131 seconds)
    (124/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077509975 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090391813 seconds)
    (126/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.170217982 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076593436 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069796039 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093252649 seconds)
    (130/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.163708383 seconds)
    (131/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064876578 seconds)
    (132/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132585323 seconds)
    (133/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073400106 seconds)
    (134/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066049409 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.155716731 seconds)
    (136/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074716511 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075761179 seconds)
    (138/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069879358 seconds)
    (139/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065935631 seconds)
    (140/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085512458 seconds)
    (141/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.162959017 seconds)
    (142/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.219305234 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091612671 seconds)
    (144/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074055973 seconds)
    (145/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.066515751 seconds)
    (146/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066867734 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.0760633 seconds)
    (148/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070155064 seconds)
    (149/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07603456 seconds)
    (150/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066658877 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075959363 seconds)
    (152/341) benchmarking ("sort", Bool, false)...
    done (took 0.142524265 seconds)
    (153/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071007191 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131932664 seconds)
    (155/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067895899 seconds)
    (156/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.151485537 seconds)
    (157/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074242937 seconds)
    (158/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.139341711 seconds)
    (159/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143018154 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074028749 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076407976 seconds)
    (162/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178710932 seconds)
    (163/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067189567 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.067832067 seconds)
    (165/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.077947322 seconds)
    (166/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152009645 seconds)
    (167/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066994219 seconds)
    (168/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065786139 seconds)
    (169/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066700641 seconds)
    (170/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155447196 seconds)
    (171/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.06751979 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066366972 seconds)
    (173/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.255156572 seconds)
    (174/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190935397 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087266939 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065878359 seconds)
    (177/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066972219 seconds)
    (178/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083343889 seconds)
    (179/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065614155 seconds)
    (180/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.142364197 seconds)
    (181/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067430334 seconds)
    (182/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073847726 seconds)
    (183/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070687213 seconds)
    (184/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169881918 seconds)
    (185/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074207288 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075350293 seconds)
    (187/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.192069624 seconds)
    (188/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.25255242 seconds)
    (189/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.234902498 seconds)
    (190/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.168919272 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.06620959 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117788003 seconds)
    (193/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.068334763 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.067032488 seconds)
    (195/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067207527 seconds)
    (196/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068471872 seconds)
    (197/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.172044186 seconds)
    (198/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.182104974 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093048197 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148043635 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141575459 seconds)
    (202/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066440013 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153999436 seconds)
    (204/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07551833 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.147911177 seconds)
    (206/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.146633887 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.14790956 seconds)
    (208/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066622965 seconds)
    (209/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066959576 seconds)
    (210/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075054145 seconds)
    (211/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078960031 seconds)
    (212/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066094423 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111632546 seconds)
    (214/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06847821 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064797687 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087335042 seconds)
    (217/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.143548918 seconds)
    (218/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066863535 seconds)
    (219/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.14947033 seconds)
    (220/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066992943 seconds)
    (221/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.066542964 seconds)
    (222/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066642637 seconds)
    (223/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074492421 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074561912 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073906564 seconds)
    (226/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.065500728 seconds)
    (227/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067216144 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.128095433 seconds)
    (229/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066531417 seconds)
    (230/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.082343214 seconds)
    (231/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.068792422 seconds)
    (232/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.200768707 seconds)
    (233/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067474205 seconds)
    (234/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066475475 seconds)
    (235/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067951437 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069375385 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067795443 seconds)
    (238/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066347366 seconds)
    (239/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068165186 seconds)
    (240/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.067111227 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078364626 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076628635 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084989683 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152734643 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066796017 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073991504 seconds)
    (247/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068145162 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067845785 seconds)
    (249/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066966881 seconds)
    (250/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.124458068 seconds)
    (251/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066745474 seconds)
    (252/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068238068 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073674502 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069813369 seconds)
    (255/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.067738096 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065486112 seconds)
    (257/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066533337 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124830353 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084323958 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.066077901 seconds)
    (261/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266559901 seconds)
    (262/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.198358745 seconds)
    (263/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094116608 seconds)
    (264/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070310162 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074357686 seconds)
    (266/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070010964 seconds)
    (267/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078349965 seconds)
    (268/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074546228 seconds)
    (269/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.085224166 seconds)
    (270/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.067116991 seconds)
    (271/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074222303 seconds)
    (272/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068826465 seconds)
    (273/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074568663 seconds)
    (274/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066833837 seconds)
    (275/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06712829 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066242439 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066820623 seconds)
    (278/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065177068 seconds)
    (279/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069895564 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122981837 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065031133 seconds)
    (282/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069273925 seconds)
    (283/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.163386133 seconds)
    (284/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067430045 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151367205 seconds)
    (286/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077518217 seconds)
    (287/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078740332 seconds)
    (288/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066416635 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.06547346 seconds)
    (290/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.139305526 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151074817 seconds)
    (292/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068121494 seconds)
    (293/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066559824 seconds)
    (294/341) benchmarking ("sort", Float32, false)...
    done (took 0.137757114 seconds)
    (295/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066707269 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066509576 seconds)
    (297/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.06625087 seconds)
    (298/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.06881865 seconds)
    (299/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.222418053 seconds)
    (300/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067165167 seconds)
    (301/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065194564 seconds)
    (302/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065958962 seconds)
    (303/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093242013 seconds)
    (304/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.067051439 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.073379251 seconds)
    (306/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06556055 seconds)
    (307/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.0666859 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066126424 seconds)
    (309/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.066772787 seconds)
    (310/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.239421459 seconds)
    (311/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070864182 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133505503 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067673435 seconds)
    (314/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067633283 seconds)
    (315/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.06779378 seconds)
    (316/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.068068134 seconds)
    (317/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.069374802 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067282029 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066989494 seconds)
    (320/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067793242 seconds)
    (321/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070836598 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095805925 seconds)
    (323/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069990288 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092738512 seconds)
    (325/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070601617 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078815059 seconds)
    (327/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067603571 seconds)
    (328/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.066004227 seconds)
    (329/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067163354 seconds)
    (330/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06742778 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090110656 seconds)
    (332/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067260682 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067005751 seconds)
    (334/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066988579 seconds)
    (335/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.163512941 seconds)
    (336/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066571596 seconds)
    (337/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.06615113 seconds)
    (338/341) benchmarking ("sort", Int8, false)...
    done (took 0.149967412 seconds)
    (339/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071297422 seconds)
    (340/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.066884903 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09300371 seconds)
  done (took 37.044412278 seconds)
done (took 38.720798267 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092612128 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.080524704 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07867866 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075642256 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079061992 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077812679 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078423008 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076710505 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077891204 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077743289 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077169673 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065857009 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074309758 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.081639748 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07546804 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08172476 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079087848 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082036341 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067096408 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.081169243 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092763151 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078316927 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075382845 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080295507 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.0672778 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075851359 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090150672 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087789821 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073105476 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076195995 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073665364 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082378324 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074622708 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073005424 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075831395 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071901369 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075907669 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073850135 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089749587 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072417205 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066559011 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07849793 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073513776 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074353629 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074545285 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077843696 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071663025 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082666039 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066200231 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.07749866 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089159424 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070947435 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072599215 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074577599 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071663334 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075427854 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072747079 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077882027 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071437113 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077811468 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077895079 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074758671 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066143571 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075131238 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073926873 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073635674 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064967252 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071303335 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066713119 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066378671 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065490379 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074668354 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072724434 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071125496 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065565812 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066025226 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065498044 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078233308 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071996147 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07576215 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066562771 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071390569 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071217324 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066661018 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071310119 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077793003 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065248966 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066299995 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065517745 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080743588 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072752713 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066532197 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.07766988 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07113455 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071420582 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066505928 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065704523 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071033807 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074351952 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.066457875 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065321328 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071232204 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071265567 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075446787 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066795581 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071010715 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071464022 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065206584 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075044279 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07360129 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075043838 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079338848 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074918431 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077873244 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066890051 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065337267 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076349639 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.067177238 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071244201 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073942324 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071416029 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074330127 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066739774 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06543373 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071219029 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072863102 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066902274 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067034319 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066431987 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07530914 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07318858 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065083782 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066214849 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074744168 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074895069 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065580172 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065997898 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075134042 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066673574 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072423919 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072258356 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075148385 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066236038 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066936227 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.211037069 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067887427 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066063833 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071812614 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071395156 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066608849 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075554962 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.07298659 seconds)
done (took 13.036596775 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068148757 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105891634 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074373168 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083253791 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078848849 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068116768 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071090625 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083286532 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070528113 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086974616 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095021319 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08854792 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09379744 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066356294 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067057744 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068195909 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065677728 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074307673 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081457756 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089744135 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095208307 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066828861 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.076076182 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083079743 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077663379 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083598422 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068418467 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06768743 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069876464 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.12374841 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092524184 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.06671084 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068152685 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080511917 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081484253 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073978145 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067946602 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070929621 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068042329 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066947238 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068513668 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080970731 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071395219 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07087431 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068248361 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068272639 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067696398 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070350289 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080366888 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070825879 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075133839 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079344742 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068731743 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.070144887 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065452361 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070694374 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066946318 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067843155 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067798598 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066950714 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067937143 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069317982 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067965396 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067818023 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070687846 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069684251 seconds)
  done (took 6.676579156 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082949525 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092976216 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081592863 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082467536 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06675256 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067643321 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067331998 seconds)
  done (took 2.314136698 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067628525 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075444997 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079611701 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079558406 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088824843 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077058844 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067423058 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.09913903 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066867921 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076102563 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083453585 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.08060451 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070648497 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079625732 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067558947 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079315572 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067856856 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074889473 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075438541 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080755101 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071432524 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097813951 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080770166 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068182692 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080966567 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074826938 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070214471 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06782288 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06814245 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067250089 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066933197 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089398902 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073735717 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079145454 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068467627 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066366822 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072064043 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068238887 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071517249 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076186819 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071060052 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067497788 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068225741 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067311557 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068760332 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071918483 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068690201 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067822507 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066841563 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074904474 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066305446 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074047898 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070016342 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072944748 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071955924 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072021528 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074557095 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.0674815 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074936138 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073564285 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067005679 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079850126 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079199947 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071035905 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078715849 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.07553699 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07407105 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071109794 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067126682 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066993249 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067685607 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078724959 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070660206 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070216871 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068358501 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07239409 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070625759 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082411413 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082061359 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.07999227 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069466593 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067352535 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071208109 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082524831 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072085458 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06733795 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068683078 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066730274 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072211294 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067310252 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071803807 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067387938 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07424365 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069500393 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069833509 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075122334 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067494346 seconds)
  done (took 8.838148093 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070641007 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069876937 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068139409 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068525627 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069101226 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068982455 seconds)
  done (took 2.220625177 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091616977 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068546227 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079765136 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068528344 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090148674 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074450374 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074775015 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06976886 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083956433 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078386724 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.07414338 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076822676 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073607481 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069570004 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073938579 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06849201 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074137263 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071090531 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077798535 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070095895 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08071054 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069862749 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069951931 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080188099 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.07090743 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068955269 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068509665 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.07852402 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077448978 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069693866 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069146718 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070594051 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076257754 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069416143 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074364964 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078957974 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067753623 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073319478 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069988677 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070812384 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076576075 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070167214 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07028545 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074190869 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069556251 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076358688 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073199271 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071431737 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07400322 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073256157 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.07318861 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.06822859 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070539028 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073261855 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07643454 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069579755 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073004283 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073729856 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069768398 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076106086 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067926948 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070361456 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069506633 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070516962 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072489397 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073604032 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076572461 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069896357 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069531735 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.0676511 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072903975 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067661802 seconds)
  done (took 7.033568588 seconds)
done (took 28.832599493 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.547694006 seconds)
  done (took 2.300970432 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.583716548 seconds)
  done (took 2.377137161 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.79412289 seconds)
  done (took 10.587769701 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.297631235 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.318759886 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.728375207 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132455885 seconds)
  done (took 3.296184596 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.740049803 seconds)
  done (took 2.543472847 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227416716 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218722801 seconds)
  done (took 2.249536746 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.336150894 seconds)
  done (took 2.130971557 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.127110805 seconds)
  done (took 2.922247841 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230422227 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160087196 seconds)
  done (took 2.194286182 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.531290344 seconds)
  done (took 2.329702231 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.348280425 seconds)
  done (took 6.151674051 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.232122139 seconds)
  done (took 2.075985271 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229400079 seconds)
  done (took 2.033999412 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.048496676 seconds)
  done (took 3.846791581 seconds)
done (took 48.841653377 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08387335 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086757355 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086533006 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082104669 seconds)
  done (took 2.109451998 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074759557 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071158194 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074708337 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074490328 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072528719 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.07300242 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074015601 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069583883 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072300553 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070879396 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069045761 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070775441 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074147835 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070943776 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073395671 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074377153 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.07073899 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071077009 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073343429 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072688433 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075732477 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.0732597 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071511784 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072599649 seconds)
  done (took 3.536847715 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079212657 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073138169 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075719274 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071798832 seconds)
  done (took 2.108474119 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077690209 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077349235 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086566009 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091274224 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07786888 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077532587 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084365994 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08503039 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066049257 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088266805 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068675554 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067485307 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067440536 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086514792 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084006974 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063461882 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064493255 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077577782 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077181968 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080367007 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069149632 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065980609 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077427092 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077949865 seconds)
  done (took 3.6481513 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080511036 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066420608 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079298366 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091964903 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092831722 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06626544 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079354406 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09382391 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12858846 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066223134 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072453583 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066113691 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104499283 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066350267 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081443661 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109412249 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112343169 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070543373 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099371126 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065892651 seconds)
  done (took 3.510708803 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076557017 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070094509 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.070669753 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066357846 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077274283 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073434987 seconds)
  done (took 2.248355362 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06953329 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069106753 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068064842 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072686097 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.068840398 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.069117733 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067807356 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066833512 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066563896 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067729656 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067506302 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068251619 seconds)
  done (took 2.627358224 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155596339 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.07002872 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071224872 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066885146 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071861881 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.070854175 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08225634 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069019343 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085880571 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067650382 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067795338 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069940346 seconds)
  done (took 2.762777392 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101350305 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102008362 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14630832 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118335833 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117421371 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097679242 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119703362 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09522581 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16068074 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138196208 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117548507 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093870295 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087703273 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070106332 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100708005 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101808426 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136267011 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073263563 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113912907 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164864667 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114981176 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113200941 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122525005 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11719123 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081968526 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121939179 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094730994 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103015887 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124677196 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110281521 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119360386 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097973688 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.07263008 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071656023 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150024601 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.100753329 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1077715 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094020486 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100706752 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08949012 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10818866 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070263673 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087879198 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106957938 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085436981 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117431898 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088401404 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103754723 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08189976 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131869313 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106577563 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099167079 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086728277 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10420548 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130330674 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095472699 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11113242 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107278168 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083059804 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119071088 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100941903 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.251649429 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095274679 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082006547 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161545727 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090139397 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113101931 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113756726 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083693171 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091423742 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103092188 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131595119 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107874942 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108324412 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115300833 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09592676 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111234644 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093074513 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129786226 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096101595 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073280005 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105595868 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129486171 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085619981 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100872268 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130665982 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09303584 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078073337 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093393144 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118940036 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081118052 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096662224 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070620941 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098543674 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107931425 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097581358 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112546463 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107613809 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07904709 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124855609 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109746701 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073187535 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117818709 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09996044 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153160225 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096159497 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076903342 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100076427 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094559567 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14918722 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085559645 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080666682 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09876978 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142442428 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095235389 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170545262 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09712944 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129216287 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097721452 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088157446 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076241543 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090514721 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10294078 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108929016 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103071628 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089631945 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077978336 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087835762 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.254957431 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095121085 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082470079 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114196221 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102314234 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076107334 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089972337 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077402329 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126028006 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07963501 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109355295 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125945016 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079219318 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106785363 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09880783 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108791119 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098649841 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107908751 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141517156 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116616042 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080552427 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085006204 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109723393 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14628449 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114668042 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086127503 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077510569 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100575704 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111315856 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098303715 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107883686 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100667099 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109744434 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098011877 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141568745 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118681307 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09128913 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095909994 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097219984 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123883551 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077750104 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156313316 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094931744 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119069172 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085144325 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141693165 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114405195 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0907242 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085616161 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096147813 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106606567 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106157275 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144446061 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097818012 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073817613 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094142985 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132722813 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07717847 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101126477 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090700664 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093968301 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119247801 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.085018969 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082340059 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068977807 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102354865 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137912853 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070404446 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.276431667 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.114016107 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104586824 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.10593538 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070789686 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100523403 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13941149 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107097907 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146313538 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118147993 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101515117 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119130746 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100174581 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106523361 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081157654 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126030882 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135242755 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097679569 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091248046 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135973299 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118463584 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.13550527 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097132737 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116136666 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.1065579 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102338206 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104941976 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101077486 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145158556 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121335598 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125456135 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087040535 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106999387 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109665298 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137127725 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083094804 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1171763 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.07568074 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112520748 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078104071 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10825413 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080722412 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112083791 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080808288 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100924215 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070501656 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075292527 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143244793 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113177268 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090117886 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087017349 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137652853 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131798099 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082198502 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10278881 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105185199 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102271624 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102540167 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110228258 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087234865 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096416385 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.273364684 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0807679 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083186636 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.099582055 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095474578 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108312331 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085370968 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076035718 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138048374 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105816459 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096774168 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078963366 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095980414 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123052231 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091218243 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088679761 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106212714 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104682425 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141551922 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090782464 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098680459 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118260397 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081199814 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093448339 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070236573 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08571129 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07680116 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110257211 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077209706 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109578889 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069654659 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131938312 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08765545 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093076042 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103828205 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098590223 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129361312 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093087829 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129603245 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091103911 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10284593 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108732426 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09551157 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081084562 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104810992 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096967699 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110459828 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096499725 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106603694 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110918929 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095025238 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145968492 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091241415 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122221146 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10686557 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108278812 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105394302 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117785061 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138560323 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11393679 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113148683 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076625091 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084164979 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10664847 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100732726 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146695704 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103691043 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073294676 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087173148 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092136422 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.256045336 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107225354 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084245809 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143229073 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088226643 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088381592 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114316955 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.0911414 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098079927 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077191926 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096598673 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102436699 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095056264 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095569035 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109242013 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118456501 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114349601 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133596802 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099916557 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094388836 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120317554 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112145658 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11281084 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086942466 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088022338 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124527481 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10354974 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129302653 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101188068 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095520273 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102808579 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091696569 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100566671 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09827979 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110414294 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081183911 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077086442 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069279767 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073220417 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118705829 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110162353 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100096533 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09961835 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073821525 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104634381 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100500467 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073292856 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088787321 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095481657 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099998171 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084862255 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093559583 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115412555 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092686044 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105216387 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100592428 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129764004 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101928252 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089810128 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144151481 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129635944 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089466123 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094191452 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072654107 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080464799 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103052003 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146262552 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1192968 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078536666 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.24371568 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.079658183 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088634385 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072845466 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088947502 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090485249 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105373343 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094136192 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.114186926 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104921452 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07666636 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104613114 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098674807 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093689535 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097447368 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103637522 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106589752 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125095444 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101714453 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098931303 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07759092 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08209518 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077066992 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080872461 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103293902 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078794843 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07784483 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131154153 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092145402 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105832142 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11009632 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08558706 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076503157 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134821313 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070558432 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13561069 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072222538 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083159021 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081953153 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080397251 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094889511 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10604884 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09716885 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114678571 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107011966 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105768742 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112023298 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157820043 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072207099 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145133057 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077171699 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076902492 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076897196 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113051646 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091788885 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106340511 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142337294 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090613011 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09412412 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078296657 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129639697 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099274886 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104409056 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083874431 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080167597 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129328354 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080197426 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072694977 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090417969 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112529442 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07332272 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104991238 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.245745052 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081744012 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114058783 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631914027 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09132286 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077039249 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09034972 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.143309872 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130018617 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084671946 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109615849 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120128426 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090621521 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085571419 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109354564 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.181590339 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075620414 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096470489 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105283682 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099799156 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093955807 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093577397 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087883679 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093446261 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086855827 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080734309 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108672204 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089089412 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093015526 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098628633 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084068772 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081298442 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131993585 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105704115 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083690136 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090363743 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101460394 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089183061 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092095411 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070496481 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11526465 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092578393 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102427948 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092192896 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109048507 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121523344 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089839813 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113093608 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089587326 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110190328 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086082806 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079321576 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102985851 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079168643 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079064029 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118431049 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.085447638 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093755373 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105550023 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096148292 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11548273 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119033811 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11242463 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098325793 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079653648 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087046103 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.08881951 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077163903 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079885558 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075813597 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077358193 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.270468539 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088577136 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085724801 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116486747 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083906415 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10451194 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102189776 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110902916 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0843257 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102641279 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110820195 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091647105 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104792783 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101995772 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130012531 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147432748 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101422808 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125118327 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134689829 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078091679 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077192382 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.07060835 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116617633 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080791994 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.081873997 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082799339 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13455197 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083431661 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095759899 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232692979 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08166066 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083028326 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098497595 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.07109432 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084228894 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109054117 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08561315 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081479603 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099706579 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085016425 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118967545 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112954008 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090395291 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083993286 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081835011 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094412669 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105112932 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129395935 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090891259 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.07648351 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107522525 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104351751 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124479777 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073730812 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082021728 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130921543 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093055927 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104356258 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081523956 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121454947 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133883111 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092337233 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134885578 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072484751 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084920546 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090732032 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12651844 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075656967 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089751744 seconds)
  done (took 65.450253448 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.155005299 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.148236875 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083412066 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098508578 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187949753 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198510684 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120567952 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.09696266 seconds)
  done (took 3.079559859 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069628125 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084094774 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082070792 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.211991566 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109903862 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068391941 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074527918 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.084073364 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069373337 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068093461 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103882834 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068370047 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069634067 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.367149895 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067292072 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072876753 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069210251 seconds)
  done (took 3.687950565 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.329529741 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.39835592 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.220942282 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.642310631 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138478834 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485544707 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077631718 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083484966 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627836538 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371089842 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135671905 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088349908 seconds)
  done (took 18.557198214 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076718751 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079602806 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079236151 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076149347 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075614523 seconds)
  done (took 2.35689387 seconds)
done (took 117.508190499 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085088478 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.172688501 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068622302 seconds)
  done (took 2.228636433 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083521287 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082121445 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.08191184 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079368674 seconds)
  done (took 2.289501435 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07575702 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077764993 seconds)
  done (took 2.108519213 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.226442373 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176056247 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090772381 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083113176 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080967177 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081744776 seconds)
  done (took 2.212128181 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073062068 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072548652 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073338678 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073763571 seconds)
  done (took 2.244506419 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068541455 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067433232 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069654825 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072434925 seconds)
  done (took 2.231417794 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086360712 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083798202 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11302951 seconds)
  done (took 2.237268851 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084525942 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084094055 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079399846 seconds)
  done (took 2.204043053 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110381714 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098263104 seconds)
  done (took 2.161521948 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081469699 seconds)
  done (took 2.038855296 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091246468 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098929612 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142440127 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108573973 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141398439 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127691875 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078516683 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07883013 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074636245 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07336607 seconds)
  done (took 2.969031734 seconds)
done (took 27.453765687 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079798339 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369571528 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360814756 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088013271 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672596077 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357485781 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.018950351 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091980278 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101118776 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069570881 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086388549 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650788163 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.00587857 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331730294 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.991485187 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.329654785 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651648128 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069845329 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068469742 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069121372 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.998377823 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068674031 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069532603 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070075602 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650595149 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374475778 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070124149 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326076442 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069299802 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074980464 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360587297 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.073972015 seconds)
  done (took 16.600017324 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071411939 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123827477 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073750012 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085328196 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072087406 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070821141 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072268796 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070150096 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11124789 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069871503 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086345818 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068876032 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072956768 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070597908 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088503703 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069121953 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07081931 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070605763 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072706693 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073479291 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091474603 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072080242 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072459812 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071335594 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06955898 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082327197 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070728866 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069172126 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069560827 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071521525 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072756481 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070820834 seconds)
  done (took 4.425073257 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125782848 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12751787 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07511024 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110368139 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119569721 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071968033 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154662061 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09420603 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116373387 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070387913 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087864467 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072978434 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.108938032 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074362293 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093524841 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072585782 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07424032 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070540201 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069531177 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07031972 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088521297 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069558716 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069988923 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069791362 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070193813 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084173212 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070842027 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06934553 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069831763 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071995609 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073663214 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072810582 seconds)
  done (took 4.718149166 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070920997 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072766462 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081171817 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082258221 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.067747025 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070389615 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071059163 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068089939 seconds)
  done (took 2.565870965 seconds)
done (took 30.280766726 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080285128 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069182962 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072467679 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088793903 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075048099 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071647603 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066372309 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076390228 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073995713 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072305496 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074202894 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068843012 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071058072 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065859593 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073522579 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067400429 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074036988 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071535932 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071462938 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072953636 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.0692607 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072917591 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076329377 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071756327 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.07194839 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071857337 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076109944 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073595235 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067742504 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069874891 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.07011992 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.08150395 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073617552 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073428898 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066904833 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067182735 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071824309 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069502787 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073826747 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.079080424 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070927626 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.078445951 seconds)
  done (took 5.00040749 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089765616 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094459669 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087113667 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082840492 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108324422 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083497672 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091230513 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080338434 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079095101 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091024093 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074969336 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080330043 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.0823766 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076504566 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079721521 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075962974 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080805867 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074732622 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079812097 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079562031 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091304441 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072772708 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080205583 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080841067 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074944259 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080814478 seconds)
  done (took 4.141131433 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074285861 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089203145 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094068999 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142303818 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111063185 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083891537 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083478176 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.105740141 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101680201 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069370152 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073000285 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095830369 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09801783 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076347382 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107587031 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.0880017 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.08229546 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070963867 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075983968 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103625236 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091461392 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087900404 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10160291 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089373177 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068265902 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078380996 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076350925 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084384026 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077195505 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081269248 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074196014 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072963275 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070371643 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081745013 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073427771 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067025864 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091057643 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081715217 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084827737 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107718351 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079072478 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070636728 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099216818 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13420363 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068282554 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071343851 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072581042 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081608216 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073094108 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098836476 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087529969 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068460212 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087643255 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070560117 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070444137 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085757147 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071422598 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070503725 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081232969 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074877473 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090052062 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074187973 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089528328 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068618726 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.08028071 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07025594 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070407735 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068110505 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104895042 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07614211 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121478613 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069909414 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067315134 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081292617 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08018589 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075695655 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069175483 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088193208 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080852175 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072903147 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080312121 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072000333 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072369382 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10409309 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068087512 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067103876 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066868168 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071197979 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072276367 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069751488 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082659636 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068308091 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072101935 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084207721 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068999935 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069655514 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.07172305 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070103952 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068174771 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079601119 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07284669 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070604415 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081355565 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070263964 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071961022 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083335019 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078255988 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068272202 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070266243 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071194044 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071138549 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073393326 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072570863 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070861883 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075807304 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.0765253 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074656476 seconds)
  done (took 11.406163557 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.162710816 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151539995 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070062078 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.148088927 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077912791 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073590752 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149033437 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088623964 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069806386 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070708606 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069078327 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097949743 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093576431 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104407187 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073939069 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070155161 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094778217 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103414163 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.150415511 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145507211 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09264925 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07730501 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072470349 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070917496 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071036083 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078341415 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086159875 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077857762 seconds)
  done (took 4.720573807 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077056156 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.084746385 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073410171 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093400788 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.087975968 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070052694 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071711032 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071019308 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086491661 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076840235 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070054738 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074274503 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073443934 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071128464 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070493418 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076344437 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076688808 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06868919 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073420192 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074339664 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080214176 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095514455 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074484657 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070136743 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.07230892 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069847227 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076063827 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079593381 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069099581 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099662348 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067088809 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073660301 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08362521 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070338368 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069493457 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070041359 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069709104 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069711845 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069997527 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.06796847 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067713319 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074430967 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068770602 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076288961 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083872676 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076921813 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07122286 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072328766 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072169627 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066526155 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.0729197 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072954769 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072474127 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07766048 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073397508 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072339979 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070438379 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098680807 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075578305 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068996598 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069293018 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06801181 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.073993613 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077937824 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086360641 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071014884 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067959691 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069778864 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074476087 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083581438 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069019549 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07504573 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066460711 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069576209 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07225812 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072299607 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070559854 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06809938 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069403671 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069633441 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069821452 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069571972 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069197595 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072302155 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067294517 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067910011 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070385832 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071179437 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.075844758 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068711464 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072555473 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071080897 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068863728 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072043239 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074458975 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072084595 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089324492 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078386471 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070224312 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067465303 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083874359 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071334028 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068693284 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074978607 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074144684 seconds)
  done (took 9.783703379 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092834144 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071406504 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089332326 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096207375 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079827779 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075524602 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084290213 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070291195 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085556323 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068905239 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078799727 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068218234 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083037943 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078540916 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071018523 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079955887 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072258122 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089863512 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084207467 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068592962 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078785139 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082095248 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081961519 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087657136 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087515934 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088592764 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081379142 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071738609 seconds)
  done (took 4.28067189 seconds)
done (took 41.305918422 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.05680536 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.226744922 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.053220369 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.249609854 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.244246877 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.071163942 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.293960437 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.054383152 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.158940451 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.079285404 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.367249418 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.480153835 seconds)
done (took 70.382466648 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.136239057 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.19598321 seconds)
    (2/2) benchmarking "String"...
    done (took 2.270723114 seconds)
  done (took 6.454969114 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.647003254 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.051048486 seconds)
    (3/3) benchmarking "different"...
    done (took 2.101158906 seconds)
  done (took 8.782809568 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.194412263 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.080104973 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.311723334 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.049315404 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.056160389 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.440806778 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.851137374 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.511743005 seconds)
  done (took 33.286254599 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.344839759 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.301727852 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.792810459 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.835125172 seconds)
  done (took 17.304419156 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.654861966 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.31428696 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.312376497 seconds)
    (4/4) benchmarking "different"...
    done (took 2.310193048 seconds)
  done (took 11.629814037 seconds)
done (took 89.870571692 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.050984576 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.104608674 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.054661362 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.208067319 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.069260765 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.086876114 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.062666106 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.091995649 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.053828533 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.055523752 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.497871382 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.05165034 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.050525612 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.087608498 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.052158359 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.066882873 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.429260334 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.063746635 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.069109069 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.636568691 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.529058422 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.062770883 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.065472901 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.105621058 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.148810654 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.054806305 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.620246445 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.056842823 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.674113901 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.064508667 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.057803598 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.057103706 seconds)
  done (took 213.324009036 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.054695082 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.140507506 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.203645257 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.092734137 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.50051609 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.252141815 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.205835227 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.5344525 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.060803558 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.080510011 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.287618376 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.059765534 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.310066268 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.012369314 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.049567055 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.06399796 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.186297409 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.299949642 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.056744086 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.244874901 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.065367134 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.256968553 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.203690995 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.24685267 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.09809702 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.154644643 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.261767384 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.079840111 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.241192232 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.166528113 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.075914831 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.060044534 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.27499979 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.92284511 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.069068107 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.074657843 seconds)
  done (took 180.936168939 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.243172383 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.073722333 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.117921224 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.191648123 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.827560813 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.783293527 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.056827243 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.055567188 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.054700375 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.063269156 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.05912068 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.124872188 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.400008778 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.070963485 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.060592698 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.056464455 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.439840793 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.062189609 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.055354668 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.056935508 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.121208017 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.430697688 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.193345342 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.060668677 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.068631469 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.192863359 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.068171317 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.056623554 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.193229688 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.061062352 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.135594028 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.192796689 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.063514632 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.137700472 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.065056171 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.552008174 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.060814199 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.057104454 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.058424783 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.05751794 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.120139733 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.057753639 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.161878013 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.150371586 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.058478689 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.069186634 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.252957398 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.744990783 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.060522735 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.057968362 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.057116674 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.058619787 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.059280106 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.700952236 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.059727697 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.083497113 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.68792431 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.060633214 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.058565854 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.059370632 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.058557635 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.059797072 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.065461794 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.095754437 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.871429613 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.851417193 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.449187472 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.858930482 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.062342523 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.785039708 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.092885771 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.04942497 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.137986836 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.059953306 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.060310636 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.058542904 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.059041782 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.192047782 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.1737781 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.060879338 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.195272765 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.050491018 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.059921756 seconds)
    (83/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.059489161 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.208029848 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.059545946 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.401955226 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.062399766 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.071804462 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.118477402 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.061480226 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.060862597 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.068416184 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.192536551 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.064423116 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.060720159 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.060407006 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.157749046 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.064639154 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.17180024 seconds)
    (100/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.061034167 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.286023778 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.131580469 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.311541787 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.292108751 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.065967888 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.060641453 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.075782972 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.061791976 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.061426662 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.071132122 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.061260633 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.061706401 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.062500183 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.061385378 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.061667516 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.06572278 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.073642279 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.06141483 seconds)
  done (took 442.407668922 seconds)
done (took 840.945483027 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.728268049 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.798823912 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.649009383 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.677985582 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.645050848 seconds)
  done (took 15.4925124 seconds)
done (took 17.487538696 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.092237682 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.077990973 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.068639249 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.118061766 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.087804742 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.07510504 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.110419244 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.106942553 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.092485685 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.074138215 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.11225846 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.079537188 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.093132548 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.097300638 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.13876735 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.100829381 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.079482003 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.072103767 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.11915789 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.080530021 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.079179781 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.0769369 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.076747725 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.114336465 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.148476989 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.051500713 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.0752503 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.11409792 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.087593093 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.111653026 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.137358202 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.096273829 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.109875264 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.141844222 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.123420612 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.147521444 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.086767067 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.134544922 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.074598425 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.162958549 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.12347586 seconds)
  done (took 88.147096541 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.074304441 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.208127081 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.284715192 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.104776128 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.074069267 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.283437153 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.128750432 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.210001691 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.205887829 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.287711385 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.287585115 seconds)
  done (took 26.151023942 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.072970749 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.206247437 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.285394167 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.10864483 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.074486316 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.304868148 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.136571138 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.201943519 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.213810882 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.29046611 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.30388399 seconds)
  done (took 26.205058202 seconds)
done (took 142.49904601 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.441533698 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.098596028 seconds)
  done (took 6.538041173 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.069563938 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.088005888 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.222759528 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.068563003 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.070590487 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.068403573 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.070389834 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.071063279 seconds)
  done (took 18.727032488 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.068868151 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.068242465 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.069675736 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.069628603 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.069422493 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.068944208 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.06990881 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.069362258 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.06964507 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.069840288 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.070736687 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.069807303 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.070081618 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.071067267 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.069622104 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.068746384 seconds)
  done (took 35.112559589 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.070293314 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.069862666 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.070372966 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.070441681 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.069735659 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.071320496 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.072903778 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.070579841 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.070163036 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.070265358 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.069851585 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.070641097 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.070835923 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.07011148 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.070659884 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.074006513 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.070798051 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.071033155 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.07153969 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.071171755 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.071695519 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.075453862 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.075510542 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.069283693 seconds)
  done (took 51.708971996 seconds)
done (took 114.094195797 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.262083639 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.637302465 seconds)
  done (took 8.901244507 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.076138948 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.0717177 seconds)
  done (took 6.208660126 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.072373504 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.0723407 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.072658975 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.071779475 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.071370727 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.071571472 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.072861682 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.071236982 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.071978824 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.072862246 seconds)
  done (took 22.723527788 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.073675884 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.073209556 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.07324967 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.072498143 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.072928846 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.072970935 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.073776015 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.07298276 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.073395808 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.07327722 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.073244399 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.073916438 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.073350012 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.074822956 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.073589156 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.073522646 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.074402526 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.074281125 seconds)
  done (took 39.324715611 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.070131625 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.06644341 seconds)
  done (took 6.139337576 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.070391468 seconds)
    (2/7) benchmarking "second"...
    done (took 2.069205998 seconds)
    (3/7) benchmarking "month"...
    done (took 2.06968239 seconds)
    (4/7) benchmarking "year"...
    done (took 2.068689704 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.069568654 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.070076915 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.06991203 seconds)
  done (took 16.485764864 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.070043994 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.226867389 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.271697915 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.672813727 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.070932459 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.072942704 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.944348678 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.072269888 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.073645406 seconds)
  done (took 22.475781308 seconds)
done (took 124.261087851 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.887329348 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.075885361 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.302553056 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.138551183 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.097656932 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.36681952 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.094390168 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.614102323 seconds)
done (took 44.578245975 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.135396773 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.068681797 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.10293815 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.102693039 seconds)
  done (took 23.275207239 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.070788303 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.400215593 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.095199949 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.01734738 seconds)
  done (took 23.598876532 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.450422411 seconds)
    (2/2) benchmarking "read"...
    done (took 2.420119072 seconds)
  done (took 6.876215307 seconds)
done (took 62.88968448 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.072685218 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.072796684 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.071313137 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.072421992 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.072497663 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.073036123 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.073284587 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.073317722 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.072303907 seconds)
    (10/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.073713869 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.072938008 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.072449898 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.073510961 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.073481076 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.072919692 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.072313406 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.072729183 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.073419227 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.072546063 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.073119014 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.072529525 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.073749951 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.072063381 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.073601111 seconds)
  done (took 51.752648889 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.074255387 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.07270114 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.073328421 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.07407669 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.07403971 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.073944174 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.07288032 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.074501981 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.074355831 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.074213314 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.074275704 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.074754239 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.074394414 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.074693851 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.074086857 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.07478347 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.073234334 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.074559999 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.075128893 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.073797888 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.074457509 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.074740008 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.074791181 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.074199335 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.074335194 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.074125747 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.074451799 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.074784487 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.07502101 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.075241558 seconds)
  done (took 64.231415789 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.075512981 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.074928186 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.075558444 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.075076953 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.076284158 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.075753571 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.075386316 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.075909684 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.075976812 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.076406552 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.075703136 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.076379327 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.075750531 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.076556942 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.075378872 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.077074632 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.07664022 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.076046494 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.075821722 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.076270061 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.076692532 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.077039538 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.076508918 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.077639665 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.077518343 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.07658641 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.077732762 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.077515643 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.077533274 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.07699562 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.077398245 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.077143533 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.077606197 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.077336382 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.077441031 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.077936078 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.075077609 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.076727181 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.076957386 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.077957752 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.078994296 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.078298059 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.077342342 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.079673319 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.078492162 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.079408306 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.078855676 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.079355448 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.079289601 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.079349678 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.078822122 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.079938027 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.07897551 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.078338068 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.078149287 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.079444119 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.079683478 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.079379872 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.079804595 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.079183514 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.079687119 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.078892206 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.079115014 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.079812531 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.079513467 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.079698279 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.079377184 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.080376736 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.081015989 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.080009189 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.079955054 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.079435138 seconds)
  done (took 151.605884444 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.080045793 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.081543198 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.080433243 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.081068038 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.080657442 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.080098712 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.081498905 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.081876762 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081479209 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.079961204 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.080843539 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.080662616 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.080580251 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.080718893 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.08111812 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.080840682 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.080720992 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.081924584 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.081655762 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.081258375 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.082036972 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.081342658 seconds)
  done (took 47.791431026 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.081461341 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.082691265 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.081182176 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.08209322 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.082275833 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.081713137 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.081728669 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.081216888 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082428322 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.081528671 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.085117874 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.081781343 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.081462143 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.082411593 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.081516362 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.083292532 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.082360212 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.0830464 seconds)
  done (took 39.490436209 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.08276117 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.082649326 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.083801277 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.082248062 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.08257438 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.083515289 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.083207924 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.084094204 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.082867836 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.084207813 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.083271938 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082943219 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.083676671 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.083163094 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.082136676 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.083366406 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.084058841 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083237733 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.083997082 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.083643705 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.084515714 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.083807479 seconds)
  done (took 47.846442691 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.083434513 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.083827991 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.084894897 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.084140285 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.083400676 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.085206169 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.083968322 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.085055349 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.084024845 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.083811964 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.083949585 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.085441758 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.084351955 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.084251097 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.084230275 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.084080276 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.084296662 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.084622391 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.084422216 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.084299546 seconds)
  done (took 43.698839327 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.085116346 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.086575068 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.086472415 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.086465416 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.086666741 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.085593043 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.086226362 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.086554757 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.086771865 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.08593449 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.085574443 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.086250923 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.086597155 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.086616239 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.08788053 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082034393 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.08614173 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.086863516 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.086329107 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.086708334 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.08689317 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.087744991 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.086533913 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.087100259 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.087038833 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.086540499 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.086595561 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.086464529 seconds)
  done (took 60.432937207 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.085868484 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.087230958 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.086073778 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.087165391 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.087523557 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.085014302 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.086287436 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.086385546 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.087499094 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.087924538 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.086311512 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.085720416 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.086989388 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.087166884 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.086666657 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.086549224 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.087384744 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.08803761 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.087330256 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.086929779 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.087957787 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.08681714 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.088750188 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.0879422 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.088116508 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.087433996 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.087841803 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.088109156 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.088337309 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.087894663 seconds)
  done (took 64.631456792 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.108419797 seconds)
    (2/2) benchmarking "in"...
    done (took 2.105050577 seconds)
  done (took 6.229921878 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.089860831 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.088419252 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.087948478 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.088595067 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.088650925 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.089510013 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.088609906 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.088857233 seconds)
  done (took 18.726832273 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.088586806 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.092426918 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.089253702 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.089356495 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.090020835 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.097007162 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.08984189 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.090839867 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.091542267 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.090787007 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.093958658 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.093189006 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.097584049 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.094455504 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.089892018 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.090909884 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.091053879 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.093001277 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.091800419 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.089774572 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.093808724 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.090506856 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.089762285 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.090928009 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.090649454 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.092641084 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.101094451 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.091741123 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.091880745 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.090419742 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.097625553 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.091118051 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.091319729 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.092364821 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.090880993 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.091729595 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.097949721 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.079122661 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.091908499 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.077485535 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.094022207 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.094400462 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.094659162 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.098676862 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.091801517 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.091017029 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.091485383 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.09282835 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.091722758 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.095795063 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.099925422 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.092412929 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.092915161 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.092167568 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.093555805 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.092757272 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.093574466 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.094201131 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.099214909 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.099524271 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.095684104 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.112760645 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.102025512 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.093080808 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.093616738 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.103004455 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.118634287 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.093995838 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.095054668 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.092942814 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.1011324 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.093267669 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.093275169 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.09352426 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.107757745 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.091073396 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.093370383 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.094213109 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.094497816 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.093935889 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.095193935 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.093829102 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.095146506 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.093828321 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.103295599 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.118534677 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.093832969 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.09502888 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.096745477 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.09552399 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.099477917 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.096848487 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.094144733 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.095623228 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.096544996 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.097259934 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.094693395 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.094797275 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.093695358 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.102988518 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.095244057 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.094228494 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.09836101 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.10231033 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.094059947 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.094639767 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.096316226 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.096244139 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.103315652 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.095658461 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.095981585 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.094381197 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.095938876 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.100389041 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.095282988 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.09856749 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.1040632 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.103641198 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.096370143 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.100268136 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.09992187 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.086144175 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.105985191 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.120432025 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.096118469 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.090496301 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.077841395 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.108043114 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.10006621 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.097565613 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.1000644 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.095943347 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.094252319 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.0975008 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.096071306 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.096833351 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.096801289 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.096472314 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.097479121 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.096049795 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.09924274 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.097112393 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.098199602 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.097762176 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.101852225 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.096093968 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.099799637 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.104400346 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.098146883 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.097651303 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.09779063 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.099687028 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.098690878 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.099547807 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.097416998 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.09781067 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.098533593 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.099301952 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.099645847 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.098670346 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.098385686 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.100111254 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.102787363 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.099106253 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.098475065 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.098649709 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.099861615 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.098172465 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.099729114 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.099305812 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.100697242 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.099902454 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.103884918 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.099258354 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.099307799 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.098437221 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.100714412 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.098666974 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.102826661 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.110427443 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.10276854 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.109297728 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.099947608 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.107057421 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.098929678 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.10066805 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.100164089 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.099388195 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.099396385 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.099102333 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.098800142 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.101130427 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.120356766 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.108804107 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.101083757 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.100655436 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.104918732 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.103384558 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.105016484 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.098467443 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.100230486 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.10064294 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.099685108 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.099482242 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.099694881 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.103096072 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.100270896 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.100166518 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.104383554 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.101130696 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.100030614 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.101285585 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.100947361 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.103584727 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.101823357 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.099301623 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.101855578 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.101249686 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.109018768 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.103995586 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.101874951 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.100592004 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.102746229 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.101834019 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.101471962 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.103428816 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.105796921 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.101045627 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.101839809 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.108276588 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.102355604 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.103234481 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.100705869 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.102389572 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.103025379 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.102716703 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.104862955 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.110309216 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.105359471 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.101388042 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.107828041 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.102058348 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.105054175 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.102367283 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.10387652 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.101527792 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.104651391 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.102331116 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.103601986 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.110020301 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.102634013 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.103731593 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.10475374 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.105765548 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.104754546 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.105657849 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.103076352 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.105702893 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.111032316 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.109663189 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.103831685 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.105518022 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.105246346 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.103174304 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.10714745 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.104021743 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.118237212 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.112300904 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.103327687 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.104575715 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.106293497 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.106240577 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.104768088 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.104647203 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.110593342 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.104114293 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.105124874 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.108500204 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.103740032 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.104489312 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.111232332 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.105865516 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.108069287 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.105964143 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.105222833 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.105433207 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.103957336 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.106688775 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.104500661 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.106141253 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.108467763 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.104733571 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.105421425 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.10491554 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.113856532 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.105912707 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.105768183 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.112786122 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.105941341 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.104129615 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.106540965 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.106099241 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.10608729 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.106512379 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.105437264 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.107066926 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.106925484 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.109252062 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.116153186 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.108959731 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.114401404 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.107505866 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.115593361 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.105241098 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.106220729 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.106353492 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.110265632 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.114416918 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.10565078 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.105003088 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.113628685 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.106246262 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.107195368 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.111326884 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.106583034 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.106968689 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.105888541 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.10818374 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.112347882 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.10993798 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.107491993 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.107836659 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.106364337 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.106222295 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.110491722 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.109182023 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.108322241 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.107381317 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.107307261 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.1079204 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.10762765 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.107491473 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.107372715 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.107433066 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.106554921 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.114871444 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.10873554 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.108957363 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.112763514 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.108458834 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.11698304 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.108338168 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.108937929 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.108955475 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.109023847 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.111414759 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.10739706 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.109195506 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.108399945 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.108990121 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.110007864 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.120082736 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.115890881 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.1125346 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.1103572 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.109231945 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.110289566 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.119328029 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.13482311 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.109110766 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.11059194 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.114590042 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.116536232 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.111823937 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.116065242 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.113855562 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.118680802 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.110246498 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.109274934 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.11266485 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.123102282 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.110034586 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.110445433 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.109726978 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.115591869 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.11273601 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.110328801 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.112210209 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.114771007 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.111185448 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.122951057 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.111259575 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.111954671 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.110891124 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.110875656 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.110723706 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.110747185 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.111748402 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.112439567 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.111707573 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.112250613 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.112822387 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.116481115 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.111606394 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.115023454 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.121771072 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.111335016 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.111179475 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.113273453 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.111574741 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.114179422 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.112480947 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.111755544 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.113799219 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.112247925 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.112193946 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.114897397 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.120215756 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.114526302 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.111747264 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.112437828 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.1165378 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.111993218 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.113653641 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.113633712 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.123398266 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.11586082 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.123145341 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.122474878 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.11410216 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.099854185 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.121351902 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.120132609 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.113716433 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.112780648 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.113268404 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.115729824 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.079075515 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.11572446 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.114602684 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.114629178 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.119994381 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.115171281 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.11504864 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.114685361 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.113533735 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.116119508 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.101608868 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.119129651 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.115272582 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.114304587 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.11292067 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.115491655 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.115898165 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.116440202 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.115368329 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.115886688 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.11623367 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.116139096 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.118520645 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.114903341 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.116117254 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.116116625 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.111107604 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.114651346 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.114954473 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.115040845 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.115265638 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.119011952 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.12319642 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.114325334 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.116737388 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.116092969 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.118830926 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.11568756 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.115819729 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.11510158 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.115449514 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.122904293 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.11646577 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.115473745 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.116340622 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.116538584 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.122252525 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.117015982 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.122019141 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.116548737 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.115589069 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.116974458 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.119909756 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.125510724 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.12124489 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.119025411 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.125405783 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.12186819 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.118220647 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.11755915 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.117237977 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.116424151 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.117641785 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.121900966 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.118864324 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.11938959 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.117120834 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.119370196 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.116621039 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.119727857 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.117662802 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.118941059 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.120647555 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.12715952 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.125580772 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.107251701 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.094494493 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.116589352 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.119858364 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.105321307 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.117745726 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.11742988 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.115348552 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.117297521 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.116956374 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.122808367 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.125724686 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.119933325 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.115740135 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.121446958 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.134854434 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.117095166 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.125626228 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.148788657 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.11683581 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.117085567 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.116123736 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.115111705 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.116716309 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.119539158 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.116490839 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.122603966 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.116886132 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.115950746 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.124733446 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.116427557 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.116202633 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.11631742 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.116882098 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.124441365 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.114729218 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.121632957 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.113564894 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.114310382 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.117526533 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.115872093 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.113808855 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.112857097 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.113282721 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.116172883 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.112228326 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.113275068 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.121436943 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.114025863 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.11418743 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.127048176 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.124572642 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.11405039 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.587192119 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.10730769 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.112720163 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.110328741 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.107024112 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.111028651 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.114992251 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.111053399 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.115930068 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.108826546 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.107032902 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.106864692 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.106346254 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.106782251 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.12084299 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.117048762 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.10529384 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.105643824 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.111175226 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.105864671 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.110646607 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.110846444 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.104773575 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.106321636 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.105654529 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.103912393 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.105609897 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.105188391 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.109311809 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.112961322 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.104329681 seconds)
  done (took 1258.069403589 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.105099816 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104885419 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.102947549 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.102902854 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.104147316 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.104043676 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.104694002 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.102495814 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.103747061 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.103416321 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.104107198 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.104708051 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.102112748 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.102109954 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.102043901 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.103915456 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.101549273 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.101798827 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.101521218 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.101295067 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.10314096 seconds)
  done (took 46.199158256 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.101402684 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.103015291 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.102578512 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.101962076 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.101767448 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.104740994 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.101524542 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.102985417 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.10275368 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.101734665 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.102449518 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.102434017 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.102768219 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.102264987 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.102031555 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.102522344 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.102582393 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.103189278 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.102768096 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.102545978 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.103194928 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.103668778 seconds)
  done (took 48.28618842 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.102939069 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.103441584 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.103559092 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.10181752 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.10353993 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.103617286 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.103019171 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.105465629 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.102437223 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.105064971 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.111088726 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.111454392 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.103629434 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.106007726 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.103496909 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.103797745 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.249042269 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.104110124 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.10576274 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.103671038 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.105142698 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.110253963 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.103519535 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.10594394 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.102851754 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.104573197 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.103869719 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.105423229 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.10345214 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.10466406 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.108081277 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.104572257 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.105658512 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.106920662 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.105645085 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.105904851 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.108063161 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.10701273 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.104503135 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.104251019 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.11468957 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.129546094 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.107219641 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.104987891 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.112569249 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.105341338 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.106834157 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.108455139 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.113586501 seconds)
  done (took 105.383222649 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.106023229 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.1071233 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.105345531 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.104915348 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.104961386 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.104816846 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.106420672 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.10338765 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.102669198 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.102987137 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.103133028 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.100973656 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.097224099 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.095901506 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.096265698 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.098933888 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.092488563 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.093750799 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.093404008 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.093642154 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.095116485 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.091401801 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.091481323 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.091999168 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.091280804 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.094125149 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.087204132 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.086515147 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.086974391 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.086599064 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.085105698 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.08435091 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.083921067 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.084829605 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.083477741 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.085231944 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.085631884 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.084586605 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.085456348 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.085917248 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.084003545 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.083663231 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.083721451 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.084584847 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.085001825 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.083716326 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.084085287 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.08427223 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.08459086 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.084579926 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.083330283 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.084435167 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.083725244 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.083786225 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.085765225 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.083311707 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.084031511 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.083957499 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.08406447 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.084832013 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.084427558 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.084442224 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.08325828 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.085058806 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.083129343 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.084509019 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.083326277 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.083635898 seconds)
  done (took 144.154957834 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.084406068 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.084009008 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.08377826 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.085586248 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.085750915 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.084164812 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.084794677 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.084624273 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.083415916 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.085170403 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.085041834 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.085013979 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.083630863 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.084541143 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.085632525 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.084153126 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.082813206 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.084144306 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.085517303 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.083812392 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.083408252 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.084013651 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.083565138 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.086386401 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.084847737 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.084274423 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.083575272 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.083285018 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.084593056 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.083797229 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.08392748 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.083930832 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.084320272 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.085036639 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.08529932 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.084339385 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.083947586 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.08406674 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.085702016 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.083366254 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.082905651 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.083676758 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.085483374 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.083098866 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.083708518 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.084343819 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.08368026 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.083873472 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.084067373 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.082876472 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.083658487 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.083182738 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.082710004 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.083489411 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.084596662 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.083078437 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.082705837 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.084681639 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.082455143 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.083127972 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.08377009 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.08319271 seconds)
  done (took 131.228639404 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.082329279 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.082230569 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.08316505 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.08359661 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.082744176 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.082489087 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.082978971 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.082488306 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.08409256 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.082502767 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082065352 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.08303563 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.082931608 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083592068 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.081645279 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.08293631 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.082273491 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.081808709 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.082451483 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.0819365 seconds)
  done (took 43.665607771 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.081821799 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.08170252 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.083750054 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.047125904 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.082162606 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.081763955 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.08179008 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.084308176 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.082272765 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.082026351 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.081864844 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.082505797 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.082594547 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.082542347 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.08265327 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.082626915 seconds)
  done (took 35.2939486 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.081952386 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.082165727 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.08322152 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.083318409 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.083562784 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.081852007 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.081223199 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.081859384 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.081826206 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.08276052 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.081827835 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.081680106 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.081543872 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.082724432 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.083130325 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.082106452 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.082818827 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.081942856 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.08326455 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.083020905 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.082545673 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.082579702 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.082739498 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.083418986 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.082849658 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.082234329 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.083474857 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.084205663 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.082563386 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.083208138 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.081720181 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.083373215 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.083552927 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.083451643 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.083590739 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.082221308 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.083357547 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.082605834 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.083327723 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.082649592 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.084170631 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.084104272 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.086859255 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.083546086 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.083614607 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.083989499 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.083128569 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.08418546 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.069612536 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.082750311 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.082998237 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.08421665 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.085071501 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.082173622 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.083034155 seconds)
  done (took 116.562938983 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.08344915 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.085190528 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.08337023 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.082883517 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.08261435 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.083439233 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.084582535 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.082346435 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.08252192 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.082080082 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.085230064 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.081661377 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.082704985 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.081607258 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.084028971 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.084065917 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.081957279 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.083353809 seconds)
  done (took 39.507806812 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.083024648 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.08470984 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.084250635 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.083496519 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.083264912 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.083932663 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.083333441 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.083369582 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.083822071 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.083785653 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.082507162 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.085167653 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083132341 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.084203768 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.083842415 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.084945873 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.08446122 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.085120589 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.08363535 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.084748753 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.0852544 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.083901721 seconds)
  done (took 47.85931858 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.084440298 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.08446416 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.098869994 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.102120553 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.101971786 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.112027404 seconds)
  done (took 14.595811004 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.084672406 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085269877 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.084496933 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085474659 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.085160899 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086514578 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.085615977 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.084364979 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.085464534 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083827873 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.083118177 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084407131 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084664573 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.086429778 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087823412 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.085397149 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.085968508 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.086208209 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086477574 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087277949 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.086687171 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.086050181 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086294118 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087372003 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087882203 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087082864 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.086699902 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086357819 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08710874 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08956816 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086683842 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087675966 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087464425 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08828256 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087938119 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087346531 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087403354 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090102849 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088627409 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08768037 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.086951199 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.086561374 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087453378 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089487728 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087433732 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086999689 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087745744 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087544397 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088665472 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087389874 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087279872 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08760841 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087466516 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090015827 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088499277 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088398181 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087562434 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090371649 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088007085 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087493811 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08720123 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088168318 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090184477 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087962626 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08757698 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088000897 seconds)
  done (took 139.762099262 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089517283 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.088050167 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088536649 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088200866 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088611332 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091532917 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089283038 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089390749 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089789952 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088921506 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09043991 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088416267 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088461805 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088744869 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090952593 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088768609 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088322557 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088581928 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087904925 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090465758 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090445088 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089695356 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089908914 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089214001 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090351314 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089401851 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089477396 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090294156 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088781326 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.092778214 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089473491 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089232782 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090351236 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.08997337 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.090965262 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088413183 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088871994 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089028243 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.094305001 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088377035 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088995007 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087621632 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088216051 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090475711 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08842837 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089923223 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08863778 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0891341 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089645924 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090066938 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089170949 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089236969 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.09079382 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089969257 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088768902 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089183325 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089750997 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088022528 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082793896 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082655168 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.090516263 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089184578 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090458309 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089742942 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089912778 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089349257 seconds)
  done (took 139.910137823 seconds)
done (took 2908.928555768 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.11955832 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.133552447 seconds)
  done (took 16.271194704 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.266581414 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.137811034 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.289369276 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.220512885 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.104871828 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.13138902 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.105982572 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.106114086 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.19964893 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.106646968 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.140510621 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.106658895 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.106459266 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.107315256 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.106119254 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.107837563 seconds)
  done (took 56.602414662 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.112980152 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.111321729 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.111478753 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.107694315 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.122233378 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.262305076 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.138840443 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.113929154 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.125922566 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.142711523 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.12750725 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.116638792 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.11839475 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.115796129 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.208611424 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.171089376 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.176659462 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.19115935 seconds)
  done (took 40.606940966 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.1915041 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.135700901 seconds)
  done (took 11.36642016 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.137287172 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.111731568 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.139329185 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.124818364 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.111886353 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.134587502 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.125090291 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.108925534 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.105865215 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.117279321 seconds)
  done (took 73.252374795 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.111080175 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.111906442 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.373630592 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.118997361 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.118691979 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.137181455 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.108658795 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.141829209 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.111196684 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.108831627 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.121077822 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.380042874 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.124303539 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.109538196 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.530825341 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.122934634 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.115917357 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.14289991 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.147058634 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.115154047 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.116669489 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.115525985 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.271617586 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.850592211 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.111590863 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.11635769 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.116329885 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.107988144 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.107124167 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.110272994 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.112303784 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.108216324 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.115999396 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.107942886 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.116909103 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.114579636 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.606661496 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.132014988 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.118795311 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.207017455 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.157131226 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.118680484 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.919931885 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.112989154 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.109062865 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.120051414 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.804949903 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.240787513 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.109005947 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.347099723 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.46650395 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.126161843 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.287514356 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.267048934 seconds)
  done (took 146.339326071 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.107320576 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.342162257 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.260343092 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.111904279 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.365736612 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.322815252 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.115553476 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.154077586 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.11692331 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.311438615 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.361121254 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.212359587 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.111248463 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.107975872 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.109061948 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.10827051 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.254004753 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.176747512 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.112956881 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.108249664 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.134046446 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.310096632 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.231757463 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.112713491 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.135141708 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.31767342 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.236530486 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.213506879 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.893554591 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.109158499 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.172064981 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.113073989 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.112948738 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.108730355 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.2639163 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.204375827 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.194578859 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.11672539 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.10996001 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.111094267 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.783261009 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.311553104 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.206037669 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.233459801 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.35639448 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.325957924 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.722057691 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.109976752 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.739419557 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.274935191 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.315028944 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.318881018 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.231400605 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.114592304 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.673301982 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.112057068 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.110382881 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.332566014 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.329059775 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.211794784 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.113095281 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.112383271 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.109900426 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.351544196 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.114978145 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.202974222 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.11458661 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.113732177 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.203812992 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.214902021 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.338479804 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.332689623 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.144913008 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.434731868 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.597287716 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.315008116 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.177647529 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.334776488 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.116661223 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.112144862 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.191217831 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.948704671 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.364187662 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.354089974 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.310830511 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.142693341 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.763472158 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.112984639 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.298975353 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.302874769 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.346488502 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.353663519 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.347958251 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.467359739 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.111934832 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.11200731 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.415446929 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.230433192 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.065045194 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.463013542 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.342270456 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.637602125 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.139207831 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.399298153 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.280973837 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.115617912 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.764041717 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.115704343 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.319826926 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.117198237 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.114831201 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.116535545 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.306022289 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.018738484 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.113961859 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.814694643 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.176082807 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.120104884 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.318037038 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.117060535 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.362978088 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.119376444 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.349598872 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.769680387 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.147675098 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.34031422 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.356234016 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.755747898 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.35533871 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.363031765 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.22861146 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.336552288 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.921524951 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.118294786 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.379623256 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.118733459 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.128197621 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.283333489 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.123707052 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.259651529 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.120841619 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.386823997 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.136589654 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.350124052 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.119813611 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.355498585 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.148572914 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.165128225 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.118781958 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.245684297 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.118210055 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.962130592 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.27305935 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.118367196 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.115541156 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.879275874 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.117111611 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.264203665 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.341103872 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.138727101 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.186095504 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.680511692 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.11424281 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.19918662 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.139049349 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.737265693 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.121407368 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.364776273 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.080708726 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.590099455 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.116041747 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.352120309 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.302489406 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.122925429 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.11996262 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.958827424 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.116902525 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.117842578 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.27208357 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.567309932 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.027764172 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.319586613 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.122131506 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.246214186 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.119967379 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.192508989 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.461440624 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.1192057 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.118636056 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.120888158 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.119431299 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.121111144 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.382762652 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.144830681 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.550911666 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.254562893 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.373762082 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.424749466 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.315759911 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.159455409 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.121581341 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.341824269 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.124327115 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.181412019 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.119967733 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.140816357 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.347037984 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.12382373 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.3234148 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.351437823 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.006762908 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.167615753 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.122046406 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.12364543 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.036264802 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.265473689 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.205281492 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.122411395 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.119185644 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.237770753 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.241551069 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.302154234 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.943063769 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.256463057 seconds)
  done (took 956.209578326 seconds)
done (took 1302.668600964 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.120606777 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.126301639 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.127233243 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.105648362 seconds)
  done (took 30.52710034 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.121646342 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.121489611 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.123174449 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.124969493 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.122536857 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.121382115 seconds)
  done (took 14.782454839 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.125732867 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.124613759 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.12594953 seconds)
  done (took 23.424235256 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.55338072 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.531710009 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.203696418 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.27366272 seconds)
  done (took 11.614364706 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.126623235 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.122885011 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.12169644 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.126898566 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.124771979 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.12324256 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.123544316 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.126241501 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.123746313 seconds)
  done (took 21.175040934 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.370023342 seconds)
done (took 107.942409976 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.164421799 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.4618256 seconds)
    (3/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.757841555 seconds)
    (4/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.128723338 seconds)
    (5/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 3.595378263 seconds)
    (6/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.120950373 seconds)
    (7/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.205844543 seconds)
    (8/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.35954196 seconds)
    (9/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.90362109 seconds)
    (10/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.211578904 seconds)
    (11/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.346575514 seconds)
    (12/341) benchmarking ("sort", Float64, false)...
    done (took 5.849461446 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.140241017 seconds)
    (14/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.135250169 seconds)
    (15/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.122946701 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 5.196616332 seconds)
    (17/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.316751427 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.143448196 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.468095965 seconds)
    (20/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.546744411 seconds)
    (21/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.522116648 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.450297728 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.141473315 seconds)
    (24/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.12617465 seconds)
    (25/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.306190039 seconds)
    (26/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.597225017 seconds)
    (27/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.510530377 seconds)
    (28/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.599416966 seconds)
    (29/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.13228252 seconds)
    (30/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.777119046 seconds)
    (31/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.837149564 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.136993468 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.247087081 seconds)
    (34/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.12261395 seconds)
    (35/341) benchmarking ("map", identity, Float32, false)...
    done (took 3.853609274 seconds)
    (36/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.227746753 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.04921614 seconds)
    (38/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.357350865 seconds)
    (39/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.3953611 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.350614867 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.211396956 seconds)
    (42/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.517355668 seconds)
    (43/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.137975828 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.254393162 seconds)
    (45/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.504580961 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.541977529 seconds)
    (47/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.135142508 seconds)
    (48/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.231276084 seconds)
    (49/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.229291405 seconds)
    (50/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.39727644 seconds)
    (51/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.388145657 seconds)
    (52/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.25474188 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.450909757 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.260654567 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.230942757 seconds)
    (56/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.327726406 seconds)
    (57/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.131646591 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.420294381 seconds)
    (59/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.236661178 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.440587724 seconds)
    (61/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.244872743 seconds)
    (62/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.229642753 seconds)
    (63/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.135129968 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.742985722 seconds)
    (65/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.194412328 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.438438599 seconds)
    (67/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.232856789 seconds)
    (68/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.264347963 seconds)
    (69/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.157154781 seconds)
    (70/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.395531805 seconds)
    (71/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.394149611 seconds)
    (72/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.137694852 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.711873417 seconds)
    (74/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.146773148 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.236186476 seconds)
    (76/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.11112144 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.231137352 seconds)
    (78/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.134719727 seconds)
    (79/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.261915494 seconds)
    (80/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.1243513 seconds)
    (81/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 4.800921172 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.13945266 seconds)
    (83/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.126374787 seconds)
    (84/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.258660045 seconds)
    (85/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.017044474 seconds)
    (86/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.337015458 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.144472474 seconds)
    (88/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.36761336 seconds)
    (89/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.289805951 seconds)
    (90/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.838943497 seconds)
    (91/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.401132817 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.246339444 seconds)
    (93/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.940926429 seconds)
    (94/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.233952454 seconds)
    (95/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.492783581 seconds)
    (96/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.433174829 seconds)
    (97/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.914770448 seconds)
    (98/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.140457902 seconds)
    (99/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.122684429 seconds)
    (100/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.107901734 seconds)
    (101/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.33349637 seconds)
    (102/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.545704841 seconds)
    (103/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.871948794 seconds)
    (104/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.189183287 seconds)
    (105/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.40542357 seconds)
    (106/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.455998581 seconds)
    (107/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.133027915 seconds)
    (108/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.715828658 seconds)
    (109/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.267452977 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.364604307 seconds)
    (111/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.133449622 seconds)
    (112/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.128088814 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 3.73528514 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.523058556 seconds)
    (115/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.081774367 seconds)
    (116/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.272920459 seconds)
    (117/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.140989641 seconds)
    (118/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.501910246 seconds)
    (119/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.855419706 seconds)
    (120/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.484735639 seconds)
    (121/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.938395901 seconds)
    (122/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.389461382 seconds)
    (123/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.328784593 seconds)
    (124/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.113751276 seconds)
    (125/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.134434334 seconds)
    (126/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.359875368 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.437110145 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.409048605 seconds)
    (129/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.240395268 seconds)
    (130/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.278905092 seconds)
    (131/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.211199139 seconds)
    (132/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.128438649 seconds)
    (133/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.134122038 seconds)
    (134/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.259929095 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.769951735 seconds)
    (136/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.03410209 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.258069664 seconds)
    (138/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.210616451 seconds)
    (139/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.298551773 seconds)
    (140/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.034658556 seconds)
    (141/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.255524859 seconds)
    (142/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.394603375 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.898490806 seconds)
    (144/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.236139599 seconds)
    (145/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.416921066 seconds)
    (146/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.369744277 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.386734752 seconds)
    (148/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.389919603 seconds)
    (149/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.154927083 seconds)
    (150/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.344481794 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.42408659 seconds)
    (152/341) benchmarking ("sort", Bool, false)...
    done (took 2.347855597 seconds)
    (153/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.149336829 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.231003539 seconds)
    (155/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.226055401 seconds)
    (156/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.588361685 seconds)
    (157/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.144489417 seconds)
    (158/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.259912838 seconds)
    (159/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.321540535 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.163120416 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.146436045 seconds)
    (162/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.131163218 seconds)
    (163/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.536951778 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 5.778653637 seconds)
    (165/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.138730799 seconds)
    (166/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.132251297 seconds)
    (167/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.562134194 seconds)
    (168/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.430234098 seconds)
    (169/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.478704285 seconds)
    (170/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.897553854 seconds)
    (171/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.55856652 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.423632438 seconds)
    (173/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.23517969 seconds)
    (174/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.13869246 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.016108553 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.355791076 seconds)
    (177/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.90339744 seconds)
    (178/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.269080143 seconds)
    (179/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.354145246 seconds)
    (180/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.256961658 seconds)
    (181/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.365470698 seconds)
    (182/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.156135055 seconds)
    (183/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.26079513 seconds)
    (184/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.13191599 seconds)
    (185/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.147678148 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.148891392 seconds)
    (187/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.133487867 seconds)
    (188/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.264390435 seconds)
    (189/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.462703243 seconds)
    (190/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.113802191 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.289941423 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.262383984 seconds)
    (193/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.412415816 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.451258901 seconds)
    (195/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.27151864 seconds)
    (196/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.13284792 seconds)
    (197/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.174284431 seconds)
    (198/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.296877203 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.79991147 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.143949351 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.265656907 seconds)
    (202/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.438284171 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.136209524 seconds)
    (204/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.150142106 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.133256729 seconds)
    (206/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.604181856 seconds)
    (207/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.157721219 seconds)
    (208/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.347823833 seconds)
    (209/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.348048244 seconds)
    (210/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.217199027 seconds)
    (211/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.601289203 seconds)
    (212/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.229950624 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.264888345 seconds)
    (214/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.494816976 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.153410297 seconds)
    (216/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.029710779 seconds)
    (217/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.408650079 seconds)
    (218/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.137651885 seconds)
    (219/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.179699303 seconds)
    (220/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.257412601 seconds)
    (221/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.541241731 seconds)
    (222/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.223823119 seconds)
    (223/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.15498177 seconds)
    (224/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.297099555 seconds)
    (225/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.150520114 seconds)
    (226/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.213811137 seconds)
    (227/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.238762892 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.140663529 seconds)
    (229/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.739245747 seconds)
    (230/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.138339255 seconds)
    (231/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.134566836 seconds)
    (232/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.452743421 seconds)
    (233/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.32764981 seconds)
    (234/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.481948847 seconds)
    (235/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.328019352 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.476384325 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.142196796 seconds)
    (238/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.631163823 seconds)
    (239/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.133642074 seconds)
    (240/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.037152455 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.931485453 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.436513834 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.044817181 seconds)
    (244/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.175541147 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.518981457 seconds)
    (246/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.155374841 seconds)
    (247/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.136106371 seconds)
    (248/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.27362935 seconds)
    (249/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.551411315 seconds)
    (250/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.138797422 seconds)
    (251/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.950021942 seconds)
    (252/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.138302255 seconds)
    (253/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.16262994 seconds)
    (254/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.222201787 seconds)
    (255/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.597338992 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.231289482 seconds)
    (257/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.239525729 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.143182119 seconds)
    (259/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.044286837 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.270203719 seconds)
    (261/341) benchmarking ("sort", BigInt, false)...
    done (took 7.141055207 seconds)
    (262/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.344143775 seconds)
    (263/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.141650553 seconds)
    (264/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.552732547 seconds)
    (265/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.440920413 seconds)
    (266/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.220791494 seconds)
    (267/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.812492723 seconds)
    (268/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.162124381 seconds)
    (269/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.342053044 seconds)
    (270/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.215058556 seconds)
    (271/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.152908756 seconds)
    (272/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.137799766 seconds)
    (273/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 3.757759155 seconds)
    (274/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.448125365 seconds)
    (275/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.926416193 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.288887446 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.566016732 seconds)
    (278/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.220440297 seconds)
    (279/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.420239557 seconds)
    (280/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.134676087 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.282064529 seconds)
    (282/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.273116694 seconds)
    (283/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.281361546 seconds)
    (284/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.142959203 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.193736694 seconds)
    (286/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.141496032 seconds)
    (287/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.730421615 seconds)
    (288/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.691664638 seconds)
    (289/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.143861238 seconds)
    (290/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.289910496 seconds)
    (291/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.149525976 seconds)
    (292/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.336716971 seconds)
    (293/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.440190299 seconds)
    (294/341) benchmarking ("sort", Float32, false)...
    done (took 5.831122588 seconds)
    (295/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.385489752 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.493139092 seconds)
    (297/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.567898191 seconds)
    (298/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.028666572 seconds)
    (299/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.249079012 seconds)
    (300/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.622118394 seconds)
    (301/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.351056136 seconds)
    (302/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.443936489 seconds)
    (303/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.181341318 seconds)
    (304/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.239975547 seconds)
    (305/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.328202417 seconds)
    (306/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.283021641 seconds)
    (307/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.406914917 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.46182159 seconds)
    (309/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.455165999 seconds)
    (310/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.189116218 seconds)
    (311/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.59219408 seconds)
    (312/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.406610746 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.45329092 seconds)
    (314/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.359102659 seconds)
    (315/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.152936389 seconds)
    (316/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.213429478 seconds)
    (317/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.274035434 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.561595459 seconds)
    (319/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.397528962 seconds)
    (320/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.475005129 seconds)
    (321/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.215561328 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.168390392 seconds)
    (323/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.207855454 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.908514967 seconds)
    (325/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.610465309 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.045795571 seconds)
    (327/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.14131469 seconds)
    (328/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.290317214 seconds)
    (329/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.555061673 seconds)
    (330/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.250418791 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.023132551 seconds)
    (332/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.342281973 seconds)
    (333/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.34849286 seconds)
    (334/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.454688942 seconds)
    (335/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.373725559 seconds)
    (336/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.855943809 seconds)
    (337/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.228780137 seconds)
    (338/341) benchmarking ("sort", Int8, false)...
    done (took 5.094899173 seconds)
    (339/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.295638828 seconds)
    (340/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.25953083 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.759450495 seconds)
  done (took 1183.524127691 seconds)
done (took 1185.679017939 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.170423543 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.146997076 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.650337676 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.157551135 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.147823962 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.151206986 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.661659139 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.177788776 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.164515199 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.661807203 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.158052998 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.148052955 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.146933893 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.168679204 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.159531101 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.16235007 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.154271489 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.172337964 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.182809843 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.153958665 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.200634022 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.154331995 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.147940222 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.199912139 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.148005734 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.162766224 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.168200965 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.201532718 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.201254805 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.151819644 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.154568439 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.507190277 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.19839362 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.155059238 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.160825618 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.164780471 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.155427397 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.165210363 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.167801911 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.165088592 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.150162041 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.162829998 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.15435879 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.152464502 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.149636611 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.149610476 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.152584522 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.275356898 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.165346633 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.493440954 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.212080127 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.169333583 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.202817261 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.153027416 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.152309986 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.15451869 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.202973425 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.156766589 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.15639471 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.492777686 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.244282007 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.166100229 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.493645136 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.212178246 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.161897333 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.159612323 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.151333688 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.169195265 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.509477404 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.70408642 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.183310905 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.171863457 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.155448017 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.153167255 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.16603218 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.663993547 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.168363225 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.73237485 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.176554978 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.165705613 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.158363425 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.155171379 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.153373429 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.169520705 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.170561393 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.15198198 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.158807379 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.158701032 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.166435266 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.511774081 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.194928137 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.654119991 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.161037887 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.172438927 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.171184502 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.732307504 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.180486831 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.170834187 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.149294761 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.511012682 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.193575098 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.172445152 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.155502558 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.163119797 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.269492494 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.172690589 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.172929765 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.153968006 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.175324885 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.160088269 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.15490855 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.166670375 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.173940688 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.189146327 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.171118363 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.154273945 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.16309394 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.16100957 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.172064926 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.162649572 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.160924273 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.165726322 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.155860053 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.206195234 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.173125087 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.169915623 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.269691823 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.160778444 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.280349662 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.170257554 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.161034591 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.155481572 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.498090497 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.198567048 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.177480956 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.162056078 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.179464989 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.176921089 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.17254823 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.158179265 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.170810225 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.158454491 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.208554252 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.156529326 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.182072894 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.207623541 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.169395642 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.162883347 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.174440123 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.191419369 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.176582017 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.161015112 seconds)
done (took 338.861754149 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.19952628 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.153063132 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.228438265 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.15351327 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.220387062 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.205021204 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.153141369 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.154006562 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.153848753 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.534706435 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.152966406 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.159236044 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.154432733 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.153650227 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.202690889 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.154898545 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.154747192 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.386322167 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.155852362 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.214731657 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.153262314 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.155073917 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.154937297 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.542364943 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.157038677 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.153704399 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.213157684 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.15510739 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.395401982 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.153708629 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.152544758 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.396598172 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.213782683 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.167912342 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.163108748 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.162816134 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.222380854 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.164598697 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.202164866 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.201315575 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.232423834 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.187636055 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.154078675 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.155368158 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.159445262 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.156662995 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.155023371 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.187883364 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.15588924 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.160953011 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.388062668 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.160725804 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.163601234 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.157008175 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.156065063 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.169521865 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.156329709 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.156790781 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.216066926 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.157458042 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.202683903 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.545062075 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.538988805 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.157725517 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.155073658 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.157781387 seconds)
  done (took 202.749589587 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.224299386 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.231353458 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.22371204 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.162198336 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.206995833 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.225791541 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.161771606 seconds)
  done (took 17.517577174 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.164926184 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.158320587 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.18029571 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.1815041 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.15845553 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.294875983 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.170828624 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.163174504 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.183720959 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.159503619 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.493327616 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.181728661 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.163276976 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.157537567 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.171091358 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.186794105 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.160160855 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.159970072 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.25632544 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.235290201 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.163787762 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.135586882 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.188303836 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.170244244 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.159850557 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.160769432 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.158257895 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.166302827 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.159950983 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.158618099 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.159057248 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.17299681 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.159624574 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.157360837 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.159957716 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.15926279 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.159830205 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.160015408 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.160326166 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.158858072 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.159499988 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.160520664 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.159998026 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.159885706 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.160059382 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.182414184 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.160741816 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.159880738 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.160539193 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.159378985 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.188432882 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.16105132 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.160238207 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.164847489 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.201100759 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.168089308 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.161572056 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.160382343 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.161250278 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.162026248 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.160815316 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.237860502 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.183332669 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.158586052 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.183422792 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.198050058 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.160636778 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.161511011 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.160882578 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.18633569 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.161458331 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.184321284 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.161545182 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.259160843 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.161624549 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.301892527 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.185552153 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.165181529 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.165346667 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.161410537 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.169086524 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.161343603 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.1645777 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.168408775 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.166848342 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.162523253 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.161930766 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.163544128 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.169662488 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.162156228 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.20838128 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.161616862 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.162879887 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.258475074 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.163009895 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.260304575 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.190703635 seconds)
  done (took 233.361003893 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.168828702 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.164985732 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.176104292 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.164020589 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.163521204 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.168374069 seconds)
  done (took 15.092980199 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.166249306 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.166800317 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.163339443 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.162107141 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.163097193 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.163198581 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.162929628 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.164687422 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.167219125 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.162498183 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.163449902 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.164165277 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.164793782 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.163102262 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.163434671 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.162611435 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.163406483 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.163167466 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.16302481 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.163155006 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.368355353 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.163393353 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.162944137 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.168339699 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.168374165 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.163390894 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.17233743 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.163341795 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.163875474 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.169656741 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.168626259 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.16381899 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.167082536 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.170714044 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.168383746 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.168734034 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.168265349 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.165450308 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.163347499 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.166745099 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.165214339 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.164854354 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.1645537 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.165016827 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.166986236 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.17199102 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.171873367 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.173431138 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.165413254 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.165085679 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.166641601 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.165312186 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.165339375 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.165754581 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.169301706 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.172188193 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.169632069 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.164731605 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.16687314 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.169774846 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.169066666 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.166577722 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.167453052 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.171308907 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.172713051 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.167569141 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.170091597 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.170705897 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.165533322 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.166562264 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.167495784 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.166551462 seconds)
  done (took 159.272643303 seconds)
done (took 630.073419418 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.22663524 seconds)
  done (took 9.31654484 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.360736112 seconds)
  done (took 9.550855671 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.682280354 seconds)
  done (took 12.774965762 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.190525504 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.189316633 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.182034785 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.166452992 seconds)
  done (took 30.830066072 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.445556755 seconds)
  done (took 9.536690947 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.176767502 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.163198082 seconds)
  done (took 16.494452166 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.404581606 seconds)
  done (took 9.495432341 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.18936562 seconds)
  done (took 9.307753665 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.183158505 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.186144933 seconds)
  done (took 16.480024069 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.168971377 seconds)
  done (took 9.260185959 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.968302298 seconds)
  done (took 10.150915048 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.176797363 seconds)
  done (took 9.286354508 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.22719614 seconds)
  done (took 9.317997352 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.198923674 seconds)
  done (took 10.290618481 seconds)
done (took 174.183950394 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.176109642 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.166493946 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.166211155 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.165667546 seconds)
  done (took 30.765038111 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.202840002 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.20396993 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.21228896 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.203248155 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.193586581 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.19399494 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.203589435 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.208332228 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.193266179 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.200798056 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.204350335 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.200394939 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.202405944 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.213076638 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.213154486 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.20196085 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.20305854 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.203704777 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.193860516 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.212287003 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.201305333 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.203480223 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.169308913 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.170148159 seconds)
  done (took 54.887801934 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.360299383 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.234340463 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.322871877 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.214347018 seconds)
  done (took 11.224450277 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.169148497 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.232937883 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.221295157 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.216619654 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.255064629 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.272086076 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.222941839 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.379736424 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.284928608 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.295848848 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.177377573 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.19228857 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.195309486 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.217249992 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.272991416 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.170808919 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.170970258 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.317786897 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.232084671 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.380425013 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.17095848 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.225446554 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.256844039 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.223100014 seconds)
  done (took 55.847825975 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.171429213 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.178698233 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.178894327 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.171719566 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.172068255 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.172981474 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.179228655 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.174857774 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.19515734 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.174431229 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.170993107 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.173053424 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.178317106 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.173001943 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.172592821 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.184947536 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.186732442 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.172632093 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.176092573 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.178532945 seconds)
  done (took 45.6319291 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.169179108 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.017963777 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.518463188 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.422950263 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.171482235 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.170517071 seconds)
  done (took 33.566399893 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.183799449 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.188817413 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.178580087 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.194542857 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.219823684 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.179384052 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.23188612 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.315344399 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.180980032 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.229814173 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.191256222 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.179235209 seconds)
  done (took 28.570187126 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.171561174 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.176099734 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.17654511 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.188227648 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.183310468 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.179737134 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.178316942 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.171468767 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.188902018 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.221881823 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.181043452 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.184177481 seconds)
  done (took 48.29701369 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.392950192 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.399089594 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.389798379 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.681120777 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.49732932 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.162012911 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.463221036 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.386140364 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.95462922 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.991572445 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.476750891 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.159560835 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.128035548 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.099539533 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.091831181 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419065253 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175638431 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.032603317 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44028893 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.227546365 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176802189 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.174791885 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177796608 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468486408 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.505892996 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.175835035 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.389593665 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.19011445 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.180683351 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.433134187 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.580850924 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.223727031 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.36416006 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.4381465 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.5252667 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.239379365 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.282999319 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.259124168 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.218895988 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.196644981 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.184889786 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.18505352 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.650678145 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.187508035 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.447115585 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177395867 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.173043873 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.260929179 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102008095 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.51681327 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.297006265 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.175200318 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.210619558 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.607686988 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.296282605 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.418454006 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.180092877 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.259482995 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233496536 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.452804786 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.298513968 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.285929865 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.389419427 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102706248 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.605424302 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.307587501 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.178599104 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.181319849 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.876808695 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.419019015 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.258569215 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.521159442 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.940939718 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.178487468 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.179712527 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.219242304 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.266185221 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.178085212 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.471145842 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.161790097 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.104093348 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.277207049 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.574216795 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181766169 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.177423987 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18480205 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.024077944 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.103750491 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.274998498 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.455527171 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.508533766 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.178752204 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.179321794 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.20027215 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181749971 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125888482 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.65217246 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.244188934 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.104845071 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.743676638 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.583194558 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.145301838 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.582700025 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.221138607 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.447457406 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.332118615 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.583599281 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.385569208 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423769631 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.72900349 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183613514 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.794234087 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.259858443 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255291524 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.179030731 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.737409246 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.267314957 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49373265 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.30136553 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.178382317 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.105676756 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.190688239 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.381583202 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.589441736 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.23415229 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.179656084 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.185692404 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.17941335 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182683502 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.292763233 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196376723 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.476427226 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.256637531 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.181783244 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.117584435 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.185893465 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.467381591 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.692599975 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236890748 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.441861317 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.451277046 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.88049022 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.777983283 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.127688818 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.459066819 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.258623423 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256141407 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.751277249 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.311102877 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.278592098 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.16883994 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.326895734 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.192690213 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.183512113 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.431382826 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.598071348 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.608217044 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.225853935 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.181020177 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.130246533 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.273616625 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.422024964 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.296136554 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.210245016 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.187256647 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.251123885 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.410512676 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.18257898 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.108401287 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.421265647 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.423441979 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.487173925 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.599614067 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.295677956 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.257820079 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.192365574 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.394855815 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.26439329 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.849793182 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.731664578 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396722893 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.665953757 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.148387507 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.823434051 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.469858509 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.573749557 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.199870063 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.638417856 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.276978292 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.786745896 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.2180086 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.710329674 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.112537999 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190664163 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.513101112 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.142058411 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.504729569 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.251234872 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.234663146 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.187627926 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.187731367 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194096951 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.145445429 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.297517367 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254902435 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259040763 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.113732624 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.756528825 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.22708158 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.189341678 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.187711672 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.617378912 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.091431266 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.142428945 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.187993644 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263736566 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.930638186 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.73671548 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.19219961 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.191137116 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.796832237 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.193825924 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.101545506 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.194158916 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.094776515 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220616483 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.474998418 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.89579664 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.483105994 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.269637536 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264555755 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.186013732 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195886758 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.891372565 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.197987044 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.889587272 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.476135161 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.471467181 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.641035472 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.256033545 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.39769119 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.20390282 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.190483369 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.747403417 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.217161254 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190873008 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.393969265 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.706494279 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.555173313 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.838713209 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.274854867 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.189331092 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.467214887 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196942629 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.593996043 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.884277022 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.20111597 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.190604609 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.455885585 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.87551719 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.191948559 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.165753126 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197913753 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.403037816 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.394210417 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.455675999 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.489649757 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.647061926 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.116332754 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.195740496 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.21557537 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.433660346 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.191094226 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.226091356 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.637517852 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.312126134 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.622804602 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.479504144 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.623344599 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.832522654 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.461726644 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.263034135 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.203497869 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.852579336 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.328227669 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.127569147 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310744716 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.118853711 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.919874896 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.485313962 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.210383186 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.468967312 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.179056267 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.536184226 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.494991536 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.485256826 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.245613388 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.221445256 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.193145986 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25198375 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.191616398 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.299195313 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.308368919 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.199240135 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.650972054 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.231938763 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220423397 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195707683 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.750580606 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219655353 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195700604 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.874014141 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.218165262 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.313236803 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264896421 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.997604572 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.630567977 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.271341453 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.068836783 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.841348915 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.469847626 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.256345909 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.634168346 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.232451416 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.597489978 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.193632343 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.407122241 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.199968039 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.677043776 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237818451 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.459027584 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151365865 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.40748945 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396177777 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.220372721 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.201073347 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.120482705 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.301155514 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.079871129 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.179366047 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.19777295 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.877402546 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.635402815 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.313007172 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.668823115 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.022009924 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.193556014 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.627708432 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.604900082 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.731928692 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227011731 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197399437 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.577674543 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.335288086 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.532910928 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.476372915 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204251791 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.222704342 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.409409696 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321429309 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.11398984 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.675612918 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.779760768 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.897401711 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.207016806 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.399465218 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.554996333 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.407147831 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.228461428 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.269571626 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.60140321 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.472925352 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.269907589 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.122782647 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.182603857 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.593021733 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.597084764 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.293888731 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.436797468 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.507695855 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.688386025 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.624761788 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.567189061 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.653234417 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.650555171 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.609455552 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405499385 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.556637466 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.521357303 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.080588227 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.610031811 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.41048086 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289105141 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.472110502 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.070983685 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.908726986 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.442235218 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.204599501 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.127273715 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.406001066 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.209575744 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.540326733 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.72116206 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.446435373 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.486239309 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.676278262 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.737568373 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.298798496 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.221042713 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.163859746 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.222781566 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.219807031 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.19991923 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.678076242 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.492995061 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.212127237 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.139183993 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.872384315 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.126994626 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.412725763 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.30044518 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.232890587 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.755418614 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.479665095 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.30816528 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.497067769 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.361755325 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.220270838 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127377224 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.987629861 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.148540182 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.312071497 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.632389257 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216833338 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.203091981 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.40344303 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.128850557 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245529838 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.198946508 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39494962 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.782128222 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.480731096 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333209014 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.43891452 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503272899 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.147800237 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.234350655 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.474165973 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.123812178 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.766324526 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.899088309 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.242786633 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.273628557 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.201884412 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204827711 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.472541028 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.566563316 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.307138271 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.725413356 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.233303104 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.226465297 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.564702594 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.300240778 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.171743179 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.207905198 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.669299668 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.433341352 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.20308279 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.16267209 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.415532108 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276720143 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.398753054 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.279298432 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.717109611 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.20779825 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.134982986 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.309208036 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.151007571 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.204620536 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.965617232 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.267318734 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.202285599 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.483784814 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.83110962 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.407463974 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.598648612 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.079713735 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.304137382 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.242865787 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.207145694 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.214204148 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.595420406 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.514079155 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.204425165 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.478989423 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.260491368 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.202761848 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.866017651 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.173200403 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.203953373 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.937725431 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.104153272 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.93533369 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.598857732 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.209905182 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228422756 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207634645 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.131379733 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.204103852 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.376998628 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.191163614 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.212610492 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.578698865 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.549155807 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.302264525 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.211156633 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.206551547 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.212632807 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.419285012 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.720117992 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.222377123 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.905877788 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.409864202 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.214774537 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.685671254 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.660056983 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.379618288 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.245792911 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.304477938 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442991269 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.745789973 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.317497948 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.189119517 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.433091422 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.208132717 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.478675093 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.483234781 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.207924056 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.419293088 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.628557883 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.49197063 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.564266099 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.531877778 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.277482709 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.314335835 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.130111375 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.216878874 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.209802803 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.478330075 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269410033 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.206606053 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216620163 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.76125457 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.937762252 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.665029946 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359121688 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.566834762 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.038494477 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.96454477 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.211371764 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.134432116 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.207860336 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.232860047 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.197907919 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.134497367 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.019379121 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.932509076 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.421381383 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.518109957 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.135477362 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.412588812 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.808844046 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.135028321 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.177270881 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.208760077 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.47586999 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13646102 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210959819 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.163079963 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.509883955 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.867383547 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.476414582 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.210137527 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.154421374 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.215326386 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.211077211 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.208025982 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.29355929 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.211123284 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32657516 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.479316909 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.611544659 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.32073529 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.850568851 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.002821843 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149836487 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254516528 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.825516955 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.779321771 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.518717066 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.345136384 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.999477214 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.15712898 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.213245193 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227163346 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.449160928 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.214940819 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.214529582 seconds)
  done (took 2274.62625871 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.27132456 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.236800979 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.260993412 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.31317401 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.345303934 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.32220454 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.264432906 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.284454398 seconds)
  done (took 60.432917015 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.211324185 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.197020078 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.220124908 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.212994654 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.211512342 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.269567764 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.403832317 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.239755002 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.212178173 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.196448136 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.197864724 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.214795263 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.207349456 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.214262644 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.225820904 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.521579705 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.251044569 seconds)
  done (took 82.373945584 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.270744549 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.0239006 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.209321797 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.890101904 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.254697764 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.553722372 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.214571543 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.214898814 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.320351588 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.512589522 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.252764271 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.227230014 seconds)
  done (took 94.109776576 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.215764543 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.214502295 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.214369817 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.213964789 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.215106057 seconds)
  done (took 13.209932414 seconds)
done (took 2835.70012287 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.46150394 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.309707388 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.28530653 seconds)
  done (took 6.732295124 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.355862094 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.406555589 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.518904546 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.524985175 seconds)
  done (took 11.947803881 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.498257323 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.582083865 seconds)
  done (took 7.215834065 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.584109245 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.224668951 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.604359919 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.217993159 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.219411688 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.21898125 seconds)
  done (took 23.796731077 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.215379964 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.216366009 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.216373447 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.215743423 seconds)
  done (took 11.001619577 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.213897002 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.992219743 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.216372354 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.226523731 seconds)
  done (took 22.787238266 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.358758195 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.190914941 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.986161889 seconds)
  done (took 13.673061722 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.83917864 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.6662029 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.831662935 seconds)
  done (took 10.474443763 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.044355354 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.032582592 seconds)
  done (took 8.215634171 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.358260378 seconds)
  done (took 4.49633486 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.055782515 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.529475468 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.705614646 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.205104716 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.843742371 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.621522204 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.70798451 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.509672954 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.607275358 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.642727399 seconds)
  done (took 29.566813017 seconds)
done (took 166.921286558 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.831502632 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.248643307 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.437778963 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.620526527 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.461308363 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.428906622 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.51697366 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.617228461 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.316779184 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.331134706 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.617791934 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.45700244 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.470981081 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.245586337 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.472969419 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.246743438 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.455601055 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.682430921 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.281256831 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.523015504 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.524921827 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.244380842 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.446106855 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.265419784 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.456530015 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.379636024 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.850441095 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.248677573 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.427272786 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.865219585 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.380708999 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.673421158 seconds)
  done (took 181.167717976 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.11720173 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.219708051 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.222180976 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.221702049 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.601030237 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.221774208 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.222638542 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.221764543 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.454621023 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.412615164 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.223302252 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.722073063 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.223796552 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.222440097 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.222453471 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.22089619 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.607136021 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.222574324 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.223251092 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.222175961 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.223909191 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.467560023 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.222873581 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.486341838 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.556762098 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.222654765 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.223951351 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.22318949 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.222870336 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.226650863 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.22276238 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.223646159 seconds)
  done (took 219.692700843 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.223207949 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.224507632 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.224979498 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.224270361 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.224597933 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.231066475 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.224323117 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.223968586 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.025284722 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.016272601 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.224983039 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.224641402 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.234176821 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.224753694 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.223348477 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.225088591 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.226071478 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.223877582 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.22527613 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.229488522 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.226849026 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.955963449 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.225527437 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.996122753 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.226249507 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.225599951 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.23088868 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.224470169 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.224505418 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.224885048 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.229094634 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.225191873 seconds)
  done (took 232.465903633 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.465435542 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.226202197 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.228841731 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.237279612 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.228347748 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.22699971 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.233414581 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.478614431 seconds)
  done (took 22.471947989 seconds)
done (took 657.954013308 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.595893083 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.957751842 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.36288155 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.253157439 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.486715709 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.298557235 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.244569249 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.311915766 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.899193445 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.319161397 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.636961594 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.255015135 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.945798153 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.276275093 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.362452473 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.305908149 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.611211585 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.899535525 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.384931113 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.909377547 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.456481676 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.180446346 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.332608704 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.924514719 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.656447566 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.208967155 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.270318656 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.622419987 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.251273816 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.492845169 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.910121312 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.508922139 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.269751248 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.252014762 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.299060186 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.277668796 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.447927657 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.267412183 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.357670763 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.965876095 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.917097095 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.777501429 seconds)
  done (took 115.113154823 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.235346846 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.233673273 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.234819391 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.233677418 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.243433811 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.23334874 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.233349651 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.233367358 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.233962035 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.233983387 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.233874848 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.242851221 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.233793408 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.242189701 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.234105373 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.236000973 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.234347096 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.242815657 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.234293862 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.234615477 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.236195823 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.234352405 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.231455747 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.23381172 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.237268754 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.235444899 seconds)
  done (took 60.288223823 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.229909308 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.411105354 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.513631779 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.264850929 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.231301176 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.234280168 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.263695076 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.23942938 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.234672355 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.232751821 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.346044369 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.236273272 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.243931184 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.506866191 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.263776977 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.232461749 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.230665196 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.231869756 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.420724119 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.249763337 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.262918824 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.239546848 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.262360462 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.247550079 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.236618137 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.232567825 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.235760434 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.696238383 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.244634388 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.345092976 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.302786588 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.267985102 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.621658701 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.519103509 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.306133794 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.239567895 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.232175312 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.391235424 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.245655064 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.233032663 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.262042745 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.241575374 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.513421598 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.759865247 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.248880208 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.232190318 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.694938451 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.403033576 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.282303704 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.249963516 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.519716679 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.265313208 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.232683127 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.238315065 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.271469323 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.248304326 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.22077278 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.497405934 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.254535611 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.262087579 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.24232251 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.235029254 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.427653239 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.243664649 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.415734251 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.244410789 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.241860166 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.234917534 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.516656173 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.267349192 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.756507776 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.237287355 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.233525978 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.347570552 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.420225668 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.721924986 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.251197438 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.42839578 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.640101445 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.27312013 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.245484388 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.682510583 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.276899411 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.245921653 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.234314904 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.234429751 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.235416285 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.282216562 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.261774288 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.673083192 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.755533986 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.53346206 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.276411274 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.249232543 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.23663847 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.51502003 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.247571877 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.236220565 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.508817444 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.783144605 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.256913175 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.24260623 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.734296108 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.253353745 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.266340179 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.247974192 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.527893654 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.273732376 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.288136802 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.23582294 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.242294976 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.239105746 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.266557964 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.248130097 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.235952677 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.726676676 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.410007248 seconds)
  done (took 276.023059971 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.239142112 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.237414369 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.234765005 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.236636613 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.23558177 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.23763483 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.235604297 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.234848402 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.236539095 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.235926823 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.235609281 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.235426049 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.23864665 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.240888149 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.277443389 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.238293039 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.725610341 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.236159323 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.235603986 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.238212333 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.809805142 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.243871187 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.235631005 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.239350502 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.237595081 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.236347739 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.238246951 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.275296906 seconds)
  done (took 177.948278812 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.240693044 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.293681685 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.255292627 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.285691008 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.256744722 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.239196488 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.262553044 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.255206672 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.245347076 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.238946559 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.239470899 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.270758638 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.247993909 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.337190918 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.269741948 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.273750731 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.340144831 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.244891725 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.23920016 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.239742302 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.286974612 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.256072903 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.270341184 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.303372366 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.25737048 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.295408148 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.257507105 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.240324021 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.239792162 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.355376939 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.259573242 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.275093519 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.277133246 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.261721623 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.359562268 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.367988742 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.343643814 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.272110972 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.243891927 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.241685422 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.24396449 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.241090744 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.296810636 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.254124583 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.244012258 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.357381749 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.26083203 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.242122343 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.263996266 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.241223261 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.255604154 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.259529761 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.278397314 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.372172516 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.290602698 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.271823166 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.266336423 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.263836748 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.243955864 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.331509062 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.248668885 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.357427585 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.265407497 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.242115247 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.243491108 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.246534632 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.299097684 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.286152723 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.342309318 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.250565563 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.340876725 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.296400848 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.261693532 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.244471213 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.242789359 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.302428862 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.358660215 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.298057491 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.308606471 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.295773009 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.251455847 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.242720528 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.243079429 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.271140572 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.253694337 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.358722446 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.358991041 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.248963351 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.246114585 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.243533912 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.243610177 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.2683492 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.318376771 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.289745439 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.350480433 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.281319291 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.283645849 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.258453924 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.257198519 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.24929407 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.278298023 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.258993755 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.256141467 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.578946798 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.285199769 seconds)
  done (took 241.491438574 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.599279071 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.2889078 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.31332355 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.536526527 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.609459803 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.127486349 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.289369011 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.293085129 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.304480857 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.418462792 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.355689068 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.33878456 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.283992538 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.266736372 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.287746231 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.305584699 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.321607383 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.589688538 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.392692382 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.811411665 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.28657253 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.56857453 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.58927184 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.632221532 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.331688537 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.670159765 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.912531062 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.385706609 seconds)
  done (took 73.267853189 seconds)
done (took 946.280925656 seconds)
SAVING RESULT...
DONE!
