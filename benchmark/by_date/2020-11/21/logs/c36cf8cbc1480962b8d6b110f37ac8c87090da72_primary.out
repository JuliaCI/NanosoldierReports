cset: moving following pidspec: 27368
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.948849473 seconds)
loading group "shootout"... done (took 1.129102474 seconds)
loading group "string"... done (took 0.668965612 seconds)
loading group "linalg"... done (took 8.523241943 seconds)
loading group "parallel"... done (took 0.16648689 seconds)
loading group "find"... done (took 3.002453757 seconds)
loading group "tuple"... done (took 2.195528709 seconds)
loading group "union"... done (took 15.218732958 seconds)
loading group "dates"... done (took 1.481231112 seconds)
loading group "micro"... done (took 0.221921 seconds)
loading group "simd"... done (took 4.827605987 seconds)
loading group "io"... done (took 1.079526574 seconds)
loading group "random"... done (took 9.521217383 seconds)
loading group "problem"... done (took 1.572029344 seconds)
loading group "array"... done (took 25.242625971 seconds)
loading group "misc"... done (took 1.843733371 seconds)
loading group "scalar"... done (took 44.014666214 seconds)
loading group "sort"... done (took 3.30215594 seconds)
loading group "sparse"... done (took 13.055847664 seconds)
loading group "collection"... done (took 19.050005052 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.531540399 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124336858 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128772485 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.121801236 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.182719833 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121890542 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132009318 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085759613 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.851809393 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138979302 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116341577 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.43754639 seconds)
done (took 5.443491454 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166580129 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093112955 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083226815 seconds)
  done (took 1.422662033 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071980573 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061101028 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068092069 seconds)
  done (took 1.449912614 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065911705 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135733066 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066706655 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067223687 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.070431645 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067183952 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066291357 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066898188 seconds)
  done (took 1.793039751 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073019953 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068048428 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065938136 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068133186 seconds)
  done (took 1.525880493 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065754728 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123238695 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065430107 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064917465 seconds)
  done (took 1.568199141 seconds)
done (took 9.258076291 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.14034244 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.858261951 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.763382522 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123906363 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250118849 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450289934 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.125047398 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183749546 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090070602 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075290742 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122141447 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078154464 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.450069392 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.400455772 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071775469 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.167930378 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.656792409 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087315886 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132959368 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.472670286 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073852657 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088031889 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08461799 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071959741 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.361638226 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156882003 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.660456485 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096814845 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069059449 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095055781 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071072444 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07838869 seconds)
  done (took 10.892702793 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093547305 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090777032 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069048274 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124303687 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094445744 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070931712 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076618934 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06832536 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089415903 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124856269 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090583621 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099051431 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066677261 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070253158 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.079789812 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196523269 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080729309 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081749532 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067993246 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.08190353 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106183761 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078696933 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079119354 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07836609 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130110584 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169399212 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097388267 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098914892 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066166759 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079234903 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118305849 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125395334 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067387354 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066004111 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120310412 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095692053 seconds)
  done (took 4.693225668 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.894238694 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096220573 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083788261 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074957185 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106712903 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113708564 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121416804 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122373142 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099999809 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06943915 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152653345 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.64309266 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.144938083 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.097576401 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070739505 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119901883 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.085935981 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361482593 seconds)
    (18/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065385409 seconds)
    (19/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.065841134 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070270916 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068347768 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.07129077 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070116377 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112242699 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066347338 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176237882 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.585513791 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071579671 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069317156 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099782581 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065714762 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141376973 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093181481 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070571907 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.557737176 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066448723 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064868022 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.090340509 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.205366771 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06749922 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068725746 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080594332 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068191421 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109639354 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07994225 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.494946012 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070474417 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.56950202 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226156399 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073411611 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072826037 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102038166 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065179327 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069047925 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.003420137 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.126692188 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069074485 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276228319 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070937228 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069805927 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069777818 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101326467 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067631333 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069062726 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073382691 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097039629 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.879034817 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089855604 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09673496 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066862194 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399815637 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076793526 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071473934 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072006763 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086551185 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.113958577 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067046942 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067559358 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110351526 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.089182964 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089749655 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070605084 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067789766 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067042716 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.32895175 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.165601251 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066814846 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072081621 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.483908923 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064435147 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066472477 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069581997 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091363038 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069210402 seconds)
    (95/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065643921 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065712826 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066046269 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101577135 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068507872 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.449805086 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067399539 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.456371212 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069321007 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.105223257 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119605506 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068422131 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.095522667 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068411083 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065079567 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075465998 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067133978 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066549111 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071642063 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067177657 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06770654 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070991661 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069899442 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068717565 seconds)
  done (took 22.946839944 seconds)
done (took 40.68100481 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.313131797 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080934205 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079511302 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078855686 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079196519 seconds)
  done (took 1.927598353 seconds)
done (took 3.313921308 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132664334 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075986822 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064696998 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100911035 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068663627 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101223668 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.107960401 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.103588982 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068728209 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.06875622 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068643222 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102220852 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106323133 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070279416 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100329627 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106446771 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070644666 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069412392 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070631109 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070629853 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070236695 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06637496 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070463055 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070655013 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101130804 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070578976 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066401763 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101009447 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068774501 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098853803 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068616085 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069088369 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068446202 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099449983 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069509859 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.098916899 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064990996 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069417571 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069140491 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068772955 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.06906833 seconds)
  done (took 4.669286536 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071366243 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081890659 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083713543 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062304461 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071936151 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082561282 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063087409 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083491209 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090318173 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084097176 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083695418 seconds)
  done (took 2.195918221 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070431036 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083345232 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087462869 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063236096 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074398054 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084076672 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063558203 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083815366 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085392962 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083736915 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083394813 seconds)
  done (took 2.183559119 seconds)
done (took 10.361943326 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.0975853 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066133838 seconds)
  done (took 1.467231575 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.223200653 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.620607786 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.283472407 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093929189 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072910582 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086239633 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202888274 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067483864 seconds)
  done (took 8.140127292 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.102777782 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068028243 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069104721 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068403329 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.06986513 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068997058 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.06846832 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068026045 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068157301 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067874402 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068448735 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069744494 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068102562 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06778345 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068498655 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069642405 seconds)
  done (took 2.546037627 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103460375 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069940762 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099055889 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062233792 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072287472 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062523374 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071245721 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072672264 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070463374 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070917017 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072213899 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071297006 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071403123 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.07194701 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072972813 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073127677 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072737313 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070496461 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072759928 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073660736 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072482746 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072617789 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073865125 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071321578 seconds)
  done (took 3.197777937 seconds)
done (took 16.670377823 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175070455 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074867384 seconds)
  done (took 1.55955986 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068470287 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068956956 seconds)
  done (took 1.461348841 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073457571 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061374998 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079133132 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070886983 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061642411 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061245839 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077217294 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061641778 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061521544 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061859785 seconds)
  done (took 1.994718308 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063172494 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068871015 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067088201 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064828732 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067202113 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062384019 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065492763 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06300615 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069536343 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062354467 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066611692 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083550111 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066422545 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083733305 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065346702 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066387574 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068014179 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065494891 seconds)
  done (took 2.548071828 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061583292 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062370429 seconds)
  done (took 1.458712453 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064609144 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062143397 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064418516 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064455928 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061865936 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061487606 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062529001 seconds)
  done (took 1.769728882 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421040349 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121585252 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.339141501 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069146063 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07626518 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254800178 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064036279 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069380682 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069296123 seconds)
  done (took 2.856577234 seconds)
done (took 14.987220569 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082236321 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181790638 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087786129 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.40427761 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091302068 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06739359 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113088068 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177853015 seconds)
done (took 2.556000157 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214502108 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.242857481 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.392056142 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124514628 seconds)
  done (took 3.095817384 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336041464 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078401372 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077281358 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068368798 seconds)
  done (took 1.904157583 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065164153 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071382404 seconds)
  done (took 1.477304599 seconds)
done (took 8.03885521 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07233519 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062026721 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.091799584 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.06818976 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065042986 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.06401988 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063618389 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.07459583 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063226542 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.06357038 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064396871 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.06378797 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.065576614 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065888717 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066222761 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066068513 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066121941 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065835328 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065613672 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065486501 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.065011541 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065798546 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065034544 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064997987 seconds)
  done (took 2.972776876 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079002836 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065827548 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066929104 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066666639 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067699622 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066985883 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06708328 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065455019 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067256206 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065664659 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067038199 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067441117 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06545811 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06760371 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065493675 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067614269 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066648679 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066277152 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065503379 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067278542 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066820291 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065854052 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067033364 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067255136 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067670124 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067651432 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065451481 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066004222 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067057257 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067549529 seconds)
  done (took 3.368059555 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.065851743 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.05991184 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060700879 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069917492 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060080768 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061877387 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061968335 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060391184 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061184313 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063560034 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062681427 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061619952 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062380691 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061847182 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061937201 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062159712 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066852326 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080803362 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061897238 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062454065 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066297899 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062308032 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061930067 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06162427 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062479623 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062391046 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061888449 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062005664 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061771128 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062051329 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061658757 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065870526 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067150127 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061571758 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.07197642 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065321357 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.06121418 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06646836 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062741871 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061402022 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060736599 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060098336 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060015028 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060387589 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070254422 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060239912 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061190642 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060522153 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060597793 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060153726 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060547156 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062224132 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068584088 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062044653 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059953545 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061094525 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059882719 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060523927 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06110865 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061404338 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061617409 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065216389 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063321858 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062291266 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081348341 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06311238 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071568782 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.06186518 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062243719 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065563322 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061609126 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07937926 seconds)
  done (took 5.92174145 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07244193 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072517872 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079111981 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070197922 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064969496 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061340544 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065260466 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061829846 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070699064 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066163795 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061485714 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065365792 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070580099 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065651621 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062475728 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070271356 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065248745 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064342987 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061308153 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066785324 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064915054 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066461994 seconds)
  done (took 2.836490028 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.134971991 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066590988 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105192532 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.07474084 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.0686523 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075203 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066334835 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06800443 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068008302 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068549342 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068651529 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067974929 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070345064 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068327702 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068198457 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068469889 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067748186 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067694903 seconds)
  done (took 2.700283862 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076979149 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067696085 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090914684 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067561456 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067724012 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067882068 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071116365 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07216086 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067168292 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067473862 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.071628032 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067829978 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067208403 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067261117 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067539153 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067255216 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067019709 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067831978 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071783954 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071424467 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071309906 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071651813 seconds)
  done (took 2.906300482 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077251657 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064840097 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080087507 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06642804 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061105903 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062456393 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068017479 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066493645 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067638443 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066313756 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067205951 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062492562 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068388846 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066642126 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068663397 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067055283 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066307811 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067531765 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066663188 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062257295 seconds)
  done (took 2.704965733 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086583581 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063408011 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063301136 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082137103 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063138622 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063327584 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082751561 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064769762 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064842878 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086605884 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064993641 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065344456 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084178039 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.08424747 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064903926 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084296252 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084346506 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084287389 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065114057 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065000492 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084704015 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063145126 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083122834 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063344396 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.0632564 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063893491 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063895591 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082059704 seconds)
  done (took 3.396292658 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064537295 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063511755 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065323816 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064816548 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065709821 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065609821 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065828241 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06595629 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065329966 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066043567 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065489563 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065950924 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067477506 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064476145 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063999225 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063885867 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064118965 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064886848 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064512888 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06451148 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063966196 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064213424 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064322059 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065413147 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064609234 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063849622 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064239598 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064175322 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063603444 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065427878 seconds)
  done (took 3.31229971 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073009106 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071498707 seconds)
  done (took 1.512477398 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062282678 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077717933 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060286195 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072870877 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070375292 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065966987 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071296204 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070544767 seconds)
  done (took 1.913433696 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067035671 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090466393 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062334085 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063777156 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067371089 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134159433 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076135084 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075621189 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077667304 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066372761 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064244156 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076092018 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06311238 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076601445 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064887502 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072449601 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070963046 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080917614 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076941191 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061843684 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076599661 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064787588 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062376503 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064462482 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06390685 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070063934 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079462676 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075800376 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072444029 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061251366 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082314126 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062374008 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064023233 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072608207 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.06699487 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062511942 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100232475 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063143162 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068243501 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062081663 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074919177 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083893291 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077339544 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.080644819 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.0643662 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064529624 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062357395 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.067938105 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065609085 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07187746 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062871365 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070440044 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061818689 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064030777 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073125298 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063053842 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068524459 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071406831 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074253273 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071807454 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069933481 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.0765556 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070111203 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068982189 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062627831 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080501956 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063430521 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074337082 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075922123 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062269296 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074515665 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.06157463 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061778863 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062733856 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095724881 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062999854 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062358015 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060929196 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06143942 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063617155 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072340587 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06842615 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070438962 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06618672 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07900613 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072251937 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063207494 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069595827 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081081633 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066122123 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062706421 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079368999 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065701253 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061967674 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080469888 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072025874 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064052825 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063155144 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064905799 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075666749 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063483613 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060530918 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070552192 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064196016 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064734073 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06717683 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069904359 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061699233 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071124953 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066040232 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062206081 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060745835 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065918835 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063255306 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060820664 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071654197 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062408211 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077175375 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068251126 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075281057 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075267741 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071492057 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076534811 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060432639 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059258779 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078095664 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069661205 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.196703936 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.079806896 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.061569944 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072579565 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.064508097 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.062680569 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070482598 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060134655 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063062763 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061257313 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066477614 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062479675 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063136928 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066602073 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070210858 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073751196 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062584396 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070300582 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062039859 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077102184 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071055823 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066409009 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065577546 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062198772 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073291175 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067875885 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070349241 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061176574 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061894277 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061182928 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072294106 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071031937 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063199526 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068198769 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06558346 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062568396 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061848581 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062886112 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065173445 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064658941 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062487044 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0696295 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.0718404 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076894115 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070417286 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071943115 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061680498 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061792455 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064084313 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060431779 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066134096 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070447844 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076551078 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073221118 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082649428 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061751506 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071055604 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063367243 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07752808 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074015402 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06258333 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065833518 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060371071 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062618546 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071783573 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076207039 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076256221 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077478181 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067525371 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067065537 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062438173 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07816514 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063186867 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07134659 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072441355 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06723778 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062932584 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063402893 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070901119 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065945283 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061414964 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076343008 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067560423 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060722773 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075916473 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06308015 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072953067 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061154463 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064994265 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066652229 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063205366 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071371545 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076650898 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06028311 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062249629 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076808251 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063580038 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063185863 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069873936 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07634205 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066230916 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069565822 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071708916 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07103728 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06594703 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070573092 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062108103 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070330507 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064221579 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072762317 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061052966 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078775349 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059793395 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07593968 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061275905 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072033768 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.06184613 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070776495 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06215417 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077635881 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063028858 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061988728 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072831651 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059956456 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070034106 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060339241 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06573756 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067030753 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070016853 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063074387 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070368024 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.203024133 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071951902 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06702844 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071168591 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071134869 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066165301 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061511029 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070100377 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073579259 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070077499 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06298211 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063463085 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062440724 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071320696 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063306223 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06288658 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070317312 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066327206 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067360455 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063414467 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06370664 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063199169 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070224134 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071262202 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079097352 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070844999 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069500532 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071862945 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062479383 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078836471 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062719787 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.07338688 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.06146828 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069180702 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072263825 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06343344 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082787788 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064563322 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070556338 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075230297 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071693759 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066572387 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.083336394 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066695466 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071131308 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070854101 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067383897 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06885066 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064911346 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071203448 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072493496 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073724656 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063891846 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070123442 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071978528 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06460893 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071255514 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.064320529 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071687997 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065127755 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062290074 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067271238 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074795682 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067605549 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068163919 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063506457 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061659504 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063612908 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070152857 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06778524 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071783068 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078758436 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061899033 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064120297 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062308993 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066590163 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081588782 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073293358 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071741345 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066192876 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060814072 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063575647 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063547651 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061895774 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064864749 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060321507 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.06126362 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07286232 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065129809 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067380261 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063504449 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064084031 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073100751 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068360701 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063580897 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069508186 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062613371 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068022772 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061872066 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064458108 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06738878 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062157064 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066525362 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073407879 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079686632 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06959649 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071796776 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.06394686 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070687085 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078918918 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070199797 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064096952 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.071932974 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060203464 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079198319 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.071825952 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071249328 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072663604 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063613947 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079057166 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066701179 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072114355 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078301539 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063371019 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.069060358 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061318687 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078202568 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066647821 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061558325 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070013389 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070522636 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067935305 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.074103303 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.2071009 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070810185 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06708964 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065529581 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064041748 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06396077 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071019174 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077331829 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.06254112 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066404764 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06975588 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070575955 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067410843 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075383358 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071690143 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064812565 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064870974 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066813793 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063935093 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075095153 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06372138 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067767594 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067720627 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062905585 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070678274 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079909239 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072609359 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072797527 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062067169 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061874289 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081193463 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06656256 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066893459 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071660426 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072539073 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07532629 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07202223 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080368318 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064174144 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069156143 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07544008 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064394679 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062641482 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066894358 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064645378 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072095087 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072618566 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071078409 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064833713 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069135299 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07686604 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06430813 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067068815 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068195006 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063622021 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073150376 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071558416 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07450414 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064785636 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062637162 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066238887 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072356081 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070597449 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072315699 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063986936 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070118983 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076745429 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070618943 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066267627 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062513015 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066634841 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072031016 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06782426 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062885521 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.0676358 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066498231 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070402308 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072844725 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066474154 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060878879 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078859148 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06947765 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070592524 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063253498 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063206077 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061978388 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061005123 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072520914 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061266492 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064231112 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066074331 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063779053 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078741044 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070121805 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077316518 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062268875 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065957674 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061512108 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073275781 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067279095 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063498978 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073829085 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062243751 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078422175 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074779856 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068627099 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062424402 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.088200808 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070926847 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078072874 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072712111 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072058407 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066415916 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072216773 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064820034 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073740869 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062025272 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061750672 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072720265 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070583517 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073457879 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061059891 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070761534 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063339717 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068509535 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068396317 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062099509 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062504116 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062141564 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069791639 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066067598 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071299293 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.207994098 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081084297 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064745252 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075166453 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072328172 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074208012 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076916855 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075616661 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071183731 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063876335 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071260863 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071353552 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064452362 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068311867 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066499378 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085268069 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065152883 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065797532 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077930192 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070199042 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063785008 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070218811 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067738515 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073529061 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064040496 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073265614 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067633679 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06448708 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067460633 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067716149 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062118085 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062918842 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062740665 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072651557 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067640959 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06311876 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082201503 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064876653 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072183734 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074482343 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069721714 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064968918 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062293076 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064203204 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076203906 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078564504 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066258552 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071719035 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064715137 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071967941 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061682678 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071394053 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071113592 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071492483 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062664654 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063409883 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078036581 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078882771 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067802722 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072430328 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072401714 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064876119 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084772393 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071497057 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064304651 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074093151 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06538991 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062341901 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062089374 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064604257 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074755827 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062216578 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065171448 seconds)
  done (took 42.901441852 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099618399 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062523925 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060858822 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061284015 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072241386 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062910375 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061210262 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062538118 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061904534 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063694977 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062012478 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063466357 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072473365 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074500234 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071325668 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065287509 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061355317 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062369258 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061414075 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062716749 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071955621 seconds)
  done (took 2.864736193 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065362227 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065322986 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065830695 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065441696 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064806681 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061482552 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065634421 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060946972 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065999458 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061563235 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065645567 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061479861 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062052024 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061647684 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061645481 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062869958 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065953523 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064736546 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061285151 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065544242 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063450066 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065821561 seconds)
  done (took 2.845778992 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06334033 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.0618883 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070248559 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060872404 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061224462 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064811937 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060500535 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065266752 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065165764 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065416274 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070625605 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061715731 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060516312 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067176619 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060677076 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061898203 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103575462 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062275812 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062410441 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061014079 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063916073 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070263141 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061282025 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060591206 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066393462 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066000811 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062027358 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.064745372 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063278328 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067108417 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063625555 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061792286 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071823309 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.072153776 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066579655 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066849587 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064456377 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063413455 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062018938 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062098481 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.07109869 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064198271 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062408714 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063359592 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07008852 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060547829 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060318689 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070407292 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060576444 seconds)
  done (took 4.637838633 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073224433 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112640416 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067718072 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096886585 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076110923 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069130377 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068318059 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097945096 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064228638 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064349129 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076900272 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076660757 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064063647 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065885969 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069799565 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065353437 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066072207 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064524026 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067881818 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065191798 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067802796 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067792117 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073832154 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073621631 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06470385 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063357878 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063255546 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064905282 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073502938 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066681929 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065239335 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065791226 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.0744581 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068357869 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06322815 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063523145 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074319001 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063747445 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063916206 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062372563 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063377083 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065110275 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068333438 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074707542 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064030685 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068691898 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064466908 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063307597 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076544125 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065448019 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069693844 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077684041 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066459291 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066137632 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067132573 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076454173 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.066170402 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064688448 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066025213 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076012133 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064598615 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066400554 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079032593 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065095498 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06745288 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074697305 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068180052 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064513517 seconds)
  done (took 6.327442872 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07035999 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096062689 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07254425 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072756471 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071720213 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071386703 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.07175134 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071925952 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071675697 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072495763 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072596024 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.112891831 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068316896 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076250914 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071977238 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071922532 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071918219 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072083958 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07266376 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073837467 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072206421 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071550265 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071254439 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07185854 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073990514 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068062033 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071314913 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071413539 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072250988 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071075522 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073640673 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071218496 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071201504 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071700284 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074282062 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071285324 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06338012 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072762036 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072601086 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073623727 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069918036 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074120317 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073546972 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069599628 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073617912 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073462711 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073029597 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074034978 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078299157 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072097481 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.075757144 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072159882 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07144214 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07142845 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072336949 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078479625 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072691498 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074300709 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073191437 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071976649 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072277546 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078804369 seconds)
  done (took 6.036723797 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075363264 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067702434 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080511656 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.061291817 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060967485 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070426453 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061501875 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061383648 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068414951 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068172372 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069600509 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070809559 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072665627 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069537702 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070383028 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07238416 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070590852 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070590594 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068039593 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070491748 seconds)
  done (took 2.856139549 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.075789482 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080056956 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066904933 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070383558 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06651777 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070487855 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066049799 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066746834 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067261746 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067032786 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071334186 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071522356 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066976065 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070871562 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071477397 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070548112 seconds)
  done (took 2.582695087 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064815353 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069161831 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068064441 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062431537 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064107751 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061802199 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.063490923 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062403049 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065305557 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077000993 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063379057 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066075506 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064343797 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062932072 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063264412 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066357036 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065233502 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.066400914 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064160301 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068314984 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072201265 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064684769 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066496022 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064262706 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065982861 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072535643 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064931148 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065919706 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062279124 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064813256 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064616748 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068521507 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064626769 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062757193 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063585919 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062040588 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062131575 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065074206 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065004916 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062325767 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062391708 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068651069 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06449925 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064957306 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065764275 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066485014 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065619932 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067889103 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062275095 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06427392 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062483371 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063985293 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062843749 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.06912479 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064781787 seconds)
  done (took 5.05505892 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077964033 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066682739 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060874385 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060731631 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067543903 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068651114 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067624209 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067829932 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068561639 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062438771 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068764038 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067860812 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068806924 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068565873 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068795475 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067988764 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062345954 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068242005 seconds)
  done (took 2.688506344 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068097784 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066955653 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065594358 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063318706 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062917664 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068278583 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061387788 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062517233 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063209114 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063310549 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063213758 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062722571 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062641436 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062708566 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067439264 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063274712 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062803608 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061412703 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063245741 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061455977 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067592994 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061577923 seconds)
  done (took 2.877073558 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088606951 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084157864 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127430316 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079902807 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088536812 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072001781 seconds)
  done (took 2.012274312 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093300693 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104099992 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065808942 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065624568 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074382849 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068789482 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068862393 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069076341 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07473963 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073279227 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069551367 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074523247 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075078803 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072757771 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074447375 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077484108 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069412913 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070796808 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068281428 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078004631 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069346895 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074722891 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069405048 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068971397 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069352662 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072699814 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079065594 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07437736 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069361904 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075486635 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076800345 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06930143 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074416961 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072827161 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066298367 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074402097 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068958694 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076927797 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074644408 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071301476 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066400637 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074237738 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074332116 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070738043 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076924728 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069423616 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071117108 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069411654 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069524541 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079362997 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07489172 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071077759 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075248219 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077405066 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07850689 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080278021 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073353169 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071279202 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075064156 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073475843 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071071025 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075135664 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071618045 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073537775 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078631944 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071401058 seconds)
  done (took 6.330093074 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101067404 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066518146 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069482077 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074698351 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073239381 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071452414 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071461244 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071147604 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071092063 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068857658 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10742407 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071848328 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07326165 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075771994 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07144058 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071524586 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071997154 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073476527 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068792897 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081759166 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071563215 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072352067 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071394885 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070844159 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072981852 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077162775 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069124196 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069260353 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069545126 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069106088 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071103154 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069374741 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071009105 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066022807 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070800145 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06926394 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068909894 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071279827 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069049125 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074634328 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070753409 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076839292 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068924269 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069349456 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073047024 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068818156 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069707095 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067117486 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071449663 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068468175 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075380988 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076000997 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074304218 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07084478 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069392942 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069444404 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069444381 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06930623 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072071741 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079623834 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07201087 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068996977 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079190434 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069170823 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069841849 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071363418 seconds)
  done (took 6.279953645 seconds)
done (took 131.185444527 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220108901 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.19196048 seconds)
  done (took 1.872331127 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075311746 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.16594514 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075260965 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074917608 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108911699 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107961489 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076224799 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072664552 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074919898 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072489776 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140066228 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076246314 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072438125 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072591177 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072355936 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074297365 seconds)
  done (took 2.892972843 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107489447 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.184420539 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082751424 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07114422 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115068121 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076809279 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072433537 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075395023 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078237466 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072887294 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.110439598 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084062319 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076471678 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.079749549 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074008205 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076020249 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077536938 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079144547 seconds)
  done (took 3.08038827 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098192193 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086287702 seconds)
  done (took 1.674452289 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155159663 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105887634 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144761522 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.3290057 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.129809475 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126642881 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.12903884 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.12484383 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111076472 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12172491 seconds)
  done (took 2.961473162 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106098627 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105215798 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308029531 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101937768 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082451684 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077397046 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075611582 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079761221 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075278055 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076515701 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121140633 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075882085 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072505933 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124316232 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098849191 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106141815 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071620372 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078101301 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080099749 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071039002 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07591762 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079529039 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.180705042 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078206353 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100073375 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075370308 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076925591 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074378183 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074466678 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078071969 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079066207 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101516745 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080015545 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083360399 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076698191 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.100071588 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07258669 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.100330735 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074637911 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072677565 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075653531 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078335818 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072193831 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078028302 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075326324 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077452136 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.07985878 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070970165 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076762509 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.076854496 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074323253 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077288985 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075891269 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077412781 seconds)
  done (took 6.285688368 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107985649 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108322008 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070959673 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113239045 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105567087 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070211277 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104794096 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100096142 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108221597 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070395347 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069819785 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069349669 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075967387 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079096333 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115481538 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.107805568 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071777708 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069913945 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107005714 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107573205 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068874834 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101516667 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099957316 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10623204 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06855627 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070329296 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06877702 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069413937 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074051956 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075244015 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069524801 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075443675 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080722079 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075159943 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068419341 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068316587 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068296564 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076059101 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076047142 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076244304 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074462379 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068184197 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068008303 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069226955 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070005835 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068181446 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074699137 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075500325 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074704821 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068634455 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069265197 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068402863 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068964164 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07560931 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074603393 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076878642 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076223695 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068745169 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068740087 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07035275 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07714183 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078286195 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077172675 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070287667 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076897197 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068964421 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077650341 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081050605 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068958136 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069228717 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068980362 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06930066 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069098053 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074372458 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075067471 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069601349 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068781584 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068686612 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076852787 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074967614 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06891036 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074330001 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068504404 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069776926 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071041424 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070794937 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074628535 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075787048 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069620233 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068972807 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068851398 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068961312 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068122863 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074335247 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075588038 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075840088 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074502052 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069027796 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074397967 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074868205 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06900472 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074290128 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068456644 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069308318 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068953638 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074529678 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073951272 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076023548 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068114141 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067781532 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073637286 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.211173448 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070143259 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.075149819 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077769971 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.075806116 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.068948327 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07822275 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069040492 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077430517 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069046379 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077302392 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069245376 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07511474 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069273213 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068643933 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069942441 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075195679 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070083344 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069345426 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070121613 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069273744 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075353555 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078591887 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069941675 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075177855 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075260656 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070169166 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075034179 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069520157 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076481764 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069293165 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070137086 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068903969 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077921673 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069238685 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068928806 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069332179 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077599125 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068864862 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077380966 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074481295 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069000292 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078696628 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07704323 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074525982 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07739713 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069984673 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069328087 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069047184 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071216379 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074011025 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075271356 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069832758 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069590186 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076748498 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.080429004 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070016795 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.076297849 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074548662 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075001788 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06935617 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069107606 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078391412 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077067147 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.298443079 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074758305 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077056308 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071040004 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075877124 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075023025 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069137264 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080757918 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068929573 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079220352 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075559728 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074258162 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076490171 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079181182 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080341776 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.079965555 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079228934 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06889743 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06949996 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.076235457 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070767497 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071323668 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.076974279 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071677753 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071789101 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082916597 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06939846 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077146284 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068572365 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07574973 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068756343 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069644083 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07974905 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069122072 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069858065 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074652689 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069148955 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075108771 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077154063 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074547052 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068983808 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071831272 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078360274 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.078614844 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070911522 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070375269 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071501635 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.076802649 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075964948 seconds)
  done (took 18.660874304 seconds)
done (took 38.928396266 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170227984 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115916125 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.207395137 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198087257 seconds)
  done (took 2.28010742 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101511113 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.065556071 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081170349 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091141145 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06528587 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076444491 seconds)
  done (took 2.010091484 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201576733 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174153534 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.239523198 seconds)
  done (took 2.134639539 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367241658 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150178061 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215446801 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.502005728 seconds)
  done (took 2.862740606 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110790964 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101676449 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077925932 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111714839 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085506019 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063066625 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133561207 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070345434 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.10041686 seconds)
  done (took 2.443765915 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129491484 seconds)
done (took 13.414762822 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.106430025 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.237876321 seconds)
    (3/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.078977812 seconds)
    (4/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.118222659 seconds)
    (5/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.181013915 seconds)
    (6/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.079085546 seconds)
    (7/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080736554 seconds)
    (8/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.272928044 seconds)
    (9/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.0814496 seconds)
    (10/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.160836896 seconds)
    (11/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.170262782 seconds)
    (12/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.128156353 seconds)
    (13/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.21617001 seconds)
    (14/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.077503084 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.123743068 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078597557 seconds)
    (17/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.191801512 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.088261083 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07789855 seconds)
    (20/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.076728883 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078985224 seconds)
    (22/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.1515422 seconds)
    (23/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.182314221 seconds)
    (24/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.198292995 seconds)
    (25/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.245709177 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.248025554 seconds)
    (27/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.25107075 seconds)
    (28/341) benchmarking ("sort", BigInt, false)...
    done (took 0.272223741 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.07516878 seconds)
    (30/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.079624957 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.078002323 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.098323346 seconds)
    (33/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.073115292 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.184950559 seconds)
    (35/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.080824701 seconds)
    (36/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076801976 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.094116753 seconds)
    (38/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.239248438 seconds)
    (39/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.072974025 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.076742346 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.075956121 seconds)
    (42/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.234001496 seconds)
    (43/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.198247964 seconds)
    (44/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077764703 seconds)
    (45/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.163609666 seconds)
    (46/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.182869899 seconds)
    (47/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.141948635 seconds)
    (48/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.0710557 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.0754569 seconds)
    (50/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.221294799 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086132258 seconds)
    (52/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.179442646 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.088687557 seconds)
    (54/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.19951328 seconds)
    (55/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.068689452 seconds)
    (56/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076829323 seconds)
    (57/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.091902496 seconds)
    (58/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073275483 seconds)
    (59/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.141351809 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075528808 seconds)
    (61/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.168781962 seconds)
    (62/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.177415199 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.161330999 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090479092 seconds)
    (65/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.214393917 seconds)
    (66/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.160449213 seconds)
    (67/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.19573584 seconds)
    (68/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.086611671 seconds)
    (69/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.138511338 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067714395 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064988333 seconds)
    (72/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065611704 seconds)
    (73/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.075767855 seconds)
    (74/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.185452283 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064779835 seconds)
    (76/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065410896 seconds)
    (77/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.233480758 seconds)
    (78/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.076531698 seconds)
    (79/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.18823697 seconds)
    (80/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.070388239 seconds)
    (81/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.078235959 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.122615993 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076802881 seconds)
    (84/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075707948 seconds)
    (85/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.088234216 seconds)
    (86/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.204558861 seconds)
    (87/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.067965232 seconds)
    (88/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089659402 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.07685741 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093155839 seconds)
    (91/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.199006557 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.138391972 seconds)
    (93/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077886233 seconds)
    (94/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.166659135 seconds)
    (95/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074280569 seconds)
    (96/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069888258 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088481345 seconds)
    (98/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068944488 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123972378 seconds)
    (100/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.06627539 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089995195 seconds)
    (102/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.164032468 seconds)
    (103/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077331912 seconds)
    (104/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.073435207 seconds)
    (105/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067246537 seconds)
    (106/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074596693 seconds)
    (107/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.077100396 seconds)
    (108/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085328539 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073922372 seconds)
    (110/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.162473128 seconds)
    (111/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.142176694 seconds)
    (112/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.200127035 seconds)
    (113/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.174448114 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117733953 seconds)
    (115/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.065791484 seconds)
    (116/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.144430763 seconds)
    (117/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066151278 seconds)
    (118/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074019269 seconds)
    (119/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.0943367 seconds)
    (120/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067007984 seconds)
    (121/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073094336 seconds)
    (122/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.163361733 seconds)
    (123/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067568661 seconds)
    (124/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066494279 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07607705 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069722442 seconds)
    (127/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.146723342 seconds)
    (128/341) benchmarking ("sort", Float32, false)...
    done (took 0.13798353 seconds)
    (129/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193155962 seconds)
    (130/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07453621 seconds)
    (131/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080879417 seconds)
    (132/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069974147 seconds)
    (133/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.089946311 seconds)
    (134/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.180578072 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.088381904 seconds)
    (136/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066771019 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075747217 seconds)
    (138/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069472969 seconds)
    (139/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066896746 seconds)
    (140/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070645185 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.189153715 seconds)
    (142/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.081343669 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085881105 seconds)
    (144/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073452208 seconds)
    (145/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066457232 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073715779 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075837153 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065783813 seconds)
    (149/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073103982 seconds)
    (150/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066451416 seconds)
    (151/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066392749 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076824002 seconds)
    (153/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.227474694 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 0.142571733 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.06617077 seconds)
    (156/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.21711178 seconds)
    (157/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.084385647 seconds)
    (158/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064596829 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.172488126 seconds)
    (160/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066505934 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124271267 seconds)
    (162/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064851914 seconds)
    (163/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066475955 seconds)
    (164/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066517457 seconds)
    (165/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.151480792 seconds)
    (166/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.090433943 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073242756 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075886999 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095086098 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 0.067499306 seconds)
    (171/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06622646 seconds)
    (172/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069994473 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066227242 seconds)
    (174/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080020328 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.088736663 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.155838098 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066160313 seconds)
    (178/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068983729 seconds)
    (179/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.16735264 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065080859 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083570728 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.136306034 seconds)
    (183/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.153280163 seconds)
    (184/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065604476 seconds)
    (185/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.314754223 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078098243 seconds)
    (187/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06848694 seconds)
    (188/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.147241952 seconds)
    (189/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067554023 seconds)
    (190/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.067067724 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065400253 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066989962 seconds)
    (193/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067805207 seconds)
    (194/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068466585 seconds)
    (195/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067009634 seconds)
    (196/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067310618 seconds)
    (197/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.082282228 seconds)
    (198/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067309489 seconds)
    (199/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067290591 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067418695 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148066317 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.180856089 seconds)
    (203/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071293885 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.12599692 seconds)
    (205/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067374071 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.15290023 seconds)
    (207/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075668446 seconds)
    (208/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074074585 seconds)
    (209/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079910658 seconds)
    (210/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073938278 seconds)
    (211/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.175033305 seconds)
    (212/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.068277518 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066949771 seconds)
    (214/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.081897659 seconds)
    (215/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.074474256 seconds)
    (216/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065622863 seconds)
    (217/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068031751 seconds)
    (218/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.066290586 seconds)
    (219/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.094710756 seconds)
    (220/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066181442 seconds)
    (221/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.06875232 seconds)
    (222/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069891093 seconds)
    (223/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.075374344 seconds)
    (224/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.0658493 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133961686 seconds)
    (226/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066943802 seconds)
    (227/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.201642825 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076288491 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.075626793 seconds)
    (230/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068228198 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149751208 seconds)
    (232/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066887717 seconds)
    (233/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069223914 seconds)
    (234/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.143097514 seconds)
    (235/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.065908995 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068116196 seconds)
    (237/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078127315 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087837313 seconds)
    (239/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077584102 seconds)
    (240/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067396023 seconds)
    (241/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068028317 seconds)
    (242/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.151972624 seconds)
    (243/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084019016 seconds)
    (244/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068824426 seconds)
    (245/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065418087 seconds)
    (246/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067012676 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089858114 seconds)
    (248/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066518559 seconds)
    (249/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068495133 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07813969 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076698322 seconds)
    (252/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066094145 seconds)
    (253/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066132578 seconds)
    (254/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069801963 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091988213 seconds)
    (256/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067493192 seconds)
    (257/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073436835 seconds)
    (258/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066417565 seconds)
    (259/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06661673 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.114957935 seconds)
    (261/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.083925269 seconds)
    (262/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066672013 seconds)
    (263/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073227843 seconds)
    (264/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069893181 seconds)
    (265/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066713748 seconds)
    (266/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066746465 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141450323 seconds)
    (268/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066725635 seconds)
    (269/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064701495 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.0853544 seconds)
    (271/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.165013581 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067599552 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067579486 seconds)
    (274/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066035626 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067931286 seconds)
    (276/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145911449 seconds)
    (277/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.066232322 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066223507 seconds)
    (279/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077345224 seconds)
    (280/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.081915293 seconds)
    (281/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066219582 seconds)
    (282/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06558172 seconds)
    (283/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07284154 seconds)
    (284/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080856906 seconds)
    (285/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068061484 seconds)
    (286/341) benchmarking ("sort", Int8, false)...
    done (took 0.148263222 seconds)
    (287/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065577758 seconds)
    (288/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.198717685 seconds)
    (289/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066196891 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06456272 seconds)
    (291/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066293896 seconds)
    (292/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067850148 seconds)
    (293/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.169681759 seconds)
    (294/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067197571 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148735714 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065982402 seconds)
    (297/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06554927 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.149974008 seconds)
    (299/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066373339 seconds)
    (300/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066398973 seconds)
    (301/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066139761 seconds)
    (302/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065412263 seconds)
    (303/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065495106 seconds)
    (304/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187774388 seconds)
    (305/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065956365 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065595394 seconds)
    (307/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065598133 seconds)
    (308/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065731957 seconds)
    (309/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064115557 seconds)
    (310/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065006524 seconds)
    (311/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.240900495 seconds)
    (312/341) benchmarking ("sort", Float64, false)...
    done (took 0.146200597 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.135574876 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094484827 seconds)
    (315/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154526847 seconds)
    (316/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.068185797 seconds)
    (317/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095306129 seconds)
    (318/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069616153 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06696119 seconds)
    (320/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075843938 seconds)
    (321/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073890056 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078408897 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178640951 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123825772 seconds)
    (325/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068304237 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066865612 seconds)
    (327/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070051662 seconds)
    (328/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087090212 seconds)
    (329/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067015842 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143171061 seconds)
    (331/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067342727 seconds)
    (332/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067034968 seconds)
    (333/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074277102 seconds)
    (334/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070035335 seconds)
    (335/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071158294 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092957323 seconds)
    (337/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069834535 seconds)
    (338/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.069515019 seconds)
    (339/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067125386 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152763104 seconds)
    (341/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.06961576 seconds)
  done (took 36.982316259 seconds)
done (took 38.527779725 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09105373 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079658649 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078199508 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074664296 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078315242 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077274903 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078169621 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075766873 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077550486 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07686394 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077024002 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065580029 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07399374 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.08069236 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074576577 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081792062 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078587314 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081714626 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067279817 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.08041743 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092719134 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078026248 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074935233 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080209807 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066385763 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075599451 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089665058 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086862271 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072771149 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075888836 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073504089 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.08383975 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073805301 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072205399 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.076445269 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071749403 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075085207 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073097337 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.08884977 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071982182 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067022266 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078383709 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073593159 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.0738766 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.074782549 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077941225 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071491079 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079197076 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065920615 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076907244 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.08894203 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071003889 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072394671 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.07434903 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071271242 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075338625 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073007318 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077029012 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071149971 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077346382 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077313582 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07439411 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.065949329 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074714842 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073711587 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073454515 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.06522319 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070719221 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065898751 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065774795 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065128653 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074848525 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07276881 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.070995732 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065202287 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065728712 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065066057 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077736779 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072443522 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.079445612 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066023046 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071346457 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070766057 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066292089 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070830475 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077092625 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065216328 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066207011 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064978421 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080977953 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073690618 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065587929 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077345397 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070729502 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070788005 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065735005 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064979938 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07065212 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074086258 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06603588 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064637765 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070819967 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070904588 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075448921 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066512437 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07114429 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070628602 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065388836 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074210768 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073518112 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074423312 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079009368 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074528248 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078055387 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066459724 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065128767 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075793831 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066241051 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071285448 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073594094 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071678396 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07433362 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.06667591 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065061973 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071011719 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072459043 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065959766 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066605529 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.06630491 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075044487 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073007269 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064940692 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065672914 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074435801 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074677427 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064712289 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06482955 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074407705 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065914368 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071890208 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071136103 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073754693 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065239969 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064967207 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.20895608 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066452863 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065812836 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071659282 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071153706 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.066439252 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075443135 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.0724596 seconds)
done (took 12.851552084 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067079483 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105498991 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073743451 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082287196 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078299178 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.067910039 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070437404 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082951423 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070568772 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08597257 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094026195 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088195017 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093223403 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066047115 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.066797795 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.067844573 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065577591 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074150354 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081263872 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091507561 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095314444 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06649621 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.075420947 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083031769 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.076894448 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083451831 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067525348 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067861782 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.06923019 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.122760777 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091714131 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066746618 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068010201 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.079988253 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080122915 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073548414 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067720846 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070793003 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070147273 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066608641 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068667794 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080854391 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070504767 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070258748 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068090172 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068230558 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067025384 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070808847 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080131206 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070172957 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074670379 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078263868 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068148275 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066619177 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065159098 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070180622 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066707169 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067463279 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066975234 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.06700646 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067000121 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069113992 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067176148 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067209762 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070085854 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069419462 seconds)
  done (took 6.538879519 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083094333 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092645099 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081519463 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081950698 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06695063 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067309623 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067105717 seconds)
  done (took 2.19406764 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067272028 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075196408 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079111615 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079491155 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088978226 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076472933 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067180994 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098540423 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066543777 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076242242 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08290614 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080504041 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070673622 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078843506 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067815076 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078842322 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067373319 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074333978 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074495012 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079875925 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071233611 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096861822 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080195345 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068077779 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080564171 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074848944 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069649902 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067585567 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067651165 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066844665 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067074334 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089484626 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073783789 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078879241 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068047405 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066270593 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.0731223 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068351177 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071242256 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07563484 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070734689 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.066643542 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067671822 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067743517 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068763454 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071558991 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068068926 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067028588 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066495019 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074385408 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066418159 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073304023 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069005323 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071535488 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071201354 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07146424 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074346128 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069017067 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.076665505 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07534661 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068676869 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082192502 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07988909 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071992289 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07841181 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074964841 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073315344 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070658021 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066734384 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065952773 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067036943 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078471505 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.0709365 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069679546 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068172945 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071572408 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070481771 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.083700554 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081908286 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079664623 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069257418 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.06733435 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071083977 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082128811 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071649023 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067066991 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067987041 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066367568 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072246323 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067395595 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071378672 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067392489 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073322263 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069700634 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069120095 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075157589 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067087795 seconds)
  done (took 8.720844755 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069624434 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069308935 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068091889 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.067901558 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068490975 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068608853 seconds)
  done (took 2.097056585 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090670071 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067802967 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079426191 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067757104 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090246083 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074473066 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074400471 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069304913 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083415108 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078098415 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074379253 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077089323 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074494186 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069255728 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073378256 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06867348 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073756643 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070645077 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077440195 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069612795 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083247353 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069483662 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07006067 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079265456 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070661077 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.072144816 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068760085 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077786145 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077801628 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068742061 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069076568 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070627301 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075792434 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068735063 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073899651 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075736239 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067035376 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072841905 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069668033 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069866241 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075876909 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06969658 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069937571 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072911971 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069338274 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075741302 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072913744 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071168818 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073889002 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072944457 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072890504 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067980835 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070522382 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072648507 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076059752 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069559274 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073077734 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074041348 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068894459 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076137005 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067421839 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070608964 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069217288 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070332767 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072069259 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072482363 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076028174 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069917053 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069722501 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067593298 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073019021 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067223058 seconds)
  done (took 6.895000578 seconds)
done (took 28.085837775 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544043316 seconds)
  done (took 2.174043731 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.583960372 seconds)
  done (took 2.25317693 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.398710514 seconds)
  done (took 10.06721302 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.305767228 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.328990766 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.734477229 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133165514 seconds)
  done (took 3.217153227 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.763600999 seconds)
  done (took 2.443153674 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229223797 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.218965075 seconds)
  done (took 2.139139643 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.336304124 seconds)
  done (took 2.010003422 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.147444017 seconds)
  done (took 2.815238023 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228751952 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.16017021 seconds)
  done (took 2.064031029 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.54093896 seconds)
  done (took 2.211512537 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.267155962 seconds)
  done (took 5.944669203 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.232742591 seconds)
  done (took 1.943219521 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230296468 seconds)
  done (took 1.906091568 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.046725639 seconds)
  done (took 3.714674287 seconds)
done (took 46.579917162 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084336456 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08659367 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086217718 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081965362 seconds)
  done (took 1.983223317 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074825641 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070604114 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074325436 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074496773 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071965408 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.07319145 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.073444687 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070777786 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072021086 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.070848442 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069142705 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070816931 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073779249 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.070943273 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073066312 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074379389 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.070606017 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.070500604 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073200745 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071047465 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07341356 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071015861 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.068673998 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070473512 seconds)
  done (took 3.396327021 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07914421 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072577482 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076169326 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072214082 seconds)
  done (took 1.97865558 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077395766 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077523149 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086431663 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091234624 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077617753 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077284277 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084414993 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084858286 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066028827 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087612466 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068640019 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067484425 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067705245 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08618036 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083438731 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063345511 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065153883 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077651946 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.076826549 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079803335 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069806363 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065967108 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077685404 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077684029 seconds)
  done (took 3.517140626 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080257368 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06656988 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078677275 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091403106 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092700002 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066371762 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079144847 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093180667 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127293668 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066892973 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071968035 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06605985 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104053356 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066140421 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082356666 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108889358 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.114301958 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072891528 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101262047 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067927443 seconds)
  done (took 3.389008248 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076155285 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071724736 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072868227 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06827937 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.079306458 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.075408282 seconds)
  done (took 2.135071201 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069020125 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068989083 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069859308 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072828801 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069186573 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067774573 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067465287 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066244905 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066796688 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06724881 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068476156 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068899248 seconds)
  done (took 2.503914093 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155150684 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069572809 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.07018142 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066875099 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071931512 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067333381 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081537847 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069230356 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085028381 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067064646 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067418881 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069478303 seconds)
  done (took 2.624647678 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100749025 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101277682 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146193246 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116675272 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116788023 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096360845 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119602414 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095102051 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159850586 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137141465 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117302491 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093819434 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086586666 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.06947073 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100191569 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101592019 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136049928 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072937324 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113527881 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.163801933 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114389651 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.11191491 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122029507 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116800582 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081344041 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121284113 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.093941807 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102163727 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123567092 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11056666 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119025824 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09822303 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072753572 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074459837 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151081062 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10158599 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106567859 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093162428 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100434591 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088539886 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107403957 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070012127 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087429446 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106442662 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085027287 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117579851 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089163963 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103571488 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084168115 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130783413 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106399731 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098894241 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085644919 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103586717 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129342253 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09453474 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11093851 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107421947 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083697862 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118649487 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101503568 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.249951035 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094812921 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081387779 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.160450948 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089676389 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112160298 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113451556 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083627543 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090560365 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102738972 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131833963 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107205676 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107743881 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114599413 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095866236 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112317752 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092999635 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129048207 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096345454 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.07557412 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108169915 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131775811 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088172484 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104776875 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133777047 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095323876 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080135825 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.095474564 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.122325682 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083312927 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.099368148 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073024087 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.100720626 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109321766 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097833767 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111945809 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106825273 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080487499 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125296388 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108737388 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072853432 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117396382 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100162238 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155476217 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097299996 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.076896317 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100491518 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093925159 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.148360403 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084969437 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080517751 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099071899 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141357732 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094626946 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169380095 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096429338 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128917076 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097122994 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087684142 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07574105 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090098675 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102037494 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107706345 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101099843 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088933623 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.076516351 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086842755 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095680498 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.247894956 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082278912 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114294949 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102187495 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076096489 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08990171 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079517103 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125046524 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.07820751 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108796235 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125015852 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079878623 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105995431 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097797231 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108682009 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097407003 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106491581 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139963175 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11604494 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079836054 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084533562 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108487024 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142451935 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113846017 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085646087 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077217052 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099809352 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110542441 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.096953983 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106571126 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099883599 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109048625 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097137492 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140326783 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117798981 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091075492 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095325807 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09734158 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123090513 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077021052 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155615591 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097032514 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121988926 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08517498 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140431733 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.1141725 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089873028 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084943379 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095420896 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104470998 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1059327 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143294864 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096135056 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072757605 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093415828 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132335968 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076779829 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100658935 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090390926 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093508591 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118722809 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084164181 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081854 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068224308 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100853653 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135049654 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069512327 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.271393073 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11535795 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103553847 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.104998943 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070070965 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099696016 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138462351 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105525966 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140173206 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116441542 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100566706 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118025094 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.099209785 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105892569 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080004555 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125931667 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.134817688 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096702936 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090782427 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135086169 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117604218 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134375417 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097001749 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114504315 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10505825 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101313475 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103742319 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101059509 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146321366 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122065861 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124451848 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086503498 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106625846 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108517131 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136321417 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082585755 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116932965 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.075749228 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111501038 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077806115 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108264623 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079466113 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111641139 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079810021 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100056969 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069820707 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075380603 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141966481 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112736131 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089922444 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086860171 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136827801 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131176087 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081061333 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101943986 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104105957 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101281929 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100847582 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10797961 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085266208 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094303643 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.268736853 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080620955 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082724676 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.099281648 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09480706 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107305728 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084552092 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075499587 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13712087 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107146408 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098129914 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081199252 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098674938 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12402619 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09135106 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090080665 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108640026 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106312678 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143285711 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.093526934 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101310608 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121236548 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083625941 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.095484859 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072022109 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.087925464 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078489125 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112783304 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079751071 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111808424 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071939309 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.134122036 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090267835 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.096223389 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106246074 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103184848 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131049341 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093897882 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130587769 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093760914 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105252822 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109733251 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095129576 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082240747 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107308725 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09937883 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112755361 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.099154896 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108576452 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112270011 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094378082 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142668763 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091395642 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120598323 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106231907 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107888899 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104873412 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116771759 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138829891 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116042038 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116036165 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078369024 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086605628 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109257643 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103819529 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149939476 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105291229 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07454117 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089073335 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094088552 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.25431999 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10623626 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083691802 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143048883 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087711071 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087642714 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113184237 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090784795 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097344831 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077405875 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095732485 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101720919 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094505315 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094908663 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108323892 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117405803 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113500429 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.132365299 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099257768 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092976158 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118652604 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110574152 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111550256 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086358969 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086924797 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123704332 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10216935 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128186641 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100501391 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094353153 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101851054 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090451946 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100443281 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0969238 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110353741 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080472388 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076358298 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069195218 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072629228 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.117709569 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111284902 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100294696 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098656246 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072845547 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103937281 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100101381 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072747797 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088130642 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094256021 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099235985 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.083949475 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092375482 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114799214 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091560114 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104244885 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09975498 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129153935 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100630716 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089503037 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144052105 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128867198 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088610646 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093867614 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072261511 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079644255 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102930323 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145149843 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117235369 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077173347 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.240131874 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.078772629 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088702668 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.072275374 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.08869906 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.089970707 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104172821 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093910323 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113251252 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103947447 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076794202 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103470704 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097493309 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093028485 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.096351696 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101988105 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105736669 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.123884941 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101422161 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097855042 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076785154 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080789732 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076363957 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080393524 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103341267 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078110539 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076593799 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130308461 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091352609 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104810296 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109074781 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084949303 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076171448 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132822813 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070030532 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136462223 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071826513 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082533431 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081332641 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079906094 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09426932 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105052097 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096786734 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113882602 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105933766 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106669729 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110794913 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155343641 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071648538 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14371327 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076295905 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076166052 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076492354 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114498079 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090999419 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105244443 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141122826 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089938206 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092776816 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077360038 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129029217 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09891014 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103615531 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08351136 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079300929 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12934622 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080086893 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.071833566 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086858432 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111537715 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072912451 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104080516 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.243446899 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081185536 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113557416 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632008949 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090842308 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076753181 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089480685 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142758782 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129162648 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084524309 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109816453 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119605895 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090627036 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083836371 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108243426 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183603075 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074799917 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095529028 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.103950738 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09911411 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092610964 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.092344891 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087580806 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092659849 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085912258 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080380585 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107820896 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08863906 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091845975 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097563576 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083209227 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.080602657 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130863641 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104391706 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083005082 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08918045 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.1027574 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088509707 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093915035 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072152724 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115184303 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094483879 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103985496 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093319809 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108008032 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120589742 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089242726 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11243839 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.091667401 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113166659 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087859741 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081162339 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105248429 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079791325 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078128335 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117678502 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.084505094 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093515554 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106878499 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095426149 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114513749 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118562992 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111101987 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097896499 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079529322 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086511055 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.08800784 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076187885 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078528869 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074698014 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076471014 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.267826963 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089801301 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087561499 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119393058 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086104158 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106890906 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.104231024 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.112407442 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0861072 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104426175 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112716846 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094113842 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106912703 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104049115 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.13225697 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149751463 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101636438 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.123575457 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133731134 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077762041 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076803432 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069654524 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117599849 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082115648 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.08259778 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08482038 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136582967 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084940462 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098014418 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233391885 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083750931 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084578043 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100434201 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073096615 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087004706 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11201471 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088612843 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08393972 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100937537 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084547078 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117777906 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111927138 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090358243 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083272728 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081449587 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093710731 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104718486 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.128766727 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090810195 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076001326 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106568015 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103735999 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123816681 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073436645 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08119969 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129884966 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09282512 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103756958 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080393044 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120590173 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13298411 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090596747 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133638548 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071611237 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08406076 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090056186 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126149901 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075031459 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088694432 seconds)
  done (took 65.201575412 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151313538 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142851388 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082778683 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098427443 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187659598 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197906959 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.119669236 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.096601164 seconds)
  done (took 2.94377607 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.06956551 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083267364 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081979862 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.207557731 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109805765 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067557367 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073467995 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082343919 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068100225 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067249732 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101913801 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067914477 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067789347 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366952043 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.068516458 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.074242534 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067524285 seconds)
  done (took 3.544529314 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.326439656 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.381817585 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.229793813 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.810469167 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.137840023 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485090012 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077327919 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082894287 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.626881764 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372166896 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.130992339 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088494889 seconds)
  done (took 18.578542706 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076117604 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.078875969 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078419056 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075093917 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074644864 seconds)
  done (took 2.228879336 seconds)
done (took 115.723074221 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08398453 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.170397527 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068289472 seconds)
  done (took 2.095263485 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083778243 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082436896 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.080970824 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.078725166 seconds)
  done (took 2.156871501 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.0749234 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077243374 seconds)
  done (took 1.974706259 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.22257787 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.173219775 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09016815 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.083248683 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080857181 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.080950703 seconds)
  done (took 2.081314455 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072031435 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072715447 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072381496 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072905024 seconds)
  done (took 2.112314352 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.067977945 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066661888 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069381576 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071677103 seconds)
  done (took 2.100843091 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.085761377 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083280253 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112285985 seconds)
  done (took 2.108422759 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.083409371 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083694676 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.078909242 seconds)
  done (took 2.076800578 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110198747 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097782937 seconds)
  done (took 2.033629655 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081030579 seconds)
  done (took 1.911242775 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090793118 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098310595 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.145052413 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.107428456 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140391764 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.125894138 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077131846 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.078612028 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073702996 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072909466 seconds)
  done (took 2.834923584 seconds)
done (took 25.876484825 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.0794709 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.36643849 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360079615 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087584345 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672262471 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.37299512 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.983049868 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091109245 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.0994792 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068536879 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085435964 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.651474877 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.971849092 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326025811 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.961065414 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.321380186 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651288445 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069027775 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068244479 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068944705 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.968361617 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068251641 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068507079 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069500592 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.65014339 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374233357 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069257909 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.321277951 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068542572 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071312279 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357318945 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069491889 seconds)
  done (took 16.311432542 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.070686711 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123354932 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072775511 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084479338 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070467429 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070287518 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071333231 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06966561 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110804349 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068721745 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085939381 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068276102 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072589407 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070501961 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088861243 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068734628 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070449445 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072051685 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070069321 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069965882 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087376884 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06830156 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069342533 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069244021 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069136515 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082064235 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069849663 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068831712 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068867386 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071185204 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071979858 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069592171 seconds)
  done (took 4.257273254 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.121810878 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.127016832 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073905657 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109009702 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118292815 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07097751 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150159282 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09278359 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113639268 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069398895 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08580323 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068937091 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104047398 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070358223 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088691603 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069136139 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070178758 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069637372 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069023047 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069703299 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087443364 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068171536 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069120686 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069867808 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069442493 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083553855 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07001809 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06886007 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068817471 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071581371 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072784642 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070294733 seconds)
  done (took 4.523099497 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070236311 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072433709 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080049015 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081086958 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06787637 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069591245 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070599043 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06740029 seconds)
  done (took 2.423718276 seconds)
done (took 29.356536253 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079418926 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.068778857 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.071942999 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087621662 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074575594 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071426285 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065546228 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075390995 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072138875 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071844237 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073633364 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067878035 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071148408 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065394169 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07247438 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066822527 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072881007 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.07084414 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071050138 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072425871 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.068682784 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071904286 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07495309 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070972305 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071297558 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070985257 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075606282 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072638375 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067191279 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069745318 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.068605715 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081275357 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073037671 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.073530374 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066524794 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06686138 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070711619 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068890265 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.073338728 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075637284 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069124615 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075769963 seconds)
  done (took 4.826106221 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089236128 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094282532 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086857051 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082290039 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107786748 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082256551 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092111432 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080154662 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078584457 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090194191 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074348955 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079582135 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081541917 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075851562 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.0789957 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075494283 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080321142 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074101233 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079637899 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078771808 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090831933 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072856899 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079592872 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080555823 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07454506 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080586615 seconds)
  done (took 3.987650192 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073524385 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08918303 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093473166 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142105375 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111314369 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08501799 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083662387 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.099498957 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103000612 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068686389 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072906255 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094450791 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096584606 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075337377 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106259354 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086952183 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081080098 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070890273 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075309495 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103121878 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091285133 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087404707 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102694901 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090155136 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068329547 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078167622 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07560025 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084230456 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076108166 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080312444 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073007463 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071962143 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069140686 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080650756 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075395933 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.066849815 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090968398 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08091208 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084334662 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106632004 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078139833 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.0709613 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098976942 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13287348 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.06811764 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070855297 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072599855 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081283068 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070212624 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097590614 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087046598 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067895508 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086956046 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06975771 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069530448 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084891231 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070446702 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070864438 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080436836 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074595093 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088913701 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073222779 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089286628 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068269463 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079520352 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070510462 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070274201 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067144151 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104449503 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075819635 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120391908 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069428988 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066548869 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080482749 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.0797028 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075541717 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068242094 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087261996 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080038779 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073301671 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079589974 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070774985 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072090975 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103833893 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067360121 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066766757 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066516398 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070766657 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071411364 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069117969 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081645481 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067455381 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071959703 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083560693 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068284282 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068647891 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070664305 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069611239 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067511538 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078724721 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072048963 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072496488 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.083558714 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071613126 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073904542 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084247176 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077786006 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068387408 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070015806 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070718542 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070212636 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072764322 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071890334 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070271339 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075542595 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075899934 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073824001 seconds)
  done (took 11.206498302 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164158559 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154788407 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069689114 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149737198 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07674951 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072785751 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.15085127 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090575026 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071097579 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072194953 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069892656 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098674951 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.095678778 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.108487695 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.076021584 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071350469 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096760581 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.105521599 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.156571825 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.150308094 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094541355 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077692013 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071646372 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070466419 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070459991 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078268857 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.084890604 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07727141 seconds)
  done (took 4.617399877 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076784178 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.083943122 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073146631 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093350739 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086908068 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069612861 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071437542 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070367564 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085689661 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076679905 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069310756 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073422719 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072475016 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070032191 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.069793789 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075921199 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075741776 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068073988 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.072359129 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073584424 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079271332 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094758836 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073229531 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069068948 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071992205 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069183354 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075409388 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078531183 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068198463 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09865046 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066567163 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073935484 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082570729 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071774615 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071682053 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.072376787 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071047189 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070217051 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070876188 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067914259 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067530848 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073760739 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067665459 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075191089 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082960758 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076230243 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070304656 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074020814 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071667916 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066180767 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07201307 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071942351 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071722357 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077208056 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072689811 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072001233 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070071765 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098313504 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074946807 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068374948 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067873694 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067967635 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.07048996 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077504477 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085363165 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071131645 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067512316 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069231927 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074096972 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082674204 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068175815 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074209269 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065949188 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069050912 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071307587 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071222681 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070332182 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067210363 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.0680875 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068950758 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068774948 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.068782123 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068469688 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071545456 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066728722 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067215433 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06971304 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071171831 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076422915 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067978834 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071598141 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070062944 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067780153 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071344936 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074157959 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072137138 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088269987 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07722469 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069171009 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066680466 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083583057 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.07092785 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068658516 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074298524 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073241244 seconds)
  done (took 9.590678998 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.091988019 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070826752 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089040574 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095209827 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.07965759 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074102655 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.08312862 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069849318 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.0853447 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068345907 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07747929 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067512201 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082191598 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077658246 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07188552 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079654342 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071933288 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089373817 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083270647 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067391532 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077967307 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080994367 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081368748 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086850099 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086116416 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087174903 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081174167 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.07077814 seconds)
  done (took 4.126668744 seconds)
done (took 40.189314068 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.919218803 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.094419164 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.915350843 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.118830704 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.09331487 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.044564403 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.036876146 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.915618985 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.030236543 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.941807629 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.217742676 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.303444973 seconds)
done (took 68.542971483 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.926868908 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.054454342 seconds)
    (2/2) benchmarking "String"...
    done (took 2.133010556 seconds)
  done (took 6.035641923 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.515057499 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.915016904 seconds)
    (3/3) benchmarking "different"...
    done (took 1.961971331 seconds)
  done (took 8.234517458 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.006519047 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.944989022 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.167702293 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.914823034 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.91791132 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.305887639 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.729007294 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.385515755 seconds)
  done (took 32.212863722 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.131039819 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.135415418 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.65465544 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.692268547 seconds)
  done (took 16.510302858 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.521528282 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.17761107 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.17843869 seconds)
    (4/4) benchmarking "different"...
    done (took 2.168181126 seconds)
  done (took 10.951647041 seconds)
done (took 85.828163016 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.91421611 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.938391527 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.93180122 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.06703241 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.984002837 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.945231255 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.917116041 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.912799523 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.912948171 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.914781966 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.336104576 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.912106474 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.923932051 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.95250775 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.913744168 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.935761845 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.289332644 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.91285257 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.948041335 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.498697003 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.368661829 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.910246613 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.917861929 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.147890634 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.032298177 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.959636715 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.533532404 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.923910761 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.611775234 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.91937524 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.920769638 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.921416846 seconds)
  done (took 209.072371857 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.918227382 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.807577532 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.83501293 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.939851119 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.484067093 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.108249523 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.065782791 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.510183076 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.919417952 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.927776129 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.103641161 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.916765465 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.127438087 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.904398399 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.915950959 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.017804898 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.051013718 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.127238172 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.915245839 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.107347698 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.939850203 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.071061808 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.029980013 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.082567052 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.955348885 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.959818593 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.954863477 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.926532833 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.117325283 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.05413206 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.93554555 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.939958468 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.11788016 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.79449627 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.941911256 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.951158802 seconds)
  done (took 175.330470999 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.103864403 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.934209387 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.990913879 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.060042601 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.683116722 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.650259668 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.927400322 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.924498286 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.927325582 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.932213162 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.927889235 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.994972346 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.463316123 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.932870479 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.940122934 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.927104281 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.924903662 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.926940375 seconds)
    (18/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.925868095 seconds)
    (19/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.30601735 seconds)
    (20/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.932077152 seconds)
    (21/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.922819651 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.923106146 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.984801666 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.295573845 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.05844075 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.923976595 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.934091738 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.057890865 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.93390604 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.92318503 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.05778616 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.926279464 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.003457165 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.057295154 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.933697146 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.003512415 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.931492896 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.419023273 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.925487709 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.922977754 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.925359005 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.989789062 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.923953128 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.023499372 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.015811342 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.926061539 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.937127753 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.11343325 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.599974667 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.92713405 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.923500815 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.92357292 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.923573456 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.924109408 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.571387938 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.926936213 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.950571085 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.536743174 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.925796347 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.924231916 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.928613992 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.924801692 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.925570741 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.93234623 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.959855938 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.733430324 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.723233444 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.315177685 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.740851115 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.927535284 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.816086142 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.98064282 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.92729331 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.003732893 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.924952288 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.92467686 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.925351593 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.927919536 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.011054213 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.003019071 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.929447279 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.059527205 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.929390181 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.924197249 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.144302502 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.298281185 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.138097384 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.93843095 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.985681934 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.927092185 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.926452814 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.945475323 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.08535735 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.930029675 seconds)
    (95/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.926876059 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.926834126 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.926665015 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.102991437 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.92774222 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.042632867 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.153429253 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.001644694 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.180579689 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.15475747 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.930725807 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.927788122 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.943680929 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.92897137 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.927204356 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.939227956 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.928849325 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.928780542 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.929041249 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.929645398 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.928219807 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.930711228 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.942856712 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.927901295 seconds)
  done (took 427.268089814 seconds)
done (took 815.67507624 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.53161634 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.626697165 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.516304511 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.53535512 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.51395192 seconds)
  done (took 14.583895508 seconds)
done (took 16.445450213 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.958138528 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.945324218 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.934789414 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.990176219 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.95244099 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.940270855 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.97410911 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.974058398 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.959449134 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.940885242 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.977066881 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.946150525 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.959236407 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.963197199 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.006337145 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.968394339 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.944907074 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.938037993 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.987732851 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.945564889 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.946065896 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.942289178 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.942637838 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.981542713 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.013806992 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.954162588 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.943198652 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.980487576 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.952513861 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.978001512 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.999300644 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.963027333 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.977824556 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.006511553 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.993327154 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.012298425 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.954427348 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.00045063 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.949956461 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.016954447 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.988665561 seconds)
  done (took 82.565810362 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.940722034 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.073121132 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.147275698 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.972641587 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.941824023 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.151174069 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.997715438 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.068717889 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.070763999 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.160164289 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.157393247 seconds)
  done (took 24.549376387 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.939929128 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.07472049 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.152973009 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.976241449 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.941882091 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.156681827 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.004239643 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.075366171 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.074702647 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.159896588 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.17493304 seconds)
  done (took 24.604415648 seconds)
done (took 133.582495808 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.310959515 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.967654677 seconds)
  done (took 6.142216899 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.93468357 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.953259507 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.089949787 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.936018227 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.935086074 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.93665177 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.937595931 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.935100326 seconds)
  done (took 17.522840853 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.93490195 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.936488676 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.935513597 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.934778333 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.936536707 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.936611068 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.936192475 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.93658524 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.935933797 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.936584853 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.936699587 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.93629621 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.936867739 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.936002744 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.936025454 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.937484926 seconds)
  done (took 32.845173817 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.936701427 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.937892741 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.935929782 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.936330455 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.936348177 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.93799642 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.93860451 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.937506469 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.937334631 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.937524773 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.938657515 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.936561587 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.936546493 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.938394727 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.937446337 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.937447047 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.937269111 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.938473496 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.938657079 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.939468587 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.937336779 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.938881391 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.94230075 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.938487907 seconds)
  done (took 48.375263204 seconds)
done (took 106.76140906 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.172322302 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.509347546 seconds)
  done (took 8.548030394 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.941161728 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.938108041 seconds)
  done (took 5.8128245 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.937479239 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.938823054 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.938347802 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.938844107 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.938367434 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.939233871 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.939439882 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.939733681 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.93877064 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.939206513 seconds)
  done (took 21.255707223 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.939851212 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.938887399 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.938637449 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.939967177 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.938642345 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.938705911 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.939209985 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.93970667 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.940297014 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.939777514 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.940120049 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.939462701 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.940153037 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.939198124 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.940236526 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.940814065 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.939556858 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.939820703 seconds)
  done (took 36.78045095 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.939730268 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.939867849 seconds)
  done (took 5.747434751 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.940316345 seconds)
    (2/7) benchmarking "second"...
    done (took 1.94032388 seconds)
    (3/7) benchmarking "month"...
    done (took 1.938977008 seconds)
    (4/7) benchmarking "year"...
    done (took 1.941221338 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.941065727 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.9410534 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.940524087 seconds)
  done (took 15.452504136 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.941533781 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.100563018 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.153745214 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.527650242 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.942163549 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.94313482 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.827134372 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.94360968 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.945224796 seconds)
  done (took 21.194335345 seconds)
done (took 116.661352849 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.781002503 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.941600695 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.171915466 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.072003196 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.961756517 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.234341352 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.962892524 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.484267658 seconds)
done (took 43.481433381 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.018979215 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.938785896 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.972008614 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.971107036 seconds)
  done (took 22.752118543 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.941287956 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.257056848 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.967254547 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.843394458 seconds)
  done (took 22.892973051 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.321638531 seconds)
    (2/2) benchmarking "read"...
    done (took 2.297973781 seconds)
  done (took 6.4934278 seconds)
done (took 61.032169687 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.942419464 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.942852511 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.942341884 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.942482801 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.942265803 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.941711013 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.942117873 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.943248565 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.942467207 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.94325937 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.942159199 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.943051535 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.943945492 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.943605301 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.942620044 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.942426494 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.943420303 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.943614721 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.94441039 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.942944668 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.943257622 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.942989051 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.943690766 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.94495668 seconds)
  done (took 48.503462055 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.942823682 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.943849385 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.943143906 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.942440127 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.943326506 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.944084885 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.943242649 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.943209955 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.943238553 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.943940955 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.943042388 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.944599381 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.943773672 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.94515653 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.944179272 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.944092667 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.94540834 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.944945566 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944963821 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.944610075 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.944444909 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.944602581 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.945246757 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.944358318 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.944977577 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.945099058 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.944545436 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.945050696 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.944701302 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.945710459 seconds)
  done (took 60.199622404 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.946156251 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.94595627 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.946076619 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.944929496 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.945274603 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.945701157 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.946900686 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.946485493 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.94676019 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.945318055 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.945428361 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.945411346 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.9456866 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.946987608 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.946267914 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.946321485 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.945832908 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.945773059 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.947404334 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.94580504 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.945839118 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.945424 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.946610375 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.946321789 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.946920439 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.947321657 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.94673205 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.946949565 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.946290165 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.947624534 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.94584647 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.946292552 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.946715127 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.94735956 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.949133187 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.947385007 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.946448527 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.947156658 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.948546836 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.95001309 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.947868781 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.947753839 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.946573196 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.946109707 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.949636774 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.948127971 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.94761629 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.947595173 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.947115789 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.948853458 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.94856487 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.947707558 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.947528138 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.947600757 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.950101524 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.947420483 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.948772455 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.947936163 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.949163318 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.949520164 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.948830168 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.94933136 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.948805767 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.948565278 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.949425563 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.94968908 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.94880262 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.948440446 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.9487454 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.952096314 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.950776966 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.948904492 seconds)
  done (took 142.092243381 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.949431451 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.949351411 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.949631872 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.950690636 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.949863543 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.948585913 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.94975063 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.950169268 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.948403962 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.948479618 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.949137964 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.9485683 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.948838914 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.949219946 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.950039072 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.948240641 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.949226584 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.950669382 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.950720361 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.949957317 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.94981215 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.950212298 seconds)
  done (took 44.767206295 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.949202455 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.950618985 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.950152908 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.950378786 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.951235264 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.950312037 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.949841403 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.949955839 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952112459 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.950107038 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.951862416 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.950877032 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.950320158 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.950463334 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.950965217 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.952186715 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.95180414 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.950942376 seconds)
  done (took 36.993609287 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.950938653 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.951862198 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.952592621 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.951830399 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.951802167 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.952673303 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.953537885 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.952070797 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.951629837 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.951464079 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.953023146 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952232716 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.951660232 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.951606781 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.95106369 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.953231623 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.953321407 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.952499866 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.952137168 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.951689951 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.952140185 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.953827182 seconds)
  done (took 44.828244802 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.952093415 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.952103382 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.95291397 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.953017354 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.952273391 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.952738134 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.951276132 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.952925446 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.953382573 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.953672943 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.952629113 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.953020215 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.952328111 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.95376032 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.953907916 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.952625061 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.952487376 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.952386148 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.954158296 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.953701399 seconds)
  done (took 40.939721421 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.954017867 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.952428995 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.953558778 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.954296174 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.954270283 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.952737443 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.953861117 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.953456585 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.954408224 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.953563202 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.953624124 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.95361764 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.954303113 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.952608389 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.955232268 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.95376338 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.954051448 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.953958331 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.955443206 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.955842059 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.953771297 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.95480286 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.953651882 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.955557774 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.956967111 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.954454176 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.95523828 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.954937147 seconds)
  done (took 56.602183831 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.956969858 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.954513008 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.954765219 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.955132759 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.955321806 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.955513987 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.956118477 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.955514129 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.955660385 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.954636612 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.956759425 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.954712058 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.95581899 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.955256732 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.954738241 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.955985031 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.955635912 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.956255195 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.95571051 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.957228354 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.956998385 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.954658445 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.956620763 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.957478348 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955735679 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.957374442 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.956560665 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.956009556 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.956377714 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.955824043 seconds)
  done (took 60.559786569 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.975168387 seconds)
    (2/2) benchmarking "in"...
    done (took 1.977575355 seconds)
  done (took 5.837356965 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.956422877 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.956786169 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.956703172 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.95660072 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.957068277 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.957104331 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.956050095 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.958112294 seconds)
  done (took 17.538664554 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.957809475 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.961488306 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.956536015 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.959000126 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.957160214 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.965587661 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.957758786 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.959422079 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.959076942 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.958328636 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.963008393 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.961221485 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.966166202 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.961147781 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.959504473 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.958625419 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.959187696 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.962174262 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.960207278 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.958528733 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.961128936 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.957834121 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.958910414 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.958739998 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.95933527 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.960938288 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.967909445 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.95985978 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.959283969 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.958485784 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.966050301 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.958939795 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.958760618 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.960071556 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.959391281 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.958821866 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.96642584 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.961506242 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.959324999 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.958954235 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.960568339 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.962627959 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.963518188 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.968570929 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.960417686 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.960465563 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.959563038 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.959929215 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.959426051 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.964531414 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.967221643 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.959202126 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.960233084 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.96010705 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.963020428 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.960680549 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.960151643 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.962170911 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.968304437 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.967790135 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.964040077 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.98164248 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.96834294 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.960708293 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.959561709 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.969365646 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.983006063 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.961909969 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.962611059 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.960801042 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.968609718 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.960077264 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.960970933 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.960314657 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.974354422 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.966877701 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.96034496 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.960169043 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.961504495 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.960531698 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.962877848 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.96100706 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.960473837 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.960583545 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.971030999 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.985952768 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.96134457 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.960307707 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.962813768 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.96128311 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.966053535 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.964162727 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.961407364 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.961058301 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.96301795 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.966121477 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.960594554 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.961387792 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.959508462 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.970994998 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.962916098 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.962766443 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.965480169 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.96909966 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.962192838 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.961944401 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.964169598 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.96165768 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.970759056 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.96112609 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.961311408 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.961409557 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.961487744 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.965922713 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.961969197 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.966493265 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.969598251 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.97074704 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.962842252 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.966816219 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.96617986 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.965298927 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.972676789 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.984473203 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.96311783 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.96663113 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.967599394 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.973949242 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.966719825 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.964151696 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.966796514 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.962330596 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.963422 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.964904439 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.964956425 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.963087005 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.963113143 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.962930307 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.963280399 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.963594464 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.965654042 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.965387857 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.967041895 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.963233839 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.968313211 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.96487503 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.967322047 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.972645913 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.965272433 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.964789811 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.964889837 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.967045088 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.966092468 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.965472651 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.964195177 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.965470632 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.963704822 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.96535357 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.967393308 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.964338164 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.965944518 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.965112508 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.970497374 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.964586203 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.965398131 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.965470013 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.966046073 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.964232534 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.966881125 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.966557059 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.968306396 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.966673445 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.970213214 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.966534029 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.966520053 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.966418399 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.965838639 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.966086924 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.96946513 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.978673415 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.970229267 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.97587678 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.966264421 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.97254176 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.966550606 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.968061521 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.96744426 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.966609182 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.966718697 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.966977674 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.967138197 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.970276989 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.988456291 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.976970096 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.96969334 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.967067185 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.971691706 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.971375939 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.973845297 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.968065474 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.968789217 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.97025955 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.96617646 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.968110853 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.967551762 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.969689505 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.966945247 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.966799994 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.970092924 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.966509859 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.96754781 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.968419334 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.968418785 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.96919588 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.968340246 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.967669979 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.968537817 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.970273726 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.975968466 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.971169291 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.968011364 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.967882481 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.970905949 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.967698785 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.969347877 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.969171178 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.972917724 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.968539371 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.969337172 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.978048582 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.968759234 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.968903542 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.967016963 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.969535839 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.971254715 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.968879778 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.972558008 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.976880038 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.971713525 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.970182286 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.975777587 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.969827316 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.971323806 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.968918146 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.969560935 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.969684137 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.971807026 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.970289628 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.969279052 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.97730924 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.969623567 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.971060562 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.97002179 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.972496397 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.97107691 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.972657976 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.969818738 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.973691672 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.978940524 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.976941623 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.971684798 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.973028355 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.973049335 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.972277842 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.974322116 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.972414009 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.985008398 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.979172955 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.970549669 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.972167653 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.970039758 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.974012526 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.971360821 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.97119192 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.98070027 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.974608093 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.972367099 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.974971256 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.971128415 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.971719087 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.978584533 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.973448226 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.976010172 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.97411467 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.973601694 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.972492198 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.972909451 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.974502863 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.972454038 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.973933398 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.976876111 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.973601446 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.973358061 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.972575074 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.983100051 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.972612211 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.973712691 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.982312602 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.974517775 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.972171285 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.974552238 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.973431771 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.97417501 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.975179055 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.972514564 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.973568913 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.97308096 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.976531322 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.98408462 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.977106533 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.981141346 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.976097717 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.984026266 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.972783025 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.973111319 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.97356741 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.97745483 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.980644013 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.973343578 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.973038488 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.98195545 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.974786572 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.973943331 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.978367228 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.973963157 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.973297153 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.973615656 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.975351571 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.980171057 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.977695315 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.973645438 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.974691696 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.975350977 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.973908717 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.978367137 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.976017288 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.976691493 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.974684534 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.97465981 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.975000109 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.975453475 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.974911723 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.974454729 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.974962479 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.975244977 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.983234159 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.974868143 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.97560691 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.978504135 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.976116529 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.985009195 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.975517915 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.974170868 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.97590673 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.976334078 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.977848689 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.975944281 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.976411774 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.975858333 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.976364711 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.9772044 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.988849628 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.984274298 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.979269253 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.978901191 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.977256562 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.977022886 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.987496519 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.000121192 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.97696734 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.978242896 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.981018588 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.984443842 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.978998239 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.982963977 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.980142043 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.986351239 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.979196223 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.976213239 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.981375768 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.990712161 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.978579949 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.978048682 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.977484786 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.982940508 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.978395927 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.977281849 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.977322258 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.981429113 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.977946015 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.990019081 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.978344807 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.980126045 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.978088212 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.978189507 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.977715406 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.978908563 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.980408168 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.980457243 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.977691257 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.979128056 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.980796108 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.98327692 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.97820531 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.983400374 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.987992912 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.97827213 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.979561731 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.980739096 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.979870427 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.980438609 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.979957324 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.978531455 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.981353167 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.979212649 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.979827893 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.98341361 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.988538644 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.982509966 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.980282548 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.979074636 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.983579802 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.978740376 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.980289943 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.981680858 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.989575417 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.983483346 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.991637855 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.989875454 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.980981086 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.981086203 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.988611604 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.987710898 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.980350813 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.980521408 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.981360718 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.983472361 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.983176965 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.98123901 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.980455221 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.981163694 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.986959508 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.980537013 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.980431933 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.982113923 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.981848811 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.982941275 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.982658855 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.986260713 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.981805759 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.981010937 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.980161311 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.982128929 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.985336385 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.984638659 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.979836092 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.98002919 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.983742803 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.984379057 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.986180617 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.983444952 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.981989105 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.984232637 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.982150778 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.982232539 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.981749499 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.981566447 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.983036586 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.986179265 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.989715256 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.982245044 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.980172049 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.983274931 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.986608514 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.983076541 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.982981453 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.983377404 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.983416797 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.992197843 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.983550303 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.982376547 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.982524837 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.983498126 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.989149318 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.984410439 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.987691043 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.984066843 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.983976851 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.984909019 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.986707158 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.990797278 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.988275208 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.987261244 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.991006061 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.98887815 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.986000603 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.984623991 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.983954915 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.984807171 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.986018947 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.988920773 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.984819009 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.986752835 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.983941157 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.986458838 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.98398811 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.986414852 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.984294625 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.983723042 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.988758374 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.994710131 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.993118156 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.984006294 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.985602084 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.984475645 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.989182302 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.995147863 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.984796006 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.985812607 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.984603365 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.987495051 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.986679919 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.992454166 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.993144112 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.989722423 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.985016486 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.990695342 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.004052813 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.987452662 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.994492331 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.017771983 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.985833683 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.985539474 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.987180122 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.985471641 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.985888616 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.987728692 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.976194117 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.993635725 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.986727419 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.986020186 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.994919315 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.985994997 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.986484666 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.985668274 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.986625516 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.991685762 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.986229739 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.994111034 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.985915174 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.987124264 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.986652179 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.990469151 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.986245297 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.987317364 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.987994734 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.991173719 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.986850092 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.975177814 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.998519583 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.986906129 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.988777535 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.002227161 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.469407328 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.986955757 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.986869049 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.987640205 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.993015001 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.991486573 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.987730028 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.991690759 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.995771855 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.992215244 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.996033953 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.990532538 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.989368757 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.988444245 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.987601935 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.988047064 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.002096764 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.000746095 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.989985403 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.989911563 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.995867511 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.98918826 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.995603649 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.995233215 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.99075158 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.990449316 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.988737596 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.988953514 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.987241433 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.990029635 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.993573984 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.997076204 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.989002602 seconds)
  done (took 1179.67794831 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.989626734 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.98913623 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.989283213 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.988600101 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.988870171 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989012788 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.989646242 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.990842308 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.988543024 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.989253811 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.989753771 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.990406575 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.989641778 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.990628728 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.990930784 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.989516069 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.989646921 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.989492181 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.989862813 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.990081352 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.991063312 seconds)
  done (took 43.699450176 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.981515095 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.989551652 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.990871213 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.991580143 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.990570188 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.990573927 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.990147065 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.990453457 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.990490094 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.989945077 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.990665966 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.990392072 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.990220761 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.990591602 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.991087089 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.992058193 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.991323659 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.990808985 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.990713773 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.991925451 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.990961847 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.989756357 seconds)
  done (took 45.703444555 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.99094975 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.991573613 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.992844909 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.991724318 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.991749617 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.992083349 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.991665233 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.993249254 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.99145656 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.993110094 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.998994063 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.000706651 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.991342553 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.995253215 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.992949304 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.991994386 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.13724217 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.993144198 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.992573265 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.992543654 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.992849577 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.000091399 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.991522177 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.992410179 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.991663998 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.992772985 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.993071068 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.988097806 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.993307351 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.994013338 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.997645564 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.9928447 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.995175559 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.996726791 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.993048691 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.993133123 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.996365823 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.992848658 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.99387704 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.994128389 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.003127544 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.015459603 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.994603527 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.99359057 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.001457142 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.994258396 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.994006229 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.997841857 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.001863632 seconds)
  done (took 99.797852892 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.995009957 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.994180536 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.994687084 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.994341036 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.986632855 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.993622306 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.99434274 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.996564918 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.994590611 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.9952744 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.995158895 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.994908999 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.994823557 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.99414701 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.995535693 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.994848022 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.996072662 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.996742218 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.996826488 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.995027643 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.993541307 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.996346623 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.996024225 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.996078942 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.994994461 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.995988021 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.996824918 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.996097682 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.996246667 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.99601517 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.996277445 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.996274355 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.998068527 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.996952944 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.997952127 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.9964897 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.996141928 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.996957265 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.996894961 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.997253928 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.996330363 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.995542344 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.996718494 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.996685332 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.996706739 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.997550544 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.998411472 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.997940554 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.998257718 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.997356366 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.996958384 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.997431482 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.996722512 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.997982175 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.996994224 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.996512891 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.997782399 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.99691139 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.997207159 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.99421692 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.997749048 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.999109702 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.998319658 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.998677203 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.998370096 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.998548765 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.998808481 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.999290381 seconds)
  done (took 137.672431673 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.998553746 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.997707714 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.998424932 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998497851 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.99840388 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.997440238 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.999040069 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.998005561 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.997474894 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.999072705 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.99851152 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.998563666 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.997790636 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.998568609 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.998420134 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.998684005 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.999129624 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.997810967 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.998386765 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.999142323 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.999813471 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.998340018 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.998928713 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.998998881 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.998622582 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.998920156 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.999117855 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.999853838 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.999044728 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.999286671 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.000013875 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.999527945 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.998912276 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.999514593 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.999901113 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.999680819 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.999116867 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.999763462 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.000415275 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.989272223 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.000002489 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.999761863 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.001576149 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.001640409 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.999816301 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.999260123 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.000261435 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.000293809 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.000266258 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.000227213 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.0003002 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.000988881 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.99978835 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.998999717 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.00045865 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.001400022 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.001533694 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.001202533 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.00096614 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.001241658 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.000712971 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.002312442 seconds)
  done (took 125.88352594 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.000605002 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.000777181 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.002808586 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.001160126 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.000900415 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.000879135 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.001683534 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.001795872 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.003048461 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.00176951 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.00111385 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.002330944 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.003291378 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001190649 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.001596806 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002952854 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.002960412 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.002395699 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.001046593 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.002683268 seconds)
  done (took 41.964076936 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.002509066 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.002166272 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.999603802 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.003917547 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.002969995 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.002084394 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.003457755 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.002798316 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.002730193 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.003274827 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.002234257 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.002240167 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.003245522 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.00252273 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.003431496 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.002350481 seconds)
  done (took 33.969693511 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.004168313 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.003299598 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.002972378 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.002840808 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.003641401 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.003802469 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.004503748 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.003759676 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.00556455 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.004965798 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.003478265 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.003718653 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.004633349 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.00446225 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.004775992 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.004207866 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.004979154 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.004511793 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.003038427 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.004295443 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.005556153 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.004576042 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.004555372 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.005043897 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.004828835 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.004980676 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.005565396 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.004649749 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.00526738 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.005001253 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.00519415 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.005047128 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.006212633 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.004982769 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.003963224 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.00537836 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.005437887 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.005078893 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.004077563 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.005993462 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.006714376 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.005970879 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.00520657 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.005762364 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.006117484 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.005863506 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.006587072 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.006666798 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.006452662 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.999621063 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.005954639 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.003946388 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.006902241 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.005739957 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.00565396 seconds)
  done (took 112.196254932 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.006966517 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.006439335 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.006398404 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.006726507 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.005657315 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.006450703 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.00591223 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.006177388 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.00553068 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.990779097 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.005353131 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.006250368 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.006757511 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.007018711 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.006835405 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.007076645 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.007755361 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.008948613 seconds)
  done (took 38.034794996 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.008028274 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.008166886 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.006450072 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.007662208 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.006999009 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.007200904 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.008435197 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.007721711 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.00789802 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.008542884 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.008198774 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.007864014 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.007228018 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.006940861 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.007394557 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.007953305 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.008531341 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.007786517 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.007821628 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.008356024 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.007657166 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.00940407 seconds)
  done (took 46.104548789 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.008470994 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.008058081 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.022705285 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.028267392 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.028123734 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.041666585 seconds)
  done (took 14.070376787 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.007890592 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008536879 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.010970623 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.007790309 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008979793 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009237686 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009903036 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009058288 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009200624 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009344776 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.008586755 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009677102 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.009270691 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.010521632 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009082858 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008699416 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010648636 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.009139065 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009804316 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009874517 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.009602376 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009856718 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010011065 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.011400083 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010276572 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009851716 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.010229964 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.010865576 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011506165 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009583371 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.009665535 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.010380538 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.01085507 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012475936 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010569838 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010961335 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.010618598 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.011341152 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.011701507 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.011476371 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.011367435 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.012004737 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0112576 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.011587657 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.010938655 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010442686 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011678911 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01229039 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.011860759 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.011488797 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.010724531 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.011488223 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.010861481 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.011722282 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011364147 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.012275047 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.011697489 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01091223 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.011514909 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011657224 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012070222 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.011826811 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.013541054 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012675519 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011213536 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011854913 seconds)
  done (took 134.637754509 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012729757 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.012552836 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.012236412 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012957805 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.012874047 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.013045957 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012292905 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.012267775 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013234172 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.012481175 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.013004242 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.013059142 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013400218 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.011319047 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.013444196 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.013742472 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013257046 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.013660696 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.012562958 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013970941 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014384575 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013365975 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.014149529 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.014288364 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014094838 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013215762 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.012975282 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.013689542 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.013867579 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.001019072 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.013731539 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014444482 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014068736 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.013921461 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.014832067 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.014928841 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014983301 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01454365 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.014048416 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.015563221 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015490393 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013848794 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.015981279 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015049332 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014333884 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015641243 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015319862 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01617516 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014974007 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.01517552 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.016494333 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015690956 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015065014 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015205844 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.016956387 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014211675 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015660625 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.015982847 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.01442587 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.014900622 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015059952 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.014693031 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.016047236 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.015398533 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.015820894 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.015924924 seconds)
  done (took 134.867751833 seconds)
done (took 2749.021787921 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.024993991 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.131533216 seconds)
  done (took 16.09721069 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.181366782 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.058471036 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.204410705 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.136662458 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.028522815 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.024925623 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.018912765 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.020491583 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.111862828 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.021294056 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.040840208 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.020183679 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.020026871 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.020347809 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.020873038 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.020307125 seconds)
  done (took 54.899350538 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.025046621 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.023789131 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.024262324 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.020127655 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.03483759 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.099713309 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.047221342 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.02805594 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.037802849 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.055296586 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.041561809 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.028981666 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.030984258 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.028661379 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.114836362 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.070028053 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.080872676 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.099787732 seconds)
  done (took 38.836546107 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.104358393 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.032800682 seconds)
  done (took 11.089055257 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.053480049 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.044570485 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.02036581 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.024257678 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.040337391 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.038973519 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.042838663 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.044395556 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.023446854 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.038841526 seconds)
  done (took 72.351954822 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.023104325 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.023818775 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.329655378 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.0311216 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.03053339 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.048239805 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.02309193 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.055346168 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.025406498 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.019222092 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.032923071 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.337448252 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.035781892 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.022345361 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.44004744 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.035154229 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.028174651 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.054917309 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.059264306 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.027068084 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.027945147 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.029168537 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.18357141 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.731811546 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.023800644 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.029276749 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.029394885 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.019921352 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.020325432 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.023231323 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.0246764 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.022304389 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.028838468 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.02569745 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.028694317 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.026704055 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.528570158 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.044395762 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.029548817 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.121667191 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.069737266 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.029635487 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.861411973 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.026281563 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.022280459 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.031861854 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.711810271 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.108813968 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.026617225 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.203970376 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.36204859 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.039558449 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.181758052 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.234218702 seconds)
  done (took 141.540186019 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.022530086 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.255052588 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.174709728 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.022137595 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.279812511 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.232599658 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.024805698 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.068433618 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.025428963 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.225684399 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.278317379 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.127159341 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.024835769 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.020295686 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.023167923 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.022551665 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.167367933 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.091582061 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.026930928 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.022758269 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.046179485 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.22392576 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.144461756 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.026406584 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.049778336 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.230467888 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.145312552 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.12558052 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.797696918 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.02241084 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.085373132 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.02632016 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.022967678 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.022397644 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.176049784 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.11815381 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.106662105 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.025523294 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.023394848 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.023120427 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.698143049 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.222910682 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.118923355 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.147807583 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.275156387 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.238352191 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.636678001 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.024440511 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.64668543 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.189027492 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.228640129 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.232024996 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.144324332 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.027736029 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.313892744 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.024593977 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.024514727 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.246014956 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.244843123 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.124146626 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.02599024 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.025656474 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.024878421 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.262065748 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.028482344 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.115820186 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.027896859 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.025283874 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.116989123 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.12619049 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.250780687 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.245345194 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.056062013 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.360249949 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.519927334 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.228268703 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.089572125 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.24491696 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.02981507 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.025541657 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.103451665 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.865113714 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.27642008 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.267752476 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.224708102 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.05612411 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.677749884 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.025327592 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.214135505 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.21543935 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.258795439 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.271474324 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.260433306 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.385316536 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.026031917 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.026407792 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.342017377 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.134055796 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.974123745 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.377862768 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.254218469 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.554888618 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.053547067 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.312229898 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.15572263 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.030804937 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.673786671 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.027747899 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.231957039 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.067339759 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.99902236 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.02734572 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.216591456 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.929282842 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.028276417 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.730021642 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.087144676 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.031976034 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.23107772 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.032455541 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.272339584 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.031899651 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.26000678 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.659911954 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.059069729 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.20244076 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.273711309 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.667330498 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.320310714 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.270124712 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.143939639 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.251699547 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.83036295 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.02935535 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.289258031 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.03077471 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.028269976 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.197737166 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.033232543 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.171690681 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.032199182 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.292950853 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.050293474 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258411018 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.033484312 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.26717892 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.062424992 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.07868526 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.032752142 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.154913899 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.030646577 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.876058931 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.186515618 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.031469303 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.030916042 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.622770147 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.030897638 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.183734868 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.255830096 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.050336599 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.099052602 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.594962918 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.020904906 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.111815578 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.052154157 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.296759378 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.03098069 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.279559404 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.991061984 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.504198695 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.029578151 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.264615147 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.216988761 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.031975156 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.031707103 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.87254939 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.030732458 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.030006661 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.187025682 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.433197267 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.930249737 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.228685439 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.036048515 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.158111781 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.033332168 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.107094656 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.371181404 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.030704998 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.031187603 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.031629633 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.032654601 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.031159273 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.239885719 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.057448287 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.474656824 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.167022832 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.289653861 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.338005471 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.231328176 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.072149326 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.036787632 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.255237169 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.035580569 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.09482338 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.035141288 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.051301633 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.261146851 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.036016478 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.237364383 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.268779182 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.92141688 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.078020328 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.034162159 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.032664539 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.948857391 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.178960601 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.119448146 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.035814376 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.034044704 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.146672643 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.155170151 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.216632679 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.85405023 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.175934138 seconds)
  done (took 935.664864725 seconds)
done (took 1272.423745345 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.031663666 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.0353769 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.035781409 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.033133897 seconds)
  done (took 30.096096488 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.034219838 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.034541335 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.034791189 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.035824496 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.034840843 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.036302796 seconds)
  done (took 14.1716968 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.032376713 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.034743238 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.037994833 seconds)
  done (took 23.065132072 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.458442032 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.438170866 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.109665162 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.182158416 seconds)
  done (took 11.149475479 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.039454909 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.0352089 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.035235565 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.035461565 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.036033412 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.036590789 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.036818962 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.036199659 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.036204821 seconds)
  done (took 20.297438682 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.219217615 seconds)
done (took 104.961110167 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.057164687 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.069151578 seconds)
    (3/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.18749492 seconds)
    (4/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.891460079 seconds)
    (5/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.188076059 seconds)
    (6/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.060913833 seconds)
    (7/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.692318036 seconds)
    (8/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.351821581 seconds)
    (9/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.201455084 seconds)
    (10/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.486411967 seconds)
    (11/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.293547181 seconds)
    (12/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.03607677 seconds)
    (13/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.303637549 seconds)
    (14/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.054502733 seconds)
    (15/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.005049164 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.061544089 seconds)
    (17/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.036954352 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.12314211 seconds)
    (19/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.053734688 seconds)
    (20/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.33031167 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.056738021 seconds)
    (22/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.036316826 seconds)
    (23/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.147224585 seconds)
    (24/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.369932091 seconds)
    (25/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.042719745 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.830556631 seconds)
    (27/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.330434766 seconds)
    (28/341) benchmarking ("sort", BigInt, false)...
    done (took 7.038941757 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.120761218 seconds)
    (30/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.035866258 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.135386984 seconds)
    (32/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.628853247 seconds)
    (33/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.126099364 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.132520001 seconds)
    (35/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.042437032 seconds)
    (36/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.04726498 seconds)
    (37/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.343387477 seconds)
    (38/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.13442317 seconds)
    (39/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.3343173 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.264792264 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.124087325 seconds)
    (42/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.041189559 seconds)
    (43/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.312103801 seconds)
    (44/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.668016448 seconds)
    (45/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.414188305 seconds)
    (46/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.175157448 seconds)
    (47/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.128158634 seconds)
    (48/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.120802912 seconds)
    (49/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.046735896 seconds)
    (50/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.038540877 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 4.147530457 seconds)
    (52/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.219165113 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.346301389 seconds)
    (54/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.34990632 seconds)
    (55/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.124900384 seconds)
    (56/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.039569363 seconds)
    (57/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.084471795 seconds)
    (58/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.187856296 seconds)
    (59/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.040098915 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.287817526 seconds)
    (61/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.036627401 seconds)
    (62/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.234690278 seconds)
    (63/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.168360076 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.795492681 seconds)
    (65/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.235544383 seconds)
    (66/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.151878383 seconds)
    (67/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.238411465 seconds)
    (68/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.732050388 seconds)
    (69/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.136144363 seconds)
    (70/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.628039461 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.285017484 seconds)
    (72/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.449686765 seconds)
    (73/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.177167485 seconds)
    (74/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.021296444 seconds)
    (75/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.431737645 seconds)
    (76/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.233865069 seconds)
    (77/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.49980104 seconds)
    (78/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.052495676 seconds)
    (79/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.151949766 seconds)
    (80/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.792939556 seconds)
    (81/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.140642726 seconds)
    (82/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.160519702 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.049522844 seconds)
    (84/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.057193579 seconds)
    (85/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.240876392 seconds)
    (86/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.241013167 seconds)
    (87/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.22265551 seconds)
    (88/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.041946783 seconds)
    (89/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.058834623 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.895392743 seconds)
    (91/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.832392133 seconds)
    (92/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.149331315 seconds)
    (93/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.041797741 seconds)
    (94/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.238609898 seconds)
    (95/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.136269416 seconds)
    (96/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.116141939 seconds)
    (97/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.391896474 seconds)
    (98/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.179629739 seconds)
    (99/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.038823708 seconds)
    (100/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.404110547 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.898125185 seconds)
    (102/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.19849281 seconds)
    (103/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.172229345 seconds)
    (104/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.174683133 seconds)
    (105/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.439545773 seconds)
    (106/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.052743648 seconds)
    (107/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.134002981 seconds)
    (108/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.505829017 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.052798372 seconds)
    (110/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.317941027 seconds)
    (111/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.295933778 seconds)
    (112/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.471244172 seconds)
    (113/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.472790997 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.13955061 seconds)
    (115/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.269613043 seconds)
    (116/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.158313911 seconds)
    (117/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.200705693 seconds)
    (118/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.059348611 seconds)
    (119/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.216063326 seconds)
    (120/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.536799408 seconds)
    (121/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.052947959 seconds)
    (122/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.324652506 seconds)
    (123/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.083073519 seconds)
    (124/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.261986333 seconds)
    (125/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.337131561 seconds)
    (126/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.316658442 seconds)
    (127/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.519429756 seconds)
    (128/341) benchmarking ("sort", Float32, false)...
    done (took 5.724187558 seconds)
    (129/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.043704871 seconds)
    (130/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.05493378 seconds)
    (131/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.845523031 seconds)
    (132/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.113947527 seconds)
    (133/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.04037194 seconds)
    (134/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 3.935021406 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.438174447 seconds)
    (136/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.320811696 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.05991493 seconds)
    (138/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.123102802 seconds)
    (139/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.151436532 seconds)
    (140/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.262587521 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.117006925 seconds)
    (142/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.324088758 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.932831014 seconds)
    (144/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.158877084 seconds)
    (145/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.094439177 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.142114571 seconds)
    (147/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.293170007 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.279161502 seconds)
    (149/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.3124941 seconds)
    (150/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.460138713 seconds)
    (151/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.058049307 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.342431786 seconds)
    (153/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.449670173 seconds)
    (154/341) benchmarking ("sort", Bool, false)...
    done (took 2.25983739 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.369528308 seconds)
    (156/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.81849622 seconds)
    (157/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.304452955 seconds)
    (158/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.125679399 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.042883574 seconds)
    (160/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.241763458 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.05191982 seconds)
    (162/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.169276517 seconds)
    (163/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.449396377 seconds)
    (164/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.174857347 seconds)
    (165/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.942442335 seconds)
    (166/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.069313243 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.059143243 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.058241049 seconds)
    (169/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.008737758 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 5.674515747 seconds)
    (171/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.36172327 seconds)
    (172/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.254427537 seconds)
    (173/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.346313294 seconds)
    (174/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.592602098 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.400187209 seconds)
    (176/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.800605802 seconds)
    (177/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.343524098 seconds)
    (178/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.111823433 seconds)
    (179/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.043873308 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.257868299 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.181530537 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.17857507 seconds)
    (183/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.070054697 seconds)
    (184/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.284277357 seconds)
    (185/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.153070318 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.082077735 seconds)
    (187/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.470616241 seconds)
    (188/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.674309594 seconds)
    (189/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.466597578 seconds)
    (190/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.139253031 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.209630653 seconds)
    (192/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.388461438 seconds)
    (193/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.270182973 seconds)
    (194/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.687942086 seconds)
    (195/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.452265175 seconds)
    (196/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.147312869 seconds)
    (197/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.127269858 seconds)
    (198/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.467108689 seconds)
    (199/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.284385519 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.341306729 seconds)
    (201/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.049602897 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.049726037 seconds)
    (203/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.065254449 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.309618775 seconds)
    (205/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.142642614 seconds)
    (206/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.088765749 seconds)
    (207/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.048255494 seconds)
    (208/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.124704787 seconds)
    (209/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.83176814 seconds)
    (210/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.456935311 seconds)
    (211/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.268054794 seconds)
    (212/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.04921287 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.107330869 seconds)
    (214/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.047927915 seconds)
    (215/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.113213963 seconds)
    (216/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.126647799 seconds)
    (217/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.04983017 seconds)
    (218/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.197763622 seconds)
    (219/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.062236636 seconds)
    (220/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.132308549 seconds)
    (221/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.146454065 seconds)
    (222/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.437629231 seconds)
    (223/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.136284925 seconds)
    (224/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.323227168 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.185990585 seconds)
    (226/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.229358497 seconds)
    (227/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.370129483 seconds)
    (228/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.200690314 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.064525874 seconds)
    (230/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.744019374 seconds)
    (231/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.074119322 seconds)
    (232/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.58146181 seconds)
    (233/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.012036286 seconds)
    (234/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.212762965 seconds)
    (235/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.271466268 seconds)
    (236/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.288868707 seconds)
    (237/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.057042808 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.009087475 seconds)
    (239/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.127112721 seconds)
    (240/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.831388465 seconds)
    (241/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.056948399 seconds)
    (242/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.220854284 seconds)
    (243/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.316438656 seconds)
    (244/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.991627717 seconds)
    (245/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.217306018 seconds)
    (246/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.051690213 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.444456527 seconds)
    (248/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.131271415 seconds)
    (249/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.287370938 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.871031073 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.346749424 seconds)
    (252/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.153966125 seconds)
    (253/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.281241747 seconds)
    (254/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.310952418 seconds)
    (255/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.858426958 seconds)
    (256/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.662154451 seconds)
    (257/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.199918251 seconds)
    (258/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.05594008 seconds)
    (259/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.207831548 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.190993359 seconds)
    (261/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.156508678 seconds)
    (262/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.059582646 seconds)
    (263/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.134325882 seconds)
    (264/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.131456812 seconds)
    (265/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.532396175 seconds)
    (266/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.173865004 seconds)
    (267/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.185965858 seconds)
    (268/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.847957733 seconds)
    (269/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.133478516 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.966647842 seconds)
    (271/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.070023512 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.055769576 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 8.422865534 seconds)
    (274/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.392403809 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.058679561 seconds)
    (276/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 8.403348506 seconds)
    (277/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.179222648 seconds)
    (278/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.376530899 seconds)
    (279/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.535688036 seconds)
    (280/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.145431841 seconds)
    (281/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.157547731 seconds)
    (282/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.448468514 seconds)
    (283/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.059387397 seconds)
    (284/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.524776729 seconds)
    (285/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.062378189 seconds)
    (286/341) benchmarking ("sort", Int8, false)...
    done (took 6.461726503 seconds)
    (287/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.175912683 seconds)
    (288/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.375691712 seconds)
    (289/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.357003213 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.073028209 seconds)
    (291/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.056022794 seconds)
    (292/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.73237157 seconds)
    (293/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.015768492 seconds)
    (294/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.05870727 seconds)
    (295/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 8.419361451 seconds)
    (296/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.404121299 seconds)
    (297/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.455253395 seconds)
    (298/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.059446576 seconds)
    (299/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.464540859 seconds)
    (300/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.271801135 seconds)
    (301/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.388648047 seconds)
    (302/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.467970534 seconds)
    (303/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.339609665 seconds)
    (304/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.058095099 seconds)
    (305/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.280210028 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.458918917 seconds)
    (307/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.19261725 seconds)
    (308/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.382752781 seconds)
    (309/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.14996116 seconds)
    (310/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.685513207 seconds)
    (311/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.055608379 seconds)
    (312/341) benchmarking ("sort", Float64, false)...
    done (took 5.801914865 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.186745772 seconds)
    (314/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.730792286 seconds)
    (315/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.067082312 seconds)
    (316/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.193236696 seconds)
    (317/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.105845914 seconds)
    (318/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.432618558 seconds)
    (319/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.456307632 seconds)
    (320/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.072658389 seconds)
    (321/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.060714463 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.943109582 seconds)
    (323/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.055667928 seconds)
    (324/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.311975437 seconds)
    (325/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.181133928 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 4.080973273 seconds)
    (327/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.346622215 seconds)
    (328/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.068738464 seconds)
    (329/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.536231536 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.191000141 seconds)
    (331/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.481440589 seconds)
    (332/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.400411877 seconds)
    (333/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.084144294 seconds)
    (334/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.117168141 seconds)
    (335/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.207497549 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.670089917 seconds)
    (337/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.369367662 seconds)
    (338/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.961270049 seconds)
    (339/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.284378093 seconds)
    (340/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.193470917 seconds)
    (341/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.118426243 seconds)
  done (took 1155.175891169 seconds)
done (took 1157.239547022 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.078854306 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.061215908 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.583122047 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.074070935 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.059357971 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.063402206 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.59307719 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.093312155 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.077143084 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.59351603 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.074684615 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.061367738 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.077463177 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.09790961 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.073694176 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.078029299 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.067804318 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.087032575 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.098234085 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.067245961 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.115273011 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.059952975 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.06011864 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.112193318 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.062900631 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.079864947 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.081461895 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.113353795 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.113742246 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.065218693 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.067887391 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.431815353 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.118171982 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.068031013 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.075854472 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.077365005 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.069742379 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.078875512 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.081061109 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.079101582 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.064279112 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.074222138 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.067120613 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.066434941 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.064480901 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.063052758 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.06455389 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.188784392 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.07972728 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.414629252 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.128553402 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.082536605 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.115945734 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.068562686 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.06668879 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.067298292 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.114660112 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.070696767 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.07099823 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.41538679 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.163762161 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.079382543 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.41743847 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.13319827 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.075897969 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.072723414 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.063921852 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.085225076 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.433522772 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.639852717 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.097710319 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.08675121 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.056445002 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.067460744 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.079086744 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.595212077 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.083269876 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.663038566 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.093010475 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.08194238 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.071741013 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.06912661 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.066555749 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.08373331 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.084736266 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.065571622 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.072021871 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.071927653 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.079669118 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.433152505 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.115945012 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.585328524 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.075982058 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.085801235 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.08470959 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.664241961 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.096306953 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.084464521 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.068860233 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.434301391 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.11180821 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.08625425 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.067802037 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.078263829 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.183034084 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.085311474 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.085584291 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.066106271 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.089112424 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.073124714 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.069335775 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.079832594 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.0885704 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.102368129 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.085763846 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.066351135 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.075559055 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.073416496 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.084607451 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.075841108 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.075204347 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.079813811 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.068739977 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.12002055 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.087938307 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.083690532 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.182897469 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.073899452 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.194411945 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.082983217 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.073215433 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.067906357 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.419228838 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.118827796 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.090979575 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.076253237 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.092020917 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.09046266 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.086925159 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.071343289 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.084318741 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.071879204 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.120536994 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.070188745 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.094357059 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.121533752 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.082974563 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.076878152 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.087304794 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.105258894 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.089600396 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.074777964 seconds)
done (took 325.920283497 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.114274018 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.068195351 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.14177172 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.068946149 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.135928315 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.120550263 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.069226758 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.070038667 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.069623953 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.498653213 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.069637698 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.074360835 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.067106144 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.069403518 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.116326315 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.070982561 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.069546954 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.302639866 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.070490418 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.129490469 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.067430339 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.069838021 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.070145877 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.456506845 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.072056285 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.067691843 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.128745031 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.070149191 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.308536709 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.068368743 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.06969627 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.309705711 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.129816173 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.084405808 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.081059023 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.075635495 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.136878943 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.078988277 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.116822264 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.11648291 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.144425388 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.104340268 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.07032163 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.070195638 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.07512915 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.071730097 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.071607199 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.103004763 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.071538065 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.076848657 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.329156749 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.080123081 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.076683241 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.07177402 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.072121978 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.086307052 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.072227321 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.072495875 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.130086472 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.071864509 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.117874155 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.459736813 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.455718227 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.071714822 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.072336764 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.072298718 seconds)
  done (took 197.14174318 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.140177812 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.145596378 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.140772329 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.079137499 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.121231444 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.137899612 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.080304711 seconds)
  done (took 16.840583752 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.079578083 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.073861965 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.096066097 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.095784157 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.072079763 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.215163374 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.084543102 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.078352572 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.098512276 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.072735421 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.406435291 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.094826911 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.080312737 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.072660734 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.085349978 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.0893018 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.07493452 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.073388676 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.169679705 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.150767779 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.078770209 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.080373536 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.102121845 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.084496264 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.074238776 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.073349483 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.074337166 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.081043931 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.0743214 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.075123317 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.075074841 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.086350375 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.074544807 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.0745709 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.075237143 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.075113136 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.074062124 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.075002504 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.074406742 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.072676309 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.075322549 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.074550759 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.075184961 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.075782017 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.074956698 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.097126683 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.075661064 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.075663525 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.075507332 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.07505598 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.102753362 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.077022682 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.075777921 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.081345196 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.115809778 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.083148902 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.07550663 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.077006031 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.075745681 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.075564993 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.075914074 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.157038706 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.098675154 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.076416754 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.098736719 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.114098106 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.076831554 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.076873722 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.076279077 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.100611765 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.07783337 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.099140095 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.076224857 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.177167273 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.076971427 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.219377672 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.098729457 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.08060743 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.080818635 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.07489131 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.084424252 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.077810562 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.078804308 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.083263747 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.083602814 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.078211899 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.077464484 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.077840689 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.084766599 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.079354525 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.12011085 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.077525144 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.078833359 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.161437257 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.077851193 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.174760096 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.102727694 seconds)
  done (took 225.044798491 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.082993023 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.079114455 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.093683789 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.078825422 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.079010639 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.083614943 seconds)
  done (took 14.498945584 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.081267428 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.083740589 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.078889574 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.079105774 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.077937686 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.078161155 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.079138483 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.080673602 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.082947339 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.079178969 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.079136442 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.080288692 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.079752267 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.078750315 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.081064562 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.079833573 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.07947944 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.079732158 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.078479103 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.078616656 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.282771005 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.080084048 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.079265181 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.083574145 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.084554297 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.079664654 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.08800073 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.08041239 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.080459439 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.086518314 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.086160083 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.081068662 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.084085727 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.086751406 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.085741501 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.084753432 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.085292654 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.081320885 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.081622039 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.081007689 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.08196933 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.080965957 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.080760614 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.081351747 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.082279005 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.089306037 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.085817784 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.088755009 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.081909173 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.081321569 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.081082388 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.080330163 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.07941791 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.08390622 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.081914633 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.087819631 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.085465559 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.080913873 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.08364796 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.086075354 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.086494986 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.080921485 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.085583555 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.08547596 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.088590044 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.070688491 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.084767765 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.087538356 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.080131023 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.080639723 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.080977911 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.081390928 seconds)
  done (took 153.121368207 seconds)
done (took 608.643101641 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.161729897 seconds)
  done (took 9.164142684 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.08822706 seconds)
  done (took 9.187416325 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.781220481 seconds)
  done (took 12.787907363 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.107296203 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.105148067 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.098388234 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.087423148 seconds)
  done (took 30.416867773 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.361804168 seconds)
  done (took 9.366453679 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.095999274 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.080143449 seconds)
  done (took 16.248895068 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.13499468 seconds)
  done (took 9.141348248 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.531245331 seconds)
  done (took 9.56690278 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.100061206 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.099854414 seconds)
  done (took 16.225355167 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.085357964 seconds)
  done (took 9.090748029 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.860171057 seconds)
  done (took 9.95404168 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.093675179 seconds)
  done (took 9.117443523 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.161960172 seconds)
  done (took 9.168614412 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.216708675 seconds)
  done (took 10.2219556 seconds)
done (took 171.665648636 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.091785514 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.084456681 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.085928645 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.08351908 seconds)
  done (took 30.351057098 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.117901211 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.119544229 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.127342225 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.119921244 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.108929192 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.109878563 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.118969347 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.119303465 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.110107613 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.11653325 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.118923887 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.117643719 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.119138069 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.127922318 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.12855771 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.116430538 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.118962193 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.120203132 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.109515789 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.129195343 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.116380675 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.118946304 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.086336484 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.084795274 seconds)
  done (took 52.78824233 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.274844093 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.150675917 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.237760357 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.130846193 seconds)
  done (took 10.800905469 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.083597921 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.148995954 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.137309115 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.131344249 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.178629051 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.188569311 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.138103359 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.295584932 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.200429558 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.211393665 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.092678814 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.107727856 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.110664954 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.131910789 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.188043153 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.086201237 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.086154896 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.19966223 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.147325539 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.295111519 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.085917367 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.140283659 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.171311357 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.138625241 seconds)
  done (took 53.702709649 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.086629583 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.0952857 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.093598044 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.087086049 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.087428541 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.087877606 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.094425857 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.076693431 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.109763596 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.089584942 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.087945154 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.087590083 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.093978793 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.088125833 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.087721821 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.101238241 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.101404101 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.087105746 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.090238708 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.09443628 seconds)
  done (took 43.838052921 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.084828403 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.93152473 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.431332263 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.337628403 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.084589711 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.087752817 seconds)
  done (took 32.967627743 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.099858407 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.106975131 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.094555687 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.109864645 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.139228439 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.093706342 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.147406188 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.233583561 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.097695934 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.14702703 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.111518024 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.094641991 seconds)
  done (took 27.485409085 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.084568878 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.088311881 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.091764042 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.100241776 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.098277273 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.098600619 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.096162308 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.0863721 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.100702262 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.110635969 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.099066533 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.100168187 seconds)
  done (took 47.152458217 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.301936782 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.315559639 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.308234245 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.753545427 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.410893228 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.067962455 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.374166225 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.300627653 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.75507777 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.781776883 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.379073366 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.063980499 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.042732003 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.015377251 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.986582635 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.331915086 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090610083 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.946559328 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.343734146 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.131969289 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092517946 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.09021991 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.09206816 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.373351003 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413626745 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094461484 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.303195624 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107754002 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.089574148 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.349063559 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.602964193 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.137473508 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.293578222 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.352969001 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.427241899 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.227553671 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.093855853 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.32910722 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.13856721 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.126075579 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.101277573 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.101605728 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.621807446 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.102671997 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.363124151 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.09286807 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.17854999 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.095244821 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.016681479 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.353432919 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199896685 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.089016519 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.126233206 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.522722128 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.210100353 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.334164041 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.096856922 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.337865737 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154836888 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.30627795 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.195946582 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.189460195 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.288998345 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010335334 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.427511046 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212558577 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.094351801 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096708459 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.792625846 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.33545746 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.173965257 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.36693643 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.849580364 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.09262664 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.095380647 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.136076652 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.184401892 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.093429606 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.39105578 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.112865274 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.020386089 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191756622 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.49388992 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098295711 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.090837516 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.100780709 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.939959998 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.018471097 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.190709257 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.29196066 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.414464393 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.094153278 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.093296823 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.116380027 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096880419 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.041075968 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.721859143 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.163800418 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.020334966 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.65690302 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.612938845 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.06337018 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.604717778 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.141225268 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.373358255 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.235205616 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.499041019 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.302515039 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.339576201 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.63964592 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.099590003 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.652343196 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.175396209 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.171028035 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094998284 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.651919444 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.344837887 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.344224285 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207555963 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.093671983 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.020588447 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.105539263 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.298347447 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.608796125 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.15343708 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.095495067 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.099976037 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.095924307 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.097732302 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.258285642 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112198395 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.392870009 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.16348445 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.096496152 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.032258066 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.101311162 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.377120813 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.861732209 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156134899 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.348675636 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.356974646 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.794841451 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.694209244 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.138146542 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.363507804 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.16405 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172097996 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.669486167 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.228124918 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.193599109 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096905533 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.229200816 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.110009143 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.098934307 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.600162311 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.508876111 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.523522507 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.140300322 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.097686776 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.050392574 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.344687468 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.34419151 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.153949151 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.125665043 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.10204783 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.180825135 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.324104832 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.096319381 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.024228186 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.346121682 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341955081 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.385559163 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.503226948 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149690422 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.169089562 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106933714 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.310155205 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.180486424 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.75621328 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.644473577 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.320251477 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.720333862 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.066407235 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.74019727 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.304212087 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.475019342 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.113820855 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.551483066 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.343887577 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.837379445 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.131278458 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.628081878 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.024802654 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103663498 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.43554752 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.055017258 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.413431271 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.155206633 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165841654 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.101193161 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.100553568 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1066551 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.002631762 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204617692 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167847572 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172457524 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027209513 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.816704726 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.143641501 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.10314287 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.100147946 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.4275124 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.889529369 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.051078834 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.102057525 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177001863 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.844373169 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.65019144 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.104289126 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103218484 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.705940242 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.106050371 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.010304079 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.138757798 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.838171812 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126468458 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.302064713 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.796681868 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.383531616 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.172787636 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175607507 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.100757584 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.105372658 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.802399118 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.110965117 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.801962849 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.384982432 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.370003012 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.552839203 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.162199698 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.312302695 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.119846924 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.105537134 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.578087583 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.130097465 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105749302 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.307939435 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.622763042 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.392665641 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.742760851 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.18950254 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.105852244 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.372240574 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.102856289 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.614745726 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.807732323 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.099790463 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.104648567 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.354226685 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.79015823 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.106550934 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.015298755 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112887182 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.317570873 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.30797316 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.38032251 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.592756153 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.549364376 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.032425999 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111140323 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.143668316 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.349646945 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.105533291 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.140924665 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.550551131 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.171116751 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.533597916 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.393679575 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.42683367 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.735779145 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.368727772 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.167530791 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.117670394 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.769505258 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.226068401 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.043046064 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.224707095 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.033650851 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.778302187 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.396986811 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.127097242 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.373493164 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.084271813 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.443111003 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.400116309 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.314566159 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150930437 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.135584395 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.108556663 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15239978 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.106278305 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.369981633 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.228340919 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.112946341 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.698827143 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151426931 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154308691 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.100757095 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.608433327 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128365624 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.110623074 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.800981471 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.133367267 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227526246 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180209808 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.859631203 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.653170723 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.140508986 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.065105162 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.759830512 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.3736338 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.16170656 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.559231406 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148499851 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.513371622 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.109299425 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.320769858 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.114196231 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.745430283 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.15819978 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.370780066 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.065657836 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.321947382 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.313391923 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.136656241 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.114532055 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.03476263 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.217210399 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.989637183 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.093660622 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.113490721 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.791530471 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.493625015 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.388181882 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.53199045 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.93002921 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.11187378 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.441932137 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.496895927 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.798434058 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147066015 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113138277 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.378688101 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.243117509 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.366664467 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.4020071 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.118724065 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.136308814 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.323575121 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237093999 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.029864166 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.593218129 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675501708 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.812627049 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.122414222 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.315013901 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.383630742 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.473014191 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148221435 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.189947291 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.516589887 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.375749085 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.175677268 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.038883235 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111879088 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.506483538 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.507919795 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.209266282 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35252849 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.426450107 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.843698774 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.633456342 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.602459217 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.502710767 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.517632782 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.509626618 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334473099 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.481468761 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.441548456 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.703926306 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.527360703 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.325272686 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204047093 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396088747 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.99023306 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.823020716 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.357373991 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.118838148 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.042897987 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.321286289 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.122800542 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.704993837 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.637053445 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.364549616 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.322521356 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.577710097 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.653864357 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.378202992 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.141883916 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.078952831 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.138292303 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.137417828 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.114420504 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.595667325 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.408085832 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.127514106 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.054233058 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.786239513 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.040977662 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.328489269 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.374060809 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.153868759 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.671910998 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.321166747 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.211073705 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.400085474 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.422621947 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.153388346 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042057652 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.862763231 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.062406561 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.174448981 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.542304161 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134510795 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.120397481 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319668811 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.047198668 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.135967206 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.123163329 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318773808 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.700253597 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.38858019 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23969287 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364940634 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420688297 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.948165092 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.136941194 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.39123177 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.044681618 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.792092861 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.8183605 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.160305697 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.190908721 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118782873 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.121244968 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.389829785 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.386564107 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.215332206 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.751425194 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.152954074 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14247472 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.395187625 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.206070115 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.120358808 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.123426892 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.648391149 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.355486504 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.119240789 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.087702427 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.332771791 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.195683259 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.3153646 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193270263 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.634061976 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.124705169 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.951569046 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215681997 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.0691253 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.119935531 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.875905651 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.179666907 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.120338743 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.388975987 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.789234714 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.323643737 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.515734408 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.000971067 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.382391985 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.165272225 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.124624965 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.229161937 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.405851516 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.42044181 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.120286022 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.388139859 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164560612 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.126108758 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.78279757 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.09086865 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.120515715 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.796503475 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.028777267 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.85155042 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.516200186 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.126318004 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.16407715 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.125080628 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.048513471 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.123098723 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.289754466 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.119027128 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.132545987 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.489322782 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.37851684 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206352765 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124799553 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.124268115 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.127857252 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.336248748 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.637360302 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139685453 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.825141468 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.325982105 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.126215536 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.605795314 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.572227549 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.454182629 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.165829343 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.38277918 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.371304547 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.662033463 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.384864015 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.108912058 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.351436269 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.125893936 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.396679128 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.396796326 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.125400986 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.337344385 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.651633022 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413159507 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.483280362 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.435594254 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.184489565 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.397048512 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.038642459 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.126566335 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.127208226 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.390008133 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174389939 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.124842539 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133778475 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.678493792 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.866608066 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.593054504 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279502605 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.393517517 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.96645641 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.879496593 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.128076285 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.052956594 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.124065818 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152473539 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.128950246 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054272005 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.804156639 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.848894659 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.337713081 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.436520722 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.054232354 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.329267823 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.708709461 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.052155541 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.09532286 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.126971415 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.379388206 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.055558461 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.129848287 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.081113949 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.35793397 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.883909805 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.397972834 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.127103204 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070831415 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132424931 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.128853103 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.125402809 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.212612837 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.127940878 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.244336362 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.390809074 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.438274179 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.226928246 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.768337014 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.804998111 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.064961994 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172241202 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.685250139 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.696055444 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.367480363 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.254090025 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.842076717 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.073018399 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.127940969 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144795485 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.384000142 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.134257974 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130958202 seconds)
  done (took 2224.709463261 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.170939808 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.188904795 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.17150891 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.202015499 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.202022965 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.170448545 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.169881019 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.198300252 seconds)
  done (took 59.522803362 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.127142041 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.074003325 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.136912229 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.128284647 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.12851047 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.133957479 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.324437118 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.158822805 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.130048375 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.133066386 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.128831889 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.135772352 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.129184166 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.131135751 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.134182748 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.443909982 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.153283334 seconds)
  done (took 80.81279516 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.18810635 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.965914096 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.133563189 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.82306 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.185465877 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.47308018 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.132551533 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.131703764 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.246070642 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.432100304 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.176870388 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.134293488 seconds)
  done (took 93.073739297 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.130860156 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.129860964 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.130952689 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.130379495 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.13035936 seconds)
  done (took 12.702562181 seconds)
done (took 2771.978208151 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.377263661 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.229717117 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.208600057 seconds)
  done (took 6.488578313 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.273091932 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.321907652 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.434463463 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.442646677 seconds)
  done (took 11.52941333 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.419380613 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.499600605 seconds)
  done (took 6.969378902 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.506364239 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.145466056 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.52230656 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.132244954 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.135686838 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.136504211 seconds)
  done (took 23.460731197 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.133271235 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.131608136 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.133446391 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.132338061 seconds)
  done (took 10.584469271 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.133097974 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.906060119 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.132367393 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.143236742 seconds)
  done (took 22.367291928 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.342003543 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 6.133555266 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.901731417 seconds)
  done (took 13.430368513 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.744664655 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.574801588 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.748398756 seconds)
  done (took 10.121119225 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.036243956 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.033349459 seconds)
  done (took 8.121072906 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.276382741 seconds)
  done (took 4.330452927 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.971324613 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.446818781 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.608186735 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.656134356 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.727670724 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.349808277 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.462920167 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.413410037 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.534410668 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.574046338 seconds)
  done (took 27.797757989 seconds)
done (took 161.794261637 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.585258777 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.158561558 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.346774334 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.514256566 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.374792641 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.346497255 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.4250197 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.500236301 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.186142805 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.169346385 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.512859332 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.375272228 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.374858699 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.157364055 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.377117603 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.159616131 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.371311908 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.605102493 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.190926264 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.406175537 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.431764004 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.155209576 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.358330129 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.175878547 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.370569422 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.29459184 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.763447757 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.162718304 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.341977768 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.776101035 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.295548179 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.554108246 seconds)
  done (took 177.873307469 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.125379804 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.135333896 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.137755797 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.137657698 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.457881199 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.136417156 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.137413477 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.136159666 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.349926684 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.33538135 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.135199286 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.43835178 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.139088224 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.134770407 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.137407447 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.135276405 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.45461674 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.136764322 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.135683446 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.137525259 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.136744265 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.298164919 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.137905046 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.336484804 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.438144131 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.138315069 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.13598449 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.13778156 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.13737045 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.13864201 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.140855321 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.136744749 seconds)
  done (took 216.444680289 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.138048742 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.138365345 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.134992248 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.139529467 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.140409381 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.139730082 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.142481703 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.140034082 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.949258451 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.935514423 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.140677383 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.139353161 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.139130597 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.138419605 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.138950884 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.139848086 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.138002512 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.139749269 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.143177775 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.13902593 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.140624682 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.787663915 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.140395667 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.804494252 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.14027059 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.143363275 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.139092435 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.141541551 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.140277956 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.143036612 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.139959102 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.137993668 seconds)
  done (took 229.453096171 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.37961553 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.141248422 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.142045424 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.152790575 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.14145953 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.14337242 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.144637032 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.402591297 seconds)
  done (took 21.707700191 seconds)
done (took 647.553366833 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.49155276 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.855147307 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.278194046 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.167297916 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.377913857 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.207272968 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.159532899 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.222306016 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.809029544 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.227342126 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.578542693 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.171434276 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.899007826 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.193883511 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.277634753 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.219579009 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.533929031 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.811658693 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.297873422 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.809034108 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.36458519 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.123013114 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.239151419 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.850363764 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.588132209 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.144808328 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.190032516 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.535793991 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.168377905 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.39982801 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.805383521 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.418765738 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.17741607 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.164455984 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.21784008 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.194849489 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.348630542 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.175446659 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.276661598 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.915709903 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.804136612 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.690586187 seconds)
  done (took 111.441809605 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.150877316 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.149969467 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.149363186 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.147869717 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.156833288 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.14823862 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.150993358 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.15093111 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.149945907 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.149500981 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.151488471 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.160415665 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.14971931 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.16088949 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.148098606 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.150460979 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.151799822 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.158866655 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.151085222 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.150471359 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.149739872 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.147631114 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.146979597 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.150348244 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.149697712 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.152366112 seconds)
  done (took 58.005858975 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.146003119 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.296973626 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.42525658 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.182678583 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.14903384 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.148047862 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.174835032 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.155520975 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.14893945 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.148847396 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.262097444 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.153680289 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.158921801 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.423633025 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.179026888 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.148563875 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.146758876 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.144992126 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.306192111 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.162798394 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.179240856 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.154881954 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.178027323 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.166384209 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.148620891 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.148655653 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.152718903 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.562919485 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.160151735 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.26297345 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.190360919 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.185592897 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.494930179 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.437578738 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.221220576 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.156622958 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.150535156 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.308617909 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.146203437 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.147334381 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.179475036 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.160993093 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.429990082 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.667948922 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.164481143 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.149765636 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.561571493 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.322794738 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.199930139 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.165600355 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.440183091 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.183427833 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.152839741 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.151676827 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.188444576 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.168508918 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.150302459 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.428955575 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.168026026 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.179034577 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.158970031 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.151752721 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.31526696 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.159813202 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.302852103 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.159695524 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.157619077 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.154921995 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.43110618 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.176563501 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.651270547 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.165225454 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.150662802 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.269776902 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.310914577 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.590544861 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.16660247 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.318366246 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.511758275 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.190236602 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.164411397 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.552574512 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.193717683 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.161428937 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.151839174 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.151594421 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.153388578 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.192533349 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.178661717 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.581019304 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.662247303 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.445598325 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.194914163 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.163596926 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.153440362 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.425540381 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.165633957 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.155027386 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.425455511 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.691346787 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.168712508 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.159617624 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.639360078 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.169226915 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.182237731 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.164743821 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.44264073 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.185454013 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.196076589 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.155249341 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.159136407 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.156384277 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.18499883 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.164988193 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.153089766 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.630133476 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.326531819 seconds)
  done (took 265.596513734 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.156719553 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.150920043 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.154827858 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.152136752 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.153687053 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.154945653 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.150264833 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.152225972 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.150860542 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.150988788 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.151363218 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.153455011 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.15396006 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.156226442 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.186949242 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.154971749 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.63919273 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.152698322 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.153894367 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.154392645 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.725896936 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.163496385 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.15350609 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.15760357 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.155462761 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.150187597 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.161407261 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.184125682 seconds)
  done (took 175.514781583 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.156949979 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.209349576 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.169820098 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.202408074 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.170529047 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.156644805 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.179555343 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.17215824 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.162620721 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.153001363 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.158326832 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.18625399 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.16390279 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.253052278 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.186582172 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.190823633 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.256567216 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.164636512 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.154153951 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.157361076 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.205935274 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.172343476 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.187131118 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.217858394 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.173531192 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.211951292 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.17331072 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.158030084 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.154565079 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.270390628 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.178777048 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.188061251 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.191209893 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.178250315 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.275878961 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.271705575 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.258258211 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.189686702 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.160145445 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.15927094 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.158818387 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.159856307 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.212777289 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.173305032 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.159602133 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.27457094 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.181393625 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.160900884 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.177986831 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.1588777 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.173424585 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.178030038 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.198688383 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.282812983 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.208022045 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.184262668 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.182783754 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.177525778 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.15937295 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.256018642 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.167559663 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.272774443 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.180931144 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.160839668 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.161847234 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.160805968 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.209529561 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.197346339 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.260138645 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.166370901 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.255340145 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.216880809 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.173156945 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.160716877 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.160605703 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.216135786 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.269039017 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.217587213 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.222361344 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.194316892 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.169049123 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.158764496 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.162819358 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.188017602 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.170068377 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.271999174 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.27494172 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.168164289 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.162734626 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.160940358 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.161328732 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.185782256 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.224101452 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.200767354 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.267841821 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.201056069 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.198577116 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.169205291 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.175367224 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.168414444 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.195655812 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.167995732 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.173031866 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.495841006 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.197858628 seconds)
  done (took 232.576405592 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.544809507 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.20502755 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.231044636 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.419606139 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.549141178 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.038358298 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.198428669 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.211355066 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.221682516 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.336835894 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.270656915 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.254562359 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.19916699 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.184621721 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.205515106 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.223647321 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.249322938 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.50721863 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.302216564 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.719120749 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.198366416 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.467637275 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.496229656 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.544938998 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.245762149 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.583010633 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.814479988 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.302707141 seconds)
  done (took 70.808264838 seconds)
done (took 916.007798405 seconds)
SAVING RESULT...
DONE!
